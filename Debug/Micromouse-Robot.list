
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c910  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000294c  0800cab0  0800cab0  0000dab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3fc  0800f3fc  000111dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f3fc  0800f3fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f404  0800f404  000111dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f404  0800f404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f408  0800f408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800f40c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000144c  200001dc  0800f5e8  000111dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001628  0800f5e8  00011628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166a2  00000000  00000000  0001120c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375a  00000000  00000000  000278ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff4  00000000  00000000  0002c408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa79  00000000  00000000  0002d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f0e  00000000  00000000  00047e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ff9f  00000000  00000000  00060d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100d22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  00100d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00107154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca98 	.word	0x0800ca98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800ca98 	.word	0x0800ca98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fc57 	bl	80057b4 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f006 fe8f 	bl	8007c6c <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fc2f 	bl	80057b4 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f006 ff37 	bl	8007dcc <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002b0 	.word	0x200002b0

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f006 ff2a 	bl	8007dcc <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002b0 	.word	0x200002b0

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <calculate_optimal_path_from_explored_areas>:

/**
 * @brief Calculate optimal path using ONLY explored areas (MMS algorithm)
 */
void calculate_optimal_path_from_explored_areas(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 800106e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔍 CALCULATING OPTIMAL PATH FROM EXPLORED AREAS...\r\n");
 8001070:	4863      	ldr	r0, [pc, #396]	@ (8001200 <calculate_optimal_path_from_explored_areas+0x198>)
 8001072:	f000 fc4d 	bl	8001910 <send_bluetooth_message>

    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800107c:	e01d      	b.n	80010ba <calculate_optimal_path_from_explored_areas+0x52>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8001084:	e010      	b.n	80010a8 <calculate_optimal_path_from_explored_areas+0x40>
            maze[x][y].distance = MAX_DISTANCE;
 8001086:	495f      	ldr	r1, [pc, #380]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001088:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800108c:	011a      	lsls	r2, r3, #4
 800108e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8001092:	4413      	add	r3, r2
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	440b      	add	r3, r1
 8001098:	f242 720f 	movw	r2, #9999	@ 0x270f
 800109c:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 800109e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010a2:	3301      	adds	r3, #1
 80010a4:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80010a8:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	ddea      	ble.n	8001086 <calculate_optimal_path_from_explored_areas+0x1e>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80010b0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80010ba:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	dddd      	ble.n	800107e <calculate_optimal_path_from_explored_areas+0x16>
        }
    }

    // Set goal distances to 0 ONLY if they were visited
    bool goal_found = false;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827

    if (maze[goal_x1][goal_y1].visited) {
 80010c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	494c      	ldr	r1, [pc, #304]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	440b      	add	r3, r1
 80010da:	3304      	adds	r3, #4
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <calculate_optimal_path_from_explored_areas+0xa6>
        maze[goal_x1][goal_y1].distance = 0;
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b49      	ldr	r3, [pc, #292]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4946      	ldr	r1, [pc, #280]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y1);
 80010fe:	4b42      	ldr	r3, [pc, #264]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a42      	ldr	r2, [pc, #264]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4841      	ldr	r0, [pc, #260]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 800110a:	f000 fc17 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y1].visited) {
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	493b      	ldr	r1, [pc, #236]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	4413      	add	r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <calculate_optimal_path_from_explored_areas+0xec>
        maze[goal_x2][goal_y1].distance = 0;
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4934      	ldr	r1, [pc, #208]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	4413      	add	r3, r2
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
        goal_found = true;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y1);
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a30      	ldr	r2, [pc, #192]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4830      	ldr	r0, [pc, #192]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001150:	f000 fbf4 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x1][goal_y2].visited) {
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4929      	ldr	r1, [pc, #164]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	4413      	add	r3, r2
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <calculate_optimal_path_from_explored_areas+0x132>
        maze[goal_x1][goal_y2].distance = 0;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4923      	ldr	r1, [pc, #140]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
        goal_found = true;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y2);
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	481e      	ldr	r0, [pc, #120]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001196:	f000 fbd1 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y2].visited) {
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4918      	ldr	r1, [pc, #96]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	3304      	adds	r3, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <calculate_optimal_path_from_explored_areas+0x178>
        maze[goal_x2][goal_y2].distance = 0;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4911      	ldr	r1, [pc, #68]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y2);
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 80011dc:	f000 fbae 	bl	800193c <send_bluetooth_printf>
    }

    if (!goal_found) {
 80011e0:	f897 3827 	ldrb.w	r3, [r7, #2087]	@ 0x827
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d01a      	beq.n	8001224 <calculate_optimal_path_from_explored_areas+0x1bc>
        send_bluetooth_message("❌ ERROR: No goal cells were visited during exploration!\r\n");
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <calculate_optimal_path_from_explored_areas+0x1b4>)
 80011f0:	f000 fb8e 	bl	8001910 <send_bluetooth_message>
        theoretical_minimum = MAX_DISTANCE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <calculate_optimal_path_from_explored_areas+0x1b8>)
 80011f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e1ba      	b.n	8001574 <calculate_optimal_path_from_explored_areas+0x50c>
 80011fe:	bf00      	nop
 8001200:	0800cab0 	.word	0x0800cab0
 8001204:	20000418 	.word	0x20000418
 8001208:	0800f060 	.word	0x0800f060
 800120c:	0800f064 	.word	0x0800f064
 8001210:	0800caec 	.word	0x0800caec
 8001214:	0800f068 	.word	0x0800f068
 8001218:	0800f06c 	.word	0x0800f06c
 800121c:	0800cb08 	.word	0x0800cb08
 8001220:	20001468 	.word	0x20001468
        return;
    }

    // Queue implementation for flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Add visited goal cells to queue
    if (maze[goal_x1][goal_y1].visited && maze[goal_x1][goal_y1].distance == 0) {
 8001230:	4bb8      	ldr	r3, [pc, #736]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4bb8      	ldr	r3, [pc, #736]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	49b8      	ldr	r1, [pc, #736]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	4413      	add	r3, r2
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d022      	beq.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
 800124a:	4bb2      	ldr	r3, [pc, #712]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4bb2      	ldr	r3, [pc, #712]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	49b2      	ldr	r1, [pc, #712]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	4413      	add	r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	440b      	add	r3, r1
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8001262:	4bac      	ldr	r3, [pc, #688]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800126a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800126e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001276:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001280:	4aa5      	ldr	r2, [pc, #660]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001282:	6811      	ldr	r1, [r2, #0]
 8001284:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001288:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y1].visited && maze[goal_x2][goal_y1].distance == 0) {
 8001290:	4ba3      	ldr	r3, [pc, #652]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4ba0      	ldr	r3, [pc, #640]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	49a0      	ldr	r1, [pc, #640]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	4413      	add	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	440b      	add	r3, r1
 80012a2:	3304      	adds	r3, #4
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d022      	beq.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
 80012aa:	4b9d      	ldr	r3, [pc, #628]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	499a      	ldr	r1, [pc, #616]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80012ca:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80012ce:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012d6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80012e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80012e8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80012ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x1][goal_y2].visited && maze[goal_x1][goal_y2].distance == 0) {
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4988      	ldr	r1, [pc, #544]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d022      	beq.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
 800130a:	4b82      	ldr	r3, [pc, #520]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b85      	ldr	r3, [pc, #532]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4982      	ldr	r1, [pc, #520]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	4413      	add	r3, r2
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8001322:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800132a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800132e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001336:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001340:	4a78      	ldr	r2, [pc, #480]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001348:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800134c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y2].visited && maze[goal_x2][goal_y2].distance == 0) {
 8001350:	4b73      	ldr	r3, [pc, #460]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4970      	ldr	r1, [pc, #448]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	4413      	add	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	3304      	adds	r3, #4
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d022      	beq.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
 800136a:	4b6d      	ldr	r3, [pc, #436]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	496a      	ldr	r1, [pc, #424]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	440b      	add	r3, r1
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 8001382:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800138a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800138e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001396:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80013a0:	4a60      	ldr	r2, [pc, #384]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 80013a2:	6811      	ldr	r1, [r2, #0]
 80013a4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013a8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    // Run flood fill ONLY through explored areas
    while (queue_head < queue_tail) {
 80013b6:	e0c7      	b.n	8001548 <calculate_optimal_path_from_explored_areas+0x4e0>
        int x = queue_x[queue_head];
 80013b8:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80013bc:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013c0:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
        int y = queue_y[queue_head++];
 80013cc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80013d6:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013da:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c

        for (int dir = 0; dir < 4; dir++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 80013ec:	e0a7      	b.n	800153e <calculate_optimal_path_from_explored_areas+0x4d6>
            int nx = x + dx[dir];
 80013ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001528 <calculate_optimal_path_from_explored_areas+0x4c0>)
 80013f0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80013fc:	4413      	add	r3, r2
 80013fe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
            int ny = y + dy[dir];
 8001402:	4a4a      	ldr	r2, [pc, #296]	@ (800152c <calculate_optimal_path_from_explored_areas+0x4c4>)
 8001404:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8001410:	4413      	add	r3, r2
 8001412:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

            // CRITICAL: Only process VISITED cells with no walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001416:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800141a:	2b00      	cmp	r3, #0
 800141c:	f2c0 808a 	blt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 8001420:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001424:	2b0f      	cmp	r3, #15
 8001426:	f300 8085 	bgt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 800142a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800142e:	2b00      	cmp	r3, #0
 8001430:	f2c0 8080 	blt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 8001434:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001438:	2b0f      	cmp	r3, #15
 800143a:	dc7b      	bgt.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                maze[nx][ny].visited &&  // Must be visited/explored
 800143c:	4937      	ldr	r1, [pc, #220]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800143e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001442:	011a      	lsls	r2, r3, #4
 8001444:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001448:	4413      	add	r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	3304      	adds	r3, #4
 8001450:	781b      	ldrb	r3, [r3, #0]
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d06e      	beq.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                !maze[x][y].walls[dir]) { // No wall between cells
 8001456:	4931      	ldr	r1, [pc, #196]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001458:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800145c:	011a      	lsls	r2, r3, #4
 800145e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001462:	4413      	add	r3, r2
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	18ca      	adds	r2, r1, r3
 8001468:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800146c:	4413      	add	r3, r2
 800146e:	3305      	adds	r3, #5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f083 0301 	eor.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
                maze[nx][ny].visited &&  // Must be visited/explored
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>

                int new_dist = maze[x][y].distance + 1;
 800147c:	4927      	ldr	r1, [pc, #156]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800147e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001482:	011a      	lsls	r2, r3, #4
 8001484:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
                if (new_dist < maze[nx][ny].distance) {
 8001496:	4921      	ldr	r1, [pc, #132]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001498:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800149c:	011a      	lsls	r2, r3, #4
 800149e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014a2:	4413      	add	r3, r2
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	440b      	add	r3, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014ae:	429a      	cmp	r2, r3
 80014b0:	da40      	bge.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                    maze[nx][ny].distance = new_dist;
 80014b2:	491a      	ldr	r1, [pc, #104]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80014b4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014b8:	011a      	lsls	r2, r3, #4
 80014ba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014be:	4413      	add	r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014c8:	601a      	str	r2, [r3, #0]
                    if (queue_tail < 255) {
 80014ca:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80014d0:	dc1c      	bgt.n	800150c <calculate_optimal_path_from_explored_areas+0x4a4>
                        queue_x[queue_tail] = nx;
 80014d2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80014d6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80014da:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80014de:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        queue_y[queue_tail++] = ny;
 80014e6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80014f0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80014f4:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80014f8:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 80014fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        send_bluetooth_message("Queue overflow!\r\n");
                        break;
                    }
                    updates++;
 8001500:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001504:	3301      	adds	r3, #1
 8001506:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 800150a:	e013      	b.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                        send_bluetooth_message("Queue overflow!\r\n");
 800150c:	4808      	ldr	r0, [pc, #32]	@ (8001530 <calculate_optimal_path_from_explored_areas+0x4c8>)
 800150e:	f000 f9ff 	bl	8001910 <send_bluetooth_message>
                        break;
 8001512:	e019      	b.n	8001548 <calculate_optimal_path_from_explored_areas+0x4e0>
 8001514:	0800f060 	.word	0x0800f060
 8001518:	0800f064 	.word	0x0800f064
 800151c:	20000418 	.word	0x20000418
 8001520:	0800f068 	.word	0x0800f068
 8001524:	0800f06c 	.word	0x0800f06c
 8001528:	0800f040 	.word	0x0800f040
 800152c:	0800f050 	.word	0x0800f050
 8001530:	0800cb44 	.word	0x0800cb44
        for (int dir = 0; dir < 4; dir++) {
 8001534:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001538:	3301      	adds	r3, #1
 800153a:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800153e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001542:	2b03      	cmp	r3, #3
 8001544:	f77f af53 	ble.w	80013ee <calculate_optimal_path_from_explored_areas+0x386>
    while (queue_head < queue_tail) {
 8001548:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 800154c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001550:	429a      	cmp	r2, r3
 8001552:	f6ff af31 	blt.w	80013b8 <calculate_optimal_path_from_explored_areas+0x350>
            }
        }
    }

    // Get theoretical minimum from explored path
    theoretical_minimum = maze[0][0].distance;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <calculate_optimal_path_from_explored_areas+0x514>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <calculate_optimal_path_from_explored_areas+0x518>)
 800155c:	6013      	str	r3, [r2, #0]

    send_bluetooth_printf("[PATH ANALYSIS] Optimal path through explored areas: %d steps\r\n", theoretical_minimum);
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <calculate_optimal_path_from_explored_areas+0x518>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <calculate_optimal_path_from_explored_areas+0x51c>)
 8001566:	f000 f9e9 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("[PATH ANALYSIS] Flood fill updates: %d\r\n", updates);
 800156a:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <calculate_optimal_path_from_explored_areas+0x520>)
 8001570:	f000 f9e4 	bl	800193c <send_bluetooth_printf>
}
 8001574:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000418 	.word	0x20000418
 8001580:	20001468 	.word	0x20001468
 8001584:	0800cb58 	.word	0x0800cb58
 8001588:	0800cb98 	.word	0x0800cb98

0800158c <analyze_championship_maze_performance>:

/**
 * @brief Comprehensive championship maze performance analysis (MMS style)
 */
void analyze_championship_maze_performance(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PERFORMANCE ANALYSIS ===\r\n");
 8001592:	4872      	ldr	r0, [pc, #456]	@ (800175c <analyze_championship_maze_performance+0x1d0>)
 8001594:	f000 f9bc 	bl	8001910 <send_bluetooth_message>

    // Calculate exploration efficiency
    int cells_visited = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    int total_cells = MAZE_SIZE * MAZE_SIZE;
 800159c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a0:	60bb      	str	r3, [r7, #8]

    for (int x = 0; x < MAZE_SIZE; x++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e019      	b.n	80015dc <analyze_championship_maze_performance+0x50>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e010      	b.n	80015d0 <analyze_championship_maze_performance+0x44>
            if (maze[x][y].visited) {
 80015ae:	496c      	ldr	r1, [pc, #432]	@ (8001760 <analyze_championship_maze_performance+0x1d4>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	011a      	lsls	r2, r3, #4
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <analyze_championship_maze_performance+0x3e>
                cells_visited++;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	ddeb      	ble.n	80015ae <analyze_championship_maze_performance+0x22>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3301      	adds	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	dde2      	ble.n	80015a8 <analyze_championship_maze_performance+0x1c>
            }
        }
    }

    float exploration_efficiency = (float)cells_visited / total_cells * 100.0f;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fa:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001764 <analyze_championship_maze_performance+0x1d8>
 80015fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001602:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_message("📊 EXPLORATION METRICS:\r\n");
 8001606:	4858      	ldr	r0, [pc, #352]	@ (8001768 <analyze_championship_maze_performance+0x1dc>)
 8001608:	f000 f982 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf(" Exploration Efficiency: %.1f%%\r\n", exploration_efficiency);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7fe ffa3 	bl	8000558 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4855      	ldr	r0, [pc, #340]	@ (800176c <analyze_championship_maze_performance+0x1e0>)
 8001618:	f000 f990 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf(" Cells Visited: %d/%d\r\n", cells_visited, total_cells);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	6979      	ldr	r1, [r7, #20]
 8001620:	4853      	ldr	r0, [pc, #332]	@ (8001770 <analyze_championship_maze_performance+0x1e4>)
 8001622:	f000 f98b 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf(" Total Exploration Steps: %d moves\r\n", exploration_steps);
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <analyze_championship_maze_performance+0x1e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4852      	ldr	r0, [pc, #328]	@ (8001778 <analyze_championship_maze_performance+0x1ec>)
 800162e:	f000 f985 	bl	800193c <send_bluetooth_printf>

    send_bluetooth_message("\r\n🎯 OPTIMAL PATH ANALYSIS:\r\n");
 8001632:	4852      	ldr	r0, [pc, #328]	@ (800177c <analyze_championship_maze_performance+0x1f0>)
 8001634:	f000 f96c 	bl	8001910 <send_bluetooth_message>
    if (theoretical_minimum < MAX_DISTANCE) {
 8001638:	4b51      	ldr	r3, [pc, #324]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001640:	4293      	cmp	r3, r2
 8001642:	dc0c      	bgt.n	800165e <analyze_championship_maze_performance+0xd2>
        send_bluetooth_printf(" Best Path Through Explored Areas: %d steps\r\n", theoretical_minimum);
 8001644:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	484e      	ldr	r0, [pc, #312]	@ (8001784 <analyze_championship_maze_performance+0x1f8>)
 800164c:	f000 f976 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_message(" Path Knowledge: ✅ COMPLETE for explored regions\r\n");
 8001650:	484d      	ldr	r0, [pc, #308]	@ (8001788 <analyze_championship_maze_performance+0x1fc>)
 8001652:	f000 f95d 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" Algorithm Efficiency: ✅ CHAMPIONSHIP LEVEL\r\n");
 8001656:	484d      	ldr	r0, [pc, #308]	@ (800178c <analyze_championship_maze_performance+0x200>)
 8001658:	f000 f95a 	bl	8001910 <send_bluetooth_message>
 800165c:	e005      	b.n	800166a <analyze_championship_maze_performance+0xde>
    } else {
        send_bluetooth_message(" ❌ No path found through explored areas!\r\n");
 800165e:	484c      	ldr	r0, [pc, #304]	@ (8001790 <analyze_championship_maze_performance+0x204>)
 8001660:	f000 f956 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" Check if center was reached and start is accessible\r\n");
 8001664:	484b      	ldr	r0, [pc, #300]	@ (8001794 <analyze_championship_maze_performance+0x208>)
 8001666:	f000 f953 	bl	8001910 <send_bluetooth_message>
    }

    // Performance rating based on exploration efficiency
    send_bluetooth_message("\r\n🏆 PERFORMANCE RATING:\r\n");
 800166a:	484b      	ldr	r0, [pc, #300]	@ (8001798 <analyze_championship_maze_performance+0x20c>)
 800166c:	f000 f950 	bl	8001910 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 8001670:	edd7 7a01 	vldr	s15, [r7, #4]
 8001674:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800179c <analyze_championship_maze_performance+0x210>
 8001678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d80c      	bhi.n	800169c <analyze_championship_maze_performance+0x110>
 8001682:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f242 720e 	movw	r2, #9998	@ 0x270e
 800168a:	4293      	cmp	r3, r2
 800168c:	dc06      	bgt.n	800169c <analyze_championship_maze_performance+0x110>
        send_bluetooth_message(" ⭐⭐⭐⭐⭐ CHAMPIONSHIP LEVEL\r\n");
 800168e:	4844      	ldr	r0, [pc, #272]	@ (80017a0 <analyze_championship_maze_performance+0x214>)
 8001690:	f000 f93e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥇 Efficient exploration with optimal path knowledge!\r\n");
 8001694:	4843      	ldr	r0, [pc, #268]	@ (80017a4 <analyze_championship_maze_performance+0x218>)
 8001696:	f000 f93b 	bl	8001910 <send_bluetooth_message>
 800169a:	e025      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 65.0f) {
 800169c:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80017a8 <analyze_championship_maze_performance+0x21c>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d806      	bhi.n	80016bc <analyze_championship_maze_performance+0x130>
        send_bluetooth_message(" ⭐⭐⭐⭐ COMPETITION READY\r\n");
 80016ae:	483f      	ldr	r0, [pc, #252]	@ (80017ac <analyze_championship_maze_performance+0x220>)
 80016b0:	f000 f92e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥈 Good exploration efficiency with complete maze knowledge\r\n");
 80016b4:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <analyze_championship_maze_performance+0x224>)
 80016b6:	f000 f92b 	bl	8001910 <send_bluetooth_message>
 80016ba:	e015      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 80.0f) {
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80017b4 <analyze_championship_maze_performance+0x228>
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d806      	bhi.n	80016dc <analyze_championship_maze_performance+0x150>
        send_bluetooth_message(" ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80016ce:	483a      	ldr	r0, [pc, #232]	@ (80017b8 <analyze_championship_maze_performance+0x22c>)
 80016d0:	f000 f91e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥉 Solid exploration, room for optimization\r\n");
 80016d4:	4839      	ldr	r0, [pc, #228]	@ (80017bc <analyze_championship_maze_performance+0x230>)
 80016d6:	f000 f91b 	bl	8001910 <send_bluetooth_message>
 80016da:	e005      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else {
        send_bluetooth_message(" ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80016dc:	4838      	ldr	r0, [pc, #224]	@ (80017c0 <analyze_championship_maze_performance+0x234>)
 80016de:	f000 f917 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Over-exploration detected, improve search termination\r\n");
 80016e2:	4838      	ldr	r0, [pc, #224]	@ (80017c4 <analyze_championship_maze_performance+0x238>)
 80016e4:	f000 f914 	bl	8001910 <send_bluetooth_message>
    }

    // Championship recommendations
    send_bluetooth_message("\r\n💡 CHAMPIONSHIP RECOMMENDATIONS:\r\n");
 80016e8:	4837      	ldr	r0, [pc, #220]	@ (80017c8 <analyze_championship_maze_performance+0x23c>)
 80016ea:	f000 f911 	bl	8001910 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800179c <analyze_championship_maze_performance+0x210>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d80f      	bhi.n	8001720 <analyze_championship_maze_performance+0x194>
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001708:	4293      	cmp	r3, r2
 800170a:	dc09      	bgt.n	8001720 <analyze_championship_maze_performance+0x194>
        send_bluetooth_message(" ✅ Excellent exploration efficiency! Championship ready!\r\n");
 800170c:	482f      	ldr	r0, [pc, #188]	@ (80017cc <analyze_championship_maze_performance+0x240>)
 800170e:	f000 f8ff 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Optimal path knowledge complete!\r\n");
 8001712:	482f      	ldr	r0, [pc, #188]	@ (80017d0 <analyze_championship_maze_performance+0x244>)
 8001714:	f000 f8fc 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🏆 Ready for IEEE Micromouse competition!\r\n");
 8001718:	482e      	ldr	r0, [pc, #184]	@ (80017d4 <analyze_championship_maze_performance+0x248>)
 800171a:	f000 f8f9 	bl	8001910 <send_bluetooth_message>
 800171e:	e015      	b.n	800174c <analyze_championship_maze_performance+0x1c0>
    } else if (exploration_efficiency > 75.0f) {
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80017d8 <analyze_championship_maze_performance+0x24c>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd06      	ble.n	8001740 <analyze_championship_maze_performance+0x1b4>
        send_bluetooth_message(" 🔄 Consider smarter search termination\r\n");
 8001732:	482a      	ldr	r0, [pc, #168]	@ (80017dc <analyze_championship_maze_performance+0x250>)
 8001734:	f000 f8ec 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Implement early stopping when center is fully explored\r\n");
 8001738:	4829      	ldr	r0, [pc, #164]	@ (80017e0 <analyze_championship_maze_performance+0x254>)
 800173a:	f000 f8e9 	bl	8001910 <send_bluetooth_message>
 800173e:	e005      	b.n	800174c <analyze_championship_maze_performance+0x1c0>
    } else {
        send_bluetooth_message(" ✅ Good balance of exploration and efficiency\r\n");
 8001740:	4828      	ldr	r0, [pc, #160]	@ (80017e4 <analyze_championship_maze_performance+0x258>)
 8001742:	f000 f8e5 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Path knowledge is complete for explored areas\r\n");
 8001746:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <analyze_championship_maze_performance+0x25c>)
 8001748:	f000 f8e2 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("========================================\r\n");
 800174c:	4827      	ldr	r0, [pc, #156]	@ (80017ec <analyze_championship_maze_performance+0x260>)
 800174e:	f000 f8df 	bl	8001910 <send_bluetooth_message>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800cbc4 	.word	0x0800cbc4
 8001760:	20000418 	.word	0x20000418
 8001764:	42c80000 	.word	0x42c80000
 8001768:	0800cbf4 	.word	0x0800cbf4
 800176c:	0800cc10 	.word	0x0800cc10
 8001770:	0800cc34 	.word	0x0800cc34
 8001774:	20001464 	.word	0x20001464
 8001778:	0800cc4c 	.word	0x0800cc4c
 800177c:	0800cc74 	.word	0x0800cc74
 8001780:	20001468 	.word	0x20001468
 8001784:	0800cc94 	.word	0x0800cc94
 8001788:	0800ccc4 	.word	0x0800ccc4
 800178c:	0800ccfc 	.word	0x0800ccfc
 8001790:	0800cd2c 	.word	0x0800cd2c
 8001794:	0800cd5c 	.word	0x0800cd5c
 8001798:	0800cd94 	.word	0x0800cd94
 800179c:	42480000 	.word	0x42480000
 80017a0:	0800cdb4 	.word	0x0800cdb4
 80017a4:	0800cddc 	.word	0x0800cddc
 80017a8:	42820000 	.word	0x42820000
 80017ac:	0800ce18 	.word	0x0800ce18
 80017b0:	0800ce3c 	.word	0x0800ce3c
 80017b4:	42a00000 	.word	0x42a00000
 80017b8:	0800ce80 	.word	0x0800ce80
 80017bc:	0800cea0 	.word	0x0800cea0
 80017c0:	0800ced4 	.word	0x0800ced4
 80017c4:	0800cef4 	.word	0x0800cef4
 80017c8:	0800cf34 	.word	0x0800cf34
 80017cc:	0800cf5c 	.word	0x0800cf5c
 80017d0:	0800cf9c 	.word	0x0800cf9c
 80017d4:	0800cfc4 	.word	0x0800cfc4
 80017d8:	42960000 	.word	0x42960000
 80017dc:	0800cff4 	.word	0x0800cff4
 80017e0:	0800d020 	.word	0x0800d020
 80017e4:	0800d060 	.word	0x0800d060
 80017e8:	0800d094 	.word	0x0800d094
 80017ec:	0800d0cc 	.word	0x0800d0cc

080017f0 <print_championship_distance_map>:

/**
 * @brief Print detailed distance map for EXPLORED areas only (MMS style)
 */
void print_championship_distance_map(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n📍 OPTIMAL DISTANCE MAP (explored areas only):\r\n");
 80017f6:	483a      	ldr	r0, [pc, #232]	@ (80018e0 <print_championship_distance_map+0xf0>)
 80017f8:	f000 f88a 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("   ");
 80017fc:	4839      	ldr	r0, [pc, #228]	@ (80018e4 <print_championship_distance_map+0xf4>)
 80017fe:	f000 f887 	bl	8001910 <send_bluetooth_message>

    // Print column headers
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e006      	b.n	8001816 <print_championship_distance_map+0x26>
        send_bluetooth_printf("%3d", x);
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4837      	ldr	r0, [pc, #220]	@ (80018e8 <print_championship_distance_map+0xf8>)
 800180c:	f000 f896 	bl	800193c <send_bluetooth_printf>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	ddf5      	ble.n	8001808 <print_championship_distance_map+0x18>
    }
    send_bluetooth_message("\r\n");
 800181c:	4833      	ldr	r0, [pc, #204]	@ (80018ec <print_championship_distance_map+0xfc>)
 800181e:	f000 f877 	bl	8001910 <send_bluetooth_message>

    // Print maze from top to bottom (MMS style)
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001822:	230f      	movs	r3, #15
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	e040      	b.n	80018aa <print_championship_distance_map+0xba>
        send_bluetooth_printf("%2d ", y);
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	4831      	ldr	r0, [pc, #196]	@ (80018f0 <print_championship_distance_map+0x100>)
 800182c:	f000 f886 	bl	800193c <send_bluetooth_printf>

        for (int x = 0; x < MAZE_SIZE; x++) {
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	e030      	b.n	8001898 <print_championship_distance_map+0xa8>
            if (!maze[x][y].visited) {
 8001836:	492f      	ldr	r1, [pc, #188]	@ (80018f4 <print_championship_distance_map+0x104>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	011a      	lsls	r2, r3, #4
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	440b      	add	r3, r1
 8001844:	3304      	adds	r3, #4
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <print_championship_distance_map+0x6a>
                send_bluetooth_message(" - "); // Not explored
 8001852:	4829      	ldr	r0, [pc, #164]	@ (80018f8 <print_championship_distance_map+0x108>)
 8001854:	f000 f85c 	bl	8001910 <send_bluetooth_message>
 8001858:	e01b      	b.n	8001892 <print_championship_distance_map+0xa2>
            } else if (maze[x][y].distance == MAX_DISTANCE) {
 800185a:	4926      	ldr	r1, [pc, #152]	@ (80018f4 <print_championship_distance_map+0x104>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	011a      	lsls	r2, r3, #4
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	440b      	add	r3, r1
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800186e:	4293      	cmp	r3, r2
 8001870:	d103      	bne.n	800187a <print_championship_distance_map+0x8a>
                send_bluetooth_message(" ∞ "); // Explored but unreachable
 8001872:	4822      	ldr	r0, [pc, #136]	@ (80018fc <print_championship_distance_map+0x10c>)
 8001874:	f000 f84c 	bl	8001910 <send_bluetooth_message>
 8001878:	e00b      	b.n	8001892 <print_championship_distance_map+0xa2>
            } else {
                send_bluetooth_printf("%3d", maze[x][y].distance);
 800187a:	491e      	ldr	r1, [pc, #120]	@ (80018f4 <print_championship_distance_map+0x104>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	011a      	lsls	r2, r3, #4
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	@ (80018e8 <print_championship_distance_map+0xf8>)
 800188e:	f000 f855 	bl	800193c <send_bluetooth_printf>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	ddcb      	ble.n	8001836 <print_championship_distance_map+0x46>
            }
        }
        send_bluetooth_message("\r\n");
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <print_championship_distance_map+0xfc>)
 80018a0:	f000 f836 	bl	8001910 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dabb      	bge.n	8001828 <print_championship_distance_map+0x38>
    }

    if (theoretical_minimum < MAX_DISTANCE) {
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <print_championship_distance_map+0x110>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f242 720e 	movw	r2, #9998	@ 0x270e
 80018b8:	4293      	cmp	r3, r2
 80018ba:	dc06      	bgt.n	80018ca <print_championship_distance_map+0xda>
        send_bluetooth_printf("\r\nOptimal path through explored areas: %d steps\r\n", theoretical_minimum);
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <print_championship_distance_map+0x110>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4810      	ldr	r0, [pc, #64]	@ (8001904 <print_championship_distance_map+0x114>)
 80018c4:	f000 f83a 	bl	800193c <send_bluetooth_printf>
 80018c8:	e002      	b.n	80018d0 <print_championship_distance_map+0xe0>
    } else {
        send_bluetooth_message("\r\n❌ No path found through explored areas\r\n");
 80018ca:	480f      	ldr	r0, [pc, #60]	@ (8001908 <print_championship_distance_map+0x118>)
 80018cc:	f000 f820 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("Legend: - = not explored, ∞ = explored but unreachable\r\n");
 80018d0:	480e      	ldr	r0, [pc, #56]	@ (800190c <print_championship_distance_map+0x11c>)
 80018d2:	f000 f81d 	bl	8001910 <send_bluetooth_message>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	0800d0f8 	.word	0x0800d0f8
 80018e4:	0800d130 	.word	0x0800d130
 80018e8:	0800d134 	.word	0x0800d134
 80018ec:	0800d138 	.word	0x0800d138
 80018f0:	0800d13c 	.word	0x0800d13c
 80018f4:	20000418 	.word	0x20000418
 80018f8:	0800d144 	.word	0x0800d144
 80018fc:	0800d148 	.word	0x0800d148
 8001900:	20001468 	.word	0x20001468
 8001904:	0800d150 	.word	0x0800d150
 8001908:	0800d184 	.word	0x0800d184
 800190c:	0800d1b4 	.word	0x0800d1b4

08001910 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <send_bluetooth_message+0x28>)
 800192a:	f007 fa89 	bl	8008e40 <HAL_UART_Transmit>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200003d0 	.word	0x200003d0

0800193c <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 800193c:	b40f      	push	{r0, r1, r2, r3}
 800193e:	b580      	push	{r7, lr}
 8001940:	b0c2      	sub	sp, #264	@ 0x108
 8001942:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001944:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800194c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001950:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800195a:	f107 0008 	add.w	r0, r7, #8
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001968:	f008 ffbc 	bl	800a8e4 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ffcd 	bl	8001910 <send_bluetooth_message>
}
 8001976:	bf00      	nop
 8001978:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001982:	b004      	add	sp, #16
 8001984:	4770      	bx	lr
	...

08001988 <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <send_battery_status+0x60>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019ec <send_battery_status+0x64>
 800199e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019f0 <send_battery_status+0x68>
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	490b      	ldr	r1, [pc, #44]	@ (80019e8 <send_battery_status+0x60>)
 80019ba:	8809      	ldrh	r1, [r1, #0]
 80019bc:	9100      	str	r1, [sp, #0]
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <send_battery_status+0x6c>)
 80019c0:	f7ff ffbc 	bl	800193c <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <send_battery_status+0x60>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d803      	bhi.n	80019d8 <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 80019d0:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <send_battery_status+0x70>)
 80019d2:	f7ff ff9d 	bl	8001910 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 80019d6:	e002      	b.n	80019de <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 80019d8:	4808      	ldr	r0, [pc, #32]	@ (80019fc <send_battery_status+0x74>)
 80019da:	f7ff ff99 	bl	8001910 <send_bluetooth_message>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000142c 	.word	0x2000142c
 80019ec:	40533333 	.word	0x40533333
 80019f0:	45800000 	.word	0x45800000
 80019f4:	0800d810 	.word	0x0800d810
 80019f8:	0800d828 	.word	0x0800d828
 80019fc:	0800d844 	.word	0x0800d844

08001a00 <send_championship_stats>:

/**
 * @brief Send championship statistics
 */
void send_championship_stats(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🏆 CHAMPIONSHIP STATISTICS 🏆\r\n");
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <send_championship_stats+0x34>)
 8001a06:	f7ff ff83 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("Algorithm: Flood Fill + Championship Heuristics\r\n");
 8001a0a:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <send_championship_stats+0x38>)
 8001a0c:	f7ff ff96 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("MCU: STM32F411CEU6 @ 84MHz\r\n");
 8001a10:	480a      	ldr	r0, [pc, #40]	@ (8001a3c <send_championship_stats+0x3c>)
 8001a12:	f7ff ff93 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("Sensors: 4x TEFT4300 IR + MPU9250 Gyro\r\n");
 8001a16:	480a      	ldr	r0, [pc, #40]	@ (8001a40 <send_championship_stats+0x40>)
 8001a18:	f7ff ff90 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("Motors: DRV8833 H-Bridge with Encoders\r\n");
 8001a1c:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <send_championship_stats+0x44>)
 8001a1e:	f7ff ff8d 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("International Standard: IEEE Micromouse Compliant\r\n");
 8001a22:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <send_championship_stats+0x48>)
 8001a24:	f7ff ff8a 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_message("====================================\r\n");
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <send_championship_stats+0x4c>)
 8001a2a:	f7ff ff71 	bl	8001910 <send_bluetooth_message>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	0800d84c 	.word	0x0800d84c
 8001a38:	0800d874 	.word	0x0800d874
 8001a3c:	0800d8a8 	.word	0x0800d8a8
 8001a40:	0800d8c8 	.word	0x0800d8c8
 8001a44:	0800d8f4 	.word	0x0800d8f4
 8001a48:	0800d920 	.word	0x0800d920
 8001a4c:	0800d954 	.word	0x0800d954

08001a50 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a6e:	4817      	ldr	r0, [pc, #92]	@ (8001acc <mpu9250_read_register+0x7c>)
 8001a70:	f004 fdde 	bl	8006630 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001a74:	f107 010d 	add.w	r1, r7, #13
 8001a78:	2364      	movs	r3, #100	@ 0x64
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <mpu9250_read_register+0x80>)
 8001a7e:	f005 fb04 	bl	800708a <HAL_SPI_Transmit>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8001a86:	f107 010c 	add.w	r1, r7, #12
 8001a8a:	2364      	movs	r3, #100	@ 0x64
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4810      	ldr	r0, [pc, #64]	@ (8001ad0 <mpu9250_read_register+0x80>)
 8001a90:	f005 fc3f 	bl	8007312 <HAL_SPI_Receive>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a9e:	480b      	ldr	r0, [pc, #44]	@ (8001acc <mpu9250_read_register+0x7c>)
 8001aa0:	f004 fdc6 	bl	8006630 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d102      	bne.n	8001ab0 <mpu9250_read_register+0x60>
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d007      	beq.n	8001ac0 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 8001ab0:	4808      	ldr	r0, [pc, #32]	@ (8001ad4 <mpu9250_read_register+0x84>)
 8001ab2:	f7ff ff2d 	bl	8001910 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 8001ab6:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <mpu9250_read_register+0x88>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 8001abc:	23ff      	movs	r3, #255	@ 0xff
 8001abe:	e000      	b.n	8001ac2 <mpu9250_read_register+0x72>
    }

    return rx_data;
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	20000258 	.word	0x20000258
 8001ad4:	0800d97c 	.word	0x0800d97c
 8001ad8:	200001f8 	.word	0x200001f8

08001adc <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460a      	mov	r2, r1
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	733b      	strb	r3, [r7, #12]
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afa:	4811      	ldr	r0, [pc, #68]	@ (8001b40 <mpu9250_write_register+0x64>)
 8001afc:	f004 fd98 	bl	8006630 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001b00:	f107 010c 	add.w	r1, r7, #12
 8001b04:	2364      	movs	r3, #100	@ 0x64
 8001b06:	2202      	movs	r2, #2
 8001b08:	480e      	ldr	r0, [pc, #56]	@ (8001b44 <mpu9250_write_register+0x68>)
 8001b0a:	f005 fabe 	bl	800708a <HAL_SPI_Transmit>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001b12:	2201      	movs	r2, #1
 8001b14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b18:	4809      	ldr	r0, [pc, #36]	@ (8001b40 <mpu9250_write_register+0x64>)
 8001b1a:	f004 fd89 	bl	8006630 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001b24:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <mpu9250_write_register+0x6c>)
 8001b26:	f7ff fef3 	bl	8001910 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <mpu9250_write_register+0x70>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001b30:	2001      	movs	r0, #1
 8001b32:	f003 fe3f 	bl	80057b4 <HAL_Delay>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40020400 	.word	0x40020400
 8001b44:	20000258 	.word	0x20000258
 8001b48:	0800d9a0 	.word	0x0800d9a0
 8001b4c:	200001f8 	.word	0x200001f8

08001b50 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 8001b56:	483c      	ldr	r0, [pc, #240]	@ (8001c48 <mpu9250_init+0xf8>)
 8001b58:	f7ff feda 	bl	8001910 <send_bluetooth_message>
    HAL_Delay(200);
 8001b5c:	20c8      	movs	r0, #200	@ 0xc8
 8001b5e:	f003 fe29 	bl	80057b4 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	206b      	movs	r0, #107	@ 0x6b
 8001b66:	f7ff ffb9 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 8001b6a:	20fa      	movs	r0, #250	@ 0xfa
 8001b6c:	f003 fe22 	bl	80057b4 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001b70:	2100      	movs	r1, #0
 8001b72:	206b      	movs	r0, #107	@ 0x6b
 8001b74:	f7ff ffb2 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(50);
 8001b78:	2032      	movs	r0, #50	@ 0x32
 8001b7a:	f003 fe1b 	bl	80057b4 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 8001b7e:	2101      	movs	r1, #1
 8001b80:	206b      	movs	r0, #107	@ 0x6b
 8001b82:	f7ff ffab 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(50);
 8001b86:	2032      	movs	r0, #50	@ 0x32
 8001b88:	f003 fe14 	bl	80057b4 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	206c      	movs	r0, #108	@ 0x6c
 8001b90:	f7ff ffa4 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f003 fe0d 	bl	80057b4 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8001b9a:	206a      	movs	r0, #106	@ 0x6a
 8001b9c:	f7ff ff58 	bl	8001a50 <mpu9250_read_register>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	206a      	movs	r0, #106	@ 0x6a
 8001bb2:	f7ff ff93 	bl	8001adc <mpu9250_write_register>
     HAL_Delay(10);
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f003 fdfc 	bl	80057b4 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	2019      	movs	r0, #25
 8001bc0:	f7ff ff8c 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bc4:	200a      	movs	r0, #10
 8001bc6:	f003 fdf5 	bl	80057b4 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 8001bca:	2102      	movs	r1, #2
 8001bcc:	201a      	movs	r0, #26
 8001bce:	f7ff ff85 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f003 fdee 	bl	80057b4 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 8001bd8:	2108      	movs	r1, #8
 8001bda:	201b      	movs	r0, #27
 8001bdc:	f7ff ff7e 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001be0:	200a      	movs	r0, #10
 8001be2:	f003 fde7 	bl	80057b4 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 8001be6:	2108      	movs	r1, #8
 8001be8:	201c      	movs	r0, #28
 8001bea:	f7ff ff77 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f003 fde0 	bl	80057b4 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 8001bf4:	2102      	movs	r1, #2
 8001bf6:	201d      	movs	r0, #29
 8001bf8:	f7ff ff70 	bl	8001adc <mpu9250_write_register>
    HAL_Delay(10);
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f003 fdd9 	bl	80057b4 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001c02:	2075      	movs	r0, #117	@ 0x75
 8001c04:	f7ff ff24 	bl	8001a50 <mpu9250_read_register>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480e      	ldr	r0, [pc, #56]	@ (8001c4c <mpu9250_init+0xfc>)
 8001c12:	f7ff fe93 	bl	800193c <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	2b70      	cmp	r3, #112	@ 0x70
 8001c1a:	d009      	beq.n	8001c30 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480b      	ldr	r0, [pc, #44]	@ (8001c50 <mpu9250_init+0x100>)
 8001c22:	f7ff fe8b 	bl	800193c <send_bluetooth_printf>
        mpu9250_initialized=false;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <mpu9250_init+0x104>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
        return false;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e006      	b.n	8001c3e <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001c30:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <mpu9250_init+0x108>)
 8001c32:	f7ff fe6d 	bl	8001910 <send_bluetooth_message>
    mpu9250_initialized=true;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <mpu9250_init+0x104>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
    return true;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	0800d9c8 	.word	0x0800d9c8
 8001c4c:	0800d9f4 	.word	0x0800d9f4
 8001c50:	0800da08 	.word	0x0800da08
 8001c54:	200001f8 	.word	0x200001f8
 8001c58:	0800da30 	.word	0x0800da30

08001c5c <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 8001c5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c60:	b088      	sub	sp, #32
 8001c62:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8001c64:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <mpu9250_calibrate_bias+0x144>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8001c72:	484c      	ldr	r0, [pc, #304]	@ (8001da4 <mpu9250_calibrate_bias+0x148>)
 8001c74:	f7ff fe4c 	bl	8001910 <send_bluetooth_message>
        return;
 8001c78:	e08e      	b.n	8001d98 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 8001c7a:	484b      	ldr	r0, [pc, #300]	@ (8001da8 <mpu9250_calibrate_bias+0x14c>)
 8001c7c:	f7ff fe48 	bl	8001910 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8001c80:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001c82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c86:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	e02e      	b.n	8001cfe <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 8001ca0:	f000 f896 	bl	8001dd0 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 8001ca4:	4b42      	ldr	r3, [pc, #264]	@ (8001db0 <mpu9250_calibrate_bias+0x154>)
 8001ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cba:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001db0 <mpu9250_calibrate_bias+0x154>)
 8001cc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd4:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 8001cd8:	4b35      	ldr	r3, [pc, #212]	@ (8001db0 <mpu9250_calibrate_bias+0x154>)
 8001cda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f003 fd5e 	bl	80057b4 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d00:	691a      	ldr	r2, [r3, #16]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8cb      	bhi.n	8001ca0 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 8001d08:	4b28      	ldr	r3, [pc, #160]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d14:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1c:	4b23      	ldr	r3, [pc, #140]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8001d22:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d2e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d38:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d48:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d52:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbf9 	bl	8000558 <__aeabi_f2d>
 8001d66:	4680      	mov	r8, r0
 8001d68:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf2 	bl	8000558 <__aeabi_f2d>
 8001d74:	4604      	mov	r4, r0
 8001d76:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001d78:	4b0c      	ldr	r3, [pc, #48]	@ (8001dac <mpu9250_calibrate_bias+0x150>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbeb 	bl	8000558 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d8a:	e9cd 4500 	strd	r4, r5, [sp]
 8001d8e:	4642      	mov	r2, r8
 8001d90:	464b      	mov	r3, r9
 8001d92:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <mpu9250_calibrate_bias+0x158>)
 8001d94:	f7ff fdd2 	bl	800193c <send_bluetooth_printf>
}
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001da0:	200001f8 	.word	0x200001f8
 8001da4:	0800da44 	.word	0x0800da44
 8001da8:	0800da70 	.word	0x0800da70
 8001dac:	200001fc 	.word	0x200001fc
 8001db0:	2000143c 	.word	0x2000143c
 8001db4:	0800daa4 	.word	0x0800daa4

08001db8 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 8001dbc:	4b03      	ldr	r3, [pc, #12]	@ (8001dcc <mpu9250_is_initialized+0x14>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	200001f8 	.word	0x200001f8

08001dd0 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <mpu9250_read_gyro+0xc4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 8001de4:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <mpu9250_read_gyro+0xc8>)
 8001de6:	f7ff fd93 	bl	8001910 <send_bluetooth_message>
        return;
 8001dea:	e050      	b.n	8001e8e <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 8001dec:	23c3      	movs	r3, #195	@ 0xc3
 8001dee:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001df6:	4829      	ldr	r0, [pc, #164]	@ (8001e9c <mpu9250_read_gyro+0xcc>)
 8001df8:	f004 fc1a 	bl	8006630 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001dfc:	1df9      	adds	r1, r7, #7
 8001dfe:	2364      	movs	r3, #100	@ 0x64
 8001e00:	2201      	movs	r2, #1
 8001e02:	4827      	ldr	r0, [pc, #156]	@ (8001ea0 <mpu9250_read_gyro+0xd0>)
 8001e04:	f005 f941 	bl	800708a <HAL_SPI_Transmit>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e18:	4820      	ldr	r0, [pc, #128]	@ (8001e9c <mpu9250_read_gyro+0xcc>)
 8001e1a:	f004 fc09 	bl	8006630 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 8001e1e:	4821      	ldr	r0, [pc, #132]	@ (8001ea4 <mpu9250_read_gyro+0xd4>)
 8001e20:	f7ff fd76 	bl	8001910 <send_bluetooth_message>
        return;
 8001e24:	e033      	b.n	8001e8e <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001e26:	f107 0108 	add.w	r1, r7, #8
 8001e2a:	2364      	movs	r3, #100	@ 0x64
 8001e2c:	2206      	movs	r2, #6
 8001e2e:	481c      	ldr	r0, [pc, #112]	@ (8001ea0 <mpu9250_read_gyro+0xd0>)
 8001e30:	f005 fa6f 	bl	8007312 <HAL_SPI_Receive>
 8001e34:	4603      	mov	r3, r0
 8001e36:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e3e:	4817      	ldr	r0, [pc, #92]	@ (8001e9c <mpu9250_read_gyro+0xcc>)
 8001e40:	f004 fbf6 	bl	8006630 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 8001e4a:	4817      	ldr	r0, [pc, #92]	@ (8001ea8 <mpu9250_read_gyro+0xd8>)
 8001e4c:	f7ff fd60 	bl	8001910 <send_bluetooth_message>
        return;
 8001e50:	e01d      	b.n	8001e8e <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001e52:	7a3b      	ldrb	r3, [r7, #8]
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	7a7b      	ldrb	r3, [r7, #9]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <mpu9250_read_gyro+0xdc>)
 8001e64:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001e66:	7abb      	ldrb	r3, [r7, #10]
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	021b      	lsls	r3, r3, #8
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	4313      	orrs	r3, r2
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	4b0d      	ldr	r3, [pc, #52]	@ (8001eac <mpu9250_read_gyro+0xdc>)
 8001e78:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001e7a:	7b3b      	ldrb	r3, [r7, #12]
 8001e7c:	b21b      	sxth	r3, r3
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	b21a      	sxth	r2, r3
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b21a      	sxth	r2, r3
 8001e8a:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <mpu9250_read_gyro+0xdc>)
 8001e8c:	809a      	strh	r2, [r3, #4]
}
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	200001f8 	.word	0x200001f8
 8001e98:	0800dad4 	.word	0x0800dad4
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	20000258 	.word	0x20000258
 8001ea4:	0800db08 	.word	0x0800db08
 8001ea8:	0800db2c 	.word	0x0800db2c
 8001eac:	2000143c 	.word	0x2000143c

08001eb0 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <mpu9250_read_accel+0xc4>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 8001ec4:	482c      	ldr	r0, [pc, #176]	@ (8001f78 <mpu9250_read_accel+0xc8>)
 8001ec6:	f7ff fd23 	bl	8001910 <send_bluetooth_message>
        return;
 8001eca:	e050      	b.n	8001f6e <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 8001ecc:	23bb      	movs	r3, #187	@ 0xbb
 8001ece:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ed6:	4829      	ldr	r0, [pc, #164]	@ (8001f7c <mpu9250_read_accel+0xcc>)
 8001ed8:	f004 fbaa 	bl	8006630 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8001edc:	1df9      	adds	r1, r7, #7
 8001ede:	2364      	movs	r3, #100	@ 0x64
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4827      	ldr	r0, [pc, #156]	@ (8001f80 <mpu9250_read_accel+0xd0>)
 8001ee4:	f005 f8d1 	bl	800708a <HAL_SPI_Transmit>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef8:	4820      	ldr	r0, [pc, #128]	@ (8001f7c <mpu9250_read_accel+0xcc>)
 8001efa:	f004 fb99 	bl	8006630 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 8001efe:	4821      	ldr	r0, [pc, #132]	@ (8001f84 <mpu9250_read_accel+0xd4>)
 8001f00:	f7ff fd06 	bl	8001910 <send_bluetooth_message>
        return;
 8001f04:	e033      	b.n	8001f6e <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001f06:	f107 0108 	add.w	r1, r7, #8
 8001f0a:	2364      	movs	r3, #100	@ 0x64
 8001f0c:	2206      	movs	r2, #6
 8001f0e:	481c      	ldr	r0, [pc, #112]	@ (8001f80 <mpu9250_read_accel+0xd0>)
 8001f10:	f005 f9ff 	bl	8007312 <HAL_SPI_Receive>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f1e:	4817      	ldr	r0, [pc, #92]	@ (8001f7c <mpu9250_read_accel+0xcc>)
 8001f20:	f004 fb86 	bl	8006630 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 8001f2a:	4817      	ldr	r0, [pc, #92]	@ (8001f88 <mpu9250_read_accel+0xd8>)
 8001f2c:	f7ff fcf0 	bl	8001910 <send_bluetooth_message>
        return;
 8001f30:	e01d      	b.n	8001f6e <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001f32:	7a3b      	ldrb	r3, [r7, #8]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7a7b      	ldrb	r3, [r7, #9]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	4b12      	ldr	r3, [pc, #72]	@ (8001f8c <mpu9250_read_accel+0xdc>)
 8001f44:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001f46:	7abb      	ldrb	r3, [r7, #10]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	7afb      	ldrb	r3, [r7, #11]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <mpu9250_read_accel+0xdc>)
 8001f58:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 8001f5a:	7b3b      	ldrb	r3, [r7, #12]
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	7b7b      	ldrb	r3, [r7, #13]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	4313      	orrs	r3, r2
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	4b08      	ldr	r3, [pc, #32]	@ (8001f8c <mpu9250_read_accel+0xdc>)
 8001f6c:	815a      	strh	r2, [r3, #10]
}
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200001f8 	.word	0x200001f8
 8001f78:	0800db50 	.word	0x0800db50
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	20000258 	.word	0x20000258
 8001f84:	0800db88 	.word	0x0800db88
 8001f88:	0800dbac 	.word	0x0800dbac
 8001f8c:	2000143c 	.word	0x2000143c

08001f90 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 8001f94:	f7ff ff8c 	bl	8001eb0 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001f98:	f7ff ff1a 	bl	8001dd0 <mpu9250_read_gyro>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)
    return (float)gyro.gyro_z / 65.5f;
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <mpu9250_get_gyro_z_dps+0x2c>)
 8001fa6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001fd0 <mpu9250_get_gyro_z_dps+0x30>
 8001fb6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fba:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	2000143c 	.word	0x2000143c
 8001fd0:	42830000 	.word	0x42830000

08001fd4 <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af02      	add	r7, sp, #8
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 8001fda:	4b2e      	ldr	r3, [pc, #184]	@ (8002094 <mpu9250_send_status+0xc0>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <mpu9250_send_status+0x12>
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <mpu9250_send_status+0xc4>)
 8001fe4:	e000      	b.n	8001fe8 <mpu9250_send_status+0x14>
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800209c <mpu9250_send_status+0xc8>)
 8001fe8:	4619      	mov	r1, r3
 8001fea:	482d      	ldr	r0, [pc, #180]	@ (80020a0 <mpu9250_send_status+0xcc>)
 8001fec:	f7ff fca6 	bl	800193c <send_bluetooth_printf>

    if (mpu9250_initialized) {
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <mpu9250_send_status+0xc0>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d048      	beq.n	800208a <mpu9250_send_status+0xb6>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001ff8:	2075      	movs	r0, #117	@ 0x75
 8001ffa:	f7ff fd29 	bl	8001a50 <mpu9250_read_register>
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8002002:	206a      	movs	r0, #106	@ 0x6a
 8002004:	f7ff fd24 	bl	8001a50 <mpu9250_read_register>
 8002008:	4603      	mov	r3, r0
 800200a:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 800200c:	206b      	movs	r0, #107	@ 0x6b
 800200e:	f7ff fd1f 	bl	8001a50 <mpu9250_read_register>
 8002012:	4603      	mov	r3, r0
 8002014:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 8002016:	79f9      	ldrb	r1, [r7, #7]
 8002018:	79ba      	ldrb	r2, [r7, #6]
 800201a:	797b      	ldrb	r3, [r7, #5]
 800201c:	4821      	ldr	r0, [pc, #132]	@ (80020a4 <mpu9250_send_status+0xd0>)
 800201e:	f7ff fc8d 	bl	800193c <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 800202c:	481e      	ldr	r0, [pc, #120]	@ (80020a8 <mpu9250_send_status+0xd4>)
 800202e:	f7ff fc6f 	bl	8001910 <send_bluetooth_message>
 8002032:	e002      	b.n	800203a <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 8002034:	481d      	ldr	r0, [pc, #116]	@ (80020ac <mpu9250_send_status+0xd8>)
 8002036:	f7ff fc6b 	bl	8001910 <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 800203a:	f7ff ffa9 	bl	8001f90 <mpu9250_read_all>
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8002044:	461c      	mov	r4, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 800204c:	461d      	mov	r5, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800204e:	f7ff ffa7 	bl	8001fa0 <mpu9250_get_gyro_z_dps>
 8002052:	ee10 3a10 	vmov	r3, s0
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa7e 	bl	8000558 <__aeabi_f2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	e9cd 2300 	strd	r2, r3, [sp]
 8002064:	462a      	mov	r2, r5
 8002066:	4621      	mov	r1, r4
 8002068:	4812      	ldr	r0, [pc, #72]	@ (80020b4 <mpu9250_send_status+0xe0>)
 800206a:	f7ff fc67 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002070:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8002074:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8002076:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002078:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 800207c:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <mpu9250_send_status+0xdc>)
 8002080:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <mpu9250_send_status+0xe4>)
 8002086:	f7ff fc59 	bl	800193c <send_bluetooth_printf>
    }
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bdb0      	pop	{r4, r5, r7, pc}
 8002092:	bf00      	nop
 8002094:	200001f8 	.word	0x200001f8
 8002098:	0800dbd0 	.word	0x0800dbd0
 800209c:	0800dbd4 	.word	0x0800dbd4
 80020a0:	0800dbdc 	.word	0x0800dbdc
 80020a4:	0800dbf8 	.word	0x0800dbf8
 80020a8:	0800dc2c 	.word	0x0800dc2c
 80020ac:	0800dc40 	.word	0x0800dc40
 80020b0:	2000143c 	.word	0x2000143c
 80020b4:	0800dc54 	.word	0x0800dc54
 80020b8:	0800dc70 	.word	0x0800dc70

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b598      	push	{r3, r4, r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f003 fb06 	bl	80056d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c4:	f000 f944 	bl	8002350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c8:	f000 fc74 	bl	80029b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020cc:	f000 f9a8 	bl	8002420 <MX_ADC1_Init>
  MX_SPI2_Init();
 80020d0:	f000 fa30 	bl	8002534 <MX_SPI2_Init>
  MX_TIM1_Init();
 80020d4:	f000 fa64 	bl	80025a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80020d8:	f000 fb02 	bl	80026e0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80020dc:	f000 fbec 	bl	80028b8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80020e0:	f000 fc3e 	bl	8002960 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80020e4:	f000 fb50 	bl	8002788 <MX_TIM3_Init>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // PA6  (MOTOR_IN1)
 80020e8:	2100      	movs	r1, #0
 80020ea:	4887      	ldr	r0, [pc, #540]	@ (8002308 <main+0x24c>)
 80020ec:	f005 fdbe 	bl	8007c6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // PA7  (MOTOR_IN2)
 80020f0:	2104      	movs	r1, #4
 80020f2:	4885      	ldr	r0, [pc, #532]	@ (8002308 <main+0x24c>)
 80020f4:	f005 fdba 	bl	8007c6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);   // PB0  (MOTOR_IN3)
 80020f8:	2108      	movs	r1, #8
 80020fa:	4883      	ldr	r0, [pc, #524]	@ (8002308 <main+0x24c>)
 80020fc:	f005 fdb6 	bl	8007c6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);   // PB1  (MOTOR_IN4)
 8002100:	210c      	movs	r1, #12
 8002102:	4881      	ldr	r0, [pc, #516]	@ (8002308 <main+0x24c>)
 8002104:	f005 fdb2 	bl	8007c6c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // wake DRV8833
 8002108:	2201      	movs	r2, #1
 800210a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800210e:	487f      	ldr	r0, [pc, #508]	@ (800230c <main+0x250>)
 8002110:	f004 fa8e 	bl	8006630 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  /* Initialize micromouse system */
  championship_micromouse_init();
 8002114:	f000 fd80 	bl	8002c18 <championship_micromouse_init>
  verify_adc_gpio_configuration();
 8002118:	f000 fd2e 	bl	8002b78 <verify_adc_gpio_configuration>
  adc_system_diagnostics();
 800211c:	f002 f9ea 	bl	80044f4 <adc_system_diagnostics>

  // Check gyro initialization
  if (!mpu9250_is_initialized()) {
 8002120:	f7ff fe4a 	bl	8001db8 <mpu9250_is_initialized>
 8002124:	4603      	mov	r3, r0
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <main+0x7a>
      send_bluetooth_message("❌ CRITICAL: Gyroscope initialization failed!\r\n");
 8002130:	4877      	ldr	r0, [pc, #476]	@ (8002310 <main+0x254>)
 8002132:	f7ff fbed 	bl	8001910 <send_bluetooth_message>

  }
  mpu9250_calibrate_bias();
 8002136:	f7ff fd91 	bl	8001c5c <mpu9250_calibrate_bias>
  mpu9250_send_status();
 800213a:	f7ff ff4b 	bl	8001fd4 <mpu9250_send_status>


  // Test ADC functionality
  update_sensors();
 800213e:	f002 f8cb 	bl	80042d8 <update_sensors>
  if (sensors.battery == 0 && sensors.front_left == 0 &&
 8002142:	4b74      	ldr	r3, [pc, #464]	@ (8002314 <main+0x258>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d112      	bne.n	8002170 <main+0xb4>
 800214a:	4b72      	ldr	r3, [pc, #456]	@ (8002314 <main+0x258>)
 800214c:	891b      	ldrh	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10e      	bne.n	8002170 <main+0xb4>
      sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 8002152:	4b70      	ldr	r3, [pc, #448]	@ (8002314 <main+0x258>)
 8002154:	885b      	ldrh	r3, [r3, #2]
  if (sensors.battery == 0 && sensors.front_left == 0 &&
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <main+0xb4>
      sensors.front_right == 0 && sensors.side_left == 0 && sensors.side_right == 0) {
 800215a:	4b6e      	ldr	r3, [pc, #440]	@ (8002314 <main+0x258>)
 800215c:	88db      	ldrh	r3, [r3, #6]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <main+0xb4>
 8002162:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <main+0x258>)
 8002164:	889b      	ldrh	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <main+0xb4>
      send_bluetooth_message("❌ CRITICAL: All sensors reading zero - ADC failure!\r\n");
 800216a:	486b      	ldr	r0, [pc, #428]	@ (8002318 <main+0x25c>)
 800216c:	f7ff fbd0 	bl	8001910 <send_bluetooth_message>
  }

  // Test encoder functionality
  start_encoders();
 8002170:	f001 fdc2 	bl	8003cf8 <start_encoders>
  reset_encoder_totals();
 8002174:	f001 fd9a 	bl	8003cac <reset_encoder_totals>
//  int32_t left_test = get_left_encoder_total();
//  int32_t right_test = get_right_encoder_total();
  HAL_Delay(100);
 8002178:	2064      	movs	r0, #100	@ 0x64
 800217a:	f003 fb1b 	bl	80057b4 <HAL_Delay>

  while(get_left_encoder_total()<=2000 || get_right_encoder_total()<=2000){
 800217e:	e00c      	b.n	800219a <main+0xde>
	  moveStraightPID();
 8002180:	f001 ff72 	bl	8004068 <moveStraightPID>
	  //HAL_Delay(1);
	  send_bluetooth_printf("L:%ld R:%ld\r\n",get_left_encoder_total(),get_right_encoder_total());
 8002184:	f001 fd7e 	bl	8003c84 <get_left_encoder_total>
 8002188:	4604      	mov	r4, r0
 800218a:	f001 fd85 	bl	8003c98 <get_right_encoder_total>
 800218e:	4603      	mov	r3, r0
 8002190:	461a      	mov	r2, r3
 8002192:	4621      	mov	r1, r4
 8002194:	4861      	ldr	r0, [pc, #388]	@ (800231c <main+0x260>)
 8002196:	f7ff fbd1 	bl	800193c <send_bluetooth_printf>
  while(get_left_encoder_total()<=2000 || get_right_encoder_total()<=2000){
 800219a:	f001 fd73 	bl	8003c84 <get_left_encoder_total>
 800219e:	4603      	mov	r3, r0
 80021a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021a4:	ddec      	ble.n	8002180 <main+0xc4>
 80021a6:	f001 fd77 	bl	8003c98 <get_right_encoder_total>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021b0:	dde6      	ble.n	8002180 <main+0xc4>
  }
  break_motors();
 80021b2:	f001 feed 	bl	8003f90 <break_motors>

  HAL_Delay(100);
 80021b6:	2064      	movs	r0, #100	@ 0x64
 80021b8:	f003 fafc 	bl	80057b4 <HAL_Delay>
//  test_encoder_manual();
//  test_encoder_rotation();
//  left_test = get_left_encoder_total();
//  right_test = get_right_encoder_total();

  if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 80021bc:	f001 fd62 	bl	8003c84 <get_left_encoder_total>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d107      	bne.n	80021d6 <main+0x11a>
 80021c6:	f001 fd67 	bl	8003c98 <get_right_encoder_total>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <main+0x11a>
      send_bluetooth_message("⚠️ WARNING: Encoders may not be working\r\n");
 80021d0:	4853      	ldr	r0, [pc, #332]	@ (8002320 <main+0x264>)
 80021d2:	f7ff fb9d 	bl	8001910 <send_bluetooth_message>




  /* Play startup tone */
  play_startup_tone();
 80021d6:	f7fe fed3 	bl	8000f80 <play_startup_tone>

  /* Status LEDs test */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	2110      	movs	r1, #16
 80021de:	4851      	ldr	r0, [pc, #324]	@ (8002324 <main+0x268>)
 80021e0:	f004 fa26 	bl	8006630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	2120      	movs	r1, #32
 80021e8:	484e      	ldr	r0, [pc, #312]	@ (8002324 <main+0x268>)
 80021ea:	f004 fa21 	bl	8006630 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80021ee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021f2:	f003 fadf 	bl	80057b4 <HAL_Delay>
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2110      	movs	r1, #16
 80021fa:	484a      	ldr	r0, [pc, #296]	@ (8002324 <main+0x268>)
 80021fc:	f004 fa18 	bl	8006630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	2120      	movs	r1, #32
 8002204:	4847      	ldr	r0, [pc, #284]	@ (8002324 <main+0x268>)
 8002206:	f004 fa13 	bl	8006630 <HAL_GPIO_WritePin>

  /* Send startup message via Bluetooth */
  send_bluetooth_message("Championship Micromouse Ready!\r\n");
 800220a:	4847      	ldr	r0, [pc, #284]	@ (8002328 <main+0x26c>)
 800220c:	f7ff fb80 	bl	8001910 <send_bluetooth_message>

  send_championship_stats();
 8002210:	f7ff fbf6 	bl	8001a00 <send_championship_stats>

  /* Wait for start button */
  send_bluetooth_message("Press button to start exploration...\r\n");
 8002214:	4845      	ldr	r0, [pc, #276]	@ (800232c <main+0x270>)
 8002216:	f7ff fb7b 	bl	8001910 <send_bluetooth_message>
  while (!start_flag) {
 800221a:	e006      	b.n	800222a <main+0x16e>
      HAL_Delay(10);
 800221c:	200a      	movs	r0, #10
 800221e:	f003 fac9 	bl	80057b4 <HAL_Delay>
      // Blink LED to show ready state
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002222:	2110      	movs	r1, #16
 8002224:	483f      	ldr	r0, [pc, #252]	@ (8002324 <main+0x268>)
 8002226:	f004 fa1c 	bl	8006662 <HAL_GPIO_TogglePin>
  while (!start_flag) {
 800222a:	4b41      	ldr	r3, [pc, #260]	@ (8002330 <main+0x274>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f3      	beq.n	800221c <main+0x160>
  }

  /* Reset LEDs */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	2110      	movs	r1, #16
 8002238:	483a      	ldr	r0, [pc, #232]	@ (8002324 <main+0x268>)
 800223a:	f004 f9f9 	bl	8006630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2120      	movs	r1, #32
 8002242:	4838      	ldr	r0, [pc, #224]	@ (8002324 <main+0x268>)
 8002244:	f004 f9f4 	bl	8006630 <HAL_GPIO_WritePin>

  /* Start exploration after delay */
  play_confirmation_tone();
 8002248:	f7fe feb6 	bl	8000fb8 <play_confirmation_tone>
  HAL_Delay(2000);
 800224c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002250:	f003 fab0 	bl	80057b4 <HAL_Delay>

  /* Main micromouse algorithm */
  send_bluetooth_message("Starting maze exploration...\r\n");
 8002254:	4837      	ldr	r0, [pc, #220]	@ (8002334 <main+0x278>)
 8002256:	f7ff fb5b 	bl	8001910 <send_bluetooth_message>

  /* Initialize movement system */
  start_encoders();
 800225a:	f001 fd4d 	bl	8003cf8 <start_encoders>
  calibrate_sensors();
 800225e:	f002 f9ff 	bl	8004660 <calibrate_sensors>

  /* Execute championship exploration */
  championship_exploration_with_analysis();
 8002262:	f001 fa51 	bl	8003708 <championship_exploration_with_analysis>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  update_sensors();
 8002266:	f002 f837 	bl	80042d8 <update_sensors>

	  if (button_pressed == 1) {
 800226a:	4b33      	ldr	r3, [pc, #204]	@ (8002338 <main+0x27c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d114      	bne.n	800229e <main+0x1e2>
		  button_pressed = 0;
 8002274:	4b30      	ldr	r3, [pc, #192]	@ (8002338 <main+0x27c>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
		  // Left button - start speed run or new exploration
		  if (robot.center_reached && robot.returned_to_start) {
 800227a:	4b30      	ldr	r3, [pc, #192]	@ (800233c <main+0x280>)
 800227c:	7b1b      	ldrb	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <main+0x1d4>
 8002282:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <main+0x280>)
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <main+0x1d4>
			  championship_speed_run(); // Championship speed run with MMS path
 800228a:	f001 fbbb 	bl	8003a04 <championship_speed_run>
 800228e:	e006      	b.n	800229e <main+0x1e2>
		  } else {
			  send_bluetooth_message("Starting new championship exploration...\r\n");
 8002290:	482b      	ldr	r0, [pc, #172]	@ (8002340 <main+0x284>)
 8002292:	f7ff fb3d 	bl	8001910 <send_bluetooth_message>
			  reset_championship_micromouse();
 8002296:	f001 fb89 	bl	80039ac <reset_championship_micromouse>
			  championship_exploration_with_analysis();
 800229a:	f001 fa35 	bl	8003708 <championship_exploration_with_analysis>
		  }
	  }

	  if (button_pressed == 2) {
 800229e:	4b26      	ldr	r3, [pc, #152]	@ (8002338 <main+0x27c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d107      	bne.n	80022b8 <main+0x1fc>
		  button_pressed = 0;
 80022a8:	4b23      	ldr	r3, [pc, #140]	@ (8002338 <main+0x27c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
		  // Right button - reset system
		  reset_championship_micromouse();
 80022ae:	f001 fb7d 	bl	80039ac <reset_championship_micromouse>
		  send_bluetooth_message("Championship system reset\r\n");
 80022b2:	4824      	ldr	r0, [pc, #144]	@ (8002344 <main+0x288>)
 80022b4:	f7ff fb2c 	bl	8001910 <send_bluetooth_message>
	  }

	  // Send periodic status updates
	  static uint32_t last_status = 0;
	  if (HAL_GetTick() - last_status > 5000) {
 80022b8:	f003 fa70 	bl	800579c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <main+0x28c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d906      	bls.n	80022da <main+0x21e>
		  send_battery_status();
 80022cc:	f7ff fb5c 	bl	8001988 <send_battery_status>
		  last_status = HAL_GetTick();
 80022d0:	f003 fa64 	bl	800579c <HAL_GetTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <main+0x28c>)
 80022d8:	6013      	str	r3, [r2, #0]
	  }

	  // Blink LED to show system is alive
	  static uint32_t last_blink = 0;
	  if (HAL_GetTick() - last_blink > 2000) {
 80022da:	f003 fa5f 	bl	800579c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <main+0x290>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80022ea:	d908      	bls.n	80022fe <main+0x242>
		  HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80022ec:	2110      	movs	r1, #16
 80022ee:	480d      	ldr	r0, [pc, #52]	@ (8002324 <main+0x268>)
 80022f0:	f004 f9b7 	bl	8006662 <HAL_GPIO_TogglePin>
		  last_blink = HAL_GetTick();
 80022f4:	f003 fa52 	bl	800579c <HAL_GetTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a14      	ldr	r2, [pc, #80]	@ (800234c <main+0x290>)
 80022fc:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(100);
 80022fe:	2064      	movs	r0, #100	@ 0x64
 8002300:	f003 fa58 	bl	80057b4 <HAL_Delay>
  {
 8002304:	e7af      	b.n	8002266 <main+0x1aa>
 8002306:	bf00      	nop
 8002308:	20000340 	.word	0x20000340
 800230c:	40020800 	.word	0x40020800
 8002310:	0800dc88 	.word	0x0800dc88
 8002314:	2000142c 	.word	0x2000142c
 8002318:	0800dcbc 	.word	0x0800dcbc
 800231c:	0800dcf4 	.word	0x0800dcf4
 8002320:	0800dd04 	.word	0x0800dd04
 8002324:	40020400 	.word	0x40020400
 8002328:	0800dd34 	.word	0x0800dd34
 800232c:	0800dd58 	.word	0x0800dd58
 8002330:	20001461 	.word	0x20001461
 8002334:	0800dd80 	.word	0x0800dd80
 8002338:	20001460 	.word	0x20001460
 800233c:	20001418 	.word	0x20001418
 8002340:	0800dda0 	.word	0x0800dda0
 8002344:	0800ddcc 	.word	0x0800ddcc
 8002348:	2000146c 	.word	0x2000146c
 800234c:	20001470 	.word	0x20001470

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b094      	sub	sp, #80	@ 0x50
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	2230      	movs	r2, #48	@ 0x30
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f008 face 	bl	800a900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <SystemClock_Config+0xc8>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	4a26      	ldr	r2, [pc, #152]	@ (8002418 <SystemClock_Config+0xc8>)
 800237e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002382:	6413      	str	r3, [r2, #64]	@ 0x40
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <SystemClock_Config+0xc8>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002390:	2300      	movs	r3, #0
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <SystemClock_Config+0xcc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a20      	ldr	r2, [pc, #128]	@ (800241c <SystemClock_Config+0xcc>)
 800239a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800239e:	6013      	str	r3, [r2, #0]
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <SystemClock_Config+0xcc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023ac:	2302      	movs	r3, #2
 80023ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b0:	2301      	movs	r3, #1
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b4:	2310      	movs	r3, #16
 80023b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b8:	2302      	movs	r3, #2
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023bc:	2300      	movs	r3, #0
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80023c0:	2310      	movs	r3, #16
 80023c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023c4:	23a8      	movs	r3, #168	@ 0xa8
 80023c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c8:	2302      	movs	r3, #2
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023cc:	2304      	movs	r3, #4
 80023ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d0:	f107 0320 	add.w	r3, r7, #32
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f977 	bl	80066c8 <HAL_RCC_OscConfig>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023e0:	f000 fc06 	bl	8002bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e4:	230f      	movs	r3, #15
 80023e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e8:	2302      	movs	r3, #2
 80023ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	2102      	movs	r1, #2
 8002400:	4618      	mov	r0, r3
 8002402:	f004 fbd9 	bl	8006bb8 <HAL_RCC_ClockConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800240c:	f000 fbf0 	bl	8002bf0 <Error_Handler>
  }
}
 8002410:	bf00      	nop
 8002412:	3750      	adds	r7, #80	@ 0x50
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	40007000 	.word	0x40007000

08002420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002426:	463b      	mov	r3, r7
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002432:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002434:	4a3d      	ldr	r2, [pc, #244]	@ (800252c <MX_ADC1_Init+0x10c>)
 8002436:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002438:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <MX_ADC1_Init+0x108>)
 800243a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800243e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002440:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002448:	2201      	movs	r2, #1
 800244a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800244c:	4b36      	ldr	r3, [pc, #216]	@ (8002528 <MX_ADC1_Init+0x108>)
 800244e:	2201      	movs	r2, #1
 8002450:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002452:	4b35      	ldr	r3, [pc, #212]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800245a:	4b33      	ldr	r3, [pc, #204]	@ (8002528 <MX_ADC1_Init+0x108>)
 800245c:	2200      	movs	r2, #0
 800245e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002460:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002462:	4a33      	ldr	r2, [pc, #204]	@ (8002530 <MX_ADC1_Init+0x110>)
 8002464:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002466:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800246c:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <MX_ADC1_Init+0x108>)
 800246e:	2205      	movs	r2, #5
 8002470:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002472:	4b2d      	ldr	r3, [pc, #180]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800247a:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <MX_ADC1_Init+0x108>)
 800247c:	2201      	movs	r2, #1
 800247e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002480:	4829      	ldr	r0, [pc, #164]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002482:	f003 f9bb 	bl	80057fc <HAL_ADC_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800248c:	f000 fbb0 	bl	8002bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002490:	2300      	movs	r3, #0
 8002492:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	4619      	mov	r1, r3
 80024a0:	4821      	ldr	r0, [pc, #132]	@ (8002528 <MX_ADC1_Init+0x108>)
 80024a2:	f003 fb6f 	bl	8005b84 <HAL_ADC_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024ac:	f000 fba0 	bl	8002bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024b0:	2302      	movs	r3, #2
 80024b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024b4:	2302      	movs	r3, #2
 80024b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	4619      	mov	r1, r3
 80024bc:	481a      	ldr	r0, [pc, #104]	@ (8002528 <MX_ADC1_Init+0x108>)
 80024be:	f003 fb61 	bl	8005b84 <HAL_ADC_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80024c8:	f000 fb92 	bl	8002bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80024cc:	2303      	movs	r3, #3
 80024ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80024d0:	2303      	movs	r3, #3
 80024d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d4:	463b      	mov	r3, r7
 80024d6:	4619      	mov	r1, r3
 80024d8:	4813      	ldr	r0, [pc, #76]	@ (8002528 <MX_ADC1_Init+0x108>)
 80024da:	f003 fb53 	bl	8005b84 <HAL_ADC_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80024e4:	f000 fb84 	bl	8002bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80024e8:	2304      	movs	r3, #4
 80024ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80024ec:	2304      	movs	r3, #4
 80024ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f0:	463b      	mov	r3, r7
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <MX_ADC1_Init+0x108>)
 80024f6:	f003 fb45 	bl	8005b84 <HAL_ADC_ConfigChannel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002500:	f000 fb76 	bl	8002bf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002504:	2305      	movs	r3, #5
 8002506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002508:	2305      	movs	r3, #5
 800250a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	@ (8002528 <MX_ADC1_Init+0x108>)
 8002512:	f003 fb37 	bl	8005b84 <HAL_ADC_ConfigChannel>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800251c:	f000 fb68 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000210 	.word	0x20000210
 800252c:	40012000 	.word	0x40012000
 8002530:	0f000001 	.word	0x0f000001

08002534 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <MX_SPI2_Init+0x64>)
 800253a:	4a18      	ldr	r2, [pc, #96]	@ (800259c <MX_SPI2_Init+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800253e:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002540:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002544:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002546:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800254c:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <MX_SPI2_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002558:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <MX_SPI2_Init+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002564:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002566:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002568:	2230      	movs	r2, #48	@ 0x30
 800256a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800256c:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <MX_SPI2_Init+0x64>)
 800256e:	2200      	movs	r2, #0
 8002570:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002578:	4b07      	ldr	r3, [pc, #28]	@ (8002598 <MX_SPI2_Init+0x64>)
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002580:	220a      	movs	r2, #10
 8002582:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002584:	4804      	ldr	r0, [pc, #16]	@ (8002598 <MX_SPI2_Init+0x64>)
 8002586:	f004 fcf7 	bl	8006f78 <HAL_SPI_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002590:	f000 fb2e 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000258 	.word	0x20000258
 800259c:	40003800 	.word	0x40003800

080025a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b096      	sub	sp, #88	@ 0x58
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2220      	movs	r2, #32
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f008 f991 	bl	800a900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025de:	4b3e      	ldr	r3, [pc, #248]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80025e0:	4a3e      	ldr	r2, [pc, #248]	@ (80026dc <MX_TIM1_Init+0x13c>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80025e4:	4b3c      	ldr	r3, [pc, #240]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80025e6:	2214      	movs	r2, #20
 80025e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 80025f0:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80025f2:	22c8      	movs	r2, #200	@ 0xc8
 80025f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025fc:	4b36      	ldr	r3, [pc, #216]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80025fe:	2200      	movs	r2, #0
 8002600:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002602:	4b35      	ldr	r3, [pc, #212]	@ (80026d8 <MX_TIM1_Init+0x138>)
 8002604:	2280      	movs	r2, #128	@ 0x80
 8002606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002608:	4833      	ldr	r0, [pc, #204]	@ (80026d8 <MX_TIM1_Init+0x138>)
 800260a:	f005 fa87 	bl	8007b1c <HAL_TIM_Base_Init>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002614:	f000 faec 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800261e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002622:	4619      	mov	r1, r3
 8002624:	482c      	ldr	r0, [pc, #176]	@ (80026d8 <MX_TIM1_Init+0x138>)
 8002626:	f005 ff1b 	bl	8008460 <HAL_TIM_ConfigClockSource>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002630:	f000 fade 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002634:	4828      	ldr	r0, [pc, #160]	@ (80026d8 <MX_TIM1_Init+0x138>)
 8002636:	f005 fac0 	bl	8007bba <HAL_TIM_PWM_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002640:	f000 fad6 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800264c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002650:	4619      	mov	r1, r3
 8002652:	4821      	ldr	r0, [pc, #132]	@ (80026d8 <MX_TIM1_Init+0x138>)
 8002654:	f006 fad0 	bl	8008bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800265e:	f000 fac7 	bl	8002bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002662:	2360      	movs	r3, #96	@ 0x60
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8002666:	2364      	movs	r3, #100	@ 0x64
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800266e:	2300      	movs	r3, #0
 8002670:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800267a:	2300      	movs	r3, #0
 800267c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800267e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002682:	2208      	movs	r2, #8
 8002684:	4619      	mov	r1, r3
 8002686:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <MX_TIM1_Init+0x138>)
 8002688:	f005 fe28 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002692:	f000 faad 	bl	8002bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	4619      	mov	r1, r3
 80026b8:	4807      	ldr	r0, [pc, #28]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80026ba:	f006 fb0b 	bl	8008cd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80026c4:	f000 fa94 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <MX_TIM1_Init+0x138>)
 80026ca:	f002 fdb9 	bl	8005240 <HAL_TIM_MspPostInit>

}
 80026ce:	bf00      	nop
 80026d0:	3758      	adds	r7, #88	@ 0x58
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200002b0 	.word	0x200002b0
 80026dc:	40010000 	.word	0x40010000

080026e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	@ 0x30
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	2224      	movs	r2, #36	@ 0x24
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f008 f906 	bl	800a900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026fc:	4b21      	ldr	r3, [pc, #132]	@ (8002784 <MX_TIM2_Init+0xa4>)
 80026fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002704:	4b1f      	ldr	r3, [pc, #124]	@ (8002784 <MX_TIM2_Init+0xa4>)
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b1e      	ldr	r3, [pc, #120]	@ (8002784 <MX_TIM2_Init+0xa4>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <MX_TIM2_Init+0xa4>)
 8002712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002716:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002718:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <MX_TIM2_Init+0xa4>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800271e:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <MX_TIM2_Init+0xa4>)
 8002720:	2280      	movs	r2, #128	@ 0x80
 8002722:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002724:	2303      	movs	r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800272c:	2301      	movs	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800273c:	2301      	movs	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002740:	2300      	movs	r3, #0
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	4619      	mov	r1, r3
 800274e:	480d      	ldr	r0, [pc, #52]	@ (8002784 <MX_TIM2_Init+0xa4>)
 8002750:	f005 fba0 	bl	8007e94 <HAL_TIM_Encoder_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800275a:	f000 fa49 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	4619      	mov	r1, r3
 800276a:	4806      	ldr	r0, [pc, #24]	@ (8002784 <MX_TIM2_Init+0xa4>)
 800276c:	f006 fa44 	bl	8008bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002776:	f000 fa3b 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800277a:	bf00      	nop
 800277c:	3730      	adds	r7, #48	@ 0x30
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200002f8 	.word	0x200002f8

08002788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08e      	sub	sp, #56	@ 0x38
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279c:	f107 0320 	add.w	r3, r7, #32
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027b8:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027ba:	4a3e      	ldr	r2, [pc, #248]	@ (80028b4 <MX_TIM3_Init+0x12c>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 80027be:	4b3c      	ldr	r3, [pc, #240]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027c0:	2204      	movs	r2, #4
 80027c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 80027ca:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027cc:	f240 3246 	movw	r2, #838	@ 0x346
 80027d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d2:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027d8:	4b35      	ldr	r3, [pc, #212]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027da:	2280      	movs	r2, #128	@ 0x80
 80027dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027de:	4834      	ldr	r0, [pc, #208]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027e0:	f005 f99c 	bl	8007b1c <HAL_TIM_Base_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80027ea:	f000 fa01 	bl	8002bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027f8:	4619      	mov	r1, r3
 80027fa:	482d      	ldr	r0, [pc, #180]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80027fc:	f005 fe30 	bl	8008460 <HAL_TIM_ConfigClockSource>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002806:	f000 f9f3 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800280a:	4829      	ldr	r0, [pc, #164]	@ (80028b0 <MX_TIM3_Init+0x128>)
 800280c:	f005 f9d5 	bl	8007bba <HAL_TIM_PWM_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002816:	f000 f9eb 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281a:	2300      	movs	r3, #0
 800281c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002822:	f107 0320 	add.w	r3, r7, #32
 8002826:	4619      	mov	r1, r3
 8002828:	4821      	ldr	r0, [pc, #132]	@ (80028b0 <MX_TIM3_Init+0x128>)
 800282a:	f006 f9e5 	bl	8008bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002834:	f000 f9dc 	bl	8002bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002838:	2360      	movs	r3, #96	@ 0x60
 800283a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	4619      	mov	r1, r3
 800284e:	4818      	ldr	r0, [pc, #96]	@ (80028b0 <MX_TIM3_Init+0x128>)
 8002850:	f005 fd44 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800285a:	f000 f9c9 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2204      	movs	r2, #4
 8002862:	4619      	mov	r1, r3
 8002864:	4812      	ldr	r0, [pc, #72]	@ (80028b0 <MX_TIM3_Init+0x128>)
 8002866:	f005 fd39 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002870:	f000 f9be 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002874:	1d3b      	adds	r3, r7, #4
 8002876:	2208      	movs	r2, #8
 8002878:	4619      	mov	r1, r3
 800287a:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <MX_TIM3_Init+0x128>)
 800287c:	f005 fd2e 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002886:	f000 f9b3 	bl	8002bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	220c      	movs	r2, #12
 800288e:	4619      	mov	r1, r3
 8002890:	4807      	ldr	r0, [pc, #28]	@ (80028b0 <MX_TIM3_Init+0x128>)
 8002892:	f005 fd23 	bl	80082dc <HAL_TIM_PWM_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800289c:	f000 f9a8 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028a0:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <MX_TIM3_Init+0x128>)
 80028a2:	f002 fccd 	bl	8005240 <HAL_TIM_MspPostInit>

}
 80028a6:	bf00      	nop
 80028a8:	3738      	adds	r7, #56	@ 0x38
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000340 	.word	0x20000340
 80028b4:	40000400 	.word	0x40000400

080028b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	@ 0x30
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2224      	movs	r2, #36	@ 0x24
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f008 f81a 	bl	800a900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028d4:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <MX_TIM4_Init+0xa0>)
 80028d6:	4a21      	ldr	r2, [pc, #132]	@ (800295c <MX_TIM4_Init+0xa4>)
 80028d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80028da:	4b1f      	ldr	r3, [pc, #124]	@ (8002958 <MX_TIM4_Init+0xa0>)
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <MX_TIM4_Init+0xa0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80028e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <MX_TIM4_Init+0xa0>)
 80028e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <MX_TIM4_Init+0xa0>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028f4:	4b18      	ldr	r3, [pc, #96]	@ (8002958 <MX_TIM4_Init+0xa0>)
 80028f6:	2280      	movs	r2, #128	@ 0x80
 80028f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028fa:	2303      	movs	r3, #3
 80028fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002902:	2301      	movs	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002912:	2301      	movs	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4619      	mov	r1, r3
 8002924:	480c      	ldr	r0, [pc, #48]	@ (8002958 <MX_TIM4_Init+0xa0>)
 8002926:	f005 fab5 	bl	8007e94 <HAL_TIM_Encoder_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002930:	f000 f95e 	bl	8002bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002934:	2300      	movs	r3, #0
 8002936:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	@ (8002958 <MX_TIM4_Init+0xa0>)
 8002942:	f006 f959 	bl	8008bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800294c:	f000 f950 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	@ 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000388 	.word	0x20000388
 800295c:	40000800 	.word	0x40000800

08002960 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <MX_USART6_UART_Init+0x50>)
 8002968:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 800296c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002970:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002998:	f006 fa02 	bl	8008da0 <HAL_UART_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80029a2:	f000 f925 	bl	8002bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200003d0 	.word	0x200003d0
 80029b0:	40011400 	.word	0x40011400

080029b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ba:	f107 030c 	add.w	r3, r7, #12
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	60da      	str	r2, [r3, #12]
 80029c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	4b4b      	ldr	r3, [pc, #300]	@ (8002afc <MX_GPIO_Init+0x148>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4a4a      	ldr	r2, [pc, #296]	@ (8002afc <MX_GPIO_Init+0x148>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029da:	4b48      	ldr	r3, [pc, #288]	@ (8002afc <MX_GPIO_Init+0x148>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	4b44      	ldr	r3, [pc, #272]	@ (8002afc <MX_GPIO_Init+0x148>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a43      	ldr	r2, [pc, #268]	@ (8002afc <MX_GPIO_Init+0x148>)
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <MX_GPIO_Init+0x148>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4b3d      	ldr	r3, [pc, #244]	@ (8002afc <MX_GPIO_Init+0x148>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a3c      	ldr	r2, [pc, #240]	@ (8002afc <MX_GPIO_Init+0x148>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b3a      	ldr	r3, [pc, #232]	@ (8002afc <MX_GPIO_Init+0x148>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a24:	4836      	ldr	r0, [pc, #216]	@ (8002b00 <MX_GPIO_Init+0x14c>)
 8002a26:	f003 fe03 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f241 3130 	movw	r1, #4912	@ 0x1330
 8002a30:	4834      	ldr	r0, [pc, #208]	@ (8002b04 <MX_GPIO_Init+0x150>)
 8002a32:	f003 fdfd 	bl	8006630 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002a3c:	4832      	ldr	r0, [pc, #200]	@ (8002b08 <MX_GPIO_Init+0x154>)
 8002a3e:	f003 fdf7 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 8002a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4829      	ldr	r0, [pc, #164]	@ (8002b00 <MX_GPIO_Init+0x14c>)
 8002a5c:	f003 fc64 	bl	8006328 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002a60:	2302      	movs	r3, #2
 8002a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4619      	mov	r1, r3
 8002a74:	4824      	ldr	r0, [pc, #144]	@ (8002b08 <MX_GPIO_Init+0x154>)
 8002a76:	f003 fc57 	bl	8006328 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 8002a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	4619      	mov	r1, r3
 8002a90:	481c      	ldr	r0, [pc, #112]	@ (8002b04 <MX_GPIO_Init+0x150>)
 8002a92:	f003 fc49 	bl	8006328 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_RIGHT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8002a96:	f241 3330 	movw	r3, #4912	@ 0x1330
 8002a9a:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	4619      	mov	r1, r3
 8002aae:	4815      	ldr	r0, [pc, #84]	@ (8002b04 <MX_GPIO_Init+0x150>)
 8002ab0:	f003 fc3a 	bl	8006328 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_LEFT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin;
 8002ab4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aba:	2301      	movs	r3, #1
 8002abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	4619      	mov	r1, r3
 8002acc:	480e      	ldr	r0, [pc, #56]	@ (8002b08 <MX_GPIO_Init+0x154>)
 8002ace:	f003 fc2b 	bl	8006328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2105      	movs	r1, #5
 8002ad6:	2007      	movs	r0, #7
 8002ad8:	f003 fb5d 	bl	8006196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002adc:	2007      	movs	r0, #7
 8002ade:	f003 fb76 	bl	80061ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2105      	movs	r1, #5
 8002ae6:	2028      	movs	r0, #40	@ 0x28
 8002ae8:	f003 fb55 	bl	8006196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aec:	2028      	movs	r0, #40	@ 0x28
 8002aee:	f003 fb6e 	bl	80061ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002af2:	bf00      	nop
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020800 	.word	0x40020800
 8002b04:	40020400 	.word	0x40020400
 8002b08:	40020000 	.word	0x40020000

08002b0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 8002b16:	f002 fe41 	bl	800579c <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2bc8      	cmp	r3, #200	@ 0xc8
 8002b26:	d919      	bls.n	8002b5c <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d109      	bne.n	8002b42 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 8002b34:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <HAL_GPIO_EXTI_Callback+0x60>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 8002b3a:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <HAL_GPIO_EXTI_Callback+0x64>)
 8002b3c:	f7fe fee8 	bl	8001910 <send_bluetooth_message>
 8002b40:	e009      	b.n	8002b56 <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b48:	d105      	bne.n	8002b56 <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8002b50:	4808      	ldr	r0, [pc, #32]	@ (8002b74 <HAL_GPIO_EXTI_Callback+0x68>)
 8002b52:	f7fe fedd 	bl	8001910 <send_bluetooth_message>
        }
        last_press = current_time;
 8002b56:	4a03      	ldr	r2, [pc, #12]	@ (8002b64 <HAL_GPIO_EXTI_Callback+0x58>)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6013      	str	r3, [r2, #0]
    }
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20001474 	.word	0x20001474
 8002b68:	20001460 	.word	0x20001460
 8002b6c:	20001461 	.word	0x20001461
 8002b70:	0800dde8 	.word	0x0800dde8
 8002b74:	0800de00 	.word	0x0800de00

08002b78 <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b90:	2303      	movs	r3, #3
 8002b92:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4812      	ldr	r0, [pc, #72]	@ (8002be8 <verify_adc_gpio_configuration+0x70>)
 8002b9e:	f003 fbc3 	bl	8006328 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480f      	ldr	r0, [pc, #60]	@ (8002be8 <verify_adc_gpio_configuration+0x70>)
 8002bac:	f003 fbbc 	bl	8006328 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bb0:	2308      	movs	r3, #8
 8002bb2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	480b      	ldr	r0, [pc, #44]	@ (8002be8 <verify_adc_gpio_configuration+0x70>)
 8002bba:	f003 fbb5 	bl	8006328 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4808      	ldr	r0, [pc, #32]	@ (8002be8 <verify_adc_gpio_configuration+0x70>)
 8002bc8:	f003 fbae 	bl	8006328 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bcc:	2320      	movs	r3, #32
 8002bce:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4804      	ldr	r0, [pc, #16]	@ (8002be8 <verify_adc_gpio_configuration+0x70>)
 8002bd6:	f003 fba7 	bl	8006328 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 8002bda:	4804      	ldr	r0, [pc, #16]	@ (8002bec <verify_adc_gpio_configuration+0x74>)
 8002bdc:	f7fe fe98 	bl	8001910 <send_bluetooth_message>
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40020000 	.word	0x40020000
 8002bec:	0800de18 	.word	0x0800de18

08002bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf4:	b672      	cpsid	i
}
 8002bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002bf8:	2110      	movs	r1, #16
 8002bfa:	4806      	ldr	r0, [pc, #24]	@ (8002c14 <Error_Handler+0x24>)
 8002bfc:	f003 fd31 	bl	8006662 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8002c00:	2120      	movs	r1, #32
 8002c02:	4804      	ldr	r0, [pc, #16]	@ (8002c14 <Error_Handler+0x24>)
 8002c04:	f003 fd2d 	bl	8006662 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8002c08:	2064      	movs	r0, #100	@ 0x64
 8002c0a:	f002 fdd3 	bl	80057b4 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8002c0e:	bf00      	nop
 8002c10:	e7f2      	b.n	8002bf8 <Error_Handler+0x8>
 8002c12:	bf00      	nop
 8002c14:	40020400 	.word	0x40020400

08002c18 <championship_micromouse_init>:

/**
 * @brief Initialize championship micromouse system with MMS integration
 */
void championship_micromouse_init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
    // Initialize championship maze
    initialize_championship_maze();
 8002c1c:	f000 f842 	bl	8002ca4 <initialize_championship_maze>

    // Initialize robot state
    robot.x = 0;
 8002c20:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <championship_micromouse_init+0x6c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8002c26:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <championship_micromouse_init+0x6c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <championship_micromouse_init+0x6c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8002c32:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <championship_micromouse_init+0x6c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 8002c38:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <championship_micromouse_init+0x6c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <championship_micromouse_init+0x6c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]

    // Initialize sensors
    memset(&sensors, 0, sizeof(sensors));
 8002c44:	220e      	movs	r2, #14
 8002c46:	2100      	movs	r1, #0
 8002c48:	480f      	ldr	r0, [pc, #60]	@ (8002c88 <championship_micromouse_init+0x70>)
 8002c4a:	f007 fe59 	bl	800a900 <memset>
    memset(&gyro, 0, sizeof(gyro));
 8002c4e:	2212      	movs	r2, #18
 8002c50:	2100      	movs	r1, #0
 8002c52:	480e      	ldr	r0, [pc, #56]	@ (8002c8c <championship_micromouse_init+0x74>)
 8002c54:	f007 fe54 	bl	800a900 <memset>
    memset(&encoders, 0, sizeof(encoders));
 8002c58:	2210      	movs	r2, #16
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	480c      	ldr	r0, [pc, #48]	@ (8002c90 <championship_micromouse_init+0x78>)
 8002c5e:	f007 fe4f 	bl	800a900 <memset>

    // Initialize championship path analysis
    exploration_steps = 0;
 8002c62:	4b0c      	ldr	r3, [pc, #48]	@ (8002c94 <championship_micromouse_init+0x7c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <championship_micromouse_init+0x80>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

    // Initialize gyroscope
    mpu9250_init();
 8002c6e:	f7fe ff6f 	bl	8001b50 <mpu9250_init>

    send_bluetooth_message("Championship micromouse system initialized\r\n");
 8002c72:	480a      	ldr	r0, [pc, #40]	@ (8002c9c <championship_micromouse_init+0x84>)
 8002c74:	f7fe fe4c 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("Based on MMS championship algorithms\r\n");
 8002c78:	4809      	ldr	r0, [pc, #36]	@ (8002ca0 <championship_micromouse_init+0x88>)
 8002c7a:	f7fe fe49 	bl	8001910 <send_bluetooth_message>
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20001418 	.word	0x20001418
 8002c88:	2000142c 	.word	0x2000142c
 8002c8c:	2000143c 	.word	0x2000143c
 8002c90:	20001450 	.word	0x20001450
 8002c94:	20001464 	.word	0x20001464
 8002c98:	20001468 	.word	0x20001468
 8002c9c:	0800de40 	.word	0x0800de40
 8002ca0:	0800de70 	.word	0x0800de70

08002ca4 <initialize_championship_maze>:

/**
 * @brief Initialize maze with championship settings (MMS style)
 */
void initialize_championship_maze(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
    // Initialize all cells
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e03e      	b.n	8002d2e <initialize_championship_maze+0x8a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	e035      	b.n	8002d22 <initialize_championship_maze+0x7e>
            maze[x][y].distance = MAX_DISTANCE;
 8002cb6:	4939      	ldr	r1, [pc, #228]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	011a      	lsls	r2, r3, #4
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002cc8:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 8002cca:	4934      	ldr	r1, [pc, #208]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	011a      	lsls	r2, r3, #4
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 8002cde:	492f      	ldr	r1, [pc, #188]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	011a      	lsls	r2, r3, #4
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	440b      	add	r3, r1
 8002cec:	330c      	adds	r3, #12
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	e00e      	b.n	8002d16 <initialize_championship_maze+0x72>
                maze[x][y].walls[i] = false;
 8002cf8:	4928      	ldr	r1, [pc, #160]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	011a      	lsls	r2, r3, #4
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	18ca      	adds	r2, r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3305      	adds	r3, #5
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3301      	adds	r3, #1
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	dded      	ble.n	8002cf8 <initialize_championship_maze+0x54>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	ddc6      	ble.n	8002cb6 <initialize_championship_maze+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	ddbd      	ble.n	8002cb0 <initialize_championship_maze+0xc>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	e01f      	b.n	8002d7a <initialize_championship_maze+0xd6>
        maze[i][0].walls[SOUTH] = true;           // South boundary
 8002d3a:	4a18      	ldr	r2, [pc, #96]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	4413      	add	r3, r2
 8002d42:	3307      	adds	r3, #7
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true; // North boundary
 8002d48:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	4413      	add	r3, r2
 8002d50:	33f5      	adds	r3, #245	@ 0xf5
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;            // West boundary
 8002d56:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3308      	adds	r3, #8
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;  // East boundary
 8002d64:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	dddc      	ble.n	8002d3a <initialize_championship_maze+0x96>
    }

    // Mark start position as visited
    maze[0][0].visited = true;
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <initialize_championship_maze+0xf8>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	60da      	str	r2, [r3, #12]

    send_bluetooth_message("Championship maze initialized with boundary walls\r\n");
 8002d8c:	4804      	ldr	r0, [pc, #16]	@ (8002da0 <initialize_championship_maze+0xfc>)
 8002d8e:	f7fe fdbf 	bl	8001910 <send_bluetooth_message>
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000418 	.word	0x20000418
 8002da0:	0800de98 	.word	0x0800de98

08002da4 <championship_flood_fill>:
/**
 * @brief Championship flood fill from GOAL position (MMS algorithm)
 * This is the key difference - we flood from destination, not robot
 */
void championship_flood_fill(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 8002daa:	af00      	add	r7, sp, #0
    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8002db2:	e01d      	b.n	8002df0 <championship_flood_fill+0x4c>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002dba:	e010      	b.n	8002dde <championship_flood_fill+0x3a>
            maze[x][y].distance = MAX_DISTANCE;
 8002dbc:	49c8      	ldr	r1, [pc, #800]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002dbe:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002dc2:	011a      	lsls	r2, r3, #4
 8002dc4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002dc8:	4413      	add	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	440b      	add	r3, r1
 8002dce:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002dd2:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002dd4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8002dde:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8002de2:	2b0f      	cmp	r3, #15
 8002de4:	ddea      	ble.n	8002dbc <championship_flood_fill+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8002de6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002dea:	3301      	adds	r3, #1
 8002dec:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8002df0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	dddd      	ble.n	8002db4 <championship_flood_fill+0x10>
        }
    }

    // Set goal distances to 0
    if (!robot.center_reached) {
 8002df8:	4bba      	ldr	r3, [pc, #744]	@ (80030e4 <championship_flood_fill+0x340>)
 8002dfa:	7b1b      	ldrb	r3, [r3, #12]
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02c      	beq.n	8002e60 <championship_flood_fill+0xbc>
        // Exploring to center - flood from center
        maze[goal_x1][goal_y1].distance = 0;
 8002e06:	4bb8      	ldr	r3, [pc, #736]	@ (80030e8 <championship_flood_fill+0x344>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4bb8      	ldr	r3, [pc, #736]	@ (80030ec <championship_flood_fill+0x348>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	49b4      	ldr	r1, [pc, #720]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	4413      	add	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	440b      	add	r3, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y1].distance = 0;
 8002e1c:	4bb4      	ldr	r3, [pc, #720]	@ (80030f0 <championship_flood_fill+0x34c>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4bb2      	ldr	r3, [pc, #712]	@ (80030ec <championship_flood_fill+0x348>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	49ae      	ldr	r1, [pc, #696]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	4413      	add	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
        maze[goal_x1][goal_y2].distance = 0;
 8002e32:	4bad      	ldr	r3, [pc, #692]	@ (80030e8 <championship_flood_fill+0x344>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4baf      	ldr	r3, [pc, #700]	@ (80030f4 <championship_flood_fill+0x350>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	49a9      	ldr	r1, [pc, #676]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002e3c:	0112      	lsls	r2, r2, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	440b      	add	r3, r1
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y2].distance = 0;
 8002e48:	4ba9      	ldr	r3, [pc, #676]	@ (80030f0 <championship_flood_fill+0x34c>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4ba9      	ldr	r3, [pc, #676]	@ (80030f4 <championship_flood_fill+0x350>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	49a3      	ldr	r1, [pc, #652]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002e52:	0112      	lsls	r2, r2, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	440b      	add	r3, r1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e002      	b.n	8002e66 <championship_flood_fill+0xc2>
    } else {
        // Returning to start - flood from start
        maze[0][0].distance = 0;
 8002e60:	4b9f      	ldr	r3, [pc, #636]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]
    }

    // Queue implementation for BFS flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820

    if (!robot.center_reached) {
 8002e72:	4b9c      	ldr	r3, [pc, #624]	@ (80030e4 <championship_flood_fill+0x340>)
 8002e74:	7b1b      	ldrb	r3, [r3, #12]
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d05c      	beq.n	8002f3a <championship_flood_fill+0x196>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8002e80:	4b99      	ldr	r3, [pc, #612]	@ (80030e8 <championship_flood_fill+0x344>)
 8002e82:	6819      	ldr	r1, [r3, #0]
 8002e84:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002e88:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002e8c:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e94:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002e9e:	4a93      	ldr	r2, [pc, #588]	@ (80030ec <championship_flood_fill+0x348>)
 8002ea0:	6811      	ldr	r1, [r2, #0]
 8002ea2:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002ea6:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002eaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 8002eae:	4b90      	ldr	r3, [pc, #576]	@ (80030f0 <championship_flood_fill+0x34c>)
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002eb6:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002eba:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ec2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002ecc:	4a87      	ldr	r2, [pc, #540]	@ (80030ec <championship_flood_fill+0x348>)
 8002ece:	6811      	ldr	r1, [r2, #0]
 8002ed0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002ed4:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002ed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8002edc:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <championship_flood_fill+0x344>)
 8002ede:	6819      	ldr	r1, [r3, #0]
 8002ee0:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002ee4:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002ee8:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ef0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002efa:	4a7e      	ldr	r2, [pc, #504]	@ (80030f4 <championship_flood_fill+0x350>)
 8002efc:	6811      	ldr	r1, [r2, #0]
 8002efe:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f02:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 8002f0a:	4b79      	ldr	r3, [pc, #484]	@ (80030f0 <championship_flood_fill+0x34c>)
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002f12:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002f16:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f1e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002f28:	4a72      	ldr	r2, [pc, #456]	@ (80030f4 <championship_flood_fill+0x350>)
 8002f2a:	6811      	ldr	r1, [r2, #0]
 8002f2c:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f30:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002f38:	e014      	b.n	8002f64 <championship_flood_fill+0x1c0>
    } else {
        queue_x[queue_tail] = 0; queue_y[queue_tail++] = 0;
 8002f3a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002f3e:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002f42:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8002f46:	2100      	movs	r1, #0
 8002f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002f4c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8002f56:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f5a:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f5e:	2100      	movs	r1, #0
 8002f60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Championship flood fill algorithm
    while (queue_head < queue_tail) {
 8002f6a:	e0a7      	b.n	80030bc <championship_flood_fill+0x318>
        int x = queue_x[queue_head];
 8002f6c:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8002f70:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8002f74:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
        int y = queue_y[queue_head++];
 8002f80:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	f8c7 2824 	str.w	r2, [r7, #2084]	@ 0x824
 8002f8a:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8002f8e:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8002f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f96:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 8002fa0:	e087      	b.n	80030b2 <championship_flood_fill+0x30e>
            int nx = x + dx[dir];
 8002fa2:	4a55      	ldr	r2, [pc, #340]	@ (80030f8 <championship_flood_fill+0x354>)
 8002fa4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fac:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
            int ny = y + dy[dir];
 8002fb6:	4a51      	ldr	r2, [pc, #324]	@ (80030fc <championship_flood_fill+0x358>)
 8002fb8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

            // Check bounds and walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8002fca:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db6a      	blt.n	80030a8 <championship_flood_fill+0x304>
 8002fd2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	dc66      	bgt.n	80030a8 <championship_flood_fill+0x304>
 8002fda:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db62      	blt.n	80030a8 <championship_flood_fill+0x304>
 8002fe2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	dc5e      	bgt.n	80030a8 <championship_flood_fill+0x304>
                !maze[x][y].walls[dir]) {
 8002fea:	493d      	ldr	r1, [pc, #244]	@ (80030e0 <championship_flood_fill+0x33c>)
 8002fec:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8002ff0:	011a      	lsls	r2, r3, #4
 8002ff2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8002ff6:	4413      	add	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	18ca      	adds	r2, r1, r3
 8002ffc:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8003000:	4413      	add	r3, r2
 8003002:	3305      	adds	r3, #5
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	f083 0301 	eor.w	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800300c:	2b00      	cmp	r3, #0
 800300e:	d04b      	beq.n	80030a8 <championship_flood_fill+0x304>

                int new_dist = maze[x][y].distance + 1;
 8003010:	4933      	ldr	r1, [pc, #204]	@ (80030e0 <championship_flood_fill+0x33c>)
 8003012:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8003016:	011a      	lsls	r2, r3, #4
 8003018:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800301c:	4413      	add	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

                // Update if we found a shorter path
                if (new_dist < maze[nx][ny].distance) {
 800302a:	492d      	ldr	r1, [pc, #180]	@ (80030e0 <championship_flood_fill+0x33c>)
 800302c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003030:	011a      	lsls	r2, r3, #4
 8003032:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003036:	4413      	add	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	440b      	add	r3, r1
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8003042:	429a      	cmp	r2, r3
 8003044:	da30      	bge.n	80030a8 <championship_flood_fill+0x304>
                    maze[nx][ny].distance = new_dist;
 8003046:	4926      	ldr	r1, [pc, #152]	@ (80030e0 <championship_flood_fill+0x33c>)
 8003048:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800304c:	011a      	lsls	r2, r3, #4
 800304e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003052:	4413      	add	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	440b      	add	r3, r1
 8003058:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 800305c:	601a      	str	r2, [r3, #0]
                    if (queue_tail < 255) {
 800305e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003062:	2bfe      	cmp	r3, #254	@ 0xfe
 8003064:	dc1c      	bgt.n	80030a0 <championship_flood_fill+0x2fc>
                        queue_x[queue_tail] = nx;
 8003066:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800306a:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800306e:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8003072:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8003076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        queue_y[queue_tail++] = ny;
 800307a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8003084:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8003088:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 800308c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8003090:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        send_bluetooth_message("Queue overflow!\r\n");
                        break;
                    }
                    updates++;
 8003094:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8003098:	3301      	adds	r3, #1
 800309a:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 800309e:	e003      	b.n	80030a8 <championship_flood_fill+0x304>
                        send_bluetooth_message("Queue overflow!\r\n");
 80030a0:	4817      	ldr	r0, [pc, #92]	@ (8003100 <championship_flood_fill+0x35c>)
 80030a2:	f7fe fc35 	bl	8001910 <send_bluetooth_message>
                        break;
 80030a6:	e009      	b.n	80030bc <championship_flood_fill+0x318>
        for (int dir = 0; dir < 4; dir++) {
 80030a8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80030ac:	3301      	adds	r3, #1
 80030ae:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 80030b2:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	f77f af73 	ble.w	8002fa2 <championship_flood_fill+0x1fe>
    while (queue_head < queue_tail) {
 80030bc:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80030c0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f6ff af51 	blt.w	8002f6c <championship_flood_fill+0x1c8>
            }
        }
    }

    // Debug output via Bluetooth
    send_bluetooth_printf("Championship flood fill: %d updates\r\n", updates);
 80030ca:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 80030ce:	480d      	ldr	r0, [pc, #52]	@ (8003104 <championship_flood_fill+0x360>)
 80030d0:	f7fe fc34 	bl	800193c <send_bluetooth_printf>
}
 80030d4:	bf00      	nop
 80030d6:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000418 	.word	0x20000418
 80030e4:	20001418 	.word	0x20001418
 80030e8:	0800f060 	.word	0x0800f060
 80030ec:	0800f064 	.word	0x0800f064
 80030f0:	0800f068 	.word	0x0800f068
 80030f4:	0800f06c 	.word	0x0800f06c
 80030f8:	0800f040 	.word	0x0800f040
 80030fc:	0800f050 	.word	0x0800f050
 8003100:	0800decc 	.word	0x0800decc
 8003104:	0800dee0 	.word	0x0800dee0

08003108 <get_championship_direction>:

/**
 * @brief Championship direction selection - NEVER gets stuck (MMS algorithm)
 */
int get_championship_direction(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b093      	sub	sp, #76	@ 0x4c
 800310c:	af00      	add	r7, sp, #0
    int best_dir = robot.direction; // Default to current direction
 800310e:	4b88      	ldr	r3, [pc, #544]	@ (8003330 <get_championship_direction+0x228>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8003114:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003118:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 800311a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800311e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Priority order: straight, right, left, back
    int priority_dirs[4];
    priority_dirs[0] = robot.direction;
 8003126:	4b82      	ldr	r3, [pc, #520]	@ (8003330 <get_championship_direction+0x228>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	603b      	str	r3, [r7, #0]
    priority_dirs[1] = (robot.direction + 1) % 4;
 800312c:	4b80      	ldr	r3, [pc, #512]	@ (8003330 <get_championship_direction+0x228>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	3301      	adds	r3, #1
 8003132:	425a      	negs	r2, r3
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	f002 0203 	and.w	r2, r2, #3
 800313c:	bf58      	it	pl
 800313e:	4253      	negpl	r3, r2
 8003140:	607b      	str	r3, [r7, #4]
    priority_dirs[2] = (robot.direction + 3) % 4;
 8003142:	4b7b      	ldr	r3, [pc, #492]	@ (8003330 <get_championship_direction+0x228>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	3303      	adds	r3, #3
 8003148:	425a      	negs	r2, r3
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	f002 0203 	and.w	r2, r2, #3
 8003152:	bf58      	it	pl
 8003154:	4253      	negpl	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
    priority_dirs[3] = (robot.direction + 2) % 4;
 8003158:	4b75      	ldr	r3, [pc, #468]	@ (8003330 <get_championship_direction+0x228>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	3302      	adds	r3, #2
 800315e:	425a      	negs	r2, r3
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	f002 0203 	and.w	r2, r2, #3
 8003168:	bf58      	it	pl
 800316a:	4253      	negpl	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

    // First pass: look for unvisited cells
    for (int p = 0; p < 4; p++) {
 800316e:	2300      	movs	r3, #0
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
 8003172:	e05b      	b.n	800322c <get_championship_direction+0x124>
        int dir = priority_dirs[p];
 8003174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	3348      	adds	r3, #72	@ 0x48
 800317a:	443b      	add	r3, r7
 800317c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003180:	61bb      	str	r3, [r7, #24]
        int nx = robot.x + dx[dir];
 8003182:	4b6b      	ldr	r3, [pc, #428]	@ (8003330 <get_championship_direction+0x228>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	496b      	ldr	r1, [pc, #428]	@ (8003334 <get_championship_direction+0x22c>)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800318e:	4413      	add	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 8003192:	4b67      	ldr	r3, [pc, #412]	@ (8003330 <get_championship_direction+0x228>)
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4968      	ldr	r1, [pc, #416]	@ (8003338 <get_championship_direction+0x230>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800319e:	4413      	add	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]

        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db3e      	blt.n	8003226 <get_championship_direction+0x11e>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b0f      	cmp	r3, #15
 80031ac:	dc3b      	bgt.n	8003226 <get_championship_direction+0x11e>
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db38      	blt.n	8003226 <get_championship_direction+0x11e>
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b0f      	cmp	r3, #15
 80031b8:	dc35      	bgt.n	8003226 <get_championship_direction+0x11e>
            !maze[robot.x][robot.y].walls[dir]) {
 80031ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003330 <get_championship_direction+0x228>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b5c      	ldr	r3, [pc, #368]	@ (8003330 <get_championship_direction+0x228>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	495e      	ldr	r1, [pc, #376]	@ (800333c <get_championship_direction+0x234>)
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	4413      	add	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	18ca      	adds	r2, r1, r3
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4413      	add	r3, r2
 80031d0:	3305      	adds	r3, #5
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d023      	beq.n	8003226 <get_championship_direction+0x11e>

            // Prefer unvisited cells
            if (maze[nx][ny].visit_count == 0) {
 80031de:	4957      	ldr	r1, [pc, #348]	@ (800333c <get_championship_direction+0x234>)
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	011a      	lsls	r2, r3, #4
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	440b      	add	r3, r1
 80031ec:	330c      	adds	r3, #12
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d118      	bne.n	8003226 <get_championship_direction+0x11e>
                found_unvisited = true;
 80031f4:	2301      	movs	r3, #1
 80031f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if (maze[nx][ny].distance < min_distance) {
 80031fa:	4950      	ldr	r1, [pc, #320]	@ (800333c <get_championship_direction+0x234>)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	011a      	lsls	r2, r3, #4
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	440b      	add	r3, r1
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800320c:	429a      	cmp	r2, r3
 800320e:	dd0a      	ble.n	8003226 <get_championship_direction+0x11e>
                    min_distance = maze[nx][ny].distance;
 8003210:	494a      	ldr	r1, [pc, #296]	@ (800333c <get_championship_direction+0x234>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	011a      	lsls	r2, r3, #4
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	011b      	lsls	r3, r3, #4
 800321c:	440b      	add	r3, r1
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	643b      	str	r3, [r7, #64]	@ 0x40
                    best_dir = dir;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	647b      	str	r3, [r7, #68]	@ 0x44
    for (int p = 0; p < 4; p++) {
 8003226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003228:	3301      	adds	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	@ 0x34
 800322c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322e:	2b03      	cmp	r3, #3
 8003230:	dda0      	ble.n	8003174 <get_championship_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited, find least visited with lowest distance
    if (!found_unvisited) {
 8003232:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003236:	f083 0301 	eor.w	r3, r3, #1
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d06f      	beq.n	8003320 <get_championship_direction+0x218>
        for (int p = 0; p < 4; p++) {
 8003240:	2300      	movs	r3, #0
 8003242:	633b      	str	r3, [r7, #48]	@ 0x30
 8003244:	e069      	b.n	800331a <get_championship_direction+0x212>
            int dir = priority_dirs[p];
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3348      	adds	r3, #72	@ 0x48
 800324c:	443b      	add	r3, r7
 800324e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int nx = robot.x + dx[dir];
 8003254:	4b36      	ldr	r3, [pc, #216]	@ (8003330 <get_championship_direction+0x228>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4936      	ldr	r1, [pc, #216]	@ (8003334 <get_championship_direction+0x22c>)
 800325a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800325c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003260:	4413      	add	r3, r2
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8003264:	4b32      	ldr	r3, [pc, #200]	@ (8003330 <get_championship_direction+0x228>)
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	4933      	ldr	r1, [pc, #204]	@ (8003338 <get_championship_direction+0x230>)
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003270:	4413      	add	r3, r2
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	db4c      	blt.n	8003314 <get_championship_direction+0x20c>
 800327a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327c:	2b0f      	cmp	r3, #15
 800327e:	dc49      	bgt.n	8003314 <get_championship_direction+0x20c>
 8003280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	db46      	blt.n	8003314 <get_championship_direction+0x20c>
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	2b0f      	cmp	r3, #15
 800328a:	dc43      	bgt.n	8003314 <get_championship_direction+0x20c>
                !maze[robot.x][robot.y].walls[dir]) {
 800328c:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <get_championship_direction+0x228>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b27      	ldr	r3, [pc, #156]	@ (8003330 <get_championship_direction+0x228>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4929      	ldr	r1, [pc, #164]	@ (800333c <get_championship_direction+0x234>)
 8003296:	0112      	lsls	r2, r2, #4
 8003298:	4413      	add	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	18ca      	adds	r2, r1, r3
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	4413      	add	r3, r2
 80032a2:	3305      	adds	r3, #5
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d031      	beq.n	8003314 <get_championship_direction+0x20c>

                int neighbor_dist = maze[nx][ny].distance;
 80032b0:	4922      	ldr	r1, [pc, #136]	@ (800333c <get_championship_direction+0x234>)
 80032b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b4:	011a      	lsls	r2, r3, #4
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	4413      	add	r3, r2
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	440b      	add	r3, r1
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	623b      	str	r3, [r7, #32]
                int neighbor_visits = maze[nx][ny].visit_count;
 80032c2:	491e      	ldr	r1, [pc, #120]	@ (800333c <get_championship_direction+0x234>)
 80032c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c6:	011a      	lsls	r2, r3, #4
 80032c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ca:	4413      	add	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	440b      	add	r3, r1
 80032d0:	330c      	adds	r3, #12
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61fb      	str	r3, [r7, #28]

                // Choose based on distance first, then visit count
                if (neighbor_dist < min_distance ||
 80032d6:	6a3a      	ldr	r2, [r7, #32]
 80032d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032da:	429a      	cmp	r2, r3
 80032dc:	db14      	blt.n	8003308 <get_championship_direction+0x200>
 80032de:	6a3a      	ldr	r2, [r7, #32]
 80032e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d103      	bne.n	80032ee <get_championship_direction+0x1e6>
                    (neighbor_dist == min_distance && neighbor_visits < min_visits) ||
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ea:	429a      	cmp	r2, r3
 80032ec:	db0c      	blt.n	8003308 <get_championship_direction+0x200>
 80032ee:	6a3a      	ldr	r2, [r7, #32]
 80032f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10e      	bne.n	8003314 <get_championship_direction+0x20c>
                    (neighbor_dist == min_distance && neighbor_visits == min_visits && dir == robot.direction)) {
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d10a      	bne.n	8003314 <get_championship_direction+0x20c>
 80032fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003330 <get_championship_direction+0x228>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003304:	429a      	cmp	r2, r3
 8003306:	d105      	bne.n	8003314 <get_championship_direction+0x20c>
                    min_distance = neighbor_dist;
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	643b      	str	r3, [r7, #64]	@ 0x40
                    min_visits = neighbor_visits;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    best_dir = dir;
 8003310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003312:	647b      	str	r3, [r7, #68]	@ 0x44
        for (int p = 0; p < 4; p++) {
 8003314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003316:	3301      	adds	r3, #1
 8003318:	633b      	str	r3, [r7, #48]	@ 0x30
 800331a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331c:	2b03      	cmp	r3, #3
 800331e:	dd92      	ble.n	8003246 <get_championship_direction+0x13e>
                }
            }
        }
    }

    return best_dir;
 8003320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003322:	4618      	mov	r0, r3
 8003324:	374c      	adds	r7, #76	@ 0x4c
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20001418 	.word	0x20001418
 8003334:	0800f040 	.word	0x0800f040
 8003338:	0800f050 	.word	0x0800f050
 800333c:	20000418 	.word	0x20000418

08003340 <championship_update_walls>:

/**
 * @brief Update walls based on sensor readings (MMS style)
 */
void championship_update_walls(void)
{
 8003340:	b590      	push	{r4, r7, lr}
 8003342:	b08b      	sub	sp, #44	@ 0x2c
 8003344:	af02      	add	r7, sp, #8
    // Update sensors first
    update_sensors();
 8003346:	f000 ffc7 	bl	80042d8 <update_sensors>

    // Update walls based on current direction
    if (sensors.wall_front) {
 800334a:	4b8a      	ldr	r3, [pc, #552]	@ (8003574 <championship_update_walls+0x234>)
 800334c:	7a9b      	ldrb	r3, [r3, #10]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d041      	beq.n	80033d6 <championship_update_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 8003352:	4b89      	ldr	r3, [pc, #548]	@ (8003578 <championship_update_walls+0x238>)
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	4b88      	ldr	r3, [pc, #544]	@ (8003578 <championship_update_walls+0x238>)
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4b87      	ldr	r3, [pc, #540]	@ (8003578 <championship_update_walls+0x238>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4887      	ldr	r0, [pc, #540]	@ (800357c <championship_update_walls+0x23c>)
 8003360:	0109      	lsls	r1, r1, #4
 8003362:	440a      	add	r2, r1
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	4402      	add	r2, r0
 8003368:	4413      	add	r3, r2
 800336a:	3305      	adds	r3, #5
 800336c:	2201      	movs	r2, #1
 800336e:	701a      	strb	r2, [r3, #0]
        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 8003370:	4b81      	ldr	r3, [pc, #516]	@ (8003578 <championship_update_walls+0x238>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b80      	ldr	r3, [pc, #512]	@ (8003578 <championship_update_walls+0x238>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4981      	ldr	r1, [pc, #516]	@ (8003580 <championship_update_walls+0x240>)
 800337a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800337e:	4413      	add	r3, r2
 8003380:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 8003382:	4b7d      	ldr	r3, [pc, #500]	@ (8003578 <championship_update_walls+0x238>)
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	4b7c      	ldr	r3, [pc, #496]	@ (8003578 <championship_update_walls+0x238>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	497e      	ldr	r1, [pc, #504]	@ (8003584 <championship_update_walls+0x244>)
 800338c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003390:	4413      	add	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	db1d      	blt.n	80033d6 <championship_update_walls+0x96>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2b0f      	cmp	r3, #15
 800339e:	dc1a      	bgt.n	80033d6 <championship_update_walls+0x96>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	db17      	blt.n	80033d6 <championship_update_walls+0x96>
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b0f      	cmp	r3, #15
 80033aa:	dc14      	bgt.n	80033d6 <championship_update_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 80033ac:	4b72      	ldr	r3, [pc, #456]	@ (8003578 <championship_update_walls+0x238>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	3302      	adds	r3, #2
 80033b2:	425a      	negs	r2, r3
 80033b4:	f003 0303 	and.w	r3, r3, #3
 80033b8:	f002 0203 	and.w	r2, r2, #3
 80033bc:	bf58      	it	pl
 80033be:	4253      	negpl	r3, r2
 80033c0:	486e      	ldr	r0, [pc, #440]	@ (800357c <championship_update_walls+0x23c>)
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	0111      	lsls	r1, r2, #4
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	440a      	add	r2, r1
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	4402      	add	r2, r0
 80033ce:	4413      	add	r3, r2
 80033d0:	3305      	adds	r3, #5
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 80033d6:	4b67      	ldr	r3, [pc, #412]	@ (8003574 <championship_update_walls+0x234>)
 80033d8:	7adb      	ldrb	r3, [r3, #11]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d048      	beq.n	8003470 <championship_update_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 80033de:	4b66      	ldr	r3, [pc, #408]	@ (8003578 <championship_update_walls+0x238>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	3303      	adds	r3, #3
 80033e4:	425a      	negs	r2, r3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	bf58      	it	pl
 80033f0:	4253      	negpl	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 80033f4:	4b60      	ldr	r3, [pc, #384]	@ (8003578 <championship_update_walls+0x238>)
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b5f      	ldr	r3, [pc, #380]	@ (8003578 <championship_update_walls+0x238>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	495f      	ldr	r1, [pc, #380]	@ (800357c <championship_update_walls+0x23c>)
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	4413      	add	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	18ca      	adds	r2, r1, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	4413      	add	r3, r2
 800340a:	3305      	adds	r3, #5
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[left_dir];
 8003410:	4b59      	ldr	r3, [pc, #356]	@ (8003578 <championship_update_walls+0x238>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	495a      	ldr	r1, [pc, #360]	@ (8003580 <championship_update_walls+0x240>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800341c:	4413      	add	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8003420:	4b55      	ldr	r3, [pc, #340]	@ (8003578 <championship_update_walls+0x238>)
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	4957      	ldr	r1, [pc, #348]	@ (8003584 <championship_update_walls+0x244>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800342c:	4413      	add	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db1c      	blt.n	8003470 <championship_update_walls+0x130>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b0f      	cmp	r3, #15
 800343a:	dc19      	bgt.n	8003470 <championship_update_walls+0x130>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	db16      	blt.n	8003470 <championship_update_walls+0x130>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b0f      	cmp	r3, #15
 8003446:	dc13      	bgt.n	8003470 <championship_update_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3302      	adds	r3, #2
 800344c:	425a      	negs	r2, r3
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	f002 0203 	and.w	r2, r2, #3
 8003456:	bf58      	it	pl
 8003458:	4253      	negpl	r3, r2
 800345a:	4848      	ldr	r0, [pc, #288]	@ (800357c <championship_update_walls+0x23c>)
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	0111      	lsls	r1, r2, #4
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	440a      	add	r2, r1
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	4402      	add	r2, r0
 8003468:	4413      	add	r3, r2
 800346a:	3305      	adds	r3, #5
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 8003470:	4b40      	ldr	r3, [pc, #256]	@ (8003574 <championship_update_walls+0x234>)
 8003472:	7b1b      	ldrb	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d048      	beq.n	800350a <championship_update_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 8003478:	4b3f      	ldr	r3, [pc, #252]	@ (8003578 <championship_update_walls+0x238>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	3301      	adds	r3, #1
 800347e:	425a      	negs	r2, r3
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	f002 0203 	and.w	r2, r2, #3
 8003488:	bf58      	it	pl
 800348a:	4253      	negpl	r3, r2
 800348c:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 800348e:	4b3a      	ldr	r3, [pc, #232]	@ (8003578 <championship_update_walls+0x238>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <championship_update_walls+0x238>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4939      	ldr	r1, [pc, #228]	@ (800357c <championship_update_walls+0x23c>)
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	4413      	add	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	18ca      	adds	r2, r1, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4413      	add	r3, r2
 80034a4:	3305      	adds	r3, #5
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[right_dir];
 80034aa:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <championship_update_walls+0x238>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4934      	ldr	r1, [pc, #208]	@ (8003580 <championship_update_walls+0x240>)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034b6:	4413      	add	r3, r2
 80034b8:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 80034ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <championship_update_walls+0x238>)
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	4931      	ldr	r1, [pc, #196]	@ (8003584 <championship_update_walls+0x244>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034c6:	4413      	add	r3, r2
 80034c8:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db1c      	blt.n	800350a <championship_update_walls+0x1ca>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	dc19      	bgt.n	800350a <championship_update_walls+0x1ca>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db16      	blt.n	800350a <championship_update_walls+0x1ca>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	dc13      	bgt.n	800350a <championship_update_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	3302      	adds	r3, #2
 80034e6:	425a      	negs	r2, r3
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	f002 0203 	and.w	r2, r2, #3
 80034f0:	bf58      	it	pl
 80034f2:	4253      	negpl	r3, r2
 80034f4:	4821      	ldr	r0, [pc, #132]	@ (800357c <championship_update_walls+0x23c>)
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	0111      	lsls	r1, r2, #4
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	440a      	add	r2, r1
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	4402      	add	r2, r0
 8003502:	4413      	add	r3, r2
 8003504:	3305      	adds	r3, #5
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
        }
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 800350a:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <championship_update_walls+0x238>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b1a      	ldr	r3, [pc, #104]	@ (8003578 <championship_update_walls+0x238>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	491a      	ldr	r1, [pc, #104]	@ (800357c <championship_update_walls+0x23c>)
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	4413      	add	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	440b      	add	r3, r1
 800351c:	3304      	adds	r3, #4
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <championship_update_walls+0x238>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b14      	ldr	r3, [pc, #80]	@ (8003578 <championship_update_walls+0x238>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4814      	ldr	r0, [pc, #80]	@ (800357c <championship_update_walls+0x23c>)
 800352c:	0111      	lsls	r1, r2, #4
 800352e:	4419      	add	r1, r3
 8003530:	0109      	lsls	r1, r1, #4
 8003532:	4401      	add	r1, r0
 8003534:	310c      	adds	r1, #12
 8003536:	6809      	ldr	r1, [r1, #0]
 8003538:	3101      	adds	r1, #1
 800353a:	4810      	ldr	r0, [pc, #64]	@ (800357c <championship_update_walls+0x23c>)
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	4413      	add	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	4403      	add	r3, r0
 8003544:	330c      	adds	r3, #12
 8003546:	6019      	str	r1, [r3, #0]

    // Debug output
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <championship_update_walls+0x238>)
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <championship_update_walls+0x238>)
 800354e:	685a      	ldr	r2, [r3, #4]
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003550:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <championship_update_walls+0x234>)
 8003552:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003554:	461c      	mov	r4, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <championship_update_walls+0x234>)
 8003558:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 800355a:	4618      	mov	r0, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <championship_update_walls+0x234>)
 800355e:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003560:	9301      	str	r3, [sp, #4]
 8003562:	9000      	str	r0, [sp, #0]
 8003564:	4623      	mov	r3, r4
 8003566:	4808      	ldr	r0, [pc, #32]	@ (8003588 <championship_update_walls+0x248>)
 8003568:	f7fe f9e8 	bl	800193c <send_bluetooth_printf>
}
 800356c:	bf00      	nop
 800356e:	3724      	adds	r7, #36	@ 0x24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}
 8003574:	2000142c 	.word	0x2000142c
 8003578:	20001418 	.word	0x20001418
 800357c:	20000418 	.word	0x20000418
 8003580:	0800f040 	.word	0x0800f040
 8003584:	0800f050 	.word	0x0800f050
 8003588:	0800df08 	.word	0x0800df08

0800358c <turn_to_direction>:

/**
 * @brief Turn robot to face target direction (MMS style)
 */
void turn_to_direction(int target_dir)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
    while (robot.direction != target_dir) {
 8003594:	e041      	b.n	800361a <turn_to_direction+0x8e>
        int turn_diff = (target_dir - robot.direction + 4) % 4;
 8003596:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <turn_to_direction+0xa4>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	3304      	adds	r3, #4
 80035a0:	425a      	negs	r2, r3
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	f002 0203 	and.w	r2, r2, #3
 80035aa:	bf58      	it	pl
 80035ac:	4253      	negpl	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

        if (turn_diff == 1) {
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10e      	bne.n	80035d4 <turn_to_direction+0x48>
            turn_right();
 80035b6:	f000 fc89 	bl	8003ecc <turn_right>
            robot.direction = (robot.direction + 1) % 4;
 80035ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <turn_to_direction+0xa4>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	3301      	adds	r3, #1
 80035c0:	425a      	negs	r2, r3
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	f002 0203 	and.w	r2, r2, #3
 80035ca:	bf58      	it	pl
 80035cc:	4253      	negpl	r3, r2
 80035ce:	4a18      	ldr	r2, [pc, #96]	@ (8003630 <turn_to_direction+0xa4>)
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	e022      	b.n	800361a <turn_to_direction+0x8e>
        } else if (turn_diff == 3) {
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d10e      	bne.n	80035f8 <turn_to_direction+0x6c>
            turn_left();
 80035da:	f000 fc37 	bl	8003e4c <turn_left>
            robot.direction = (robot.direction + 3) % 4;
 80035de:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <turn_to_direction+0xa4>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	3303      	adds	r3, #3
 80035e4:	425a      	negs	r2, r3
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	bf58      	it	pl
 80035f0:	4253      	negpl	r3, r2
 80035f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003630 <turn_to_direction+0xa4>)
 80035f4:	6093      	str	r3, [r2, #8]
 80035f6:	e010      	b.n	800361a <turn_to_direction+0x8e>
        } else if (turn_diff == 2) {
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d10d      	bne.n	800361a <turn_to_direction+0x8e>
            turn_around();
 80035fe:	f000 fca5 	bl	8003f4c <turn_around>
            robot.direction = (robot.direction + 2) % 4;
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <turn_to_direction+0xa4>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	3302      	adds	r3, #2
 8003608:	425a      	negs	r2, r3
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	f002 0203 	and.w	r2, r2, #3
 8003612:	bf58      	it	pl
 8003614:	4253      	negpl	r3, r2
 8003616:	4a06      	ldr	r2, [pc, #24]	@ (8003630 <turn_to_direction+0xa4>)
 8003618:	6093      	str	r3, [r2, #8]
    while (robot.direction != target_dir) {
 800361a:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <turn_to_direction+0xa4>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d1b8      	bne.n	8003596 <turn_to_direction+0xa>
        }
    }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20001418 	.word	0x20001418

08003634 <championship_move_forward>:

/**
 * @brief Move robot forward one cell (MMS style)
 */
bool championship_move_forward(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
    update_sensors();// neww
 8003638:	f000 fe4e 	bl	80042d8 <update_sensors>
    // Check for wall before moving
    if (sensors.wall_front) {
 800363c:	4b0b      	ldr	r3, [pc, #44]	@ (800366c <championship_move_forward+0x38>)
 800363e:	7a9b      	ldrb	r3, [r3, #10]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d004      	beq.n	800364e <championship_move_forward+0x1a>
        send_bluetooth_message("Front wall detected, cannot move\r\n");
 8003644:	480a      	ldr	r0, [pc, #40]	@ (8003670 <championship_move_forward+0x3c>)
 8003646:	f7fe f963 	bl	8001910 <send_bluetooth_message>
        return false;
 800364a:	2300      	movs	r3, #0
 800364c:	e00c      	b.n	8003668 <championship_move_forward+0x34>
    }

    move_forward();  	//move_forward_cell_scurve();
 800364e:	f000 fb8f 	bl	8003d70 <move_forward>
    robot.exploration_steps++;
 8003652:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <championship_move_forward+0x40>)
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	3301      	adds	r3, #1
 8003658:	4a06      	ldr	r2, [pc, #24]	@ (8003674 <championship_move_forward+0x40>)
 800365a:	6113      	str	r3, [r2, #16]
    exploration_steps++;
 800365c:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <championship_move_forward+0x44>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <championship_move_forward+0x44>)
 8003664:	6013      	str	r3, [r2, #0]

    return true;
 8003666:	2301      	movs	r3, #1
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000142c 	.word	0x2000142c
 8003670:	0800df34 	.word	0x0800df34
 8003674:	20001418 	.word	0x20001418
 8003678:	20001464 	.word	0x20001464

0800367c <is_at_goal>:

/**
 * @brief Check if robot is at goal (MMS style)
 */
bool is_at_goal(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8003680:	4b1c      	ldr	r3, [pc, #112]	@ (80036f4 <is_at_goal+0x78>)
 8003682:	7b1b      	ldrb	r3, [r3, #12]
 8003684:	f083 0301 	eor.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01e      	beq.n	80036cc <is_at_goal+0x50>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 800368e:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <is_at_goal+0x78>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <is_at_goal+0x7c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d005      	beq.n	80036a6 <is_at_goal+0x2a>
 800369a:	4b16      	ldr	r3, [pc, #88]	@ (80036f4 <is_at_goal+0x78>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <is_at_goal+0x80>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d10d      	bne.n	80036c2 <is_at_goal+0x46>
               (robot.y == goal_y1 || robot.y == goal_y2);
 80036a6:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <is_at_goal+0x78>)
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <is_at_goal+0x84>)
 80036ac:	681b      	ldr	r3, [r3, #0]
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d005      	beq.n	80036be <is_at_goal+0x42>
               (robot.y == goal_y1 || robot.y == goal_y2);
 80036b2:	4b10      	ldr	r3, [pc, #64]	@ (80036f4 <is_at_goal+0x78>)
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	4b13      	ldr	r3, [pc, #76]	@ (8003704 <is_at_goal+0x88>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d101      	bne.n	80036c2 <is_at_goal+0x46>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <is_at_goal+0x48>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e00d      	b.n	80036e8 <is_at_goal+0x6c>
    } else {
        return robot.x == 0 && robot.y == 0;
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <is_at_goal+0x78>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <is_at_goal+0x64>
 80036d4:	4b07      	ldr	r3, [pc, #28]	@ (80036f4 <is_at_goal+0x78>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <is_at_goal+0x64>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <is_at_goal+0x66>
 80036e0:	2300      	movs	r3, #0
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	b2db      	uxtb	r3, r3
    }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20001418 	.word	0x20001418
 80036f8:	0800f060 	.word	0x0800f060
 80036fc:	0800f068 	.word	0x0800f068
 8003700:	0800f064 	.word	0x0800f064
 8003704:	0800f06c 	.word	0x0800f06c

08003708 <championship_exploration_with_analysis>:

/**
 * @brief Main championship exploration algorithm with MMS integration
 */
void championship_exploration_with_analysis(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	@ 0x28
 800370c:	af00      	add	r7, sp, #0
    send_bluetooth_message("Starting championship exploration\r\n");
 800370e:	4881      	ldr	r0, [pc, #516]	@ (8003914 <championship_exploration_with_analysis+0x20c>)
 8003710:	f7fe f8fe 	bl	8001910 <send_bluetooth_message>

    int step_count = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
    const int max_steps = 1000;
 8003718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371c:	613b      	str	r3, [r7, #16]

    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 800371e:	e0c0      	b.n	80038a2 <championship_exploration_with_analysis+0x19a>
        send_bluetooth_printf("Step %d: Robot at (%d,%d)\r\n", step_count, robot.x, robot.y);
 8003720:	4b7d      	ldr	r3, [pc, #500]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b7c      	ldr	r3, [pc, #496]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800372a:	487c      	ldr	r0, [pc, #496]	@ (800391c <championship_exploration_with_analysis+0x214>)
 800372c:	f7fe f906 	bl	800193c <send_bluetooth_printf>

        // Update walls and run championship flood fill
        championship_update_walls();
 8003730:	f7ff fe06 	bl	8003340 <championship_update_walls>
        championship_flood_fill();
 8003734:	f7ff fb36 	bl	8002da4 <championship_flood_fill>

        // Check if goal reached
        if (is_at_goal()) {
 8003738:	f7ff ffa0 	bl	800367c <is_at_goal>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d032      	beq.n	80037a8 <championship_exploration_with_analysis+0xa0>
            if (!robot.center_reached) {
 8003742:	4b75      	ldr	r3, [pc, #468]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 8003744:	7b1b      	ldrb	r3, [r3, #12]
 8003746:	f083 0301 	eor.w	r3, r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d024      	beq.n	800379a <championship_exploration_with_analysis+0x92>
                send_bluetooth_message("CENTER REACHED! Switching to return mode\r\n");
 8003750:	4873      	ldr	r0, [pc, #460]	@ (8003920 <championship_exploration_with_analysis+0x218>)
 8003752:	f7fe f8dd 	bl	8001910 <send_bluetooth_message>
                robot.center_reached = true;
 8003756:	4b70      	ldr	r3, [pc, #448]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 8003758:	2201      	movs	r2, #1
 800375a:	731a      	strb	r2, [r3, #12]
                play_confirmation_tone();
 800375c:	f7fd fc2c 	bl	8000fb8 <play_confirmation_tone>

                // Reset visit counts for return journey
                for (int x = 0; x < MAZE_SIZE; x++) {
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
 8003764:	e015      	b.n	8003792 <championship_exploration_with_analysis+0x8a>
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	e00c      	b.n	8003786 <championship_exploration_with_analysis+0x7e>
                        maze[x][y].visit_count = 0;
 800376c:	496d      	ldr	r1, [pc, #436]	@ (8003924 <championship_exploration_with_analysis+0x21c>)
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	011a      	lsls	r2, r3, #4
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	440b      	add	r3, r1
 800377a:	330c      	adds	r3, #12
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	3301      	adds	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b0f      	cmp	r3, #15
 800378a:	ddef      	ble.n	800376c <championship_exploration_with_analysis+0x64>
                for (int x = 0; x < MAZE_SIZE; x++) {
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	3301      	adds	r3, #1
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b0f      	cmp	r3, #15
 8003796:	dde6      	ble.n	8003766 <championship_exploration_with_analysis+0x5e>
 8003798:	e006      	b.n	80037a8 <championship_exploration_with_analysis+0xa0>
                    }
                }
            } else {
                send_bluetooth_message("RETURNED TO START! Exploration complete!\r\n");
 800379a:	4863      	ldr	r0, [pc, #396]	@ (8003928 <championship_exploration_with_analysis+0x220>)
 800379c:	f7fe f8b8 	bl	8001910 <send_bluetooth_message>
                robot.returned_to_start = true;
 80037a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	735a      	strb	r2, [r3, #13]
                break;
 80037a6:	e090      	b.n	80038ca <championship_exploration_with_analysis+0x1c2>
            }
        }

        // Get championship direction
        int next_dir = get_championship_direction();
 80037a8:	f7ff fcae 	bl	8003108 <get_championship_direction>
 80037ac:	60f8      	str	r0, [r7, #12]
        send_bluetooth_printf("Championship direction: %d\r\n", next_dir);
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	485e      	ldr	r0, [pc, #376]	@ (800392c <championship_exploration_with_analysis+0x224>)
 80037b2:	f7fe f8c3 	bl	800193c <send_bluetooth_printf>

        // Turn and move
        turn_to_direction(next_dir);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7ff fee8 	bl	800358c <turn_to_direction>

        if (championship_move_forward()) {
 80037bc:	f7ff ff3a 	bl	8003634 <championship_move_forward>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <championship_exploration_with_analysis+0xda>
            // Update LED status
            if (robot.center_reached) {
 80037c6:	4b54      	ldr	r3, [pc, #336]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80037c8:	7b1b      	ldrb	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d004      	beq.n	80037d8 <championship_exploration_with_analysis+0xd0>
                led_status(0, 1); // Right LED for return journey
 80037ce:	2101      	movs	r1, #1
 80037d0:	2000      	movs	r0, #0
 80037d2:	f001 ff2f 	bl	8005634 <led_status>
 80037d6:	e05e      	b.n	8003896 <championship_exploration_with_analysis+0x18e>
            } else {
                led_status(1, 0); // Left LED for exploration
 80037d8:	2100      	movs	r1, #0
 80037da:	2001      	movs	r0, #1
 80037dc:	f001 ff2a 	bl	8005634 <led_status>
 80037e0:	e059      	b.n	8003896 <championship_exploration_with_analysis+0x18e>
            }
        } else {
            send_bluetooth_message("Movement blocked - trying alternatives\r\n");
 80037e2:	4853      	ldr	r0, [pc, #332]	@ (8003930 <championship_exploration_with_analysis+0x228>)
 80037e4:	f7fe f894 	bl	8001910 <send_bluetooth_message>
            // Try other directions if blocked
            bool moved = false;
 80037e8:	2300      	movs	r3, #0
 80037ea:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e03e      	b.n	8003870 <championship_exploration_with_analysis+0x168>
                if (alt_dir != next_dir) {
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d037      	beq.n	800386a <championship_exploration_with_analysis+0x162>
                    int nx = robot.x + dx[alt_dir];
 80037fa:	4b47      	ldr	r3, [pc, #284]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	494d      	ldr	r1, [pc, #308]	@ (8003934 <championship_exploration_with_analysis+0x22c>)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003806:	4413      	add	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]
                    int ny = robot.y + dy[alt_dir];
 800380a:	4b43      	ldr	r3, [pc, #268]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	494a      	ldr	r1, [pc, #296]	@ (8003938 <championship_exploration_with_analysis+0x230>)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003816:	4413      	add	r3, r2
 8003818:	607b      	str	r3, [r7, #4]
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db24      	blt.n	800386a <championship_exploration_with_analysis+0x162>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	dc21      	bgt.n	800386a <championship_exploration_with_analysis+0x162>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	db1e      	blt.n	800386a <championship_exploration_with_analysis+0x162>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	dc1b      	bgt.n	800386a <championship_exploration_with_analysis+0x162>
                        !maze[robot.x][robot.y].walls[alt_dir]) {
 8003832:	4b39      	ldr	r3, [pc, #228]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	4b38      	ldr	r3, [pc, #224]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	493a      	ldr	r1, [pc, #232]	@ (8003924 <championship_exploration_with_analysis+0x21c>)
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	4413      	add	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	18ca      	adds	r2, r1, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	4413      	add	r3, r2
 8003848:	3305      	adds	r3, #5
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	f083 0301 	eor.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <championship_exploration_with_analysis+0x162>
                        turn_to_direction(alt_dir);
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7ff fe98 	bl	800358c <turn_to_direction>
                        if (championship_move_forward()) {
 800385c:	f7ff feea 	bl	8003634 <championship_move_forward>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <championship_exploration_with_analysis+0x162>
                            moved = true;
 8003866:	2301      	movs	r3, #1
 8003868:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b03      	cmp	r3, #3
 8003874:	dc05      	bgt.n	8003882 <championship_exploration_with_analysis+0x17a>
 8003876:	7efb      	ldrb	r3, [r7, #27]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1b7      	bne.n	80037f2 <championship_exploration_with_analysis+0xea>
                        }
                    }
                }
            }

            if (!moved) {
 8003882:	7efb      	ldrb	r3, [r7, #27]
 8003884:	f083 0301 	eor.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <championship_exploration_with_analysis+0x18e>
                send_bluetooth_message("All directions blocked!\r\n");
 800388e:	482b      	ldr	r0, [pc, #172]	@ (800393c <championship_exploration_with_analysis+0x234>)
 8003890:	f7fe f83e 	bl	8001910 <send_bluetooth_message>
                break;
 8003894:	e019      	b.n	80038ca <championship_exploration_with_analysis+0x1c2>
            }
        }

        step_count++;
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	3301      	adds	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_Delay(10); // Small delay for stability
 800389c:	200a      	movs	r0, #10
 800389e:	f001 ff89 	bl	80057b4 <HAL_Delay>
    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 80038a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	da0f      	bge.n	80038ca <championship_exploration_with_analysis+0x1c2>
 80038aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80038ac:	7b1b      	ldrb	r3, [r3, #12]
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f af33 	bne.w	8003720 <championship_exploration_with_analysis+0x18>
 80038ba:	4b17      	ldr	r3, [pc, #92]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80038bc:	7b5b      	ldrb	r3, [r3, #13]
 80038be:	f083 0301 	eor.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f af2b 	bne.w	8003720 <championship_exploration_with_analysis+0x18>
    }

    // Final status
    led_status(0, 0);
 80038ca:	2100      	movs	r1, #0
 80038cc:	2000      	movs	r0, #0
 80038ce:	f001 feb1 	bl	8005634 <led_status>
    send_bluetooth_printf("Exploration completed in %d moves\r\n", robot.exploration_steps);
 80038d2:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4819      	ldr	r0, [pc, #100]	@ (8003940 <championship_exploration_with_analysis+0x238>)
 80038da:	f7fe f82f 	bl	800193c <send_bluetooth_printf>

    // Execute perfect path analysis if exploration successful
    if (robot.center_reached && robot.returned_to_start) {
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80038e0:	7b1b      	ldrb	r3, [r3, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <championship_exploration_with_analysis+0x1f6>
 80038e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <championship_exploration_with_analysis+0x210>)
 80038e8:	7b5b      	ldrb	r3, [r3, #13]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <championship_exploration_with_analysis+0x1f6>
        send_bluetooth_message("\r\nExploration successful! Starting path analysis...\r\n");
 80038ee:	4815      	ldr	r0, [pc, #84]	@ (8003944 <championship_exploration_with_analysis+0x23c>)
 80038f0:	f7fe f80e 	bl	8001910 <send_bluetooth_message>
        execute_championship_path_analysis();
 80038f4:	f000 f82a 	bl	800394c <execute_championship_path_analysis>
        play_success_tone();
 80038f8:	f7fd fb70 	bl	8000fdc <play_success_tone>
 80038fc:	e005      	b.n	800390a <championship_exploration_with_analysis+0x202>
    } else {
        send_bluetooth_message("Exploration incomplete - path analysis not available\r\n");
 80038fe:	4812      	ldr	r0, [pc, #72]	@ (8003948 <championship_exploration_with_analysis+0x240>)
 8003900:	f7fe f806 	bl	8001910 <send_bluetooth_message>
        play_error_tone();
 8003904:	f7fd fb96 	bl	8001034 <play_error_tone>
    }
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3728      	adds	r7, #40	@ 0x28
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	0800df58 	.word	0x0800df58
 8003918:	20001418 	.word	0x20001418
 800391c:	0800df7c 	.word	0x0800df7c
 8003920:	0800df98 	.word	0x0800df98
 8003924:	20000418 	.word	0x20000418
 8003928:	0800dfc4 	.word	0x0800dfc4
 800392c:	0800dff0 	.word	0x0800dff0
 8003930:	0800e010 	.word	0x0800e010
 8003934:	0800f040 	.word	0x0800f040
 8003938:	0800f050 	.word	0x0800f050
 800393c:	0800e03c 	.word	0x0800e03c
 8003940:	0800e058 	.word	0x0800e058
 8003944:	0800e07c 	.word	0x0800e07c
 8003948:	0800e0b4 	.word	0x0800e0b4

0800394c <execute_championship_path_analysis>:

/**
 * @brief Execute championship path analysis (MMS style)
 */
void execute_championship_path_analysis(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PATH ANALYSIS ===\r\n");
 8003950:	4810      	ldr	r0, [pc, #64]	@ (8003994 <execute_championship_path_analysis+0x48>)
 8003952:	f7fd ffdd 	bl	8001910 <send_bluetooth_message>

    // Calculate optimal path from explored areas
    calculate_optimal_path_from_explored_areas();
 8003956:	f7fd fb87 	bl	8001068 <calculate_optimal_path_from_explored_areas>

    // Comprehensive maze performance analysis
    analyze_championship_maze_performance();
 800395a:	f7fd fe17 	bl	800158c <analyze_championship_maze_performance>

    // Print optimal distance map
    print_championship_distance_map();
 800395e:	f7fd ff47 	bl	80017f0 <print_championship_distance_map>

    // Visualize optimal path (would work with MMS visualization)
    send_bluetooth_message("\r\n🎯 CHAMPIONSHIP ANALYSIS COMPLETE!\r\n");
 8003962:	480d      	ldr	r0, [pc, #52]	@ (8003998 <execute_championship_path_analysis+0x4c>)
 8003964:	f7fd ffd4 	bl	8001910 <send_bluetooth_message>

    if (theoretical_minimum < MAX_DISTANCE) {
 8003968:	4b0c      	ldr	r3, [pc, #48]	@ (800399c <execute_championship_path_analysis+0x50>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f242 720e 	movw	r2, #9998	@ 0x270e
 8003970:	4293      	cmp	r3, r2
 8003972:	dc09      	bgt.n	8003988 <execute_championship_path_analysis+0x3c>
        send_bluetooth_printf("Optimal path through explored areas: %d steps!\r\n", theoretical_minimum);
 8003974:	4b09      	ldr	r3, [pc, #36]	@ (800399c <execute_championship_path_analysis+0x50>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	4809      	ldr	r0, [pc, #36]	@ (80039a0 <execute_championship_path_analysis+0x54>)
 800397c:	f7fd ffde 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_message("✅ Ready for IEEE Micromouse competition!\r\n");
 8003980:	4808      	ldr	r0, [pc, #32]	@ (80039a4 <execute_championship_path_analysis+0x58>)
 8003982:	f7fd ffc5 	bl	8001910 <send_bluetooth_message>
    } else {
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
    }
}
 8003986:	e002      	b.n	800398e <execute_championship_path_analysis+0x42>
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
 8003988:	4807      	ldr	r0, [pc, #28]	@ (80039a8 <execute_championship_path_analysis+0x5c>)
 800398a:	f7fd ffc1 	bl	8001910 <send_bluetooth_message>
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	0800e0ec 	.word	0x0800e0ec
 8003998:	0800e114 	.word	0x0800e114
 800399c:	20001468 	.word	0x20001468
 80039a0:	0800e140 	.word	0x0800e140
 80039a4:	0800e174 	.word	0x0800e174
 80039a8:	0800e1a4 	.word	0x0800e1a4

080039ac <reset_championship_micromouse>:

/**
 * @brief Reset championship micromouse to initial state
 */
void reset_championship_micromouse(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
    robot.x = 0;
 80039b0:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <reset_championship_micromouse+0x48>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <reset_championship_micromouse+0x48>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80039bc:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <reset_championship_micromouse+0x48>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <reset_championship_micromouse+0x48>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80039c8:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <reset_championship_micromouse+0x48>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <reset_championship_micromouse+0x48>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]

    exploration_steps = 0;
 80039d4:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <reset_championship_micromouse+0x4c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <reset_championship_micromouse+0x50>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]

    initialize_championship_maze();
 80039e0:	f7ff f960 	bl	8002ca4 <initialize_championship_maze>
    send_bluetooth_message("Championship micromouse reset to initial state\r\n");
 80039e4:	4806      	ldr	r0, [pc, #24]	@ (8003a00 <reset_championship_micromouse+0x54>)
 80039e6:	f7fd ff93 	bl	8001910 <send_bluetooth_message>
    play_startup_tone();
 80039ea:	f7fd fac9 	bl	8000f80 <play_startup_tone>
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20001418 	.word	0x20001418
 80039f8:	20001464 	.word	0x20001464
 80039fc:	20001468 	.word	0x20001468
 8003a00:	0800e1d8 	.word	0x0800e1d8

08003a04 <championship_speed_run>:

/**
 * @brief Championship speed run with MMS path analysis
 */
void championship_speed_run(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 CHAMPIONSHIP SPEED RUN MODE!\r\n");
 8003a08:	4804      	ldr	r0, [pc, #16]	@ (8003a1c <championship_speed_run+0x18>)
 8003a0a:	f7fd ff81 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("Using MMS optimal path analysis\r\n");
 8003a0e:	4804      	ldr	r0, [pc, #16]	@ (8003a20 <championship_speed_run+0x1c>)
 8003a10:	f7fd ff7e 	bl	8001910 <send_bluetooth_message>

    // Use the advanced speed run implementation
    speed_run();
 8003a14:	f000 f806 	bl	8003a24 <speed_run>
}
 8003a18:	bf00      	nop
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	0800e20c 	.word	0x0800e20c
 8003a20:	0800e234 	.word	0x0800e234

08003a24 <speed_run>:

/**
 * @brief Simple speed run implementation
 */
void speed_run(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 SPEED RUN MODE ACTIVATED!\r\n");
 8003a2a:	4864      	ldr	r0, [pc, #400]	@ (8003bbc <speed_run+0x198>)
 8003a2c:	f7fd ff70 	bl	8001910 <send_bluetooth_message>

    // Check if exploration was completed
    if (!robot.center_reached || !robot.returned_to_start) {
 8003a30:	4b63      	ldr	r3, [pc, #396]	@ (8003bc0 <speed_run+0x19c>)
 8003a32:	7b1b      	ldrb	r3, [r3, #12]
 8003a34:	f083 0301 	eor.w	r3, r3, #1
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <speed_run+0x28>
 8003a3e:	4b60      	ldr	r3, [pc, #384]	@ (8003bc0 <speed_run+0x19c>)
 8003a40:	7b5b      	ldrb	r3, [r3, #13]
 8003a42:	f083 0301 	eor.w	r3, r3, #1
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <speed_run+0x30>
        send_bluetooth_message("❌ Speed run not available - exploration not complete\r\n");
 8003a4c:	485d      	ldr	r0, [pc, #372]	@ (8003bc4 <speed_run+0x1a0>)
 8003a4e:	f7fd ff5f 	bl	8001910 <send_bluetooth_message>
        return;
 8003a52:	e0b0      	b.n	8003bb6 <speed_run+0x192>
    }

    send_bluetooth_message("Using championship algorithms for optimal speed run\r\n");
 8003a54:	485c      	ldr	r0, [pc, #368]	@ (8003bc8 <speed_run+0x1a4>)
 8003a56:	f7fd ff5b 	bl	8001910 <send_bluetooth_message>

    // Reset robot position
    robot.x = 0;
 8003a5a:	4b59      	ldr	r3, [pc, #356]	@ (8003bc0 <speed_run+0x19c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8003a60:	4b57      	ldr	r3, [pc, #348]	@ (8003bc0 <speed_run+0x19c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 8003a66:	4b56      	ldr	r3, [pc, #344]	@ (8003bc0 <speed_run+0x19c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]

    // Status indication
    led_status(1, 1); // Both LEDs on
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f001 fde0 	bl	8005634 <led_status>
    play_confirmation_tone();
 8003a74:	f7fd faa0 	bl	8000fb8 <play_confirmation_tone>

    // Wait for confirmation
    send_bluetooth_message("Press RIGHT button to execute speed run...\r\n"); //later change to hand movement
 8003a78:	4854      	ldr	r0, [pc, #336]	@ (8003bcc <speed_run+0x1a8>)
 8003a7a:	f7fd ff49 	bl	8001910 <send_bluetooth_message>

    uint32_t start_time = HAL_GetTick();
 8003a7e:	f001 fe8d 	bl	800579c <HAL_GetTick>
 8003a82:	60f8      	str	r0, [r7, #12]
    bool execute_run = false;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]

    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 8003a88:	e00d      	b.n	8003aa6 <speed_run+0x82>
        if (button_pressed == 2) { // Right button
 8003a8a:	4b51      	ldr	r3, [pc, #324]	@ (8003bd0 <speed_run+0x1ac>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d105      	bne.n	8003aa0 <speed_run+0x7c>
            button_pressed = 0;
 8003a94:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <speed_run+0x1ac>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
            execute_run = true;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
            break;
 8003a9e:	e00b      	b.n	8003ab8 <speed_run+0x94>
        }
        HAL_Delay(100);
 8003aa0:	2064      	movs	r0, #100	@ 0x64
 8003aa2:	f001 fe87 	bl	80057b4 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 8003aa6:	f001 fe79 	bl	800579c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d9e8      	bls.n	8003a8a <speed_run+0x66>
    }

    if (!execute_run) {
 8003ab8:	7dfb      	ldrb	r3, [r7, #23]
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <speed_run+0xb0>
        send_bluetooth_message("⏰ Speed run cancelled - timeout\r\n");
 8003ac4:	4843      	ldr	r0, [pc, #268]	@ (8003bd4 <speed_run+0x1b0>)
 8003ac6:	f7fd ff23 	bl	8001910 <send_bluetooth_message>
        led_status(0, 0);
 8003aca:	2100      	movs	r1, #0
 8003acc:	2000      	movs	r0, #0
 8003ace:	f001 fdb1 	bl	8005634 <led_status>
        return;
 8003ad2:	e070      	b.n	8003bb6 <speed_run+0x192>
    }

    send_bluetooth_message("🏁 EXECUTING SPEED RUN!\r\n");
 8003ad4:	4840      	ldr	r0, [pc, #256]	@ (8003bd8 <speed_run+0x1b4>)
 8003ad6:	f7fd ff1b 	bl	8001910 <send_bluetooth_message>

    // Simple speed run - follow the shortest known path to center
    int moves = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	613b      	str	r3, [r7, #16]
    const int max_moves = 50;
 8003ade:	2332      	movs	r3, #50	@ 0x32
 8003ae0:	60bb      	str	r3, [r7, #8]

    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003ae2:	e021      	b.n	8003b28 <speed_run+0x104>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
           moves < max_moves) {

        // Update sensor data
        update_sensors();
 8003ae4:	f000 fbf8 	bl	80042d8 <update_sensors>

        // Use championship flood fill to get direction
        championship_flood_fill();
 8003ae8:	f7ff f95c 	bl	8002da4 <championship_flood_fill>
        int next_dir = get_championship_direction();
 8003aec:	f7ff fb0c 	bl	8003108 <get_championship_direction>
 8003af0:	6078      	str	r0, [r7, #4]

        // Turn to target direction
        turn_to_direction(next_dir);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fd4a 	bl	800358c <turn_to_direction>

        // Move forward
        if (championship_move_forward()) {
 8003af8:	f7ff fd9c 	bl	8003634 <championship_move_forward>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <speed_run+0xf6>
            moves++;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	3301      	adds	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
            send_bluetooth_printf("Speed run move %d to (%d,%d)\r\n", moves, robot.x, robot.y);
 8003b08:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc0 <speed_run+0x19c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc0 <speed_run+0x19c>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6939      	ldr	r1, [r7, #16]
 8003b12:	4832      	ldr	r0, [pc, #200]	@ (8003bdc <speed_run+0x1b8>)
 8003b14:	f7fd ff12 	bl	800193c <send_bluetooth_printf>
 8003b18:	e003      	b.n	8003b22 <speed_run+0xfe>
        } else {
            send_bluetooth_message("❌ Speed run blocked!\r\n");
 8003b1a:	4831      	ldr	r0, [pc, #196]	@ (8003be0 <speed_run+0x1bc>)
 8003b1c:	f7fd fef8 	bl	8001910 <send_bluetooth_message>
            break;
 8003b20:	e01e      	b.n	8003b60 <speed_run+0x13c>
        }

        // Brief delay for stability
        HAL_Delay(50);
 8003b22:	2032      	movs	r0, #50	@ 0x32
 8003b24:	f001 fe46 	bl	80057b4 <HAL_Delay>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b28:	4b25      	ldr	r3, [pc, #148]	@ (8003bc0 <speed_run+0x19c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003be4 <speed_run+0x1c0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d005      	beq.n	8003b40 <speed_run+0x11c>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b34:	4b22      	ldr	r3, [pc, #136]	@ (8003bc0 <speed_run+0x19c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b2b      	ldr	r3, [pc, #172]	@ (8003be8 <speed_run+0x1c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d10b      	bne.n	8003b58 <speed_run+0x134>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8003b40:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc0 <speed_run+0x19c>)
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	4b29      	ldr	r3, [pc, #164]	@ (8003bec <speed_run+0x1c8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d009      	beq.n	8003b60 <speed_run+0x13c>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8003b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <speed_run+0x19c>)
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <speed_run+0x1cc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d003      	beq.n	8003b60 <speed_run+0x13c>
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dbc1      	blt.n	8003ae4 <speed_run+0xc0>
    }

    // Speed run complete
    led_status(0, 0);
 8003b60:	2100      	movs	r1, #0
 8003b62:	2000      	movs	r0, #0
 8003b64:	f001 fd66 	bl	8005634 <led_status>

    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b68:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <speed_run+0x19c>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003be4 <speed_run+0x1c0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d005      	beq.n	8003b80 <speed_run+0x15c>
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <speed_run+0x19c>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b1b      	ldr	r3, [pc, #108]	@ (8003be8 <speed_run+0x1c4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d115      	bne.n	8003bac <speed_run+0x188>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 8003b80:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc0 <speed_run+0x19c>)
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <speed_run+0x1c8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d005      	beq.n	8003b98 <speed_run+0x174>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc0 <speed_run+0x19c>)
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <speed_run+0x1cc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d109      	bne.n	8003bac <speed_run+0x188>
        send_bluetooth_message("🏁 SPEED RUN SUCCESS!\r\n");
 8003b98:	4816      	ldr	r0, [pc, #88]	@ (8003bf4 <speed_run+0x1d0>)
 8003b9a:	f7fd feb9 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_printf("Completed in %d moves\r\n", moves);
 8003b9e:	6939      	ldr	r1, [r7, #16]
 8003ba0:	4815      	ldr	r0, [pc, #84]	@ (8003bf8 <speed_run+0x1d4>)
 8003ba2:	f7fd fecb 	bl	800193c <send_bluetooth_printf>
        play_success_tone();
 8003ba6:	f7fd fa19 	bl	8000fdc <play_success_tone>
 8003baa:	e004      	b.n	8003bb6 <speed_run+0x192>
    } else {
        send_bluetooth_message("⚠️ Speed run incomplete\r\n");
 8003bac:	4813      	ldr	r0, [pc, #76]	@ (8003bfc <speed_run+0x1d8>)
 8003bae:	f7fd feaf 	bl	8001910 <send_bluetooth_message>
        play_error_tone();
 8003bb2:	f7fd fa3f 	bl	8001034 <play_error_tone>
    }
}
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	0800e258 	.word	0x0800e258
 8003bc0:	20001418 	.word	0x20001418
 8003bc4:	0800e27c 	.word	0x0800e27c
 8003bc8:	0800e2b8 	.word	0x0800e2b8
 8003bcc:	0800e2f0 	.word	0x0800e2f0
 8003bd0:	20001460 	.word	0x20001460
 8003bd4:	0800e320 	.word	0x0800e320
 8003bd8:	0800e344 	.word	0x0800e344
 8003bdc:	0800e360 	.word	0x0800e360
 8003be0:	0800e380 	.word	0x0800e380
 8003be4:	0800f060 	.word	0x0800f060
 8003be8:	0800f068 	.word	0x0800f068
 8003bec:	0800f064 	.word	0x0800f064
 8003bf0:	0800f06c 	.word	0x0800f06c
 8003bf4:	0800e39c 	.word	0x0800e39c
 8003bf8:	0800e3b8 	.word	0x0800e3b8
 8003bfc:	0800e3d0 	.word	0x0800e3d0

08003c00 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 8003c06:	4b19      	ldr	r3, [pc, #100]	@ (8003c6c <update_encoder_totals+0x6c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8003c0e:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <update_encoder_totals+0x70>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 8003c16:	4b17      	ldr	r3, [pc, #92]	@ (8003c74 <update_encoder_totals+0x74>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <update_encoder_totals+0x78>)
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	88ba      	ldrh	r2, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 8003c2e:	883b      	ldrh	r3, [r7, #0]
 8003c30:	425b      	negs	r3, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 8003c36:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c3a:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <update_encoder_totals+0x7c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a0e      	ldr	r2, [pc, #56]	@ (8003c7c <update_encoder_totals+0x7c>)
 8003c42:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8003c44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003c48:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <update_encoder_totals+0x80>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c80 <update_encoder_totals+0x80>)
 8003c50:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 8003c52:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <update_encoder_totals+0x74>)
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 8003c58:	4a07      	ldr	r2, [pc, #28]	@ (8003c78 <update_encoder_totals+0x78>)
 8003c5a:	88bb      	ldrh	r3, [r7, #4]
 8003c5c:	8013      	strh	r3, [r2, #0]
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	200002f8 	.word	0x200002f8
 8003c70:	20000388 	.word	0x20000388
 8003c74:	20000000 	.word	0x20000000
 8003c78:	20000002 	.word	0x20000002
 8003c7c:	20001478 	.word	0x20001478
 8003c80:	2000147c 	.word	0x2000147c

08003c84 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003c88:	f7ff ffba 	bl	8003c00 <update_encoder_totals>
    return left_total;
 8003c8c:	4b01      	ldr	r3, [pc, #4]	@ (8003c94 <get_left_encoder_total+0x10>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20001478 	.word	0x20001478

08003c98 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8003c9c:	f7ff ffb0 	bl	8003c00 <update_encoder_totals>
    return right_total;
 8003ca0:	4b01      	ldr	r3, [pc, #4]	@ (8003ca8 <get_right_encoder_total+0x10>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	2000147c 	.word	0x2000147c

08003cac <reset_encoder_totals>:

/**
 * @brief Reset encoder totals - NEW FUNCTION
 */
void reset_encoder_totals(void) {
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
    left_total = 0;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <reset_encoder_totals+0x34>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <reset_encoder_totals+0x38>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    last_left_count = __HAL_TIM_GET_COUNTER(&htim2);
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <reset_encoder_totals+0x3c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <reset_encoder_totals+0x40>)
 8003cc6:	801a      	strh	r2, [r3, #0]
    last_right_count = __HAL_TIM_GET_COUNTER(&htim4);
 8003cc8:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <reset_encoder_totals+0x44>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <reset_encoder_totals+0x48>)
 8003cd2:	801a      	strh	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20001478 	.word	0x20001478
 8003ce4:	2000147c 	.word	0x2000147c
 8003ce8:	200002f8 	.word	0x200002f8
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	20000388 	.word	0x20000388
 8003cf4:	20000002 	.word	0x20000002

08003cf8 <start_encoders>:

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8003cfc:	213c      	movs	r1, #60	@ 0x3c
 8003cfe:	4815      	ldr	r0, [pc, #84]	@ (8003d54 <start_encoders+0x5c>)
 8003d00:	f004 f96e 	bl	8007fe0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8003d04:	213c      	movs	r1, #60	@ 0x3c
 8003d06:	4814      	ldr	r0, [pc, #80]	@ (8003d58 <start_encoders+0x60>)
 8003d08:	f004 f96a 	bl	8007fe0 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8003d0c:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <start_encoders+0x5c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d14:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 8003d16:	4b10      	ldr	r3, [pc, #64]	@ (8003d58 <start_encoders+0x60>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 8003d20:	2001      	movs	r0, #1
 8003d22:	f001 fd47 	bl	80057b4 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <start_encoders+0x64>)
 8003d28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d2c:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <start_encoders+0x68>)
 8003d30:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003d34:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <start_encoders+0x6c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <start_encoders+0x70>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 8003d42:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <start_encoders+0x74>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8003d48:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <start_encoders+0x74>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	60da      	str	r2, [r3, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000388 	.word	0x20000388
 8003d58:	200002f8 	.word	0x200002f8
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000002 	.word	0x20000002
 8003d64:	20001478 	.word	0x20001478
 8003d68:	2000147c 	.word	0x2000147c
 8003d6c:	20001450 	.word	0x20001450

08003d70 <move_forward>:

/**
 * @brief Move forward one cell - FIXED VERSION
 */
void move_forward(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af00      	add	r7, sp, #0
    // Use safe encoder reading
    int32_t start_left = get_left_encoder_total();
 8003d76:	f7ff ff85 	bl	8003c84 <get_left_encoder_total>
 8003d7a:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8003d7c:	f7ff ff8c 	bl	8003c98 <get_right_encoder_total>
 8003d80:	6238      	str	r0, [r7, #32]

    // Check bounds before moving
    int new_x = robot.x + dx[robot.direction];
 8003d82:	4b2e      	ldr	r3, [pc, #184]	@ (8003e3c <move_forward+0xcc>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b2d      	ldr	r3, [pc, #180]	@ (8003e3c <move_forward+0xcc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	492d      	ldr	r1, [pc, #180]	@ (8003e40 <move_forward+0xd0>)
 8003d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d90:	4413      	add	r3, r2
 8003d92:	61fb      	str	r3, [r7, #28]
    int new_y = robot.y + dy[robot.direction];
 8003d94:	4b29      	ldr	r3, [pc, #164]	@ (8003e3c <move_forward+0xcc>)
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4b28      	ldr	r3, [pc, #160]	@ (8003e3c <move_forward+0xcc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	4929      	ldr	r1, [pc, #164]	@ (8003e44 <move_forward+0xd4>)
 8003d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da2:	4413      	add	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db08      	blt.n	8003dbe <move_forward+0x4e>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	dc05      	bgt.n	8003dbe <move_forward+0x4e>
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	db02      	blt.n	8003dbe <move_forward+0x4e>
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	dd03      	ble.n	8003dc6 <move_forward+0x56>
        send_bluetooth_message("Cannot move - would go out of bounds!\r\n");
 8003dbe:	4822      	ldr	r0, [pc, #136]	@ (8003e48 <move_forward+0xd8>)
 8003dc0:	f7fd fda6 	bl	8001910 <send_bluetooth_message>
        return;
 8003dc4:	e037      	b.n	8003e36 <move_forward+0xc6>
    }

    motor_set_fixed(0, true, 800);  // Left motor forward
 8003dc6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003dca:	2101      	movs	r1, #1
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f000 f8fb 	bl	8003fc8 <motor_set_fixed>
    motor_set_fixed(1, true, 800);  // Right motor forward
 8003dd2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f000 f8f5 	bl	8003fc8 <motor_set_fixed>

    // Move until target distance reached
    int32_t target_counts = ENCODER_COUNTS_PER_CELL;
 8003dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003de2:	617b      	str	r3, [r7, #20]
    while (1) {
        int32_t current_left = get_left_encoder_total();
 8003de4:	f7ff ff4e 	bl	8003c84 <get_left_encoder_total>
 8003de8:	6138      	str	r0, [r7, #16]
        int32_t current_right = get_right_encoder_total();
 8003dea:	f7ff ff55 	bl	8003c98 <get_right_encoder_total>
 8003dee:	60f8      	str	r0, [r7, #12]
        int32_t left_traveled = current_left - start_left;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	60bb      	str	r3, [r7, #8]
        int32_t right_traveled = current_right - start_right;
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	607b      	str	r3, [r7, #4]
        int32_t avg_traveled = (left_traveled + right_traveled) / 2;
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4413      	add	r3, r2
 8003e06:	0fda      	lsrs	r2, r3, #31
 8003e08:	4413      	add	r3, r2
 8003e0a:	105b      	asrs	r3, r3, #1
 8003e0c:	603b      	str	r3, [r7, #0]

        if (avg_traveled >= target_counts) {
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	da03      	bge.n	8003e1e <move_forward+0xae>
            break;
        }
        HAL_Delay(1);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f001 fccc 	bl	80057b4 <HAL_Delay>
    while (1) {
 8003e1c:	e7e2      	b.n	8003de4 <move_forward+0x74>
            break;
 8003e1e:	bf00      	nop
    }

    // Stop motors
    stop_motors();
 8003e20:	f000 f89c 	bl	8003f5c <stop_motors>

    // Update position only after successful movement
    robot.x = new_x;
 8003e24:	4a05      	ldr	r2, [pc, #20]	@ (8003e3c <move_forward+0xcc>)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8003e2a:	4a04      	ldr	r2, [pc, #16]	@ (8003e3c <move_forward+0xcc>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6053      	str	r3, [r2, #4]
    HAL_Delay(100); // Settling time
 8003e30:	2064      	movs	r0, #100	@ 0x64
 8003e32:	f001 fcbf 	bl	80057b4 <HAL_Delay>
}
 8003e36:	3728      	adds	r7, #40	@ 0x28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20001418 	.word	0x20001418
 8003e40:	0800f040 	.word	0x0800f040
 8003e44:	0800f050 	.word	0x0800f050
 8003e48:	0800e3f0 	.word	0x0800e3f0

08003e4c <turn_left>:


/**
 * @brief Turn left 90 degrees - FIXED VERSION (removed unused variables)
 */
void turn_left(void) {
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
    // REMOVED: unused variable 'start_left'
    int32_t start_right = get_right_encoder_total();
 8003e52:	f7ff ff21 	bl	8003c98 <get_right_encoder_total>
 8003e56:	60f8      	str	r0, [r7, #12]


    // Left motor reverse, right motor forward
	motor_set_fixed(0, false, 800); // Left reverse
 8003e58:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f000 f8b2 	bl	8003fc8 <motor_set_fixed>
	motor_set_fixed(1, true, 800);  // Right forward
 8003e64:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003e68:	2101      	movs	r1, #1
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f000 f8ac 	bl	8003fc8 <motor_set_fixed>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 8003e70:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e74:	60bb      	str	r3, [r7, #8]
    while (1) {
        int32_t current_right = get_right_encoder_total();
 8003e76:	f7ff ff0f 	bl	8003c98 <get_right_encoder_total>
 8003e7a:	6078      	str	r0, [r7, #4]
        int32_t right_traveled = abs(current_right - start_right);
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bfb8      	it	lt
 8003e86:	425b      	neglt	r3, r3
 8003e88:	603b      	str	r3, [r7, #0]

        if (right_traveled >= target_counts) {
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	da03      	bge.n	8003e9a <turn_left+0x4e>
            break;
        }
        HAL_Delay(1);
 8003e92:	2001      	movs	r0, #1
 8003e94:	f001 fc8e 	bl	80057b4 <HAL_Delay>
    while (1) {
 8003e98:	e7ed      	b.n	8003e76 <turn_left+0x2a>
            break;
 8003e9a:	bf00      	nop
    }

    stop_motors();
 8003e9c:	f000 f85e 	bl	8003f5c <stop_motors>
    robot.direction = (robot.direction + 3) % 4; // Turn left
 8003ea0:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <turn_left+0x7c>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	3303      	adds	r3, #3
 8003ea6:	425a      	negs	r2, r3
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	f002 0203 	and.w	r2, r2, #3
 8003eb0:	bf58      	it	pl
 8003eb2:	4253      	negpl	r3, r2
 8003eb4:	4a04      	ldr	r2, [pc, #16]	@ (8003ec8 <turn_left+0x7c>)
 8003eb6:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8003eb8:	20c8      	movs	r0, #200	@ 0xc8
 8003eba:	f001 fc7b 	bl	80057b4 <HAL_Delay>
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20001418 	.word	0x20001418

08003ecc <turn_right>:

/**
 * @brief Turn right 90 degrees - FIXED VERSION (removed unused variables)
 */
void turn_right(void) {
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
    int32_t start_left = get_left_encoder_total();
 8003ed2:	f7ff fed7 	bl	8003c84 <get_left_encoder_total>
 8003ed6:	60f8      	str	r0, [r7, #12]
    // REMOVED: unused variable 'start_right'

    // Left motor forward, right motor backward
    motor_set_fixed(0, true, 800);  // Left forward
 8003ed8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003edc:	2101      	movs	r1, #1
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f000 f872 	bl	8003fc8 <motor_set_fixed>
    motor_set_fixed(1, false, 800); // Right reverse
 8003ee4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2001      	movs	r0, #1
 8003eec:	f000 f86c 	bl	8003fc8 <motor_set_fixed>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 8003ef0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003ef4:	60bb      	str	r3, [r7, #8]
    while (1) {
        int32_t current_left = get_left_encoder_total();
 8003ef6:	f7ff fec5 	bl	8003c84 <get_left_encoder_total>
 8003efa:	6078      	str	r0, [r7, #4]
        int32_t left_traveled = abs(current_left - start_left);
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bfb8      	it	lt
 8003f06:	425b      	neglt	r3, r3
 8003f08:	603b      	str	r3, [r7, #0]

        if (left_traveled >= target_counts) {
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	da03      	bge.n	8003f1a <turn_right+0x4e>
            break;
        }
        HAL_Delay(1);
 8003f12:	2001      	movs	r0, #1
 8003f14:	f001 fc4e 	bl	80057b4 <HAL_Delay>
    while (1) {
 8003f18:	e7ed      	b.n	8003ef6 <turn_right+0x2a>
            break;
 8003f1a:	bf00      	nop
    }

    stop_motors();
 8003f1c:	f000 f81e 	bl	8003f5c <stop_motors>
    robot.direction = (robot.direction + 1) % 4; // Turn right
 8003f20:	4b09      	ldr	r3, [pc, #36]	@ (8003f48 <turn_right+0x7c>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	3301      	adds	r3, #1
 8003f26:	425a      	negs	r2, r3
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	f002 0203 	and.w	r2, r2, #3
 8003f30:	bf58      	it	pl
 8003f32:	4253      	negpl	r3, r2
 8003f34:	4a04      	ldr	r2, [pc, #16]	@ (8003f48 <turn_right+0x7c>)
 8003f36:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8003f38:	20c8      	movs	r0, #200	@ 0xc8
 8003f3a:	f001 fc3b 	bl	80057b4 <HAL_Delay>
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20001418 	.word	0x20001418

08003f4c <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
    turn_right();
 8003f50:	f7ff ffbc 	bl	8003ecc <turn_right>
    turn_right();
 8003f54:	f7ff ffba 	bl	8003ecc <turn_right>
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8003f60:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <stop_motors+0x30>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8003f68:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <stop_motors+0x30>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8003f70:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <stop_motors+0x30>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8003f78:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <stop_motors+0x30>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	20000340 	.word	0x20000340

08003f90 <break_motors>:
void break_motors(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);  // Left motor PWM = 0
 8003f94:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc4 <break_motors+0x34>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);  // Left motor direction = 0
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <break_motors+0x34>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1);  // Right motor PWM = 0
 8003fa4:	4b07      	ldr	r3, [pc, #28]	@ (8003fc4 <break_motors+0x34>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1);  // Right motor direction = 0
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <break_motors+0x34>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_Delay(500);
 8003fb4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fb8:	f001 fbfc 	bl	80057b4 <HAL_Delay>
    stop_motors();
 8003fbc:	f7ff ffce 	bl	8003f5c <stop_motors>
}
 8003fc0:	bf00      	nop
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000340 	.word	0x20000340

08003fc8 <motor_set_fixed>:
    } else {
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);    // Direction HIGH for backward
    }
}
// Fixed motor_set function for DRV8833
void motor_set_fixed(uint8_t motor, bool forward, uint16_t duty) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	71fb      	strb	r3, [r7, #7]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	71bb      	strb	r3, [r7, #6]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d115      	bne.n	800400c <motor_set_fixed+0x44>
        if (forward) {
 8003fe0:	79bb      	ldrb	r3, [r7, #6]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <motor_set_fixed+0x32>
			// Left reverse: IN1=LOW, IN2=PWM
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8003fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800405c <motor_set_fixed+0x94>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	88ba      	ldrh	r2, [r7, #4]
 8003fec:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2140      	movs	r1, #64	@ 0x40
 8003ff2:	481b      	ldr	r0, [pc, #108]	@ (8004060 <motor_set_fixed+0x98>)
 8003ff4:	f002 fb1c 	bl	8006630 <HAL_GPIO_WritePin>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 8003ff8:	e02b      	b.n	8004052 <motor_set_fixed+0x8a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 8003ffa:	4b18      	ldr	r3, [pc, #96]	@ (800405c <motor_set_fixed+0x94>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	88ba      	ldrh	r2, [r7, #4]
 8004000:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 8004002:	4b16      	ldr	r3, [pc, #88]	@ (800405c <motor_set_fixed+0x94>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800400a:	e022      	b.n	8004052 <motor_set_fixed+0x8a>
    	bool actual_forward = !forward;  // invert direction
 800400c:	79bb      	ldrb	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f083 0301 	eor.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	73fb      	strb	r3, [r7, #15]
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <motor_set_fixed+0x7a>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 800402e:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <motor_set_fixed+0x94>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	88ba      	ldrh	r2, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 8004036:	2200      	movs	r2, #0
 8004038:	2101      	movs	r1, #1
 800403a:	480a      	ldr	r0, [pc, #40]	@ (8004064 <motor_set_fixed+0x9c>)
 800403c:	f002 faf8 	bl	8006630 <HAL_GPIO_WritePin>
}
 8004040:	e007      	b.n	8004052 <motor_set_fixed+0x8a>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 8004042:	4b06      	ldr	r3, [pc, #24]	@ (800405c <motor_set_fixed+0x94>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2200      	movs	r2, #0
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 800404a:	4b04      	ldr	r3, [pc, #16]	@ (800405c <motor_set_fixed+0x94>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	88ba      	ldrh	r2, [r7, #4]
 8004050:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000340 	.word	0x20000340
 8004060:	40020000 	.word	0x40020000
 8004064:	40020400 	.word	0x40020400

08004068 <moveStraightPID>:
float integralenco = 0;
float derivativeenco = 0;
/*
 * Encoder PID
 * */
void moveStraightPID(void) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
	left_total=get_left_encoder_total();
 800406e:	f7ff fe09 	bl	8003c84 <get_left_encoder_total>
 8004072:	4603      	mov	r3, r0
 8004074:	4a44      	ldr	r2, [pc, #272]	@ (8004188 <moveStraightPID+0x120>)
 8004076:	6013      	str	r3, [r2, #0]
	left_total=get_left_encoder_total();
 8004078:	f7ff fe04 	bl	8003c84 <get_left_encoder_total>
 800407c:	4603      	mov	r3, r0
 800407e:	4a42      	ldr	r2, [pc, #264]	@ (8004188 <moveStraightPID+0x120>)
 8004080:	6013      	str	r3, [r2, #0]
	errorenco = left_total - right_total;
 8004082:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <moveStraightPID+0x120>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4b41      	ldr	r3, [pc, #260]	@ (800418c <moveStraightPID+0x124>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004094:	4b3e      	ldr	r3, [pc, #248]	@ (8004190 <moveStraightPID+0x128>)
 8004096:	edc3 7a00 	vstr	s15, [r3]

	integralenco += errorenco;
 800409a:	4b3e      	ldr	r3, [pc, #248]	@ (8004194 <moveStraightPID+0x12c>)
 800409c:	ed93 7a00 	vldr	s14, [r3]
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <moveStraightPID+0x128>)
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004194 <moveStraightPID+0x12c>)
 80040ac:	edc3 7a00 	vstr	s15, [r3]
	derivativeenco = errorenco - previousErrorenco;
 80040b0:	4b37      	ldr	r3, [pc, #220]	@ (8004190 <moveStraightPID+0x128>)
 80040b2:	ed93 7a00 	vldr	s14, [r3]
 80040b6:	4b38      	ldr	r3, [pc, #224]	@ (8004198 <moveStraightPID+0x130>)
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c0:	4b36      	ldr	r3, [pc, #216]	@ (800419c <moveStraightPID+0x134>)
 80040c2:	edc3 7a00 	vstr	s15, [r3]

	float correction = (Kp_e * errorenco) + (Ki_e * integralenco) + (Kd_e * derivativeenco);
 80040c6:	4b36      	ldr	r3, [pc, #216]	@ (80041a0 <moveStraightPID+0x138>)
 80040c8:	ed93 7a00 	vldr	s14, [r3]
 80040cc:	4b30      	ldr	r3, [pc, #192]	@ (8004190 <moveStraightPID+0x128>)
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d6:	4b33      	ldr	r3, [pc, #204]	@ (80041a4 <moveStraightPID+0x13c>)
 80040d8:	edd3 6a00 	vldr	s13, [r3]
 80040dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <moveStraightPID+0x12c>)
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <moveStraightPID+0x140>)
 80040ec:	edd3 6a00 	vldr	s13, [r3]
 80040f0:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <moveStraightPID+0x134>)
 80040f2:	edd3 7a00 	vldr	s15, [r3]
 80040f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fe:	edc7 7a01 	vstr	s15, [r7, #4]

	int motor1Speed = 600 - correction;
 8004102:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80041ac <moveStraightPID+0x144>
 8004106:	edd7 7a01 	vldr	s15, [r7, #4]
 800410a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800410e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004112:	ee17 3a90 	vmov	r3, s15
 8004116:	60fb      	str	r3, [r7, #12]
	int motor2Speed = 600 + correction;
 8004118:	edd7 7a01 	vldr	s15, [r7, #4]
 800411c:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80041ac <moveStraightPID+0x144>
 8004120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004128:	ee17 3a90 	vmov	r3, s15
 800412c:	60bb      	str	r3, [r7, #8]

	if (motor1Speed>1000){
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004134:	dd01      	ble.n	800413a <moveStraightPID+0xd2>
	  motor1Speed= 100;
 8004136:	2364      	movs	r3, #100	@ 0x64
 8004138:	60fb      	str	r3, [r7, #12]
	};
	if (motor2Speed>1000){
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004140:	dd02      	ble.n	8004148 <moveStraightPID+0xe0>
	  motor2Speed= 1000;
 8004142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004146:	60bb      	str	r3, [r7, #8]
	};
	if (motor1Speed<0){
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da01      	bge.n	8004152 <moveStraightPID+0xea>
	  motor1Speed= 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
	};
	if (motor2Speed<0){
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	da01      	bge.n	800415c <moveStraightPID+0xf4>
	  motor2Speed= 0;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
	};

	motor_set_fixed(0, true, motor2Speed);//Left
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	2101      	movs	r1, #1
 8004164:	2000      	movs	r0, #0
 8004166:	f7ff ff2f 	bl	8003fc8 <motor_set_fixed>

	motor_set_fixed(1, true, motor1Speed);//Right
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	b29b      	uxth	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	2101      	movs	r1, #1
 8004172:	2001      	movs	r0, #1
 8004174:	f7ff ff28 	bl	8003fc8 <motor_set_fixed>


	previousErrorenco = errorenco;
 8004178:	4b05      	ldr	r3, [pc, #20]	@ (8004190 <moveStraightPID+0x128>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a06      	ldr	r2, [pc, #24]	@ (8004198 <moveStraightPID+0x130>)
 800417e:	6013      	str	r3, [r2, #0]
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20001478 	.word	0x20001478
 800418c:	2000147c 	.word	0x2000147c
 8004190:	2000148c 	.word	0x2000148c
 8004194:	20001494 	.word	0x20001494
 8004198:	20001490 	.word	0x20001490
 800419c:	20001498 	.word	0x20001498
 80041a0:	20001480 	.word	0x20001480
 80041a4:	20001484 	.word	0x20001484
 80041a8:	20001488 	.word	0x20001488
 80041ac:	44160000 	.word	0x44160000

080041b0 <turn_on_emitters>:
static SensorCalibration sensor_cal = {0};
/**
 * @brief Turn on IR emitters
 */
void turn_on_emitters(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_SET);
 80041b4:	2201      	movs	r2, #1
 80041b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041ba:	480d      	ldr	r0, [pc, #52]	@ (80041f0 <turn_on_emitters+0x40>)
 80041bc:	f002 fa38 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_SET);
 80041c0:	2201      	movs	r2, #1
 80041c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041c6:	480a      	ldr	r0, [pc, #40]	@ (80041f0 <turn_on_emitters+0x40>)
 80041c8:	f002 fa32 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_SET);
 80041cc:	2201      	movs	r2, #1
 80041ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041d2:	4808      	ldr	r0, [pc, #32]	@ (80041f4 <turn_on_emitters+0x44>)
 80041d4:	f002 fa2c 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_SET);
 80041d8:	2201      	movs	r2, #1
 80041da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041de:	4805      	ldr	r0, [pc, #20]	@ (80041f4 <turn_on_emitters+0x44>)
 80041e0:	f002 fa26 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_Delay(2); // Emitter stabilization time
 80041e4:	2002      	movs	r0, #2
 80041e6:	f001 fae5 	bl	80057b4 <HAL_Delay>
}
 80041ea:	bf00      	nop
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40020000 	.word	0x40020000
 80041f4:	40020400 	.word	0x40020400

080041f8 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 80041fc:	2200      	movs	r2, #0
 80041fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004202:	480b      	ldr	r0, [pc, #44]	@ (8004230 <turn_off_emitters+0x38>)
 8004204:	f002 fa14 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8004208:	2200      	movs	r2, #0
 800420a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800420e:	4808      	ldr	r0, [pc, #32]	@ (8004230 <turn_off_emitters+0x38>)
 8004210:	f002 fa0e 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800421a:	4806      	ldr	r0, [pc, #24]	@ (8004234 <turn_off_emitters+0x3c>)
 800421c:	f002 fa08 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004226:	4803      	ldr	r0, [pc, #12]	@ (8004234 <turn_off_emitters+0x3c>)
 8004228:	f002 fa02 	bl	8006630 <HAL_GPIO_WritePin>
}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40020000 	.word	0x40020000
 8004234:	40020400 	.word	0x40020400

08004238 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8004240:	f107 030c 	add.w	r3, r7, #12
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
    uint16_t adc_value = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	83fb      	strh	r3, [r7, #30]

    // Configure the channel
    sConfig.Channel = channel;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8004256:	2301      	movs	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES; // Longer sampling time
 800425a:	2304      	movs	r3, #4
 800425c:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	4619      	mov	r1, r3
 8004264:	4818      	ldr	r0, [pc, #96]	@ (80042c8 <read_adc_channel+0x90>)
 8004266:	f001 fc8d 	bl	8005b84 <HAL_ADC_ConfigChannel>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d004      	beq.n	800427a <read_adc_channel+0x42>
        send_bluetooth_message("❌ ADC channel config failed\r\n");
 8004270:	4816      	ldr	r0, [pc, #88]	@ (80042cc <read_adc_channel+0x94>)
 8004272:	f7fd fb4d 	bl	8001910 <send_bluetooth_message>
        return 0;
 8004276:	2300      	movs	r3, #0
 8004278:	e022      	b.n	80042c0 <read_adc_channel+0x88>
    }

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800427a:	4813      	ldr	r0, [pc, #76]	@ (80042c8 <read_adc_channel+0x90>)
 800427c:	f001 fb02 	bl	8005884 <HAL_ADC_Start>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d004      	beq.n	8004290 <read_adc_channel+0x58>
        send_bluetooth_message("❌ ADC start failed\r\n");
 8004286:	4812      	ldr	r0, [pc, #72]	@ (80042d0 <read_adc_channel+0x98>)
 8004288:	f7fd fb42 	bl	8001910 <send_bluetooth_message>
        return 0;
 800428c:	2300      	movs	r3, #0
 800428e:	e017      	b.n	80042c0 <read_adc_channel+0x88>
    }

    // Wait for conversion with longer timeout
    if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8004290:	2164      	movs	r1, #100	@ 0x64
 8004292:	480d      	ldr	r0, [pc, #52]	@ (80042c8 <read_adc_channel+0x90>)
 8004294:	f001 fbdd 	bl	8005a52 <HAL_ADC_PollForConversion>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <read_adc_channel+0x76>
        send_bluetooth_message("❌ ADC conversion timeout\r\n");
 800429e:	480d      	ldr	r0, [pc, #52]	@ (80042d4 <read_adc_channel+0x9c>)
 80042a0:	f7fd fb36 	bl	8001910 <send_bluetooth_message>
        HAL_ADC_Stop(&hadc1);
 80042a4:	4808      	ldr	r0, [pc, #32]	@ (80042c8 <read_adc_channel+0x90>)
 80042a6:	f001 fba1 	bl	80059ec <HAL_ADC_Stop>
        return 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e008      	b.n	80042c0 <read_adc_channel+0x88>
    }

    // Get the converted value
    adc_value = HAL_ADC_GetValue(&hadc1);
 80042ae:	4806      	ldr	r0, [pc, #24]	@ (80042c8 <read_adc_channel+0x90>)
 80042b0:	f001 fc5a 	bl	8005b68 <HAL_ADC_GetValue>
 80042b4:	4603      	mov	r3, r0
 80042b6:	83fb      	strh	r3, [r7, #30]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 80042b8:	4803      	ldr	r0, [pc, #12]	@ (80042c8 <read_adc_channel+0x90>)
 80042ba:	f001 fb97 	bl	80059ec <HAL_ADC_Stop>

    return adc_value;
 80042be:	8bfb      	ldrh	r3, [r7, #30]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000210 	.word	0x20000210
 80042cc:	0800e6f8 	.word	0x0800e6f8
 80042d0:	0800e718 	.word	0x0800e718
 80042d4:	0800e730 	.word	0x0800e730

080042d8 <update_sensors>:

/**
 * @brief Enhanced update_sensors with calibrated thresholds
 */
void update_sensors(void)
{
 80042d8:	b590      	push	{r4, r7, lr}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
    // Read ambient light levels (emitters off)
    turn_off_emitters();
 80042de:	f7ff ff8b 	bl	80041f8 <turn_off_emitters>
    HAL_Delay(1);
 80042e2:	2001      	movs	r0, #1
 80042e4:	f001 fa66 	bl	80057b4 <HAL_Delay>
    uint16_t ambient_front_right = read_adc_channel(ADC_CHANNEL_2);
 80042e8:	2002      	movs	r0, #2
 80042ea:	f7ff ffa5 	bl	8004238 <read_adc_channel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	81fb      	strh	r3, [r7, #14]
    uint16_t ambient_side_right = read_adc_channel(ADC_CHANNEL_3);
 80042f2:	2003      	movs	r0, #3
 80042f4:	f7ff ffa0 	bl	8004238 <read_adc_channel>
 80042f8:	4603      	mov	r3, r0
 80042fa:	81bb      	strh	r3, [r7, #12]
    uint16_t ambient_side_left = read_adc_channel(ADC_CHANNEL_4);
 80042fc:	2004      	movs	r0, #4
 80042fe:	f7ff ff9b 	bl	8004238 <read_adc_channel>
 8004302:	4603      	mov	r3, r0
 8004304:	817b      	strh	r3, [r7, #10]
    uint16_t ambient_front_left = read_adc_channel(ADC_CHANNEL_5);
 8004306:	2005      	movs	r0, #5
 8004308:	f7ff ff96 	bl	8004238 <read_adc_channel>
 800430c:	4603      	mov	r3, r0
 800430e:	813b      	strh	r3, [r7, #8]

    // Read with emitters on
    turn_on_emitters();
 8004310:	f7ff ff4e 	bl	80041b0 <turn_on_emitters>
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 8004314:	2000      	movs	r0, #0
 8004316:	f7ff ff8f 	bl	8004238 <read_adc_channel>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b71      	ldr	r3, [pc, #452]	@ (80044e4 <update_sensors+0x20c>)
 8004320:	801a      	strh	r2, [r3, #0]
    sensors.front_right = read_adc_channel(ADC_CHANNEL_2) - ambient_front_right;
 8004322:	2002      	movs	r0, #2
 8004324:	f7ff ff88 	bl	8004238 <read_adc_channel>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	89fb      	ldrh	r3, [r7, #14]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	b29a      	uxth	r2, r3
 8004332:	4b6c      	ldr	r3, [pc, #432]	@ (80044e4 <update_sensors+0x20c>)
 8004334:	805a      	strh	r2, [r3, #2]
    sensors.side_right = read_adc_channel(ADC_CHANNEL_3) - ambient_side_right;
 8004336:	2003      	movs	r0, #3
 8004338:	f7ff ff7e 	bl	8004238 <read_adc_channel>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	89bb      	ldrh	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	b29a      	uxth	r2, r3
 8004346:	4b67      	ldr	r3, [pc, #412]	@ (80044e4 <update_sensors+0x20c>)
 8004348:	809a      	strh	r2, [r3, #4]
    sensors.side_left = read_adc_channel(ADC_CHANNEL_4) - ambient_side_left;
 800434a:	2004      	movs	r0, #4
 800434c:	f7ff ff74 	bl	8004238 <read_adc_channel>
 8004350:	4603      	mov	r3, r0
 8004352:	461a      	mov	r2, r3
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	b29a      	uxth	r2, r3
 800435a:	4b62      	ldr	r3, [pc, #392]	@ (80044e4 <update_sensors+0x20c>)
 800435c:	80da      	strh	r2, [r3, #6]
    sensors.front_left = read_adc_channel(ADC_CHANNEL_5) - ambient_front_left;
 800435e:	2005      	movs	r0, #5
 8004360:	f7ff ff6a 	bl	8004238 <read_adc_channel>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	893b      	ldrh	r3, [r7, #8]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	b29a      	uxth	r2, r3
 800436e:	4b5d      	ldr	r3, [pc, #372]	@ (80044e4 <update_sensors+0x20c>)
 8004370:	811a      	strh	r2, [r3, #8]

    // Turn off emitters to save power
    turn_off_emitters();
 8004372:	f7ff ff41 	bl	80041f8 <turn_off_emitters>

    // Process wall detection using calibrated thresholds
    if (sensor_cal.calibration_valid) {
 8004376:	4b5c      	ldr	r3, [pc, #368]	@ (80044e8 <update_sensors+0x210>)
 8004378:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800437c:	2b00      	cmp	r3, #0
 800437e:	d032      	beq.n	80043e6 <update_sensors+0x10e>
        // Use dynamic thresholds
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 8004380:	4b58      	ldr	r3, [pc, #352]	@ (80044e4 <update_sensors+0x20c>)
 8004382:	891c      	ldrh	r4, [r3, #8]
 8004384:	2000      	movs	r0, #0
 8004386:	f000 fda7 	bl	8004ed8 <get_calibrated_threshold>
 800438a:	4603      	mov	r3, r0
 800438c:	429c      	cmp	r4, r3
 800438e:	d807      	bhi.n	80043a0 <update_sensors+0xc8>
                            (sensors.front_right > get_calibrated_threshold(1));
 8004390:	4b54      	ldr	r3, [pc, #336]	@ (80044e4 <update_sensors+0x20c>)
 8004392:	885c      	ldrh	r4, [r3, #2]
 8004394:	2001      	movs	r0, #1
 8004396:	f000 fd9f 	bl	8004ed8 <get_calibrated_threshold>
 800439a:	4603      	mov	r3, r0
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 800439c:	429c      	cmp	r4, r3
 800439e:	d901      	bls.n	80043a4 <update_sensors+0xcc>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <update_sensors+0xce>
 80043a4:	2300      	movs	r3, #0
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	4b4d      	ldr	r3, [pc, #308]	@ (80044e4 <update_sensors+0x20c>)
 80043ae:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
 80043b0:	4b4c      	ldr	r3, [pc, #304]	@ (80044e4 <update_sensors+0x20c>)
 80043b2:	88dc      	ldrh	r4, [r3, #6]
 80043b4:	2002      	movs	r0, #2
 80043b6:	f000 fd8f 	bl	8004ed8 <get_calibrated_threshold>
 80043ba:	4603      	mov	r3, r0
 80043bc:	429c      	cmp	r4, r3
 80043be:	bf8c      	ite	hi
 80043c0:	2301      	movhi	r3, #1
 80043c2:	2300      	movls	r3, #0
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b47      	ldr	r3, [pc, #284]	@ (80044e4 <update_sensors+0x20c>)
 80043c8:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
 80043ca:	4b46      	ldr	r3, [pc, #280]	@ (80044e4 <update_sensors+0x20c>)
 80043cc:	889c      	ldrh	r4, [r3, #4]
 80043ce:	2003      	movs	r0, #3
 80043d0:	f000 fd82 	bl	8004ed8 <get_calibrated_threshold>
 80043d4:	4603      	mov	r3, r0
 80043d6:	429c      	cmp	r4, r3
 80043d8:	bf8c      	ite	hi
 80043da:	2301      	movhi	r3, #1
 80043dc:	2300      	movls	r3, #0
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	4b40      	ldr	r3, [pc, #256]	@ (80044e4 <update_sensors+0x20c>)
 80043e2:	731a      	strb	r2, [r3, #12]
 80043e4:	e027      	b.n	8004436 <update_sensors+0x15e>
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80043e6:	4b3f      	ldr	r3, [pc, #252]	@ (80044e4 <update_sensors+0x20c>)
 80043e8:	891b      	ldrh	r3, [r3, #8]
 80043ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80043ee:	d804      	bhi.n	80043fa <update_sensors+0x122>
                            (sensors.front_right > WALL_THRESHOLD_FRONT);
 80043f0:	4b3c      	ldr	r3, [pc, #240]	@ (80044e4 <update_sensors+0x20c>)
 80043f2:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80043f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80043f8:	d901      	bls.n	80043fe <update_sensors+0x126>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <update_sensors+0x128>
 80043fe:	2300      	movs	r3, #0
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b37      	ldr	r3, [pc, #220]	@ (80044e4 <update_sensors+0x20c>)
 8004408:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 800440a:	4b36      	ldr	r3, [pc, #216]	@ (80044e4 <update_sensors+0x20c>)
 800440c:	88db      	ldrh	r3, [r3, #6]
 800440e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004412:	4293      	cmp	r3, r2
 8004414:	bf8c      	ite	hi
 8004416:	2301      	movhi	r3, #1
 8004418:	2300      	movls	r3, #0
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <update_sensors+0x20c>)
 800441e:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 8004420:	4b30      	ldr	r3, [pc, #192]	@ (80044e4 <update_sensors+0x20c>)
 8004422:	889b      	ldrh	r3, [r3, #4]
 8004424:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004428:	4293      	cmp	r3, r2
 800442a:	bf8c      	ite	hi
 800442c:	2301      	movhi	r3, #1
 800442e:	2300      	movls	r3, #0
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b2c      	ldr	r3, [pc, #176]	@ (80044e4 <update_sensors+0x20c>)
 8004434:	731a      	strb	r2, [r3, #12]

    // Enhanced sensor health monitoring using calibration data
    static uint8_t sensor_error_count = 0;
    static bool sensors_healthy = true;

    if (sensor_cal.calibration_valid) {
 8004436:	4b2c      	ldr	r3, [pc, #176]	@ (80044e8 <update_sensors+0x210>)
 8004438:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800443c:	2b00      	cmp	r3, #0
 800443e:	d04c      	beq.n	80044da <update_sensors+0x202>
        // Check if readings are within expected ranges based on calibration
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 8004440:	4b29      	ldr	r3, [pc, #164]	@ (80044e8 <update_sensors+0x210>)
 8004442:	8a1b      	ldrh	r3, [r3, #16]
 8004444:	3bc7      	subs	r3, #199	@ 0xc7
 8004446:	4a27      	ldr	r2, [pc, #156]	@ (80044e4 <update_sensors+0x20c>)
 8004448:	8812      	ldrh	r2, [r2, #0]
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
                                   (sensors.front_left < 3500) &&
                                   (sensors.front_right < 3500) &&
                                   (sensors.side_left < 3500) &&
 800444a:	4293      	cmp	r3, r2
 800444c:	dc21      	bgt.n	8004492 <update_sensors+0x1ba>
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
 800444e:	4b26      	ldr	r3, [pc, #152]	@ (80044e8 <update_sensors+0x210>)
 8004450:	8a1b      	ldrh	r3, [r3, #16]
 8004452:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8004456:	4a23      	ldr	r2, [pc, #140]	@ (80044e4 <update_sensors+0x20c>)
 8004458:	8812      	ldrh	r2, [r2, #0]
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 800445a:	4293      	cmp	r3, r2
 800445c:	db19      	blt.n	8004492 <update_sensors+0x1ba>
                                   (sensors.front_left < 3500) &&
 800445e:	4b21      	ldr	r3, [pc, #132]	@ (80044e4 <update_sensors+0x20c>)
 8004460:	891b      	ldrh	r3, [r3, #8]
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
 8004462:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8004466:	4293      	cmp	r3, r2
 8004468:	d813      	bhi.n	8004492 <update_sensors+0x1ba>
                                   (sensors.front_right < 3500) &&
 800446a:	4b1e      	ldr	r3, [pc, #120]	@ (80044e4 <update_sensors+0x20c>)
 800446c:	885b      	ldrh	r3, [r3, #2]
                                   (sensors.front_left < 3500) &&
 800446e:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8004472:	4293      	cmp	r3, r2
 8004474:	d80d      	bhi.n	8004492 <update_sensors+0x1ba>
                                   (sensors.side_left < 3500) &&
 8004476:	4b1b      	ldr	r3, [pc, #108]	@ (80044e4 <update_sensors+0x20c>)
 8004478:	88db      	ldrh	r3, [r3, #6]
                                   (sensors.front_right < 3500) &&
 800447a:	f640 52ab 	movw	r2, #3499	@ 0xdab
 800447e:	4293      	cmp	r3, r2
 8004480:	d807      	bhi.n	8004492 <update_sensors+0x1ba>
                                   (sensors.side_right < 3500);
 8004482:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <update_sensors+0x20c>)
 8004484:	889b      	ldrh	r3, [r3, #4]
                                   (sensors.side_left < 3500) &&
 8004486:	f640 52ab 	movw	r2, #3499	@ 0xdab
 800448a:	4293      	cmp	r3, r2
 800448c:	d801      	bhi.n	8004492 <update_sensors+0x1ba>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <update_sensors+0x1bc>
 8004492:	2300      	movs	r3, #0
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 8004494:	71fb      	strb	r3, [r7, #7]
 8004496:	79fb      	ldrb	r3, [r7, #7]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	71fb      	strb	r3, [r7, #7]

        if (!current_reading_valid) {
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	f083 0301 	eor.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <update_sensors+0x1ee>
            sensor_error_count++;
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <update_sensors+0x214>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	3301      	adds	r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <update_sensors+0x214>)
 80044b4:	701a      	strb	r2, [r3, #0]
            if (sensor_error_count > 5) {
 80044b6:	4b0d      	ldr	r3, [pc, #52]	@ (80044ec <update_sensors+0x214>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d90d      	bls.n	80044da <update_sensors+0x202>
                sensors_healthy = false;
 80044be:	4b0c      	ldr	r3, [pc, #48]	@ (80044f0 <update_sensors+0x218>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
            }
        } else {
            if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
        }
    }
}
 80044c4:	e009      	b.n	80044da <update_sensors+0x202>
            if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
 80044c6:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <update_sensors+0x214>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <update_sensors+0x202>
 80044ce:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <update_sensors+0x214>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <update_sensors+0x214>)
 80044d8:	701a      	strb	r2, [r3, #0]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	bf00      	nop
 80044e4:	2000142c 	.word	0x2000142c
 80044e8:	2000149c 	.word	0x2000149c
 80044ec:	200014d0 	.word	0x200014d0
 80044f0:	20000004 	.word	0x20000004

080044f4 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 80044f4:	b5b0      	push	{r4, r5, r7, lr}
 80044f6:	b08e      	sub	sp, #56	@ 0x38
 80044f8:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 80044fa:	484b      	ldr	r0, [pc, #300]	@ (8004628 <adc_system_diagnostics+0x134>)
 80044fc:	f7fd fa08 	bl	8001910 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8004500:	4b4a      	ldr	r3, [pc, #296]	@ (800462c <adc_system_diagnostics+0x138>)
 8004502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 800450c:	4848      	ldr	r0, [pc, #288]	@ (8004630 <adc_system_diagnostics+0x13c>)
 800450e:	f7fd f9ff 	bl	8001910 <send_bluetooth_message>
 8004512:	e002      	b.n	800451a <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8004514:	4847      	ldr	r0, [pc, #284]	@ (8004634 <adc_system_diagnostics+0x140>)
 8004516:	f7fd f9fb 	bl	8001910 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 800451a:	4b44      	ldr	r3, [pc, #272]	@ (800462c <adc_system_diagnostics+0x138>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8004526:	4844      	ldr	r0, [pc, #272]	@ (8004638 <adc_system_diagnostics+0x144>)
 8004528:	f7fd f9f2 	bl	8001910 <send_bluetooth_message>
 800452c:	e002      	b.n	8004534 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 800452e:	4843      	ldr	r0, [pc, #268]	@ (800463c <adc_system_diagnostics+0x148>)
 8004530:	f7fd f9ee 	bl	8001910 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004534:	4b42      	ldr	r3, [pc, #264]	@ (8004640 <adc_system_diagnostics+0x14c>)
 8004536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004538:	2b01      	cmp	r3, #1
 800453a:	d103      	bne.n	8004544 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 800453c:	4841      	ldr	r0, [pc, #260]	@ (8004644 <adc_system_diagnostics+0x150>)
 800453e:	f7fd f9e7 	bl	8001910 <send_bluetooth_message>
 8004542:	e005      	b.n	8004550 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004544:	4b3e      	ldr	r3, [pc, #248]	@ (8004640 <adc_system_diagnostics+0x14c>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	4619      	mov	r1, r3
 800454a:	483f      	ldr	r0, [pc, #252]	@ (8004648 <adc_system_diagnostics+0x154>)
 800454c:	f7fd f9f6 	bl	800193c <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004550:	483e      	ldr	r0, [pc, #248]	@ (800464c <adc_system_diagnostics+0x158>)
 8004552:	f7fd f9dd 	bl	8001910 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004556:	4b3e      	ldr	r3, [pc, #248]	@ (8004650 <adc_system_diagnostics+0x15c>)
 8004558:	f107 0420 	add.w	r4, r7, #32
 800455c:	461d      	mov	r5, r3
 800455e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004562:	682b      	ldr	r3, [r5, #0]
 8004564:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8004566:	4b3b      	ldr	r3, [pc, #236]	@ (8004654 <adc_system_diagnostics+0x160>)
 8004568:	f107 040c 	add.w	r4, r7, #12
 800456c:	461d      	mov	r5, r3
 800456e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004572:	682b      	ldr	r3, [r5, #0]
 8004574:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8004576:	2300      	movs	r3, #0
 8004578:	637b      	str	r3, [r7, #52]	@ 0x34
 800457a:	e04b      	b.n	8004614 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 800457c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	3338      	adds	r3, #56	@ 0x38
 8004582:	443b      	add	r3, r7
 8004584:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fe55 	bl	8004238 <read_adc_channel>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	3338      	adds	r3, #56	@ 0x38
 8004598:	443b      	add	r3, r7
 800459a:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 800459e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	3338      	adds	r3, #56	@ 0x38
 80045a4:	443b      	add	r3, r7
 80045a6:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 80045aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	3338      	adds	r3, #56	@ 0x38
 80045b0:	443b      	add	r3, r7
 80045b2:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01f      	beq.n	80045fa <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80045ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	3338      	adds	r3, #56	@ 0x38
 80045c0:	443b      	add	r3, r7
 80045c2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d015      	beq.n	80045f6 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80045ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	3338      	adds	r3, #56	@ 0x38
 80045d0:	443b      	add	r3, r7
 80045d2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d00b      	beq.n	80045f2 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80045da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	3338      	adds	r3, #56	@ 0x38
 80045e0:	443b      	add	r3, r7
 80045e2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d101      	bne.n	80045ee <adc_system_diagnostics+0xfa>
 80045ea:	2204      	movs	r2, #4
 80045ec:	e006      	b.n	80045fc <adc_system_diagnostics+0x108>
 80045ee:	2205      	movs	r2, #5
 80045f0:	e004      	b.n	80045fc <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80045f2:	2203      	movs	r2, #3
 80045f4:	e002      	b.n	80045fc <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80045f6:	2202      	movs	r2, #2
 80045f8:	e000      	b.n	80045fc <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80045fa:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80045fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	3338      	adds	r3, #56	@ 0x38
 8004602:	443b      	add	r3, r7
 8004604:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004608:	4813      	ldr	r0, [pc, #76]	@ (8004658 <adc_system_diagnostics+0x164>)
 800460a:	f7fd f997 	bl	800193c <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 800460e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004610:	3301      	adds	r3, #1
 8004612:	637b      	str	r3, [r7, #52]	@ 0x34
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	2b04      	cmp	r3, #4
 8004618:	ddb0      	ble.n	800457c <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 800461a:	4810      	ldr	r0, [pc, #64]	@ (800465c <adc_system_diagnostics+0x168>)
 800461c:	f7fd f978 	bl	8001910 <send_bluetooth_message>
}
 8004620:	bf00      	nop
 8004622:	3738      	adds	r7, #56	@ 0x38
 8004624:	46bd      	mov	sp, r7
 8004626:	bdb0      	pop	{r4, r5, r7, pc}
 8004628:	0800e91c 	.word	0x0800e91c
 800462c:	40023800 	.word	0x40023800
 8004630:	0800e940 	.word	0x0800e940
 8004634:	0800e95c 	.word	0x0800e95c
 8004638:	0800e978 	.word	0x0800e978
 800463c:	0800e994 	.word	0x0800e994
 8004640:	20000210 	.word	0x20000210
 8004644:	0800e9b0 	.word	0x0800e9b0
 8004648:	0800e9c8 	.word	0x0800e9c8
 800464c:	0800e9e0 	.word	0x0800e9e0
 8004650:	0800ea10 	.word	0x0800ea10
 8004654:	0800ea5c 	.word	0x0800ea5c
 8004658:	0800ea00 	.word	0x0800ea00
 800465c:	0800e8f8 	.word	0x0800e8f8

08004660 <calibrate_sensors>:
 * - Dynamic wall threshold calculation
 * - Sensor health validation
 * - Battery voltage baseline
 */
void calibrate_sensors(void)
{
 8004660:	b590      	push	{r4, r7, lr}
 8004662:	b0a5      	sub	sp, #148	@ 0x94
 8004664:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ENHANCED SENSOR CALIBRATION ===\r\n");
 8004666:	48a9      	ldr	r0, [pc, #676]	@ (800490c <calibrate_sensors+0x2ac>)
 8004668:	f7fd f952 	bl	8001910 <send_bluetooth_message>

    // Initialize calibration structure
    memset(&sensor_cal, 0, sizeof(sensor_cal));
 800466c:	2234      	movs	r2, #52	@ 0x34
 800466e:	2100      	movs	r1, #0
 8004670:	48a7      	ldr	r0, [pc, #668]	@ (8004910 <calibrate_sensors+0x2b0>)
 8004672:	f006 f945 	bl	800a900 <memset>

    // Phase 1: ADC System Validation
    send_bluetooth_message("Phase 1: ADC System Validation\r\n");
 8004676:	48a7      	ldr	r0, [pc, #668]	@ (8004914 <calibrate_sensors+0x2b4>)
 8004678:	f7fd f94a 	bl	8001910 <send_bluetooth_message>

    // Check if ADC is properly initialized
    if (hadc1.State != HAL_ADC_STATE_READY) {
 800467c:	4ba6      	ldr	r3, [pc, #664]	@ (8004918 <calibrate_sensors+0x2b8>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004680:	2b01      	cmp	r3, #1
 8004682:	d00c      	beq.n	800469e <calibrate_sensors+0x3e>
        send_bluetooth_message("❌ ADC not ready - attempting re-initialization\r\n");
 8004684:	48a5      	ldr	r0, [pc, #660]	@ (800491c <calibrate_sensors+0x2bc>)
 8004686:	f7fd f943 	bl	8001910 <send_bluetooth_message>
        if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800468a:	48a3      	ldr	r0, [pc, #652]	@ (8004918 <calibrate_sensors+0x2b8>)
 800468c:	f001 f8b6 	bl	80057fc <HAL_ADC_Init>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <calibrate_sensors+0x3e>
            send_bluetooth_message("❌ CRITICAL: ADC initialization failed!\r\n");
 8004696:	48a2      	ldr	r0, [pc, #648]	@ (8004920 <calibrate_sensors+0x2c0>)
 8004698:	f7fd f93a 	bl	8001910 <send_bluetooth_message>
            return;
 800469c:	e3f0      	b.n	8004e80 <calibrate_sensors+0x820>
        }
    }

    // Verify clock enables
    if (!__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 800469e:	4ba1      	ldr	r3, [pc, #644]	@ (8004924 <calibrate_sensors+0x2c4>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <calibrate_sensors+0x52>
        send_bluetooth_message("❌ ADC1 clock disabled\r\n");
 80046aa:	489f      	ldr	r0, [pc, #636]	@ (8004928 <calibrate_sensors+0x2c8>)
 80046ac:	f7fd f930 	bl	8001910 <send_bluetooth_message>
        return;
 80046b0:	e3e6      	b.n	8004e80 <calibrate_sensors+0x820>
    }

    if (!__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 80046b2:	4b9c      	ldr	r3, [pc, #624]	@ (8004924 <calibrate_sensors+0x2c4>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <calibrate_sensors+0x66>
        send_bluetooth_message("❌ GPIOA clock disabled\r\n");
 80046be:	489b      	ldr	r0, [pc, #620]	@ (800492c <calibrate_sensors+0x2cc>)
 80046c0:	f7fd f926 	bl	8001910 <send_bluetooth_message>
        return;
 80046c4:	e3dc      	b.n	8004e80 <calibrate_sensors+0x820>
    }

    send_bluetooth_message("✅ ADC system validation passed\r\n");
 80046c6:	489a      	ldr	r0, [pc, #616]	@ (8004930 <calibrate_sensors+0x2d0>)
 80046c8:	f7fd f922 	bl	8001910 <send_bluetooth_message>

    // Phase 2: Baseline Ambient Light Measurement
    send_bluetooth_message("Phase 2: Measuring ambient baselines (IR emitters OFF)\r\n");
 80046cc:	4899      	ldr	r0, [pc, #612]	@ (8004934 <calibrate_sensors+0x2d4>)
 80046ce:	f7fd f91f 	bl	8001910 <send_bluetooth_message>

    // Ensure emitters are OFF
    turn_off_emitters();
 80046d2:	f7ff fd91 	bl	80041f8 <turn_off_emitters>
    HAL_Delay(100); // Allow sensors to stabilize
 80046d6:	2064      	movs	r0, #100	@ 0x64
 80046d8:	f001 f86c 	bl	80057b4 <HAL_Delay>

    // Take multiple ambient readings for stability
    uint32_t ambient_sum[4] = {0};
 80046dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
    uint32_t ambient_readings = 50;
 80046ea:	2332      	movs	r3, #50	@ 0x32
 80046ec:	663b      	str	r3, [r7, #96]	@ 0x60

    for (int i = 0; i < ambient_readings; i++) {
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046f4:	e027      	b.n	8004746 <calibrate_sensors+0xe6>
        ambient_sum[0] += read_adc_channel(ADC_CHANNEL_5); // Front Left
 80046f6:	2005      	movs	r0, #5
 80046f8:	f7ff fd9e 	bl	8004238 <read_adc_channel>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004702:	4413      	add	r3, r2
 8004704:	64bb      	str	r3, [r7, #72]	@ 0x48
        ambient_sum[1] += read_adc_channel(ADC_CHANNEL_2); // Front Right
 8004706:	2002      	movs	r0, #2
 8004708:	f7ff fd96 	bl	8004238 <read_adc_channel>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004712:	4413      	add	r3, r2
 8004714:	64fb      	str	r3, [r7, #76]	@ 0x4c
        ambient_sum[2] += read_adc_channel(ADC_CHANNEL_4); // Side Left
 8004716:	2004      	movs	r0, #4
 8004718:	f7ff fd8e 	bl	8004238 <read_adc_channel>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004722:	4413      	add	r3, r2
 8004724:	653b      	str	r3, [r7, #80]	@ 0x50
        ambient_sum[3] += read_adc_channel(ADC_CHANNEL_3); // Side Right
 8004726:	2003      	movs	r0, #3
 8004728:	f7ff fd86 	bl	8004238 <read_adc_channel>
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004732:	4413      	add	r3, r2
 8004734:	657b      	str	r3, [r7, #84]	@ 0x54
        HAL_Delay(10);
 8004736:	200a      	movs	r0, #10
 8004738:	f001 f83c 	bl	80057b4 <HAL_Delay>
    for (int i = 0; i < ambient_readings; i++) {
 800473c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004740:	3301      	adds	r3, #1
 8004742:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800474a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800474c:	429a      	cmp	r2, r3
 800474e:	d8d2      	bhi.n	80046f6 <calibrate_sensors+0x96>
    }

    // Calculate ambient baselines
    sensor_cal.ambient_baseline[0] = ambient_sum[0] / ambient_readings; // Front Left
 8004750:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004754:	fbb2 f3f3 	udiv	r3, r2, r3
 8004758:	b29a      	uxth	r2, r3
 800475a:	4b6d      	ldr	r3, [pc, #436]	@ (8004910 <calibrate_sensors+0x2b0>)
 800475c:	801a      	strh	r2, [r3, #0]
    sensor_cal.ambient_baseline[1] = ambient_sum[1] / ambient_readings; // Front Right
 800475e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004760:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	b29a      	uxth	r2, r3
 8004768:	4b69      	ldr	r3, [pc, #420]	@ (8004910 <calibrate_sensors+0x2b0>)
 800476a:	805a      	strh	r2, [r3, #2]
    sensor_cal.ambient_baseline[2] = ambient_sum[2] / ambient_readings; // Side Left
 800476c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800476e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	b29a      	uxth	r2, r3
 8004776:	4b66      	ldr	r3, [pc, #408]	@ (8004910 <calibrate_sensors+0x2b0>)
 8004778:	809a      	strh	r2, [r3, #4]
    sensor_cal.ambient_baseline[3] = ambient_sum[3] / ambient_readings; // Side Right
 800477a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800477c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	b29a      	uxth	r2, r3
 8004784:	4b62      	ldr	r3, [pc, #392]	@ (8004910 <calibrate_sensors+0x2b0>)
 8004786:	80da      	strh	r2, [r3, #6]

    send_bluetooth_message("Ambient baselines (emitters OFF):\r\n");
 8004788:	486b      	ldr	r0, [pc, #428]	@ (8004938 <calibrate_sensors+0x2d8>)
 800478a:	f7fd f8c1 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.ambient_baseline[0]);
 800478e:	4b60      	ldr	r3, [pc, #384]	@ (8004910 <calibrate_sensors+0x2b0>)
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	4619      	mov	r1, r3
 8004794:	4869      	ldr	r0, [pc, #420]	@ (800493c <calibrate_sensors+0x2dc>)
 8004796:	f7fd f8d1 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.ambient_baseline[1]);
 800479a:	4b5d      	ldr	r3, [pc, #372]	@ (8004910 <calibrate_sensors+0x2b0>)
 800479c:	885b      	ldrh	r3, [r3, #2]
 800479e:	4619      	mov	r1, r3
 80047a0:	4867      	ldr	r0, [pc, #412]	@ (8004940 <calibrate_sensors+0x2e0>)
 80047a2:	f7fd f8cb 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.ambient_baseline[2]);
 80047a6:	4b5a      	ldr	r3, [pc, #360]	@ (8004910 <calibrate_sensors+0x2b0>)
 80047a8:	889b      	ldrh	r3, [r3, #4]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4865      	ldr	r0, [pc, #404]	@ (8004944 <calibrate_sensors+0x2e4>)
 80047ae:	f7fd f8c5 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.ambient_baseline[3]);
 80047b2:	4b57      	ldr	r3, [pc, #348]	@ (8004910 <calibrate_sensors+0x2b0>)
 80047b4:	88db      	ldrh	r3, [r3, #6]
 80047b6:	4619      	mov	r1, r3
 80047b8:	4863      	ldr	r0, [pc, #396]	@ (8004948 <calibrate_sensors+0x2e8>)
 80047ba:	f7fd f8bf 	bl	800193c <send_bluetooth_printf>

    // Phase 3: Active Sensor Response Measurement
    send_bluetooth_message("Phase 3: Measuring sensor response (IR emitters ON)\r\n");
 80047be:	4863      	ldr	r0, [pc, #396]	@ (800494c <calibrate_sensors+0x2ec>)
 80047c0:	f7fd f8a6 	bl	8001910 <send_bluetooth_message>

    // Turn on emitters and measure response
    turn_on_emitters();
 80047c4:	f7ff fcf4 	bl	80041b0 <turn_on_emitters>
    HAL_Delay(50); // Emitter stabilization
 80047c8:	2032      	movs	r0, #50	@ 0x32
 80047ca:	f000 fff3 	bl	80057b4 <HAL_Delay>

    uint32_t active_sum[4] = {0};
 80047ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	605a      	str	r2, [r3, #4]
 80047d8:	609a      	str	r2, [r3, #8]
 80047da:	60da      	str	r2, [r3, #12]
    uint32_t active_readings = 50;
 80047dc:	2332      	movs	r3, #50	@ 0x32
 80047de:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Track min/max for noise calculation
    uint16_t temp_min[4] = {4095, 4095, 4095, 4095};
 80047e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004950 <calibrate_sensors+0x2f0>)
 80047e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80047e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80047ea:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t temp_max[4] = {0, 0, 0, 0};
 80047ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < active_readings; i++) {
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047fe:	e07a      	b.n	80048f6 <calibrate_sensors+0x296>
        uint16_t readings[4];
        readings[0] = read_adc_channel(ADC_CHANNEL_5); // Front Left
 8004800:	2005      	movs	r0, #5
 8004802:	f7ff fd19 	bl	8004238 <read_adc_channel>
 8004806:	4603      	mov	r3, r0
 8004808:	803b      	strh	r3, [r7, #0]
        readings[1] = read_adc_channel(ADC_CHANNEL_2); // Front Right
 800480a:	2002      	movs	r0, #2
 800480c:	f7ff fd14 	bl	8004238 <read_adc_channel>
 8004810:	4603      	mov	r3, r0
 8004812:	807b      	strh	r3, [r7, #2]
        readings[2] = read_adc_channel(ADC_CHANNEL_4); // Side Left
 8004814:	2004      	movs	r0, #4
 8004816:	f7ff fd0f 	bl	8004238 <read_adc_channel>
 800481a:	4603      	mov	r3, r0
 800481c:	80bb      	strh	r3, [r7, #4]
        readings[3] = read_adc_channel(ADC_CHANNEL_3); // Side Right
 800481e:	2003      	movs	r0, #3
 8004820:	f7ff fd0a 	bl	8004238 <read_adc_channel>
 8004824:	4603      	mov	r3, r0
 8004826:	80fb      	strh	r3, [r7, #6]

        for (int j = 0; j < 4; j++) {
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800482e:	e056      	b.n	80048de <calibrate_sensors+0x27e>
            active_sum[j] += readings[j];
 8004830:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	3390      	adds	r3, #144	@ 0x90
 8004838:	443b      	add	r3, r7
 800483a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 800483e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	3390      	adds	r3, #144	@ 0x90
 8004846:	443b      	add	r3, r7
 8004848:	f833 3c90 	ldrh.w	r3, [r3, #-144]
 800484c:	441a      	add	r2, r3
 800484e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	3390      	adds	r3, #144	@ 0x90
 8004856:	443b      	add	r3, r7
 8004858:	f843 2c58 	str.w	r2, [r3, #-88]
            if (readings[j] < temp_min[j]) temp_min[j] = readings[j];
 800485c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	3390      	adds	r3, #144	@ 0x90
 8004864:	443b      	add	r3, r7
 8004866:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 800486a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	3390      	adds	r3, #144	@ 0x90
 8004872:	443b      	add	r3, r7
 8004874:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8004878:	429a      	cmp	r2, r3
 800487a:	d20d      	bcs.n	8004898 <calibrate_sensors+0x238>
 800487c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	3390      	adds	r3, #144	@ 0x90
 8004884:	443b      	add	r3, r7
 8004886:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 800488a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	3390      	adds	r3, #144	@ 0x90
 8004892:	443b      	add	r3, r7
 8004894:	f823 2c60 	strh.w	r2, [r3, #-96]
            if (readings[j] > temp_max[j]) temp_max[j] = readings[j];
 8004898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	3390      	adds	r3, #144	@ 0x90
 80048a0:	443b      	add	r3, r7
 80048a2:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 80048a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	3390      	adds	r3, #144	@ 0x90
 80048ae:	443b      	add	r3, r7
 80048b0:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d90d      	bls.n	80048d4 <calibrate_sensors+0x274>
 80048b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	3390      	adds	r3, #144	@ 0x90
 80048c0:	443b      	add	r3, r7
 80048c2:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 80048c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	3390      	adds	r3, #144	@ 0x90
 80048ce:	443b      	add	r3, r7
 80048d0:	f823 2c68 	strh.w	r2, [r3, #-104]
        for (int j = 0; j < 4; j++) {
 80048d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048d8:	3301      	adds	r3, #1
 80048da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	dda4      	ble.n	8004830 <calibrate_sensors+0x1d0>
        }
        HAL_Delay(10);
 80048e6:	200a      	movs	r0, #10
 80048e8:	f000 ff64 	bl	80057b4 <HAL_Delay>
    for (int i = 0; i < active_readings; i++) {
 80048ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048f0:	3301      	adds	r3, #1
 80048f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048fc:	429a      	cmp	r2, r3
 80048fe:	f63f af7f 	bhi.w	8004800 <calibrate_sensors+0x1a0>
    }

    // Calculate active response levels and noise
    uint16_t active_avg[4];
    for (int i = 0; i < 4; i++) {
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004908:	e076      	b.n	80049f8 <calibrate_sensors+0x398>
 800490a:	bf00      	nop
 800490c:	0800ea70 	.word	0x0800ea70
 8004910:	2000149c 	.word	0x2000149c
 8004914:	0800ea98 	.word	0x0800ea98
 8004918:	20000210 	.word	0x20000210
 800491c:	0800eabc 	.word	0x0800eabc
 8004920:	0800eaf0 	.word	0x0800eaf0
 8004924:	40023800 	.word	0x40023800
 8004928:	0800eb1c 	.word	0x0800eb1c
 800492c:	0800eb38 	.word	0x0800eb38
 8004930:	0800eb54 	.word	0x0800eb54
 8004934:	0800eb78 	.word	0x0800eb78
 8004938:	0800ebb4 	.word	0x0800ebb4
 800493c:	0800ebd8 	.word	0x0800ebd8
 8004940:	0800ebec 	.word	0x0800ebec
 8004944:	0800ec00 	.word	0x0800ec00
 8004948:	0800ec14 	.word	0x0800ec14
 800494c:	0800ec28 	.word	0x0800ec28
 8004950:	0800eff8 	.word	0x0800eff8
        active_avg[i] = active_sum[i] / active_readings;
 8004954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	3390      	adds	r3, #144	@ 0x90
 800495c:	443b      	add	r3, r7
 800495e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8004962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	b29a      	uxth	r2, r3
 800496a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	3390      	adds	r3, #144	@ 0x90
 8004972:	443b      	add	r3, r7
 8004974:	f823 2c70 	strh.w	r2, [r3, #-112]
        sensor_cal.sensor_min[i] = temp_min[i];
 8004978:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	3390      	adds	r3, #144	@ 0x90
 8004980:	443b      	add	r3, r7
 8004982:	f833 1c60 	ldrh.w	r1, [r3, #-96]
 8004986:	4aaf      	ldr	r2, [pc, #700]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004988:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800498c:	3308      	adds	r3, #8
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	4413      	add	r3, r2
 8004992:	460a      	mov	r2, r1
 8004994:	805a      	strh	r2, [r3, #2]
        sensor_cal.sensor_max[i] = temp_max[i];
 8004996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	3390      	adds	r3, #144	@ 0x90
 800499e:	443b      	add	r3, r7
 80049a0:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 80049a4:	4aa7      	ldr	r2, [pc, #668]	@ (8004c44 <calibrate_sensors+0x5e4>)
 80049a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049aa:	330c      	adds	r3, #12
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	4413      	add	r3, r2
 80049b0:	460a      	mov	r2, r1
 80049b2:	805a      	strh	r2, [r3, #2]
        sensor_cal.noise_levels[i] = (float)(temp_max[i] - temp_min[i]);
 80049b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	3390      	adds	r3, #144	@ 0x90
 80049bc:	443b      	add	r3, r7
 80049be:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 80049c2:	461a      	mov	r2, r3
 80049c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	3390      	adds	r3, #144	@ 0x90
 80049cc:	443b      	add	r3, r7
 80049ce:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049dc:	4a99      	ldr	r2, [pc, #612]	@ (8004c44 <calibrate_sensors+0x5e4>)
 80049de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049e2:	3308      	adds	r3, #8
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	3304      	adds	r3, #4
 80049ea:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 80049ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049f2:	3301      	adds	r3, #1
 80049f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	dda9      	ble.n	8004954 <calibrate_sensors+0x2f4>
    }

    send_bluetooth_message("Active sensor response (emitters ON):\r\n");
 8004a00:	4891      	ldr	r0, [pc, #580]	@ (8004c48 <calibrate_sensors+0x5e8>)
 8004a02:	f7fc ff85 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d (noise: %.1f)\r\n", active_avg[0], sensor_cal.noise_levels[0]);
 8004a06:	8c3b      	ldrh	r3, [r7, #32]
 8004a08:	461c      	mov	r4, r3
 8004a0a:	4b8e      	ldr	r3, [pc, #568]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fb fda2 	bl	8000558 <__aeabi_f2d>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4621      	mov	r1, r4
 8004a1a:	488c      	ldr	r0, [pc, #560]	@ (8004c4c <calibrate_sensors+0x5ec>)
 8004a1c:	f7fc ff8e 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d (noise: %.1f)\r\n", active_avg[1], sensor_cal.noise_levels[1]);
 8004a20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004a22:	461c      	mov	r4, r3
 8004a24:	4b87      	ldr	r3, [pc, #540]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fb fd95 	bl	8000558 <__aeabi_f2d>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4621      	mov	r1, r4
 8004a34:	4886      	ldr	r0, [pc, #536]	@ (8004c50 <calibrate_sensors+0x5f0>)
 8004a36:	f7fc ff81 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d (noise: %.1f)\r\n", active_avg[2], sensor_cal.noise_levels[2]);
 8004a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a3c:	461c      	mov	r4, r3
 8004a3e:	4b81      	ldr	r3, [pc, #516]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fd88 	bl	8000558 <__aeabi_f2d>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	4881      	ldr	r0, [pc, #516]	@ (8004c54 <calibrate_sensors+0x5f4>)
 8004a50:	f7fc ff74 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d (noise: %.1f)\r\n", active_avg[3], sensor_cal.noise_levels[3]);
 8004a54:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004a56:	461c      	mov	r4, r3
 8004a58:	4b7a      	ldr	r3, [pc, #488]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fd7b 	bl	8000558 <__aeabi_f2d>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4621      	mov	r1, r4
 8004a68:	487b      	ldr	r0, [pc, #492]	@ (8004c58 <calibrate_sensors+0x5f8>)
 8004a6a:	f7fc ff67 	bl	800193c <send_bluetooth_printf>

    // Phase 4: Dynamic Threshold Calculation
    send_bluetooth_message("Phase 4: Calculating dynamic wall detection thresholds\r\n");
 8004a6e:	487b      	ldr	r0, [pc, #492]	@ (8004c5c <calibrate_sensors+0x5fc>)
 8004a70:	f7fc ff4e 	bl	8001910 <send_bluetooth_message>

    // Calculate differential response (active - ambient)
    uint16_t differential[4];
    for (int i = 0; i < 4; i++) {
 8004a74:	2300      	movs	r3, #0
 8004a76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004a78:	e028      	b.n	8004acc <calibrate_sensors+0x46c>
        if (active_avg[i] > sensor_cal.ambient_baseline[i]) {
 8004a7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	3390      	adds	r3, #144	@ 0x90
 8004a80:	443b      	add	r3, r7
 8004a82:	f833 2c70 	ldrh.w	r2, [r3, #-112]
 8004a86:	496f      	ldr	r1, [pc, #444]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d912      	bls.n	8004ab8 <calibrate_sensors+0x458>
            differential[i] = active_avg[i] - sensor_cal.ambient_baseline[i];
 8004a92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	3390      	adds	r3, #144	@ 0x90
 8004a98:	443b      	add	r3, r7
 8004a9a:	f833 2c70 	ldrh.w	r2, [r3, #-112]
 8004a9e:	4969      	ldr	r1, [pc, #420]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004aa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	3390      	adds	r3, #144	@ 0x90
 8004ab0:	443b      	add	r3, r7
 8004ab2:	f823 2c78 	strh.w	r2, [r3, #-120]
 8004ab6:	e006      	b.n	8004ac6 <calibrate_sensors+0x466>
        } else {
            differential[i] = 0; // Sensor may be faulty
 8004ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	3390      	adds	r3, #144	@ 0x90
 8004abe:	443b      	add	r3, r7
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f823 2c78 	strh.w	r2, [r3, #-120]
    for (int i = 0; i < 4; i++) {
 8004ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac8:	3301      	adds	r3, #1
 8004aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004acc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	ddd3      	ble.n	8004a7a <calibrate_sensors+0x41a>
    }

    // Set dynamic thresholds based on differential response and noise
    // Front sensors (0,1) typically have higher response near walls
    // Side sensors (2,3) have different response characteristics
    for (int i = 0; i < 4; i++) {
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ad6:	e08d      	b.n	8004bf4 <calibrate_sensors+0x594>
        if (i < 2) { // Front sensors
 8004ad8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	dc30      	bgt.n	8004b40 <calibrate_sensors+0x4e0>
            // For front sensors, set threshold at 40% of differential + noise margin
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8004ade:	4a59      	ldr	r2, [pc, #356]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                          (differential[i] * 0.4f) +
 8004aee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	3390      	adds	r3, #144	@ 0x90
 8004af4:	443b      	add	r3, r7
 8004af6:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b02:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8004c60 <calibrate_sensors+0x600>
 8004b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8004b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
                                          (sensor_cal.noise_levels[i] * 3.0f);
 8004b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b12:	3308      	adds	r3, #8
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	3304      	adds	r3, #4
 8004b1a:	edd3 7a00 	vldr	s15, [r3]
 8004b1e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8004b22:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                          (differential[i] * 0.4f) +
 8004b26:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8004b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2e:	ee17 3a90 	vmov	r3, s15
 8004b32:	b299      	uxth	r1, r3
 8004b34:	4a43      	ldr	r2, [pc, #268]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b38:	3304      	adds	r3, #4
 8004b3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004b3e:	e02f      	b.n	8004ba0 <calibrate_sensors+0x540>
        } else { // Side sensors
            // For side sensors, set threshold at 30% of differential + noise margin
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8004b40:	4a40      	ldr	r2, [pc, #256]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b48:	ee07 3a90 	vmov	s15, r3
 8004b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                          (differential[i] * 0.3f) +
 8004b50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	3390      	adds	r3, #144	@ 0x90
 8004b56:	443b      	add	r3, r7
 8004b58:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b64:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8004c64 <calibrate_sensors+0x604>
 8004b68:	ee67 7aa6 	vmul.f32	s15, s15, s13
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8004b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
                                          (sensor_cal.noise_levels[i] * 3.0f);
 8004b70:	4a34      	ldr	r2, [pc, #208]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004b72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b74:	3308      	adds	r3, #8
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8004b84:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                          (differential[i] * 0.3f) +
 8004b88:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8004b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b90:	ee17 3a90 	vmov	r3, s15
 8004b94:	b299      	uxth	r1, r3
 8004b96:	4a2b      	ldr	r2, [pc, #172]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }

        // Sanity check - ensure threshold is reasonable
        if (sensor_cal.wall_thresholds[i] < sensor_cal.ambient_baseline[i] + 100) {
 8004ba0:	4a28      	ldr	r2, [pc, #160]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba8:	3363      	adds	r3, #99	@ 0x63
 8004baa:	4926      	ldr	r1, [pc, #152]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004bac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004bae:	3204      	adds	r2, #4
 8004bb0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	db0a      	blt.n	8004bce <calibrate_sensors+0x56e>
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] + 100;
 8004bb8:	4a22      	ldr	r2, [pc, #136]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc0:	3364      	adds	r3, #100	@ 0x64
 8004bc2:	b299      	uxth	r1, r3
 8004bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bc8:	3304      	adds	r3, #4
 8004bca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        if (sensor_cal.wall_thresholds[i] > 3500) { // Don't exceed reasonable ADC range
 8004bce:	4a1d      	ldr	r2, [pc, #116]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004bd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd8:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d906      	bls.n	8004bee <calibrate_sensors+0x58e>
            sensor_cal.wall_thresholds[i] = 3500;
 8004be0:	4a18      	ldr	r2, [pc, #96]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004be2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004be4:	3304      	adds	r3, #4
 8004be6:	f640 51ac 	movw	r1, #3500	@ 0xdac
 8004bea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 8004bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	f77f af6e 	ble.w	8004ad8 <calibrate_sensors+0x478>
        }
    }

    send_bluetooth_message("Dynamic wall detection thresholds:\r\n");
 8004bfc:	481a      	ldr	r0, [pc, #104]	@ (8004c68 <calibrate_sensors+0x608>)
 8004bfe:	f7fc fe87 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.wall_thresholds[0]);
 8004c02:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004c04:	891b      	ldrh	r3, [r3, #8]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4818      	ldr	r0, [pc, #96]	@ (8004c6c <calibrate_sensors+0x60c>)
 8004c0a:	f7fc fe97 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.wall_thresholds[1]);
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004c10:	895b      	ldrh	r3, [r3, #10]
 8004c12:	4619      	mov	r1, r3
 8004c14:	4816      	ldr	r0, [pc, #88]	@ (8004c70 <calibrate_sensors+0x610>)
 8004c16:	f7fc fe91 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.wall_thresholds[2]);
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004c1c:	899b      	ldrh	r3, [r3, #12]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4814      	ldr	r0, [pc, #80]	@ (8004c74 <calibrate_sensors+0x614>)
 8004c22:	f7fc fe8b 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.wall_thresholds[3]);
 8004c26:	4b07      	ldr	r3, [pc, #28]	@ (8004c44 <calibrate_sensors+0x5e4>)
 8004c28:	89db      	ldrh	r3, [r3, #14]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4812      	ldr	r0, [pc, #72]	@ (8004c78 <calibrate_sensors+0x618>)
 8004c2e:	f7fc fe85 	bl	800193c <send_bluetooth_printf>

    // Phase 5: Battery Baseline Measurement
    send_bluetooth_message("Phase 5: Battery voltage baseline measurement\r\n");
 8004c32:	4812      	ldr	r0, [pc, #72]	@ (8004c7c <calibrate_sensors+0x61c>)
 8004c34:	f7fc fe6c 	bl	8001910 <send_bluetooth_message>

    uint32_t battery_sum = 0;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	677b      	str	r3, [r7, #116]	@ 0x74
    for (int i = 0; i < 20; i++) {
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c40:	e02c      	b.n	8004c9c <calibrate_sensors+0x63c>
 8004c42:	bf00      	nop
 8004c44:	2000149c 	.word	0x2000149c
 8004c48:	0800ec60 	.word	0x0800ec60
 8004c4c:	0800ec88 	.word	0x0800ec88
 8004c50:	0800ecac 	.word	0x0800ecac
 8004c54:	0800ecd0 	.word	0x0800ecd0
 8004c58:	0800ecf4 	.word	0x0800ecf4
 8004c5c:	0800ed18 	.word	0x0800ed18
 8004c60:	3ecccccd 	.word	0x3ecccccd
 8004c64:	3e99999a 	.word	0x3e99999a
 8004c68:	0800ed54 	.word	0x0800ed54
 8004c6c:	0800ebd8 	.word	0x0800ebd8
 8004c70:	0800ebec 	.word	0x0800ebec
 8004c74:	0800ec00 	.word	0x0800ec00
 8004c78:	0800ec14 	.word	0x0800ec14
 8004c7c:	0800ed7c 	.word	0x0800ed7c
        battery_sum += read_adc_channel(ADC_CHANNEL_0);
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7ff fad9 	bl	8004238 <read_adc_channel>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c8c:	4413      	add	r3, r2
 8004c8e:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_Delay(10);
 8004c90:	200a      	movs	r0, #10
 8004c92:	f000 fd8f 	bl	80057b4 <HAL_Delay>
    for (int i = 0; i < 20; i++) {
 8004c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c98:	3301      	adds	r3, #1
 8004c9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c9e:	2b13      	cmp	r3, #19
 8004ca0:	ddee      	ble.n	8004c80 <calibrate_sensors+0x620>
    }
    sensor_cal.battery_baseline = battery_sum / 20;
 8004ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ca4:	4a78      	ldr	r2, [pc, #480]	@ (8004e88 <calibrate_sensors+0x828>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	4b77      	ldr	r3, [pc, #476]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004cb0:	821a      	strh	r2, [r3, #16]

    float battery_voltage = (sensor_cal.battery_baseline * 3.3f) / 4096.0f;
 8004cb2:	4b76      	ldr	r3, [pc, #472]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004cb4:	8a1b      	ldrh	r3, [r3, #16]
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cbe:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004e90 <calibrate_sensors+0x830>
 8004cc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cc6:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8004e94 <calibrate_sensors+0x834>
 8004cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cce:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
                         sensor_cal.battery_baseline, battery_voltage);
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004cd4:	8a1b      	ldrh	r3, [r3, #16]
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
 8004cd6:	461c      	mov	r4, r3
 8004cd8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004cda:	f7fb fc3d 	bl	8000558 <__aeabi_f2d>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	486c      	ldr	r0, [pc, #432]	@ (8004e98 <calibrate_sensors+0x838>)
 8004ce6:	f7fc fe29 	bl	800193c <send_bluetooth_printf>

    // Phase 6: Sensor Health Validation
    send_bluetooth_message("Phase 6: Sensor health validation\r\n");
 8004cea:	486c      	ldr	r0, [pc, #432]	@ (8004e9c <calibrate_sensors+0x83c>)
 8004cec:	f7fc fe10 	bl	8001910 <send_bluetooth_message>

    bool all_sensors_healthy = true;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Check each sensor
    const char* sensor_names[4] = {"Front Left", "Front Right", "Side Left", "Side Right"};
 8004cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea0 <calibrate_sensors+0x840>)
 8004cf8:	f107 0408 	add.w	r4, r7, #8
 8004cfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for (int i = 0; i < 4; i++) {
 8004d02:	2300      	movs	r3, #0
 8004d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d06:	e079      	b.n	8004dfc <calibrate_sensors+0x79c>
        bool sensor_healthy = true;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

        // Check if sensor shows reasonable differential response
        if (differential[i] < 50) {
 8004d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	3390      	adds	r3, #144	@ 0x90
 8004d14:	443b      	add	r3, r7
 8004d16:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8004d1a:	2b31      	cmp	r3, #49	@ 0x31
 8004d1c:	d812      	bhi.n	8004d44 <calibrate_sensors+0x6e4>
            send_bluetooth_printf("⚠️ %s: Low differential response (%d)\r\n",
 8004d1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	3390      	adds	r3, #144	@ 0x90
 8004d24:	443b      	add	r3, r7
 8004d26:	f853 1c88 	ldr.w	r1, [r3, #-136]
                                 sensor_names[i], differential[i]);
 8004d2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	3390      	adds	r3, #144	@ 0x90
 8004d30:	443b      	add	r3, r7
 8004d32:	f833 3c78 	ldrh.w	r3, [r3, #-120]
            send_bluetooth_printf("⚠️ %s: Low differential response (%d)\r\n",
 8004d36:	461a      	mov	r2, r3
 8004d38:	485a      	ldr	r0, [pc, #360]	@ (8004ea4 <calibrate_sensors+0x844>)
 8004d3a:	f7fc fdff 	bl	800193c <send_bluetooth_printf>
            sensor_healthy = false;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        // Check noise levels
        if (sensor_cal.noise_levels[i] > 200) {
 8004d44:	4a51      	ldr	r2, [pc, #324]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004d46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d48:	3308      	adds	r3, #8
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3304      	adds	r3, #4
 8004d50:	edd3 7a00 	vldr	s15, [r3]
 8004d54:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8004ea8 <calibrate_sensors+0x848>
 8004d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d60:	dd18      	ble.n	8004d94 <calibrate_sensors+0x734>
            send_bluetooth_printf("⚠️ %s: High noise level (%.1f)\r\n",
 8004d62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3390      	adds	r3, #144	@ 0x90
 8004d68:	443b      	add	r3, r7
 8004d6a:	f853 4c88 	ldr.w	r4, [r3, #-136]
                                 sensor_names[i], sensor_cal.noise_levels[i]);
 8004d6e:	4a47      	ldr	r2, [pc, #284]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d72:	3308      	adds	r3, #8
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	3304      	adds	r3, #4
 8004d7a:	681b      	ldr	r3, [r3, #0]
            send_bluetooth_printf("⚠️ %s: High noise level (%.1f)\r\n",
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fb fbeb 	bl	8000558 <__aeabi_f2d>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4621      	mov	r1, r4
 8004d88:	4848      	ldr	r0, [pc, #288]	@ (8004eac <calibrate_sensors+0x84c>)
 8004d8a:	f7fc fdd7 	bl	800193c <send_bluetooth_printf>
            sensor_healthy = false;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        // Check if readings are within reasonable ADC range
        if (sensor_cal.ambient_baseline[i] > 3800 || sensor_cal.ambient_baseline[i] < 10) {
 8004d94:	4a3d      	ldr	r2, [pc, #244]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004d96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d9c:	f640 62d8 	movw	r2, #3800	@ 0xed8
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d805      	bhi.n	8004db0 <calibrate_sensors+0x750>
 8004da4:	4a39      	ldr	r2, [pc, #228]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dac:	2b09      	cmp	r3, #9
 8004dae:	d810      	bhi.n	8004dd2 <calibrate_sensors+0x772>
            send_bluetooth_printf("⚠️ %s: Ambient reading out of range (%d)\r\n",
 8004db0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	3390      	adds	r3, #144	@ 0x90
 8004db6:	443b      	add	r3, r7
 8004db8:	f853 1c88 	ldr.w	r1, [r3, #-136]
                                 sensor_names[i], sensor_cal.ambient_baseline[i]);
 8004dbc:	4a33      	ldr	r2, [pc, #204]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
            send_bluetooth_printf("⚠️ %s: Ambient reading out of range (%d)\r\n",
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	483a      	ldr	r0, [pc, #232]	@ (8004eb0 <calibrate_sensors+0x850>)
 8004dc8:	f7fc fdb8 	bl	800193c <send_bluetooth_printf>
            sensor_healthy = false;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (sensor_healthy) {
 8004dd2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <calibrate_sensors+0x790>
            send_bluetooth_printf("✅ %s: Healthy\r\n", sensor_names[i]);
 8004dda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	3390      	adds	r3, #144	@ 0x90
 8004de0:	443b      	add	r3, r7
 8004de2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4832      	ldr	r0, [pc, #200]	@ (8004eb4 <calibrate_sensors+0x854>)
 8004dea:	f7fc fda7 	bl	800193c <send_bluetooth_printf>
 8004dee:	e002      	b.n	8004df6 <calibrate_sensors+0x796>
        } else {
            all_sensors_healthy = false;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    for (int i = 0; i < 4; i++) {
 8004df6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004df8:	3301      	adds	r3, #1
 8004dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	dd82      	ble.n	8004d08 <calibrate_sensors+0x6a8>
        }
    }

    // Check battery
    if (battery_voltage < 3.0f) {
 8004e02:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004e06:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8004e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	d506      	bpl.n	8004e22 <calibrate_sensors+0x7c2>
        send_bluetooth_message("⚠️ Battery: Low voltage detected\r\n");
 8004e14:	4828      	ldr	r0, [pc, #160]	@ (8004eb8 <calibrate_sensors+0x858>)
 8004e16:	f7fc fd7b 	bl	8001910 <send_bluetooth_message>
        all_sensors_healthy = false;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004e20:	e012      	b.n	8004e48 <calibrate_sensors+0x7e8>
    } else if (battery_voltage > 4.5f) {
 8004e22:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8004e26:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8004e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e32:	dd06      	ble.n	8004e42 <calibrate_sensors+0x7e2>
        send_bluetooth_message("⚠️ Battery: Voltage too high\r\n");
 8004e34:	4821      	ldr	r0, [pc, #132]	@ (8004ebc <calibrate_sensors+0x85c>)
 8004e36:	f7fc fd6b 	bl	8001910 <send_bluetooth_message>
        all_sensors_healthy = false;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004e40:	e002      	b.n	8004e48 <calibrate_sensors+0x7e8>
    } else {
        send_bluetooth_message("✅ Battery: Healthy\r\n");
 8004e42:	481f      	ldr	r0, [pc, #124]	@ (8004ec0 <calibrate_sensors+0x860>)
 8004e44:	f7fc fd64 	bl	8001910 <send_bluetooth_message>
    }

    // Phase 7: Calibration Complete
    sensor_cal.calibration_valid = all_sensors_healthy;
 8004e48:	4a10      	ldr	r2, [pc, #64]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004e4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004e4e:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22

    turn_off_emitters(); // Save power
 8004e52:	f7ff f9d1 	bl	80041f8 <turn_off_emitters>

    if (sensor_cal.calibration_valid) {
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <calibrate_sensors+0x82c>)
 8004e58:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <calibrate_sensors+0x80e>
        send_bluetooth_message("✅ SENSOR CALIBRATION COMPLETE - All systems nominal\r\n");
 8004e60:	4818      	ldr	r0, [pc, #96]	@ (8004ec4 <calibrate_sensors+0x864>)
 8004e62:	f7fc fd55 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message("Dynamic thresholds will be used for wall detection\r\n");
 8004e66:	4818      	ldr	r0, [pc, #96]	@ (8004ec8 <calibrate_sensors+0x868>)
 8004e68:	f7fc fd52 	bl	8001910 <send_bluetooth_message>
 8004e6c:	e005      	b.n	8004e7a <calibrate_sensors+0x81a>
    } else {
        send_bluetooth_message("⚠️ SENSOR CALIBRATION COMPLETE - Some issues detected\r\n");
 8004e6e:	4817      	ldr	r0, [pc, #92]	@ (8004ecc <calibrate_sensors+0x86c>)
 8004e70:	f7fc fd4e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message("Robot will continue with degraded sensor performance\r\n");
 8004e74:	4816      	ldr	r0, [pc, #88]	@ (8004ed0 <calibrate_sensors+0x870>)
 8004e76:	f7fc fd4b 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("=====================================\r\n");
 8004e7a:	4816      	ldr	r0, [pc, #88]	@ (8004ed4 <calibrate_sensors+0x874>)
 8004e7c:	f7fc fd48 	bl	8001910 <send_bluetooth_message>
}
 8004e80:	3794      	adds	r7, #148	@ 0x94
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	bf00      	nop
 8004e88:	cccccccd 	.word	0xcccccccd
 8004e8c:	2000149c 	.word	0x2000149c
 8004e90:	40533333 	.word	0x40533333
 8004e94:	45800000 	.word	0x45800000
 8004e98:	0800edac 	.word	0x0800edac
 8004e9c:	0800edcc 	.word	0x0800edcc
 8004ea0:	0800f030 	.word	0x0800f030
 8004ea4:	0800edf0 	.word	0x0800edf0
 8004ea8:	43480000 	.word	0x43480000
 8004eac:	0800ee1c 	.word	0x0800ee1c
 8004eb0:	0800ee44 	.word	0x0800ee44
 8004eb4:	0800ee74 	.word	0x0800ee74
 8004eb8:	0800ee88 	.word	0x0800ee88
 8004ebc:	0800eeb0 	.word	0x0800eeb0
 8004ec0:	0800eed4 	.word	0x0800eed4
 8004ec4:	0800eeec 	.word	0x0800eeec
 8004ec8:	0800ef24 	.word	0x0800ef24
 8004ecc:	0800ef5c 	.word	0x0800ef5c
 8004ed0:	0800ef98 	.word	0x0800ef98
 8004ed4:	0800efd0 	.word	0x0800efd0

08004ed8 <get_calibrated_threshold>:
 * @brief Get calibrated wall threshold for specific sensor
 * @param sensor_index: 0=Front_Left, 1=Front_Right, 2=Side_Left, 3=Side_Right
 * @return Calibrated threshold value
 */
uint16_t get_calibrated_threshold(int sensor_index)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
    if (sensor_index < 0 || sensor_index > 3 || !sensor_cal.calibration_valid) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	db0a      	blt.n	8004efc <get_calibrated_threshold+0x24>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	dc07      	bgt.n	8004efc <get_calibrated_threshold+0x24>
 8004eec:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <get_calibrated_threshold+0x4c>)
 8004eee:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004ef2:	f083 0301 	eor.w	r3, r3, #1
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <get_calibrated_threshold+0x36>
        // Return default thresholds if calibration failed
        return (sensor_index < 2) ? WALL_THRESHOLD_FRONT : WALL_THRESHOLD_SIDE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	dc02      	bgt.n	8004f08 <get_calibrated_threshold+0x30>
 8004f02:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8004f06:	e007      	b.n	8004f18 <get_calibrated_threshold+0x40>
 8004f08:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8004f0c:	e004      	b.n	8004f18 <get_calibrated_threshold+0x40>
    }

    return sensor_cal.wall_thresholds[sensor_index];
 8004f0e:	4a05      	ldr	r2, [pc, #20]	@ (8004f24 <get_calibrated_threshold+0x4c>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	2000149c 	.word	0x2000149c

08004f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <HAL_MspInit+0x4c>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	4a0f      	ldr	r2, [pc, #60]	@ (8004f74 <HAL_MspInit+0x4c>)
 8004f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <HAL_MspInit+0x4c>)
 8004f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f46:	607b      	str	r3, [r7, #4]
 8004f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	4b09      	ldr	r3, [pc, #36]	@ (8004f74 <HAL_MspInit+0x4c>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <HAL_MspInit+0x4c>)
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f5a:	4b06      	ldr	r3, [pc, #24]	@ (8004f74 <HAL_MspInit+0x4c>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40023800 	.word	0x40023800

08004f78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f80:	f107 0314 	add.w	r3, r7, #20
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a17      	ldr	r2, [pc, #92]	@ (8004ff4 <HAL_ADC_MspInit+0x7c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d127      	bne.n	8004fea <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	4b16      	ldr	r3, [pc, #88]	@ (8004ff8 <HAL_ADC_MspInit+0x80>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	4a15      	ldr	r2, [pc, #84]	@ (8004ff8 <HAL_ADC_MspInit+0x80>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004faa:	4b13      	ldr	r3, [pc, #76]	@ (8004ff8 <HAL_ADC_MspInit+0x80>)
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff8 <HAL_ADC_MspInit+0x80>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004ff8 <HAL_ADC_MspInit+0x80>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <HAL_ADC_MspInit+0x80>)
 8004fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 8004fd2:	233d      	movs	r3, #61	@ 0x3d
 8004fd4:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4805      	ldr	r0, [pc, #20]	@ (8004ffc <HAL_ADC_MspInit+0x84>)
 8004fe6:	f001 f99f 	bl	8006328 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004fea:	bf00      	nop
 8004fec:	3728      	adds	r7, #40	@ 0x28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40012000 	.word	0x40012000
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40020000 	.word	0x40020000

08005000 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <HAL_SPI_MspInit+0x84>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d12c      	bne.n	800507c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	4b18      	ldr	r3, [pc, #96]	@ (8005088 <HAL_SPI_MspInit+0x88>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <HAL_SPI_MspInit+0x88>)
 800502c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005030:	6413      	str	r3, [r2, #64]	@ 0x40
 8005032:	4b15      	ldr	r3, [pc, #84]	@ (8005088 <HAL_SPI_MspInit+0x88>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	4b11      	ldr	r3, [pc, #68]	@ (8005088 <HAL_SPI_MspInit+0x88>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005046:	4a10      	ldr	r2, [pc, #64]	@ (8005088 <HAL_SPI_MspInit+0x88>)
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	6313      	str	r3, [r2, #48]	@ 0x30
 800504e:	4b0e      	ldr	r3, [pc, #56]	@ (8005088 <HAL_SPI_MspInit+0x88>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 800505a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800505e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005060:	2302      	movs	r3, #2
 8005062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005068:	2303      	movs	r3, #3
 800506a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800506c:	2305      	movs	r3, #5
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	4619      	mov	r1, r3
 8005076:	4805      	ldr	r0, [pc, #20]	@ (800508c <HAL_SPI_MspInit+0x8c>)
 8005078:	f001 f956 	bl	8006328 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800507c:	bf00      	nop
 800507e:	3728      	adds	r7, #40	@ 0x28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40003800 	.word	0x40003800
 8005088:	40023800 	.word	0x40023800
 800508c:	40020400 	.word	0x40020400

08005090 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a18      	ldr	r2, [pc, #96]	@ (8005100 <HAL_TIM_Base_MspInit+0x70>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d116      	bne.n	80050d0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <HAL_TIM_Base_MspInit+0x74>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	4a16      	ldr	r2, [pc, #88]	@ (8005104 <HAL_TIM_Base_MspInit+0x74>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80050b2:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <HAL_TIM_Base_MspInit+0x74>)
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	2107      	movs	r1, #7
 80050c2:	2019      	movs	r0, #25
 80050c4:	f001 f867 	bl	8006196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050c8:	2019      	movs	r0, #25
 80050ca:	f001 f880 	bl	80061ce <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80050ce:	e012      	b.n	80050f6 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005108 <HAL_TIM_Base_MspInit+0x78>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_TIM_Base_MspInit+0x74>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	4a08      	ldr	r2, [pc, #32]	@ (8005104 <HAL_TIM_Base_MspInit+0x74>)
 80050e4:	f043 0302 	orr.w	r3, r3, #2
 80050e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_TIM_Base_MspInit+0x74>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40010000 	.word	0x40010000
 8005104:	40023800 	.word	0x40023800
 8005108:	40000400 	.word	0x40000400

0800510c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08c      	sub	sp, #48	@ 0x30
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005114:	f107 031c 	add.w	r3, r7, #28
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	605a      	str	r2, [r3, #4]
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800512c:	d14b      	bne.n	80051c6 <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	4b3f      	ldr	r3, [pc, #252]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	4a3e      	ldr	r2, [pc, #248]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	6413      	str	r3, [r2, #64]	@ 0x40
 800513e:	4b3c      	ldr	r3, [pc, #240]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	61bb      	str	r3, [r7, #24]
 8005148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	4b38      	ldr	r3, [pc, #224]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	4a37      	ldr	r2, [pc, #220]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005154:	f043 0301 	orr.w	r3, r3, #1
 8005158:	6313      	str	r3, [r2, #48]	@ 0x30
 800515a:	4b35      	ldr	r3, [pc, #212]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
 800516a:	4b31      	ldr	r3, [pc, #196]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	4a30      	ldr	r2, [pc, #192]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005170:	f043 0302 	orr.w	r3, r3, #2
 8005174:	6313      	str	r3, [r2, #48]	@ 0x30
 8005176:	4b2e      	ldr	r3, [pc, #184]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	613b      	str	r3, [r7, #16]
 8005180:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8005182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005188:	2302      	movs	r3, #2
 800518a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005190:	2300      	movs	r3, #0
 8005192:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005194:	2301      	movs	r3, #1
 8005196:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8005198:	f107 031c 	add.w	r3, r7, #28
 800519c:	4619      	mov	r1, r3
 800519e:	4825      	ldr	r0, [pc, #148]	@ (8005234 <HAL_TIM_Encoder_MspInit+0x128>)
 80051a0:	f001 f8c2 	bl	8006328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 80051a4:	2308      	movs	r3, #8
 80051a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051b4:	2301      	movs	r3, #1
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 80051b8:	f107 031c 	add.w	r3, r7, #28
 80051bc:	4619      	mov	r1, r3
 80051be:	481e      	ldr	r0, [pc, #120]	@ (8005238 <HAL_TIM_Encoder_MspInit+0x12c>)
 80051c0:	f001 f8b2 	bl	8006328 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80051c4:	e030      	b.n	8005228 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1c      	ldr	r2, [pc, #112]	@ (800523c <HAL_TIM_Encoder_MspInit+0x130>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d12b      	bne.n	8005228 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	4b16      	ldr	r3, [pc, #88]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d8:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 80051da:	f043 0304 	orr.w	r3, r3, #4
 80051de:	6413      	str	r3, [r2, #64]	@ 0x40
 80051e0:	4b13      	ldr	r3, [pc, #76]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ec:	2300      	movs	r3, #0
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f4:	4a0e      	ldr	r2, [pc, #56]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 80051f6:	f043 0302 	orr.w	r3, r3, #2
 80051fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80051fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005230 <HAL_TIM_Encoder_MspInit+0x124>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 8005208:	23c0      	movs	r3, #192	@ 0xc0
 800520a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005218:	2302      	movs	r3, #2
 800521a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	4619      	mov	r1, r3
 8005222:	4805      	ldr	r0, [pc, #20]	@ (8005238 <HAL_TIM_Encoder_MspInit+0x12c>)
 8005224:	f001 f880 	bl	8006328 <HAL_GPIO_Init>
}
 8005228:	bf00      	nop
 800522a:	3730      	adds	r7, #48	@ 0x30
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40023800 	.word	0x40023800
 8005234:	40020000 	.word	0x40020000
 8005238:	40020400 	.word	0x40020400
 800523c:	40000800 	.word	0x40000800

08005240 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	@ 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005248:	f107 0314 	add.w	r3, r7, #20
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	60da      	str	r2, [r3, #12]
 8005256:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a33      	ldr	r2, [pc, #204]	@ (800532c <HAL_TIM_MspPostInit+0xec>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d11f      	bne.n	80052a2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	4b32      	ldr	r3, [pc, #200]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	4a31      	ldr	r2, [pc, #196]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6313      	str	r3, [r2, #48]	@ 0x30
 8005272:	4b2f      	ldr	r3, [pc, #188]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 800527e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005284:	2302      	movs	r3, #2
 8005286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	2300      	movs	r3, #0
 800528e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005290:	2301      	movs	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	4619      	mov	r1, r3
 800529a:	4826      	ldr	r0, [pc, #152]	@ (8005334 <HAL_TIM_MspPostInit+0xf4>)
 800529c:	f001 f844 	bl	8006328 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80052a0:	e040      	b.n	8005324 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a24      	ldr	r2, [pc, #144]	@ (8005338 <HAL_TIM_MspPostInit+0xf8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d13b      	bne.n	8005324 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	4b1f      	ldr	r3, [pc, #124]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80052bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	4b18      	ldr	r3, [pc, #96]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d0:	4a17      	ldr	r2, [pc, #92]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 80052d2:	f043 0302 	orr.w	r3, r3, #2
 80052d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80052d8:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <HAL_TIM_MspPostInit+0xf0>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 80052e4:	23c0      	movs	r3, #192	@ 0xc0
 80052e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e8:	2302      	movs	r3, #2
 80052ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f0:	2300      	movs	r3, #0
 80052f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052f4:	2302      	movs	r3, #2
 80052f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f8:	f107 0314 	add.w	r3, r7, #20
 80052fc:	4619      	mov	r1, r3
 80052fe:	480d      	ldr	r0, [pc, #52]	@ (8005334 <HAL_TIM_MspPostInit+0xf4>)
 8005300:	f001 f812 	bl	8006328 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 8005304:	2303      	movs	r3, #3
 8005306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005308:	2302      	movs	r3, #2
 800530a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005310:	2300      	movs	r3, #0
 8005312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005314:	2302      	movs	r3, #2
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	4619      	mov	r1, r3
 800531e:	4807      	ldr	r0, [pc, #28]	@ (800533c <HAL_TIM_MspPostInit+0xfc>)
 8005320:	f001 f802 	bl	8006328 <HAL_GPIO_Init>
}
 8005324:	bf00      	nop
 8005326:	3728      	adds	r7, #40	@ 0x28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40010000 	.word	0x40010000
 8005330:	40023800 	.word	0x40023800
 8005334:	40020000 	.word	0x40020000
 8005338:	40000400 	.word	0x40000400
 800533c:	40020400 	.word	0x40020400

08005340 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	@ 0x28
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005348:	f107 0314 	add.w	r3, r7, #20
 800534c:	2200      	movs	r2, #0
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1d      	ldr	r2, [pc, #116]	@ (80053d4 <HAL_UART_MspInit+0x94>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d134      	bne.n	80053cc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	4b1c      	ldr	r3, [pc, #112]	@ (80053d8 <HAL_UART_MspInit+0x98>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_UART_MspInit+0x98>)
 800536c:	f043 0320 	orr.w	r3, r3, #32
 8005370:	6453      	str	r3, [r2, #68]	@ 0x44
 8005372:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <HAL_UART_MspInit+0x98>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <HAL_UART_MspInit+0x98>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	4a14      	ldr	r2, [pc, #80]	@ (80053d8 <HAL_UART_MspInit+0x98>)
 8005388:	f043 0301 	orr.w	r3, r3, #1
 800538c:	6313      	str	r3, [r2, #48]	@ 0x30
 800538e:	4b12      	ldr	r3, [pc, #72]	@ (80053d8 <HAL_UART_MspInit+0x98>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 800539a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800539e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a8:	2303      	movs	r3, #3
 80053aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053ac:	2308      	movs	r3, #8
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	4619      	mov	r1, r3
 80053b6:	4809      	ldr	r0, [pc, #36]	@ (80053dc <HAL_UART_MspInit+0x9c>)
 80053b8:	f000 ffb6 	bl	8006328 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2106      	movs	r1, #6
 80053c0:	2047      	movs	r0, #71	@ 0x47
 80053c2:	f000 fee8 	bl	8006196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80053c6:	2047      	movs	r0, #71	@ 0x47
 80053c8:	f000 ff01 	bl	80061ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 80053cc:	bf00      	nop
 80053ce:	3728      	adds	r7, #40	@ 0x28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40011400 	.word	0x40011400
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40020000 	.word	0x40020000

080053e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <NMI_Handler+0x4>

080053e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053ec:	bf00      	nop
 80053ee:	e7fd      	b.n	80053ec <HardFault_Handler+0x4>

080053f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <MemManage_Handler+0x4>

080053f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <BusFault_Handler+0x4>

08005400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005404:	bf00      	nop
 8005406:	e7fd      	b.n	8005404 <UsageFault_Handler+0x4>

08005408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005416:	b480      	push	{r7}
 8005418:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800541a:	bf00      	nop
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005428:	bf00      	nop
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005436:	f000 f99d 	bl	8005774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	bd80      	pop	{r7, pc}

0800543e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8005442:	2002      	movs	r0, #2
 8005444:	f001 f928 	bl	8006698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005448:	bf00      	nop
 800544a:	bd80      	pop	{r7, pc}

0800544c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005450:	4802      	ldr	r0, [pc, #8]	@ (800545c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005452:	f002 fe53 	bl	80080fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200002b0 	.word	0x200002b0

08005460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8005464:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005468:	f001 f916 	bl	8006698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}

08005470 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005474:	4802      	ldr	r0, [pc, #8]	@ (8005480 <USART6_IRQHandler+0x10>)
 8005476:	f003 fd6f 	bl	8008f58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200003d0 	.word	0x200003d0

08005484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return 1;
 8005488:	2301      	movs	r3, #1
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_kill>:

int _kill(int pid, int sig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800549e:	f005 fa81 	bl	800a9a4 <__errno>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2216      	movs	r2, #22
 80054a6:	601a      	str	r2, [r3, #0]
  return -1;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <_exit>:

void _exit (int status)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80054bc:	f04f 31ff 	mov.w	r1, #4294967295
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff ffe7 	bl	8005494 <_kill>
  while (1) {}    /* Make sure we hang here */
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <_exit+0x12>

080054ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e00a      	b.n	80054f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054dc:	f3af 8000 	nop.w
 80054e0:	4601      	mov	r1, r0
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	60ba      	str	r2, [r7, #8]
 80054e8:	b2ca      	uxtb	r2, r1
 80054ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3301      	adds	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	dbf0      	blt.n	80054dc <_read+0x12>
  }

  return len;
 80054fa:	687b      	ldr	r3, [r7, #4]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e009      	b.n	800552a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	60ba      	str	r2, [r7, #8]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	3301      	adds	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	429a      	cmp	r2, r3
 8005530:	dbf1      	blt.n	8005516 <_write+0x12>
  }
  return len;
 8005532:	687b      	ldr	r3, [r7, #4]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <_close>:

int _close(int file)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005564:	605a      	str	r2, [r3, #4]
  return 0;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <_isatty>:

int _isatty(int file)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800557c:	2301      	movs	r3, #1
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055ac:	4a14      	ldr	r2, [pc, #80]	@ (8005600 <_sbrk+0x5c>)
 80055ae:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <_sbrk+0x60>)
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055b8:	4b13      	ldr	r3, [pc, #76]	@ (8005608 <_sbrk+0x64>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055c0:	4b11      	ldr	r3, [pc, #68]	@ (8005608 <_sbrk+0x64>)
 80055c2:	4a12      	ldr	r2, [pc, #72]	@ (800560c <_sbrk+0x68>)
 80055c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055c6:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <_sbrk+0x64>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4413      	add	r3, r2
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d207      	bcs.n	80055e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055d4:	f005 f9e6 	bl	800a9a4 <__errno>
 80055d8:	4603      	mov	r3, r0
 80055da:	220c      	movs	r2, #12
 80055dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055de:	f04f 33ff 	mov.w	r3, #4294967295
 80055e2:	e009      	b.n	80055f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055e4:	4b08      	ldr	r3, [pc, #32]	@ (8005608 <_sbrk+0x64>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <_sbrk+0x64>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	4a05      	ldr	r2, [pc, #20]	@ (8005608 <_sbrk+0x64>)
 80055f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055f6:	68fb      	ldr	r3, [r7, #12]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3718      	adds	r7, #24
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20020000 	.word	0x20020000
 8005604:	00000400 	.word	0x00000400
 8005608:	200014d4 	.word	0x200014d4
 800560c:	20001628 	.word	0x20001628

08005610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005614:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <SystemInit+0x20>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	4a05      	ldr	r2, [pc, #20]	@ (8005630 <SystemInit+0x20>)
 800561c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005624:	bf00      	nop
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	e000ed00 	.word	0xe000ed00

08005634 <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	460a      	mov	r2, r1
 800563e:	71fb      	strb	r3, [r7, #7]
 8005640:	4613      	mov	r3, r2
 8005642:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	2110      	movs	r1, #16
 8005654:	4808      	ldr	r0, [pc, #32]	@ (8005678 <led_status+0x44>)
 8005656:	f000 ffeb 	bl	8006630 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800565a:	79bb      	ldrb	r3, [r7, #6]
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	2120      	movs	r1, #32
 800566a:	4803      	ldr	r0, [pc, #12]	@ (8005678 <led_status+0x44>)
 800566c:	f000 ffe0 	bl	8006630 <HAL_GPIO_WritePin>
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40020400 	.word	0x40020400

0800567c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800567c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80056b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005680:	f7ff ffc6 	bl	8005610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005684:	480c      	ldr	r0, [pc, #48]	@ (80056b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005686:	490d      	ldr	r1, [pc, #52]	@ (80056bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005688:	4a0d      	ldr	r2, [pc, #52]	@ (80056c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800568a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800568c:	e002      	b.n	8005694 <LoopCopyDataInit>

0800568e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800568e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005692:	3304      	adds	r3, #4

08005694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005698:	d3f9      	bcc.n	800568e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800569a:	4a0a      	ldr	r2, [pc, #40]	@ (80056c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800569c:	4c0a      	ldr	r4, [pc, #40]	@ (80056c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800569e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056a0:	e001      	b.n	80056a6 <LoopFillZerobss>

080056a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056a4:	3204      	adds	r2, #4

080056a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056a8:	d3fb      	bcc.n	80056a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80056aa:	f005 f981 	bl	800a9b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ae:	f7fc fd05 	bl	80020bc <main>
  bx  lr    
 80056b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80056c0:	0800f40c 	.word	0x0800f40c
  ldr r2, =_sbss
 80056c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80056c8:	20001628 	.word	0x20001628

080056cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056cc:	e7fe      	b.n	80056cc <ADC_IRQHandler>
	...

080056d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <HAL_Init+0x40>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <HAL_Init+0x40>)
 80056da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <HAL_Init+0x40>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005710 <HAL_Init+0x40>)
 80056e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056ec:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <HAL_Init+0x40>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a07      	ldr	r2, [pc, #28]	@ (8005710 <HAL_Init+0x40>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056f8:	2003      	movs	r0, #3
 80056fa:	f000 fd41 	bl	8006180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056fe:	200f      	movs	r0, #15
 8005700:	f000 f808 	bl	8005714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005704:	f7ff fc10 	bl	8004f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023c00 	.word	0x40023c00

08005714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <HAL_InitTick+0x54>)
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	4b12      	ldr	r3, [pc, #72]	@ (800576c <HAL_InitTick+0x58>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	4619      	mov	r1, r3
 8005726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800572a:	fbb3 f3f1 	udiv	r3, r3, r1
 800572e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fd59 	bl	80061ea <HAL_SYSTICK_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e00e      	b.n	8005760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b0f      	cmp	r3, #15
 8005746:	d80a      	bhi.n	800575e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005748:	2200      	movs	r2, #0
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	f04f 30ff 	mov.w	r0, #4294967295
 8005750:	f000 fd21 	bl	8006196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005754:	4a06      	ldr	r2, [pc, #24]	@ (8005770 <HAL_InitTick+0x5c>)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
 800575c:	e000      	b.n	8005760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000008 	.word	0x20000008
 800576c:	20000010 	.word	0x20000010
 8005770:	2000000c 	.word	0x2000000c

08005774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005778:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <HAL_IncTick+0x20>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <HAL_IncTick+0x24>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4413      	add	r3, r2
 8005784:	4a04      	ldr	r2, [pc, #16]	@ (8005798 <HAL_IncTick+0x24>)
 8005786:	6013      	str	r3, [r2, #0]
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	20000010 	.word	0x20000010
 8005798:	200014d8 	.word	0x200014d8

0800579c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return uwTick;
 80057a0:	4b03      	ldr	r3, [pc, #12]	@ (80057b0 <HAL_GetTick+0x14>)
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	200014d8 	.word	0x200014d8

080057b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057bc:	f7ff ffee 	bl	800579c <HAL_GetTick>
 80057c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d005      	beq.n	80057da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80057ce:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <HAL_Delay+0x44>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80057da:	bf00      	nop
 80057dc:	f7ff ffde 	bl	800579c <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d8f7      	bhi.n	80057dc <HAL_Delay+0x28>
  {
  }
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000010 	.word	0x20000010

080057fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e033      	b.n	800587a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fbac 	bl	8004f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	d118      	bne.n	800586c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005842:	f023 0302 	bic.w	r3, r3, #2
 8005846:	f043 0202 	orr.w	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 faca 	bl	8005de8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	f043 0201 	orr.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	@ 0x40
 800586a:	e001      	b.n	8005870 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_ADC_Start+0x1a>
 800589a:	2302      	movs	r3, #2
 800589c:	e097      	b.n	80059ce <HAL_ADC_Start+0x14a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d018      	beq.n	80058e6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058c4:	4b45      	ldr	r3, [pc, #276]	@ (80059dc <HAL_ADC_Start+0x158>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a45      	ldr	r2, [pc, #276]	@ (80059e0 <HAL_ADC_Start+0x15c>)
 80058ca:	fba2 2303 	umull	r2, r3, r2, r3
 80058ce:	0c9a      	lsrs	r2, r3, #18
 80058d0:	4613      	mov	r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	4413      	add	r3, r2
 80058d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80058d8:	e002      	b.n	80058e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	3b01      	subs	r3, #1
 80058de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1f9      	bne.n	80058da <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d15f      	bne.n	80059b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800591e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005932:	d106      	bne.n	8005942 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005938:	f023 0206 	bic.w	r2, r3, #6
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005940:	e002      	b.n	8005948 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005950:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_ADC_Start+0x160>)
 8005952:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800595c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10f      	bne.n	800598a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d129      	bne.n	80059cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005986:	609a      	str	r2, [r3, #8]
 8005988:	e020      	b.n	80059cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <HAL_ADC_Start+0x164>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d11b      	bne.n	80059cc <HAL_ADC_Start+0x148>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d114      	bne.n	80059cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80059b0:	609a      	str	r2, [r3, #8]
 80059b2:	e00b      	b.n	80059cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	f043 0210 	orr.w	r2, r3, #16
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000008 	.word	0x20000008
 80059e0:	431bde83 	.word	0x431bde83
 80059e4:	40012300 	.word	0x40012300
 80059e8:	40012000 	.word	0x40012000

080059ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <HAL_ADC_Stop+0x16>
 80059fe:	2302      	movs	r3, #2
 8005a00:	e021      	b.n	8005a46 <HAL_ADC_Stop+0x5a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d109      	bne.n	8005a3c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	f043 0201 	orr.w	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a6e:	d113      	bne.n	8005a98 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a7e:	d10b      	bne.n	8005a98 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a84:	f043 0220 	orr.w	r2, r3, #32
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e063      	b.n	8005b60 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a98:	f7ff fe80 	bl	800579c <HAL_GetTick>
 8005a9c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a9e:	e021      	b.n	8005ae4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d01d      	beq.n	8005ae4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_ADC_PollForConversion+0x6c>
 8005aae:	f7ff fe75 	bl	800579c <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d212      	bcs.n	8005ae4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d00b      	beq.n	8005ae4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad0:	f043 0204 	orr.w	r2, r3, #4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e03d      	b.n	8005b60 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d1d6      	bne.n	8005aa0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f06f 0212 	mvn.w	r2, #18
 8005afa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b00:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d123      	bne.n	8005b5e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d11f      	bne.n	8005b5e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b24:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d006      	beq.n	8005b3a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d111      	bne.n	8005b5e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d105      	bne.n	8005b5e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e113      	b.n	8005dc8 <HAL_ADC_ConfigChannel+0x244>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d925      	bls.n	8005bfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68d9      	ldr	r1, [r3, #12]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3b1e      	subs	r3, #30
 8005bc6:	2207      	movs	r2, #7
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	43da      	mvns	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	400a      	ands	r2, r1
 8005bd4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68d9      	ldr	r1, [r3, #12]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	4618      	mov	r0, r3
 8005be8:	4603      	mov	r3, r0
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	4403      	add	r3, r0
 8005bee:	3b1e      	subs	r3, #30
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e022      	b.n	8005c42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6919      	ldr	r1, [r3, #16]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	2207      	movs	r2, #7
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43da      	mvns	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	400a      	ands	r2, r1
 8005c1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6919      	ldr	r1, [r3, #16]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4618      	mov	r0, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4403      	add	r3, r0
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b06      	cmp	r3, #6
 8005c48:	d824      	bhi.n	8005c94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	3b05      	subs	r3, #5
 8005c5c:	221f      	movs	r2, #31
 8005c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c62:	43da      	mvns	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	400a      	ands	r2, r1
 8005c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4618      	mov	r0, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	3b05      	subs	r3, #5
 8005c86:	fa00 f203 	lsl.w	r2, r0, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c92:	e04c      	b.n	8005d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b0c      	cmp	r3, #12
 8005c9a:	d824      	bhi.n	8005ce6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	3b23      	subs	r3, #35	@ 0x23
 8005cae:	221f      	movs	r2, #31
 8005cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb4:	43da      	mvns	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	400a      	ands	r2, r1
 8005cbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	4618      	mov	r0, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3b23      	subs	r3, #35	@ 0x23
 8005cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ce4:	e023      	b.n	8005d2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3b41      	subs	r3, #65	@ 0x41
 8005cf8:	221f      	movs	r2, #31
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	400a      	ands	r2, r1
 8005d06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	4618      	mov	r0, r3
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	3b41      	subs	r3, #65	@ 0x41
 8005d22:	fa00 f203 	lsl.w	r2, r0, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d2e:	4b29      	ldr	r3, [pc, #164]	@ (8005dd4 <HAL_ADC_ConfigChannel+0x250>)
 8005d30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a28      	ldr	r2, [pc, #160]	@ (8005dd8 <HAL_ADC_ConfigChannel+0x254>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10f      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x1d8>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b12      	cmp	r3, #18
 8005d42:	d10b      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd8 <HAL_ADC_ConfigChannel+0x254>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d12b      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x23a>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <HAL_ADC_ConfigChannel+0x258>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <HAL_ADC_ConfigChannel+0x1f4>
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b11      	cmp	r3, #17
 8005d76:	d122      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a11      	ldr	r2, [pc, #68]	@ (8005ddc <HAL_ADC_ConfigChannel+0x258>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d111      	bne.n	8005dbe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d9a:	4b11      	ldr	r3, [pc, #68]	@ (8005de0 <HAL_ADC_ConfigChannel+0x25c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <HAL_ADC_ConfigChannel+0x260>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	0c9a      	lsrs	r2, r3, #18
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005db0:	e002      	b.n	8005db8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3b01      	subs	r3, #1
 8005db6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f9      	bne.n	8005db2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40012300 	.word	0x40012300
 8005dd8:	40012000 	.word	0x40012000
 8005ddc:	10000012 	.word	0x10000012
 8005de0:	20000008 	.word	0x20000008
 8005de4:	431bde83 	.word	0x431bde83

08005de8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005df0:	4b79      	ldr	r3, [pc, #484]	@ (8005fd8 <ADC_Init+0x1f0>)
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6859      	ldr	r1, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	021a      	lsls	r2, r3, #8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6899      	ldr	r1, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7a:	4a58      	ldr	r2, [pc, #352]	@ (8005fdc <ADC_Init+0x1f4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d022      	beq.n	8005ec6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6899      	ldr	r1, [r3, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6899      	ldr	r1, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	609a      	str	r2, [r3, #8]
 8005ec4:	e00f      	b.n	8005ee6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0202 	bic.w	r2, r2, #2
 8005ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6899      	ldr	r1, [r3, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7e1b      	ldrb	r3, [r3, #24]
 8005f00:	005a      	lsls	r2, r3, #1
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01b      	beq.n	8005f4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f22:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	035a      	lsls	r2, r3, #13
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
 8005f4a:	e007      	b.n	8005f5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f5a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	051a      	lsls	r2, r3, #20
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6899      	ldr	r1, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f9e:	025a      	lsls	r2, r3, #9
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	029a      	lsls	r2, r3, #10
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40012300 	.word	0x40012300
 8005fdc:	0f000001 	.word	0x0f000001

08005fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <__NVIC_SetPriorityGrouping+0x44>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800600c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006012:	4a04      	ldr	r2, [pc, #16]	@ (8006024 <__NVIC_SetPriorityGrouping+0x44>)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	60d3      	str	r3, [r2, #12]
}
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	e000ed00 	.word	0xe000ed00

08006028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800602c:	4b04      	ldr	r3, [pc, #16]	@ (8006040 <__NVIC_GetPriorityGrouping+0x18>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	0a1b      	lsrs	r3, r3, #8
 8006032:	f003 0307 	and.w	r3, r3, #7
}
 8006036:	4618      	mov	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	e000ed00 	.word	0xe000ed00

08006044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	4603      	mov	r3, r0
 800604c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800604e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006052:	2b00      	cmp	r3, #0
 8006054:	db0b      	blt.n	800606e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006056:	79fb      	ldrb	r3, [r7, #7]
 8006058:	f003 021f 	and.w	r2, r3, #31
 800605c:	4907      	ldr	r1, [pc, #28]	@ (800607c <__NVIC_EnableIRQ+0x38>)
 800605e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	2001      	movs	r0, #1
 8006066:	fa00 f202 	lsl.w	r2, r0, r2
 800606a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	e000e100 	.word	0xe000e100

08006080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	6039      	str	r1, [r7, #0]
 800608a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800608c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006090:	2b00      	cmp	r3, #0
 8006092:	db0a      	blt.n	80060aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	b2da      	uxtb	r2, r3
 8006098:	490c      	ldr	r1, [pc, #48]	@ (80060cc <__NVIC_SetPriority+0x4c>)
 800609a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609e:	0112      	lsls	r2, r2, #4
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	440b      	add	r3, r1
 80060a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060a8:	e00a      	b.n	80060c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	4908      	ldr	r1, [pc, #32]	@ (80060d0 <__NVIC_SetPriority+0x50>)
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	f003 030f 	and.w	r3, r3, #15
 80060b6:	3b04      	subs	r3, #4
 80060b8:	0112      	lsls	r2, r2, #4
 80060ba:	b2d2      	uxtb	r2, r2
 80060bc:	440b      	add	r3, r1
 80060be:	761a      	strb	r2, [r3, #24]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	e000e100 	.word	0xe000e100
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b089      	sub	sp, #36	@ 0x24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0307 	and.w	r3, r3, #7
 80060e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f1c3 0307 	rsb	r3, r3, #7
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	bf28      	it	cs
 80060f2:	2304      	movcs	r3, #4
 80060f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3304      	adds	r3, #4
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d902      	bls.n	8006104 <NVIC_EncodePriority+0x30>
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	3b03      	subs	r3, #3
 8006102:	e000      	b.n	8006106 <NVIC_EncodePriority+0x32>
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43da      	mvns	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	401a      	ands	r2, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800611c:	f04f 31ff 	mov.w	r1, #4294967295
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	43d9      	mvns	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800612c:	4313      	orrs	r3, r2
         );
}
 800612e:	4618      	mov	r0, r3
 8006130:	3724      	adds	r7, #36	@ 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3b01      	subs	r3, #1
 8006148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800614c:	d301      	bcc.n	8006152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800614e:	2301      	movs	r3, #1
 8006150:	e00f      	b.n	8006172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006152:	4a0a      	ldr	r2, [pc, #40]	@ (800617c <SysTick_Config+0x40>)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3b01      	subs	r3, #1
 8006158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800615a:	210f      	movs	r1, #15
 800615c:	f04f 30ff 	mov.w	r0, #4294967295
 8006160:	f7ff ff8e 	bl	8006080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006164:	4b05      	ldr	r3, [pc, #20]	@ (800617c <SysTick_Config+0x40>)
 8006166:	2200      	movs	r2, #0
 8006168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800616a:	4b04      	ldr	r3, [pc, #16]	@ (800617c <SysTick_Config+0x40>)
 800616c:	2207      	movs	r2, #7
 800616e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	e000e010 	.word	0xe000e010

08006180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff29 	bl	8005fe0 <__NVIC_SetPriorityGrouping>
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006196:	b580      	push	{r7, lr}
 8006198:	b086      	sub	sp, #24
 800619a:	af00      	add	r7, sp, #0
 800619c:	4603      	mov	r3, r0
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061a8:	f7ff ff3e 	bl	8006028 <__NVIC_GetPriorityGrouping>
 80061ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	6978      	ldr	r0, [r7, #20]
 80061b4:	f7ff ff8e 	bl	80060d4 <NVIC_EncodePriority>
 80061b8:	4602      	mov	r2, r0
 80061ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061be:	4611      	mov	r1, r2
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff ff5d 	bl	8006080 <__NVIC_SetPriority>
}
 80061c6:	bf00      	nop
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff ff31 	bl	8006044 <__NVIC_EnableIRQ>
}
 80061e2:	bf00      	nop
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff ffa2 	bl	800613c <SysTick_Config>
 80061f8:	4603      	mov	r3, r0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006210:	f7ff fac4 	bl	800579c <HAL_GetTick>
 8006214:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d008      	beq.n	8006234 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2280      	movs	r2, #128	@ 0x80
 8006226:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e052      	b.n	80062da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0216 	bic.w	r2, r2, #22
 8006242:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006252:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <HAL_DMA_Abort+0x62>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006260:	2b00      	cmp	r3, #0
 8006262:	d007      	beq.n	8006274 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0208 	bic.w	r2, r2, #8
 8006272:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0201 	bic.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006284:	e013      	b.n	80062ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006286:	f7ff fa89 	bl	800579c <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b05      	cmp	r3, #5
 8006292:	d90c      	bls.n	80062ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2203      	movs	r2, #3
 800629e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e015      	b.n	80062da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e4      	bne.n	8006286 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062c0:	223f      	movs	r2, #63	@ 0x3f
 80062c2:	409a      	lsls	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d004      	beq.n	8006300 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2280      	movs	r2, #128	@ 0x80
 80062fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e00c      	b.n	800631a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2205      	movs	r2, #5
 8006304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	@ 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800633a:	2300      	movs	r3, #0
 800633c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800633e:	2300      	movs	r3, #0
 8006340:	61fb      	str	r3, [r7, #28]
 8006342:	e159      	b.n	80065f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006344:	2201      	movs	r2, #1
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	4013      	ands	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	429a      	cmp	r2, r3
 800635e:	f040 8148 	bne.w	80065f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b01      	cmp	r3, #1
 800636c:	d005      	beq.n	800637a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006376:	2b02      	cmp	r3, #2
 8006378:	d130      	bne.n	80063dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	2203      	movs	r2, #3
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	43db      	mvns	r3, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4013      	ands	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	fa02 f303 	lsl.w	r3, r2, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063b0:	2201      	movs	r2, #1
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	43db      	mvns	r3, r3
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	4013      	ands	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 0201 	and.w	r2, r3, #1
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	fa02 f303 	lsl.w	r3, r2, r3
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d017      	beq.n	8006418 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	2203      	movs	r2, #3
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	4313      	orrs	r3, r2
 8006410:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f003 0303 	and.w	r3, r3, #3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d123      	bne.n	800646c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	08da      	lsrs	r2, r3, #3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3208      	adds	r2, #8
 800642c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	220f      	movs	r2, #15
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	43db      	mvns	r3, r3
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	4013      	ands	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	4313      	orrs	r3, r2
 800645c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	08da      	lsrs	r2, r3, #3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3208      	adds	r2, #8
 8006466:	69b9      	ldr	r1, [r7, #24]
 8006468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	2203      	movs	r2, #3
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	43db      	mvns	r3, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 0203 	and.w	r2, r3, #3
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	005b      	lsls	r3, r3, #1
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4313      	orrs	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80a2 	beq.w	80065f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	4b57      	ldr	r3, [pc, #348]	@ (8006610 <HAL_GPIO_Init+0x2e8>)
 80064b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b6:	4a56      	ldr	r2, [pc, #344]	@ (8006610 <HAL_GPIO_Init+0x2e8>)
 80064b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80064be:	4b54      	ldr	r3, [pc, #336]	@ (8006610 <HAL_GPIO_Init+0x2e8>)
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ca:	4a52      	ldr	r2, [pc, #328]	@ (8006614 <HAL_GPIO_Init+0x2ec>)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	089b      	lsrs	r3, r3, #2
 80064d0:	3302      	adds	r3, #2
 80064d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f003 0303 	and.w	r3, r3, #3
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	220f      	movs	r2, #15
 80064e2:	fa02 f303 	lsl.w	r3, r2, r3
 80064e6:	43db      	mvns	r3, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4013      	ands	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a49      	ldr	r2, [pc, #292]	@ (8006618 <HAL_GPIO_Init+0x2f0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d019      	beq.n	800652a <HAL_GPIO_Init+0x202>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a48      	ldr	r2, [pc, #288]	@ (800661c <HAL_GPIO_Init+0x2f4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d013      	beq.n	8006526 <HAL_GPIO_Init+0x1fe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a47      	ldr	r2, [pc, #284]	@ (8006620 <HAL_GPIO_Init+0x2f8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00d      	beq.n	8006522 <HAL_GPIO_Init+0x1fa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a46      	ldr	r2, [pc, #280]	@ (8006624 <HAL_GPIO_Init+0x2fc>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <HAL_GPIO_Init+0x1f6>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a45      	ldr	r2, [pc, #276]	@ (8006628 <HAL_GPIO_Init+0x300>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <HAL_GPIO_Init+0x1f2>
 8006516:	2304      	movs	r3, #4
 8006518:	e008      	b.n	800652c <HAL_GPIO_Init+0x204>
 800651a:	2307      	movs	r3, #7
 800651c:	e006      	b.n	800652c <HAL_GPIO_Init+0x204>
 800651e:	2303      	movs	r3, #3
 8006520:	e004      	b.n	800652c <HAL_GPIO_Init+0x204>
 8006522:	2302      	movs	r3, #2
 8006524:	e002      	b.n	800652c <HAL_GPIO_Init+0x204>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <HAL_GPIO_Init+0x204>
 800652a:	2300      	movs	r3, #0
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	f002 0203 	and.w	r2, r2, #3
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	4093      	lsls	r3, r2
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	4313      	orrs	r3, r2
 800653a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800653c:	4935      	ldr	r1, [pc, #212]	@ (8006614 <HAL_GPIO_Init+0x2ec>)
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	089b      	lsrs	r3, r3, #2
 8006542:	3302      	adds	r3, #2
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800654a:	4b38      	ldr	r3, [pc, #224]	@ (800662c <HAL_GPIO_Init+0x304>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	43db      	mvns	r3, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4013      	ands	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800656e:	4a2f      	ldr	r2, [pc, #188]	@ (800662c <HAL_GPIO_Init+0x304>)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006574:	4b2d      	ldr	r3, [pc, #180]	@ (800662c <HAL_GPIO_Init+0x304>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	43db      	mvns	r3, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d003      	beq.n	8006598 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006598:	4a24      	ldr	r2, [pc, #144]	@ (800662c <HAL_GPIO_Init+0x304>)
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800659e:	4b23      	ldr	r3, [pc, #140]	@ (800662c <HAL_GPIO_Init+0x304>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	43db      	mvns	r3, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4013      	ands	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065c2:	4a1a      	ldr	r2, [pc, #104]	@ (800662c <HAL_GPIO_Init+0x304>)
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065c8:	4b18      	ldr	r3, [pc, #96]	@ (800662c <HAL_GPIO_Init+0x304>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4013      	ands	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065ec:	4a0f      	ldr	r2, [pc, #60]	@ (800662c <HAL_GPIO_Init+0x304>)
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	2b0f      	cmp	r3, #15
 80065fc:	f67f aea2 	bls.w	8006344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	3724      	adds	r7, #36	@ 0x24
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40023800 	.word	0x40023800
 8006614:	40013800 	.word	0x40013800
 8006618:	40020000 	.word	0x40020000
 800661c:	40020400 	.word	0x40020400
 8006620:	40020800 	.word	0x40020800
 8006624:	40020c00 	.word	0x40020c00
 8006628:	40021000 	.word	0x40021000
 800662c:	40013c00 	.word	0x40013c00

08006630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	807b      	strh	r3, [r7, #2]
 800663c:	4613      	mov	r3, r2
 800663e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006640:	787b      	ldrb	r3, [r7, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006646:	887a      	ldrh	r2, [r7, #2]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800664c:	e003      	b.n	8006656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800664e:	887b      	ldrh	r3, [r7, #2]
 8006650:	041a      	lsls	r2, r3, #16
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	619a      	str	r2, [r3, #24]
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	460b      	mov	r3, r1
 800666c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006674:	887a      	ldrh	r2, [r7, #2]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4013      	ands	r3, r2
 800667a:	041a      	lsls	r2, r3, #16
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	43d9      	mvns	r1, r3
 8006680:	887b      	ldrh	r3, [r7, #2]
 8006682:	400b      	ands	r3, r1
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	619a      	str	r2, [r3, #24]
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80066a2:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066ae:	4a05      	ldr	r2, [pc, #20]	@ (80066c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066b4:	88fb      	ldrh	r3, [r7, #6]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fc fa28 	bl	8002b0c <HAL_GPIO_EXTI_Callback>
  }
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40013c00 	.word	0x40013c00

080066c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e267      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d075      	beq.n	80067d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066e6:	4b88      	ldr	r3, [pc, #544]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d00c      	beq.n	800670c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f2:	4b85      	ldr	r3, [pc, #532]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d112      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066fe:	4b82      	ldr	r3, [pc, #520]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800670a:	d10b      	bne.n	8006724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	4b7e      	ldr	r3, [pc, #504]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d05b      	beq.n	80067d0 <HAL_RCC_OscConfig+0x108>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d157      	bne.n	80067d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e242      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800672c:	d106      	bne.n	800673c <HAL_RCC_OscConfig+0x74>
 800672e:	4b76      	ldr	r3, [pc, #472]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a75      	ldr	r2, [pc, #468]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	e01d      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0x98>
 8006746:	4b70      	ldr	r3, [pc, #448]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6f      	ldr	r2, [pc, #444]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800674c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	4b6d      	ldr	r3, [pc, #436]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6c      	ldr	r2, [pc, #432]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0xb0>
 8006760:	4b69      	ldr	r3, [pc, #420]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a68      	ldr	r2, [pc, #416]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b66      	ldr	r3, [pc, #408]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a65      	ldr	r2, [pc, #404]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006780:	f7ff f80c 	bl	800579c <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006788:	f7ff f808 	bl	800579c <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	@ 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e207      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800679a:	4b5b      	ldr	r3, [pc, #364]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0xc0>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a8:	f7fe fff8 	bl	800579c <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fe fff4 	bl	800579c <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	@ 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e1f3      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067c2:	4b51      	ldr	r3, [pc, #324]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0xe8>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d063      	beq.n	80068a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067de:	4b4a      	ldr	r3, [pc, #296]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b47      	ldr	r3, [pc, #284]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d11c      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067f6:	4b44      	ldr	r3, [pc, #272]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006802:	4b41      	ldr	r3, [pc, #260]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d001      	beq.n	800681a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e1c7      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800681a:	4b3b      	ldr	r3, [pc, #236]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4937      	ldr	r1, [pc, #220]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800682e:	e03a      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006838:	4b34      	ldr	r3, [pc, #208]	@ (800690c <HAL_RCC_OscConfig+0x244>)
 800683a:	2201      	movs	r2, #1
 800683c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800683e:	f7fe ffad 	bl	800579c <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006846:	f7fe ffa9 	bl	800579c <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1a8      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006858:	4b2b      	ldr	r3, [pc, #172]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006864:	4b28      	ldr	r3, [pc, #160]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	4925      	ldr	r1, [pc, #148]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
 8006878:	e015      	b.n	80068a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800687a:	4b24      	ldr	r3, [pc, #144]	@ (800690c <HAL_RCC_OscConfig+0x244>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fe ff8c 	bl	800579c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006888:	f7fe ff88 	bl	800579c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e187      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800689a:	4b1b      	ldr	r3, [pc, #108]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d036      	beq.n	8006920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d016      	beq.n	80068e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ba:	4b15      	ldr	r3, [pc, #84]	@ (8006910 <HAL_RCC_OscConfig+0x248>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c0:	f7fe ff6c 	bl	800579c <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068c8:	f7fe ff68 	bl	800579c <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e167      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068da:	4b0b      	ldr	r3, [pc, #44]	@ (8006908 <HAL_RCC_OscConfig+0x240>)
 80068dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d0f0      	beq.n	80068c8 <HAL_RCC_OscConfig+0x200>
 80068e6:	e01b      	b.n	8006920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e8:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <HAL_RCC_OscConfig+0x248>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ee:	f7fe ff55 	bl	800579c <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	e00e      	b.n	8006914 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fe ff51 	bl	800579c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d907      	bls.n	8006914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e150      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006908:	40023800 	.word	0x40023800
 800690c:	42470000 	.word	0x42470000
 8006910:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006914:	4b88      	ldr	r3, [pc, #544]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ea      	bne.n	80068f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8097 	beq.w	8006a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692e:	2300      	movs	r3, #0
 8006930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006932:	4b81      	ldr	r3, [pc, #516]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	4b7d      	ldr	r3, [pc, #500]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	4a7c      	ldr	r2, [pc, #496]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694c:	6413      	str	r3, [r2, #64]	@ 0x40
 800694e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006956:	60bb      	str	r3, [r7, #8]
 8006958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695e:	4b77      	ldr	r3, [pc, #476]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d118      	bne.n	800699c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800696a:	4b74      	ldr	r3, [pc, #464]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a73      	ldr	r2, [pc, #460]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006976:	f7fe ff11 	bl	800579c <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697e:	f7fe ff0d 	bl	800579c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e10c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006990:	4b6a      	ldr	r3, [pc, #424]	@ (8006b3c <HAL_RCC_OscConfig+0x474>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2ea>
 80069a4:	4b64      	ldr	r3, [pc, #400]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a8:	4a63      	ldr	r2, [pc, #396]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b0:	e01c      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x30c>
 80069ba:	4b5f      	ldr	r3, [pc, #380]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069be:	4a5e      	ldr	r2, [pc, #376]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c0:	f043 0304 	orr.w	r3, r3, #4
 80069c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069cc:	f043 0301 	orr.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d2:	e00b      	b.n	80069ec <HAL_RCC_OscConfig+0x324>
 80069d4:	4b58      	ldr	r3, [pc, #352]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d8:	4a57      	ldr	r2, [pc, #348]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6713      	str	r3, [r2, #112]	@ 0x70
 80069e0:	4b55      	ldr	r3, [pc, #340]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e4:	4a54      	ldr	r2, [pc, #336]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 80069e6:	f023 0304 	bic.w	r3, r3, #4
 80069ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f4:	f7fe fed2 	bl	800579c <HAL_GetTick>
 80069f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069fa:	e00a      	b.n	8006a12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069fc:	f7fe fece 	bl	800579c <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e0cb      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a12:	4b49      	ldr	r3, [pc, #292]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ee      	beq.n	80069fc <HAL_RCC_OscConfig+0x334>
 8006a1e:	e014      	b.n	8006a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a20:	f7fe febc 	bl	800579c <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a26:	e00a      	b.n	8006a3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a28:	f7fe feb8 	bl	800579c <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0b5      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ee      	bne.n	8006a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d105      	bne.n	8006a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a50:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a54:	4a38      	ldr	r2, [pc, #224]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a1 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a66:	4b34      	ldr	r3, [pc, #208]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f003 030c 	and.w	r3, r3, #12
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d05c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d141      	bne.n	8006afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a7a:	4b31      	ldr	r3, [pc, #196]	@ (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a80:	f7fe fe8c 	bl	800579c <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fe fe88 	bl	800579c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e087      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a9a:	4b27      	ldr	r3, [pc, #156]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	69da      	ldr	r2, [r3, #28]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab4:	019b      	lsls	r3, r3, #6
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac8:	061b      	lsls	r3, r3, #24
 8006aca:	491b      	ldr	r1, [pc, #108]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad6:	f7fe fe61 	bl	800579c <HAL_GetTick>
 8006ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ade:	f7fe fe5d 	bl	800579c <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e05c      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af0:	4b11      	ldr	r3, [pc, #68]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x416>
 8006afc:	e054      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006afe:	4b10      	ldr	r3, [pc, #64]	@ (8006b40 <HAL_RCC_OscConfig+0x478>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b04:	f7fe fe4a 	bl	800579c <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b0c:	f7fe fe46 	bl	800579c <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e045      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b1e:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <HAL_RCC_OscConfig+0x470>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x444>
 8006b2a:	e03d      	b.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d107      	bne.n	8006b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e038      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	40007000 	.word	0x40007000
 8006b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b44:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb4 <HAL_RCC_OscConfig+0x4ec>)
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d028      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d121      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d11a      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b74:	4013      	ands	r3, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d111      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	40023800 	.word	0x40023800

08006bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0cc      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b68      	ldr	r3, [pc, #416]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d90c      	bls.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b65      	ldr	r3, [pc, #404]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be2:	4b63      	ldr	r3, [pc, #396]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0b8      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c0c:	4b59      	ldr	r3, [pc, #356]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4a58      	ldr	r2, [pc, #352]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c24:	4b53      	ldr	r3, [pc, #332]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a52      	ldr	r2, [pc, #328]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c30:	4b50      	ldr	r3, [pc, #320]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	494d      	ldr	r1, [pc, #308]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d044      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c56:	4b47      	ldr	r3, [pc, #284]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d119      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e07f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d003      	beq.n	8006c76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c76:	4b3f      	ldr	r3, [pc, #252]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e06f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c86:	4b3b      	ldr	r3, [pc, #236]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e067      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c96:	4b37      	ldr	r3, [pc, #220]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 0203 	bic.w	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	4934      	ldr	r1, [pc, #208]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ca8:	f7fe fd78 	bl	800579c <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cb0:	f7fe fd74 	bl	800579c <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e04f      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 020c 	and.w	r2, r3, #12
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1eb      	bne.n	8006cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b25      	ldr	r3, [pc, #148]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20c      	bcs.n	8006d00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b22      	ldr	r3, [pc, #136]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cee:	4b20      	ldr	r3, [pc, #128]	@ (8006d70 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e032      	b.n	8006d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	4916      	ldr	r1, [pc, #88]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d2a:	4b12      	ldr	r3, [pc, #72]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	490e      	ldr	r1, [pc, #56]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d3e:	f000 f821 	bl	8006d84 <HAL_RCC_GetSysClockFreq>
 8006d42:	4602      	mov	r2, r0
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <HAL_RCC_ClockConfig+0x1bc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	f003 030f 	and.w	r3, r3, #15
 8006d4e:	490a      	ldr	r1, [pc, #40]	@ (8006d78 <HAL_RCC_ClockConfig+0x1c0>)
 8006d50:	5ccb      	ldrb	r3, [r1, r3]
 8006d52:	fa22 f303 	lsr.w	r3, r2, r3
 8006d56:	4a09      	ldr	r2, [pc, #36]	@ (8006d7c <HAL_RCC_ClockConfig+0x1c4>)
 8006d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d5a:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <HAL_RCC_ClockConfig+0x1c8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fcd8 	bl	8005714 <HAL_InitTick>

  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023c00 	.word	0x40023c00
 8006d74:	40023800 	.word	0x40023800
 8006d78:	0800f070 	.word	0x0800f070
 8006d7c:	20000008 	.word	0x20000008
 8006d80:	2000000c 	.word	0x2000000c

08006d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d88:	b090      	sub	sp, #64	@ 0x40
 8006d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d9c:	4b59      	ldr	r3, [pc, #356]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f003 030c 	and.w	r3, r3, #12
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d00d      	beq.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	f200 80a1 	bhi.w	8006ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x34>
 8006db2:	2b04      	cmp	r3, #4
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8006db6:	e09b      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006db8:	4b53      	ldr	r3, [pc, #332]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dbc:	e09b      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dbe:	4b53      	ldr	r3, [pc, #332]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dc2:	e098      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dce:	4b4d      	ldr	r3, [pc, #308]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dda:	4b4a      	ldr	r3, [pc, #296]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	2200      	movs	r2, #0
 8006de2:	623b      	str	r3, [r7, #32]
 8006de4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dec:	2100      	movs	r1, #0
 8006dee:	4b47      	ldr	r3, [pc, #284]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006df0:	fb03 f201 	mul.w	r2, r3, r1
 8006df4:	2300      	movs	r3, #0
 8006df6:	fb00 f303 	mul.w	r3, r0, r3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	4a43      	ldr	r2, [pc, #268]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8006dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8006e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e04:	460a      	mov	r2, r1
 8006e06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e10:	2200      	movs	r2, #0
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	61fa      	str	r2, [r7, #28]
 8006e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006e1e:	f7f9 fecb 	bl	8000bb8 <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4613      	mov	r3, r2
 8006e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e2a:	e053      	b.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2c:	4b35      	ldr	r3, [pc, #212]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	099b      	lsrs	r3, r3, #6
 8006e32:	2200      	movs	r2, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	617a      	str	r2, [r7, #20]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e3e:	f04f 0b00 	mov.w	fp, #0
 8006e42:	4652      	mov	r2, sl
 8006e44:	465b      	mov	r3, fp
 8006e46:	f04f 0000 	mov.w	r0, #0
 8006e4a:	f04f 0100 	mov.w	r1, #0
 8006e4e:	0159      	lsls	r1, r3, #5
 8006e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e54:	0150      	lsls	r0, r2, #5
 8006e56:	4602      	mov	r2, r0
 8006e58:	460b      	mov	r3, r1
 8006e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8006e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e76:	ebb2 0408 	subs.w	r4, r2, r8
 8006e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	00eb      	lsls	r3, r5, #3
 8006e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e8c:	00e2      	lsls	r2, r4, #3
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	eb14 030a 	adds.w	r3, r4, sl
 8006e96:	603b      	str	r3, [r7, #0]
 8006e98:	eb45 030b 	adc.w	r3, r5, fp
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	f04f 0200 	mov.w	r2, #0
 8006ea2:	f04f 0300 	mov.w	r3, #0
 8006ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eaa:	4629      	mov	r1, r5
 8006eac:	028b      	lsls	r3, r1, #10
 8006eae:	4621      	mov	r1, r4
 8006eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	028a      	lsls	r2, r1, #10
 8006eb8:	4610      	mov	r0, r2
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	60fa      	str	r2, [r7, #12]
 8006ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ec8:	f7f9 fe76 	bl	8000bb8 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	3301      	adds	r3, #1
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006eee:	e002      	b.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef0:	4b05      	ldr	r3, [pc, #20]	@ (8006f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3740      	adds	r7, #64	@ 0x40
 8006efc:	46bd      	mov	sp, r7
 8006efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f02:	bf00      	nop
 8006f04:	40023800 	.word	0x40023800
 8006f08:	00f42400 	.word	0x00f42400
 8006f0c:	017d7840 	.word	0x017d7840

08006f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f14:	4b03      	ldr	r3, [pc, #12]	@ (8006f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f16:	681b      	ldr	r3, [r3, #0]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	20000008 	.word	0x20000008

08006f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f2c:	f7ff fff0 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f30:	4602      	mov	r2, r0
 8006f32:	4b05      	ldr	r3, [pc, #20]	@ (8006f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	0a9b      	lsrs	r3, r3, #10
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4903      	ldr	r1, [pc, #12]	@ (8006f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f3e:	5ccb      	ldrb	r3, [r1, r3]
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	0800f080 	.word	0x0800f080

08006f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f54:	f7ff ffdc 	bl	8006f10 <HAL_RCC_GetHCLKFreq>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	4b05      	ldr	r3, [pc, #20]	@ (8006f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	0b5b      	lsrs	r3, r3, #13
 8006f60:	f003 0307 	and.w	r3, r3, #7
 8006f64:	4903      	ldr	r1, [pc, #12]	@ (8006f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f66:	5ccb      	ldrb	r3, [r1, r3]
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40023800 	.word	0x40023800
 8006f74:	0800f080 	.word	0x0800f080

08006f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e07b      	b.n	8007082 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d108      	bne.n	8006fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f9a:	d009      	beq.n	8006fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	61da      	str	r2, [r3, #28]
 8006fa2:	e005      	b.n	8006fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fe f818 	bl	8005000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007020:	431a      	orrs	r2, r3
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	ea42 0103 	orr.w	r1, r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	699b      	ldr	r3, [r3, #24]
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	f003 0104 	and.w	r1, r3, #4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	f003 0210 	and.w	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	430a      	orrs	r2, r1
 8007060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	69da      	ldr	r2, [r3, #28]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b088      	sub	sp, #32
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800709a:	f7fe fb7f 	bl	800579c <HAL_GetTick>
 800709e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d001      	beq.n	80070b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e12a      	b.n	800730a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_SPI_Transmit+0x36>
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e122      	b.n	800730a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <HAL_SPI_Transmit+0x48>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e11b      	b.n	800730a <HAL_SPI_Transmit+0x280>
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2203      	movs	r2, #3
 80070de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007120:	d10f      	bne.n	8007142 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007130:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007140:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800714c:	2b40      	cmp	r3, #64	@ 0x40
 800714e:	d007      	beq.n	8007160 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800715e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007168:	d152      	bne.n	8007210 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_SPI_Transmit+0xee>
 8007172:	8b7b      	ldrh	r3, [r7, #26]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d145      	bne.n	8007204 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717c:	881a      	ldrh	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800719c:	e032      	b.n	8007204 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d112      	bne.n	80071d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b0:	881a      	ldrh	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071bc:	1c9a      	adds	r2, r3, #2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071d0:	e018      	b.n	8007204 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d2:	f7fe fae3 	bl	800579c <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d803      	bhi.n	80071ea <HAL_SPI_Transmit+0x160>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e8:	d102      	bne.n	80071f0 <HAL_SPI_Transmit+0x166>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e082      	b.n	800730a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1c7      	bne.n	800719e <HAL_SPI_Transmit+0x114>
 800720e:	e053      	b.n	80072b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <HAL_SPI_Transmit+0x194>
 8007218:	8b7b      	ldrh	r3, [r7, #26]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d147      	bne.n	80072ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	330c      	adds	r3, #12
 8007228:	7812      	ldrb	r2, [r2, #0]
 800722a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007244:	e033      	b.n	80072ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b02      	cmp	r3, #2
 8007252:	d113      	bne.n	800727c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	330c      	adds	r3, #12
 800725e:	7812      	ldrb	r2, [r2, #0]
 8007260:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29a      	uxth	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	86da      	strh	r2, [r3, #54]	@ 0x36
 800727a:	e018      	b.n	80072ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800727c:	f7fe fa8e 	bl	800579c <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	429a      	cmp	r2, r3
 800728a:	d803      	bhi.n	8007294 <HAL_SPI_Transmit+0x20a>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d102      	bne.n	800729a <HAL_SPI_Transmit+0x210>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e02d      	b.n	800730a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1c6      	bne.n	8007246 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 fbd9 	bl	8007a74 <SPI_EndRxTxTransaction>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e000      	b.n	800730a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007308:	2300      	movs	r3, #0
  }
}
 800730a:	4618      	mov	r0, r3
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b088      	sub	sp, #32
 8007316:	af02      	add	r7, sp, #8
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	603b      	str	r3, [r7, #0]
 800731e:	4613      	mov	r3, r2
 8007320:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b01      	cmp	r3, #1
 800732c:	d001      	beq.n	8007332 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800732e:	2302      	movs	r3, #2
 8007330:	e104      	b.n	800753c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_SPI_Receive+0x2c>
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e0fc      	b.n	800753c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800734a:	d112      	bne.n	8007372 <HAL_SPI_Receive+0x60>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10e      	bne.n	8007372 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2204      	movs	r2, #4
 8007358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4613      	mov	r3, r2
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 f8eb 	bl	8007544 <HAL_SPI_TransmitReceive>
 800736e:	4603      	mov	r3, r0
 8007370:	e0e4      	b.n	800753c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007372:	f7fe fa13 	bl	800579c <HAL_GetTick>
 8007376:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_SPI_Receive+0x74>
 8007382:	2302      	movs	r3, #2
 8007384:	e0da      	b.n	800753c <HAL_SPI_Receive+0x22a>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2204      	movs	r2, #4
 8007392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	88fa      	ldrh	r2, [r7, #6]
 80073a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073d4:	d10f      	bne.n	80073f6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007400:	2b40      	cmp	r3, #64	@ 0x40
 8007402:	d007      	beq.n	8007414 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007412:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d170      	bne.n	80074fe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800741c:	e035      	b.n	800748a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d115      	bne.n	8007458 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f103 020c 	add.w	r2, r3, #12
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007456:	e018      	b.n	800748a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007458:	f7fe f9a0 	bl	800579c <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	429a      	cmp	r2, r3
 8007466:	d803      	bhi.n	8007470 <HAL_SPI_Receive+0x15e>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d102      	bne.n	8007476 <HAL_SPI_Receive+0x164>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e058      	b.n	800753c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800748e:	b29b      	uxth	r3, r3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1c4      	bne.n	800741e <HAL_SPI_Receive+0x10c>
 8007494:	e038      	b.n	8007508 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d113      	bne.n	80074cc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	b292      	uxth	r2, r2
 80074b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	1c9a      	adds	r2, r3, #2
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074ca:	e018      	b.n	80074fe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074cc:	f7fe f966 	bl	800579c <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d803      	bhi.n	80074e4 <HAL_SPI_Receive+0x1d2>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e2:	d102      	bne.n	80074ea <HAL_SPI_Receive+0x1d8>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e01e      	b.n	800753c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007502:	b29b      	uxth	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1c6      	bne.n	8007496 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 fa4b 	bl	80079a8 <SPI_EndRxTransaction>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800753a:	2300      	movs	r3, #0
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	@ 0x28
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007552:	2301      	movs	r3, #1
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007556:	f7fe f921 	bl	800579c <HAL_GetTick>
 800755a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007562:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800756a:	887b      	ldrh	r3, [r7, #2]
 800756c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800756e:	7ffb      	ldrb	r3, [r7, #31]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d00c      	beq.n	800758e <HAL_SPI_TransmitReceive+0x4a>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800757a:	d106      	bne.n	800758a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d102      	bne.n	800758a <HAL_SPI_TransmitReceive+0x46>
 8007584:	7ffb      	ldrb	r3, [r7, #31]
 8007586:	2b04      	cmp	r3, #4
 8007588:	d001      	beq.n	800758e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800758a:	2302      	movs	r3, #2
 800758c:	e17f      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x5c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x5c>
 800759a:	887b      	ldrh	r3, [r7, #2]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e174      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_SPI_TransmitReceive+0x6e>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e16d      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d003      	beq.n	80075ce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2205      	movs	r2, #5
 80075ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	887a      	ldrh	r2, [r7, #2]
 80075de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	887a      	ldrh	r2, [r7, #2]
 80075e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	887a      	ldrh	r2, [r7, #2]
 80075f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	887a      	ldrh	r2, [r7, #2]
 80075f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d007      	beq.n	8007622 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800762a:	d17e      	bne.n	800772a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <HAL_SPI_TransmitReceive+0xf6>
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d16c      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800763e:	881a      	ldrh	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800764a:	1c9a      	adds	r2, r3, #2
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765e:	e059      	b.n	8007714 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d11b      	bne.n	80076a6 <HAL_SPI_TransmitReceive+0x162>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007672:	b29b      	uxth	r3, r3
 8007674:	2b00      	cmp	r3, #0
 8007676:	d016      	beq.n	80076a6 <HAL_SPI_TransmitReceive+0x162>
 8007678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767a:	2b01      	cmp	r3, #1
 800767c:	d113      	bne.n	80076a6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	881a      	ldrh	r2, [r3, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768e:	1c9a      	adds	r2, r3, #2
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007698:	b29b      	uxth	r3, r3
 800769a:	3b01      	subs	r3, #1
 800769c:	b29a      	uxth	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d119      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x1a4>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d014      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c8:	b292      	uxth	r2, r2
 80076ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076e4:	2301      	movs	r3, #1
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076e8:	f7fe f858 	bl	800579c <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d80d      	bhi.n	8007714 <HAL_SPI_TransmitReceive+0x1d0>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d009      	beq.n	8007714 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e0bc      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1a0      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x11c>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d19b      	bne.n	8007660 <HAL_SPI_TransmitReceive+0x11c>
 8007728:	e082      	b.n	8007830 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d002      	beq.n	8007738 <HAL_SPI_TransmitReceive+0x1f4>
 8007732:	8afb      	ldrh	r3, [r7, #22]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d171      	bne.n	800781c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	330c      	adds	r3, #12
 8007742:	7812      	ldrb	r2, [r2, #0]
 8007744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800775e:	e05d      	b.n	800781c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d11c      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x264>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d017      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x264>
 8007778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777a:	2b01      	cmp	r3, #1
 800777c:	d114      	bne.n	80077a8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	330c      	adds	r3, #12
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800779a:	b29b      	uxth	r3, r3
 800779c:	3b01      	subs	r3, #1
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d119      	bne.n	80077ea <HAL_SPI_TransmitReceive+0x2a6>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d014      	beq.n	80077ea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	1c5a      	adds	r2, r3, #1
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077dc:	b29b      	uxth	r3, r3
 80077de:	3b01      	subs	r3, #1
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077e6:	2301      	movs	r3, #1
 80077e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077ea:	f7fd ffd7 	bl	800579c <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d803      	bhi.n	8007802 <HAL_SPI_TransmitReceive+0x2be>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d102      	bne.n	8007808 <HAL_SPI_TransmitReceive+0x2c4>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e038      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d19c      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x21c>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d197      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007830:	6a3a      	ldr	r2, [r7, #32]
 8007832:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f91d 	bl	8007a74 <SPI_EndRxTxTransaction>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d008      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e01d      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10a      	bne.n	8007870 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800785a:	2300      	movs	r3, #0
 800785c:	613b      	str	r3, [r7, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e000      	b.n	800788e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800788c:	2300      	movs	r3, #0
  }
}
 800788e:	4618      	mov	r0, r3
 8007890:	3728      	adds	r7, #40	@ 0x28
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	4613      	mov	r3, r2
 80078a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078a8:	f7fd ff78 	bl	800579c <HAL_GetTick>
 80078ac:	4602      	mov	r2, r0
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078b8:	f7fd ff70 	bl	800579c <HAL_GetTick>
 80078bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078be:	4b39      	ldr	r3, [pc, #228]	@ (80079a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	015b      	lsls	r3, r3, #5
 80078c4:	0d1b      	lsrs	r3, r3, #20
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	fb02 f303 	mul.w	r3, r2, r3
 80078cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078ce:	e055      	b.n	800797c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d6:	d051      	beq.n	800797c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078d8:	f7fd ff60 	bl	800579c <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d902      	bls.n	80078ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d13d      	bne.n	800796a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80078fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007906:	d111      	bne.n	800792c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007910:	d004      	beq.n	800791c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791a:	d107      	bne.n	800792c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800792a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007930:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007934:	d10f      	bne.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e018      	b.n	800799c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e002      	b.n	800797c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	3b01      	subs	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4013      	ands	r3, r2
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	429a      	cmp	r2, r3
 800798a:	bf0c      	ite	eq
 800798c:	2301      	moveq	r3, #1
 800798e:	2300      	movne	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	461a      	mov	r2, r3
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	429a      	cmp	r2, r3
 8007998:	d19a      	bne.n	80078d0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3720      	adds	r7, #32
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	20000008 	.word	0x20000008

080079a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079bc:	d111      	bne.n	80079e2 <SPI_EndRxTransaction+0x3a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079c6:	d004      	beq.n	80079d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d0:	d107      	bne.n	80079e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079ea:	d12a      	bne.n	8007a42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f4:	d012      	beq.n	8007a1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2200      	movs	r2, #0
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff ff49 	bl	8007898 <SPI_WaitFlagStateUntilTimeout>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d02d      	beq.n	8007a68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a10:	f043 0220 	orr.w	r2, r3, #32
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e026      	b.n	8007a6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2200      	movs	r2, #0
 8007a24:	2101      	movs	r1, #1
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff ff36 	bl	8007898 <SPI_WaitFlagStateUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01a      	beq.n	8007a68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a36:	f043 0220 	orr.w	r2, r3, #32
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e013      	b.n	8007a6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff ff23 	bl	8007898 <SPI_WaitFlagStateUntilTimeout>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d007      	beq.n	8007a68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5c:	f043 0220 	orr.w	r2, r3, #32
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e000      	b.n	8007a6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2201      	movs	r2, #1
 8007a88:	2102      	movs	r1, #2
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff ff04 	bl	8007898 <SPI_WaitFlagStateUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e032      	b.n	8007b0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b14 <SPI_EndRxTxTransaction+0xa0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8007b18 <SPI_EndRxTxTransaction+0xa4>)
 8007aac:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab0:	0d5b      	lsrs	r3, r3, #21
 8007ab2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ac4:	d112      	bne.n	8007aec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	2180      	movs	r1, #128	@ 0x80
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f7ff fee1 	bl	8007898 <SPI_WaitFlagStateUntilTimeout>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d016      	beq.n	8007b0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae0:	f043 0220 	orr.w	r2, r3, #32
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e00f      	b.n	8007b0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b02:	2b80      	cmp	r3, #128	@ 0x80
 8007b04:	d0f2      	beq.n	8007aec <SPI_EndRxTxTransaction+0x78>
 8007b06:	e000      	b.n	8007b0a <SPI_EndRxTxTransaction+0x96>
        break;
 8007b08:	bf00      	nop
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000008 	.word	0x20000008
 8007b18:	165e9f81 	.word	0x165e9f81

08007b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e041      	b.n	8007bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fd faa4 	bl	8005090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	f000 fd7a 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b082      	sub	sp, #8
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d101      	bne.n	8007bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e041      	b.n	8007c50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f839 	bl	8007c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3304      	adds	r3, #4
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f000 fd2b 	bl	8008654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d109      	bne.n	8007c90 <HAL_TIM_PWM_Start+0x24>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	bf14      	ite	ne
 8007c88:	2301      	movne	r3, #1
 8007c8a:	2300      	moveq	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	e022      	b.n	8007cd6 <HAL_TIM_PWM_Start+0x6a>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d109      	bne.n	8007caa <HAL_TIM_PWM_Start+0x3e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	bf14      	ite	ne
 8007ca2:	2301      	movne	r3, #1
 8007ca4:	2300      	moveq	r3, #0
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	e015      	b.n	8007cd6 <HAL_TIM_PWM_Start+0x6a>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d109      	bne.n	8007cc4 <HAL_TIM_PWM_Start+0x58>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	bf14      	ite	ne
 8007cbc:	2301      	movne	r3, #1
 8007cbe:	2300      	moveq	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	e008      	b.n	8007cd6 <HAL_TIM_PWM_Start+0x6a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	bf14      	ite	ne
 8007cd0:	2301      	movne	r3, #1
 8007cd2:	2300      	moveq	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e068      	b.n	8007db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_PWM_Start+0x82>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cec:	e013      	b.n	8007d16 <HAL_TIM_PWM_Start+0xaa>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_PWM_Start+0x92>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cfc:	e00b      	b.n	8007d16 <HAL_TIM_PWM_Start+0xaa>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d104      	bne.n	8007d0e <HAL_TIM_PWM_Start+0xa2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d0c:	e003      	b.n	8007d16 <HAL_TIM_PWM_Start+0xaa>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	6839      	ldr	r1, [r7, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 ff44 	bl	8008bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a23      	ldr	r2, [pc, #140]	@ (8007db8 <HAL_TIM_PWM_Start+0x14c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d107      	bne.n	8007d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1d      	ldr	r2, [pc, #116]	@ (8007db8 <HAL_TIM_PWM_Start+0x14c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d018      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x10e>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d50:	d013      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x10e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a19      	ldr	r2, [pc, #100]	@ (8007dbc <HAL_TIM_PWM_Start+0x150>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00e      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x10e>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a17      	ldr	r2, [pc, #92]	@ (8007dc0 <HAL_TIM_PWM_Start+0x154>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d009      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x10e>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a16      	ldr	r2, [pc, #88]	@ (8007dc4 <HAL_TIM_PWM_Start+0x158>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d004      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x10e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a14      	ldr	r2, [pc, #80]	@ (8007dc8 <HAL_TIM_PWM_Start+0x15c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d111      	bne.n	8007d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b06      	cmp	r3, #6
 8007d8a:	d010      	beq.n	8007dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d9c:	e007      	b.n	8007dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40000400 	.word	0x40000400
 8007dc0:	40000800 	.word	0x40000800
 8007dc4:	40000c00 	.word	0x40000c00
 8007dc8:	40014000 	.word	0x40014000

08007dcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fee4 	bl	8008bac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a29      	ldr	r2, [pc, #164]	@ (8007e90 <HAL_TIM_PWM_Stop+0xc4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d117      	bne.n	8007e1e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6a1a      	ldr	r2, [r3, #32]
 8007df4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10f      	bne.n	8007e1e <HAL_TIM_PWM_Stop+0x52>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6a1a      	ldr	r2, [r3, #32]
 8007e04:	f240 4344 	movw	r3, #1092	@ 0x444
 8007e08:	4013      	ands	r3, r2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d107      	bne.n	8007e1e <HAL_TIM_PWM_Stop+0x52>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6a1a      	ldr	r2, [r3, #32]
 8007e24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10f      	bne.n	8007e4e <HAL_TIM_PWM_Stop+0x82>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a1a      	ldr	r2, [r3, #32]
 8007e34:	f240 4344 	movw	r3, #1092	@ 0x444
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d107      	bne.n	8007e4e <HAL_TIM_PWM_Stop+0x82>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 0201 	bic.w	r2, r2, #1
 8007e4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_PWM_Stop+0x92>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e5c:	e013      	b.n	8007e86 <HAL_TIM_PWM_Stop+0xba>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b04      	cmp	r3, #4
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_PWM_Stop+0xa2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e6c:	e00b      	b.n	8007e86 <HAL_TIM_PWM_Stop+0xba>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_PWM_Stop+0xb2>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e7c:	e003      	b.n	8007e86 <HAL_TIM_PWM_Stop+0xba>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40010000 	.word	0x40010000

08007e94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e097      	b.n	8007fd8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fd f925 	bl	800510c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ed8:	f023 0307 	bic.w	r3, r3, #7
 8007edc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f000 fbb3 	bl	8008654 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	4313      	orrs	r3, r2
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007f34:	f023 030c 	bic.w	r3, r3, #12
 8007f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	4313      	orrs	r3, r2
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	011a      	lsls	r2, r3, #4
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	031b      	lsls	r3, r3, #12
 8007f64:	4313      	orrs	r3, r2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	4313      	orrs	r3, r2
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ff0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ff8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008000:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008008:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d102      	bne.n	800801c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008016:	7b7b      	ldrb	r3, [r7, #13]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d001      	beq.n	8008020 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e069      	b.n	80080f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008030:	e031      	b.n	8008096 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b04      	cmp	r3, #4
 8008036:	d110      	bne.n	800805a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800803e:	7b3b      	ldrb	r3, [r7, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e055      	b.n	80080f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008058:	e01d      	b.n	8008096 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d108      	bne.n	8008072 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d105      	bne.n	8008072 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008066:	7b7b      	ldrb	r3, [r7, #13]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d102      	bne.n	8008072 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800806c:	7b3b      	ldrb	r3, [r7, #12]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d001      	beq.n	8008076 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e03e      	b.n	80080f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_TIM_Encoder_Start+0xc4>
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d008      	beq.n	80080b4 <HAL_TIM_Encoder_Start+0xd4>
 80080a2:	e00f      	b.n	80080c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fd7d 	bl	8008bac <TIM_CCxChannelCmd>
      break;
 80080b2:	e016      	b.n	80080e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2201      	movs	r2, #1
 80080ba:	2104      	movs	r1, #4
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fd75 	bl	8008bac <TIM_CCxChannelCmd>
      break;
 80080c2:	e00e      	b.n	80080e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2201      	movs	r2, #1
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fd6d 	bl	8008bac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2201      	movs	r2, #1
 80080d8:	2104      	movs	r1, #4
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fd66 	bl	8008bac <TIM_CCxChannelCmd>
      break;
 80080e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f042 0201 	orr.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d020      	beq.n	8008160 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0202 	mvn.w	r2, #2
 8008130:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fa65 	bl	8008616 <HAL_TIM_IC_CaptureCallback>
 800814c:	e005      	b.n	800815a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa57 	bl	8008602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fa68 	bl	800862a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d020      	beq.n	80081ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01b      	beq.n	80081ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0204 	mvn.w	r2, #4
 800817c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2202      	movs	r2, #2
 8008182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fa3f 	bl	8008616 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa31 	bl	8008602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fa42 	bl	800862a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0308 	and.w	r3, r3, #8
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0208 	mvn.w	r2, #8
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa19 	bl	8008616 <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa0b 	bl	8008602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa1c 	bl	800862a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0310 	and.w	r3, r3, #16
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d020      	beq.n	8008244 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0310 	and.w	r3, r3, #16
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0210 	mvn.w	r2, #16
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2208      	movs	r2, #8
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f9f3 	bl	8008616 <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f9e5 	bl	8008602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f9f6 	bl	800862a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00c      	beq.n	8008268 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f003 0301 	and.w	r3, r3, #1
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0201 	mvn.w	r2, #1
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f9c3 	bl	80085ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008278:	2b00      	cmp	r3, #0
 800827a:	d007      	beq.n	800828c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fd80 	bl	8008d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00c      	beq.n	80082b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829c:	2b00      	cmp	r3, #0
 800829e:	d007      	beq.n	80082b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f9c7 	bl	800863e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00c      	beq.n	80082d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d007      	beq.n	80082d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0220 	mvn.w	r2, #32
 80082cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fd52 	bl	8008d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d101      	bne.n	80082fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082f6:	2302      	movs	r3, #2
 80082f8:	e0ae      	b.n	8008458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b0c      	cmp	r3, #12
 8008306:	f200 809f 	bhi.w	8008448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800830a:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	08008345 	.word	0x08008345
 8008314:	08008449 	.word	0x08008449
 8008318:	08008449 	.word	0x08008449
 800831c:	08008449 	.word	0x08008449
 8008320:	08008385 	.word	0x08008385
 8008324:	08008449 	.word	0x08008449
 8008328:	08008449 	.word	0x08008449
 800832c:	08008449 	.word	0x08008449
 8008330:	080083c7 	.word	0x080083c7
 8008334:	08008449 	.word	0x08008449
 8008338:	08008449 	.word	0x08008449
 800833c:	08008449 	.word	0x08008449
 8008340:	08008407 	.word	0x08008407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fa08 	bl	8008760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f042 0208 	orr.w	r2, r2, #8
 800835e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0204 	bic.w	r2, r2, #4
 800836e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6999      	ldr	r1, [r3, #24]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	691a      	ldr	r2, [r3, #16]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	619a      	str	r2, [r3, #24]
      break;
 8008382:	e064      	b.n	800844e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fa4e 	bl	800882c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800839e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6999      	ldr	r1, [r3, #24]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	021a      	lsls	r2, r3, #8
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	619a      	str	r2, [r3, #24]
      break;
 80083c4:	e043      	b.n	800844e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fa99 	bl	8008904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69da      	ldr	r2, [r3, #28]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0208 	orr.w	r2, r2, #8
 80083e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69da      	ldr	r2, [r3, #28]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0204 	bic.w	r2, r2, #4
 80083f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	69d9      	ldr	r1, [r3, #28]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	61da      	str	r2, [r3, #28]
      break;
 8008404:	e023      	b.n	800844e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fae3 	bl	80089d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69d9      	ldr	r1, [r3, #28]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	021a      	lsls	r2, r3, #8
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	61da      	str	r2, [r3, #28]
      break;
 8008446:	e002      	b.n	800844e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_TIM_ConfigClockSource+0x1c>
 8008478:	2302      	movs	r3, #2
 800847a:	e0b4      	b.n	80085e6 <HAL_TIM_ConfigClockSource+0x186>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2202      	movs	r2, #2
 8008488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800849a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b4:	d03e      	beq.n	8008534 <HAL_TIM_ConfigClockSource+0xd4>
 80084b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ba:	f200 8087 	bhi.w	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c2:	f000 8086 	beq.w	80085d2 <HAL_TIM_ConfigClockSource+0x172>
 80084c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ca:	d87f      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b70      	cmp	r3, #112	@ 0x70
 80084ce:	d01a      	beq.n	8008506 <HAL_TIM_ConfigClockSource+0xa6>
 80084d0:	2b70      	cmp	r3, #112	@ 0x70
 80084d2:	d87b      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b60      	cmp	r3, #96	@ 0x60
 80084d6:	d050      	beq.n	800857a <HAL_TIM_ConfigClockSource+0x11a>
 80084d8:	2b60      	cmp	r3, #96	@ 0x60
 80084da:	d877      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b50      	cmp	r3, #80	@ 0x50
 80084de:	d03c      	beq.n	800855a <HAL_TIM_ConfigClockSource+0xfa>
 80084e0:	2b50      	cmp	r3, #80	@ 0x50
 80084e2:	d873      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b40      	cmp	r3, #64	@ 0x40
 80084e6:	d058      	beq.n	800859a <HAL_TIM_ConfigClockSource+0x13a>
 80084e8:	2b40      	cmp	r3, #64	@ 0x40
 80084ea:	d86f      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084ec:	2b30      	cmp	r3, #48	@ 0x30
 80084ee:	d064      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 80084f0:	2b30      	cmp	r3, #48	@ 0x30
 80084f2:	d86b      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084f4:	2b20      	cmp	r3, #32
 80084f6:	d060      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 80084f8:	2b20      	cmp	r3, #32
 80084fa:	d867      	bhi.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d05c      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 8008500:	2b10      	cmp	r3, #16
 8008502:	d05a      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0x15a>
 8008504:	e062      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008516:	f000 fb29 	bl	8008b6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	609a      	str	r2, [r3, #8]
      break;
 8008532:	e04f      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008544:	f000 fb12 	bl	8008b6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008556:	609a      	str	r2, [r3, #8]
      break;
 8008558:	e03c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008566:	461a      	mov	r2, r3
 8008568:	f000 fa86 	bl	8008a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2150      	movs	r1, #80	@ 0x50
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fadf 	bl	8008b36 <TIM_ITRx_SetConfig>
      break;
 8008578:	e02c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008586:	461a      	mov	r2, r3
 8008588:	f000 faa5 	bl	8008ad6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2160      	movs	r1, #96	@ 0x60
 8008592:	4618      	mov	r0, r3
 8008594:	f000 facf 	bl	8008b36 <TIM_ITRx_SetConfig>
      break;
 8008598:	e01c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a6:	461a      	mov	r2, r3
 80085a8:	f000 fa66 	bl	8008a78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2140      	movs	r1, #64	@ 0x40
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 fabf 	bl	8008b36 <TIM_ITRx_SetConfig>
      break;
 80085b8:	e00c      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f000 fab6 	bl	8008b36 <TIM_ITRx_SetConfig>
      break;
 80085ca:	e003      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	73fb      	strb	r3, [r7, #15]
      break;
 80085d0:	e000      	b.n	80085d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b083      	sub	sp, #12
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800860a:	bf00      	nop
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a37      	ldr	r2, [pc, #220]	@ (8008744 <TIM_Base_SetConfig+0xf0>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d00f      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008672:	d00b      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a34      	ldr	r2, [pc, #208]	@ (8008748 <TIM_Base_SetConfig+0xf4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d007      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a33      	ldr	r2, [pc, #204]	@ (800874c <TIM_Base_SetConfig+0xf8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d003      	beq.n	800868c <TIM_Base_SetConfig+0x38>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a32      	ldr	r2, [pc, #200]	@ (8008750 <TIM_Base_SetConfig+0xfc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d108      	bne.n	800869e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a28      	ldr	r2, [pc, #160]	@ (8008744 <TIM_Base_SetConfig+0xf0>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d01b      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ac:	d017      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a25      	ldr	r2, [pc, #148]	@ (8008748 <TIM_Base_SetConfig+0xf4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d013      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a24      	ldr	r2, [pc, #144]	@ (800874c <TIM_Base_SetConfig+0xf8>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00f      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a23      	ldr	r2, [pc, #140]	@ (8008750 <TIM_Base_SetConfig+0xfc>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d00b      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a22      	ldr	r2, [pc, #136]	@ (8008754 <TIM_Base_SetConfig+0x100>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d007      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a21      	ldr	r2, [pc, #132]	@ (8008758 <TIM_Base_SetConfig+0x104>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d003      	beq.n	80086de <TIM_Base_SetConfig+0x8a>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a20      	ldr	r2, [pc, #128]	@ (800875c <TIM_Base_SetConfig+0x108>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d108      	bne.n	80086f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a0c      	ldr	r2, [pc, #48]	@ (8008744 <TIM_Base_SetConfig+0xf0>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d103      	bne.n	800871e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f043 0204 	orr.w	r2, r3, #4
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	601a      	str	r2, [r3, #0]
}
 8008736:	bf00      	nop
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	40010000 	.word	0x40010000
 8008748:	40000400 	.word	0x40000400
 800874c:	40000800 	.word	0x40000800
 8008750:	40000c00 	.word	0x40000c00
 8008754:	40014000 	.word	0x40014000
 8008758:	40014400 	.word	0x40014400
 800875c:	40014800 	.word	0x40014800

08008760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a1b      	ldr	r3, [r3, #32]
 8008774:	f023 0201 	bic.w	r2, r3, #1
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800878e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f023 0303 	bic.w	r3, r3, #3
 8008796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f023 0302 	bic.w	r3, r3, #2
 80087a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008828 <TIM_OC1_SetConfig+0xc8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d10c      	bne.n	80087d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f023 0308 	bic.w	r3, r3, #8
 80087c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	f023 0304 	bic.w	r3, r3, #4
 80087d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a13      	ldr	r2, [pc, #76]	@ (8008828 <TIM_OC1_SetConfig+0xc8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d111      	bne.n	8008802 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	693a      	ldr	r2, [r7, #16]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68fa      	ldr	r2, [r7, #12]
 800880c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	621a      	str	r2, [r3, #32]
}
 800881c:	bf00      	nop
 800881e:	371c      	adds	r7, #28
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	40010000 	.word	0x40010000

0800882c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	f023 0210 	bic.w	r2, r3, #16
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800885a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	4313      	orrs	r3, r2
 800886e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f023 0320 	bic.w	r3, r3, #32
 8008876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	011b      	lsls	r3, r3, #4
 800887e:	697a      	ldr	r2, [r7, #20]
 8008880:	4313      	orrs	r3, r2
 8008882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1e      	ldr	r2, [pc, #120]	@ (8008900 <TIM_OC2_SetConfig+0xd4>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d10d      	bne.n	80088a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	4313      	orrs	r3, r2
 800889e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a15      	ldr	r2, [pc, #84]	@ (8008900 <TIM_OC2_SetConfig+0xd4>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d113      	bne.n	80088d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40010000 	.word	0x40010000

08008904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	4313      	orrs	r3, r2
 8008944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800894c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1d      	ldr	r2, [pc, #116]	@ (80089d4 <TIM_OC3_SetConfig+0xd0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d10d      	bne.n	800897e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	021b      	lsls	r3, r3, #8
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800897c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a14      	ldr	r2, [pc, #80]	@ (80089d4 <TIM_OC3_SetConfig+0xd0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d113      	bne.n	80089ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800898c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	011b      	lsls	r3, r3, #4
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	697a      	ldr	r2, [r7, #20]
 80089c6:	621a      	str	r2, [r3, #32]
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40010000 	.word	0x40010000

080089d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a1b      	ldr	r3, [r3, #32]
 80089e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	031b      	lsls	r3, r3, #12
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a10      	ldr	r2, [pc, #64]	@ (8008a74 <TIM_OC4_SetConfig+0x9c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d109      	bne.n	8008a4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	019b      	lsls	r3, r3, #6
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40010000 	.word	0x40010000

08008a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	f023 0201 	bic.w	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f023 030a 	bic.w	r3, r3, #10
 8008ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b087      	sub	sp, #28
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	60f8      	str	r0, [r7, #12]
 8008ade:	60b9      	str	r1, [r7, #8]
 8008ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f023 0210 	bic.w	r2, r3, #16
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008b00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	031b      	lsls	r3, r3, #12
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008b12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	621a      	str	r2, [r3, #32]
}
 8008b2a:	bf00      	nop
 8008b2c:	371c      	adds	r7, #28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	f043 0307 	orr.w	r3, r3, #7
 8008b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	609a      	str	r2, [r3, #8]
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	021a      	lsls	r2, r3, #8
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	609a      	str	r2, [r3, #8]
}
 8008ba0:	bf00      	nop
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 031f 	and.w	r3, r3, #31
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6a1a      	ldr	r2, [r3, #32]
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	43db      	mvns	r3, r3
 8008bce:	401a      	ands	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6a1a      	ldr	r2, [r3, #32]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	431a      	orrs	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	621a      	str	r2, [r3, #32]
}
 8008bea:	bf00      	nop
 8008bec:	371c      	adds	r7, #28
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d101      	bne.n	8008c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	e050      	b.n	8008cb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d018      	beq.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5c:	d013      	beq.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a18      	ldr	r2, [pc, #96]	@ (8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00e      	beq.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a16      	ldr	r2, [pc, #88]	@ (8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d009      	beq.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a15      	ldr	r2, [pc, #84]	@ (8008ccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d004      	beq.n	8008c86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a13      	ldr	r2, [pc, #76]	@ (8008cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d10c      	bne.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3714      	adds	r7, #20
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40010000 	.word	0x40010000
 8008cc4:	40000400 	.word	0x40000400
 8008cc8:	40000800 	.word	0x40000800
 8008ccc:	40000c00 	.word	0x40000c00
 8008cd0:	40014000 	.word	0x40014000

08008cd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e03d      	b.n	8008d6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e042      	b.n	8008e38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d106      	bne.n	8008dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7fc faba 	bl	8005340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2224      	movs	r2, #36	@ 0x24
 8008dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fd7f 	bl	80098e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	691a      	ldr	r2, [r3, #16]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	695a      	ldr	r2, [r3, #20]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b08a      	sub	sp, #40	@ 0x28
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	d175      	bne.n	8008f4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <HAL_UART_Transmit+0x2c>
 8008e66:	88fb      	ldrh	r3, [r7, #6]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e06e      	b.n	8008f4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2221      	movs	r2, #33	@ 0x21
 8008e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e7e:	f7fc fc8d 	bl	800579c <HAL_GetTick>
 8008e82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	88fa      	ldrh	r2, [r7, #6]
 8008e88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	88fa      	ldrh	r2, [r7, #6]
 8008e8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e98:	d108      	bne.n	8008eac <HAL_UART_Transmit+0x6c>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d104      	bne.n	8008eac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	61bb      	str	r3, [r7, #24]
 8008eaa:	e003      	b.n	8008eb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008eb4:	e02e      	b.n	8008f14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2180      	movs	r1, #128	@ 0x80
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 fb1d 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e03a      	b.n	8008f4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10b      	bne.n	8008ef6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008eec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	61bb      	str	r3, [r7, #24]
 8008ef4:	e007      	b.n	8008f06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	781a      	ldrb	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	3301      	adds	r3, #1
 8008f04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1cb      	bne.n	8008eb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2200      	movs	r2, #0
 8008f26:	2140      	movs	r1, #64	@ 0x40
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fae9 	bl	8009500 <UART_WaitOnFlagUntilTimeout>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e006      	b.n	8008f4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0ba      	sub	sp, #232	@ 0xe8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	695b      	ldr	r3, [r3, #20]
 8008f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10f      	bne.n	8008fbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fa2:	f003 0320 	and.w	r3, r3, #32
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d009      	beq.n	8008fbe <HAL_UART_IRQHandler+0x66>
 8008faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fbd7 	bl	800976a <UART_Receive_IT>
      return;
 8008fbc:	e273      	b.n	80094a6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 80de 	beq.w	8009184 <HAL_UART_IRQHandler+0x22c>
 8008fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d106      	bne.n	8008fe2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80d1 	beq.w	8009184 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00b      	beq.n	8009006 <HAL_UART_IRQHandler+0xae>
 8008fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d005      	beq.n	8009006 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ffe:	f043 0201 	orr.w	r2, r3, #1
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800900a:	f003 0304 	and.w	r3, r3, #4
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00b      	beq.n	800902a <HAL_UART_IRQHandler+0xd2>
 8009012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009022:	f043 0202 	orr.w	r2, r3, #2
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800902a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800902e:	f003 0302 	and.w	r3, r3, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00b      	beq.n	800904e <HAL_UART_IRQHandler+0xf6>
 8009036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d005      	beq.n	800904e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009046:	f043 0204 	orr.w	r2, r3, #4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800904e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d011      	beq.n	800907e <HAL_UART_IRQHandler+0x126>
 800905a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800905e:	f003 0320 	and.w	r3, r3, #32
 8009062:	2b00      	cmp	r3, #0
 8009064:	d105      	bne.n	8009072 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009076:	f043 0208 	orr.w	r2, r3, #8
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 820a 	beq.w	800949c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <HAL_UART_IRQHandler+0x14e>
 8009094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009098:	f003 0320 	and.w	r3, r3, #32
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fb62 	bl	800976a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b0:	2b40      	cmp	r3, #64	@ 0x40
 80090b2:	bf0c      	ite	eq
 80090b4:	2301      	moveq	r3, #1
 80090b6:	2300      	movne	r3, #0
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <HAL_UART_IRQHandler+0x17a>
 80090ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d04f      	beq.n	8009172 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa6d 	bl	80095b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e2:	2b40      	cmp	r3, #64	@ 0x40
 80090e4:	d141      	bne.n	800916a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3314      	adds	r3, #20
 80090ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80090fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009104:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009112:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009116:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800911e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009122:	e841 2300 	strex	r3, r2, [r1]
 8009126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800912a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1d9      	bne.n	80090e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009136:	2b00      	cmp	r3, #0
 8009138:	d013      	beq.n	8009162 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913e:	4a8a      	ldr	r2, [pc, #552]	@ (8009368 <HAL_UART_IRQHandler+0x410>)
 8009140:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd f8cb 	bl	80062e2 <HAL_DMA_Abort_IT>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d016      	beq.n	8009180 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009160:	e00e      	b.n	8009180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9b6 	bl	80094d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009168:	e00a      	b.n	8009180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9b2 	bl	80094d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009170:	e006      	b.n	8009180 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f9ae 	bl	80094d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800917e:	e18d      	b.n	800949c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009180:	bf00      	nop
    return;
 8009182:	e18b      	b.n	800949c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009188:	2b01      	cmp	r3, #1
 800918a:	f040 8167 	bne.w	800945c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800918e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 8160 	beq.w	800945c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800919c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091a0:	f003 0310 	and.w	r3, r3, #16
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 8159 	beq.w	800945c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091aa:	2300      	movs	r3, #0
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	60bb      	str	r3, [r7, #8]
 80091be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ca:	2b40      	cmp	r3, #64	@ 0x40
 80091cc:	f040 80ce 	bne.w	800936c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 80a9 	beq.w	8009338 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091ee:	429a      	cmp	r2, r3
 80091f0:	f080 80a2 	bcs.w	8009338 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009206:	f000 8088 	beq.w	800931a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	330c      	adds	r3, #12
 8009210:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009220:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009228:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	330c      	adds	r3, #12
 8009232:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009236:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800923a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009242:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009246:	e841 2300 	strex	r3, r2, [r1]
 800924a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800924e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1d9      	bne.n	800920a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	3314      	adds	r3, #20
 800925c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009260:	e853 3f00 	ldrex	r3, [r3]
 8009264:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009268:	f023 0301 	bic.w	r3, r3, #1
 800926c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3314      	adds	r3, #20
 8009276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800927a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800927e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009280:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009282:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800928c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e1      	bne.n	8009256 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3314      	adds	r3, #20
 8009298:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3314      	adds	r3, #20
 80092b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80092b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e3      	bne.n	8009292 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	330c      	adds	r3, #12
 80092de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092e2:	e853 3f00 	ldrex	r3, [r3]
 80092e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092ea:	f023 0310 	bic.w	r3, r3, #16
 80092ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80092fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80092fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009302:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800930a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e3      	bne.n	80092d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009314:	4618      	mov	r0, r3
 8009316:	f7fc ff74 	bl	8006202 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009328:	b29b      	uxth	r3, r3
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	b29b      	uxth	r3, r3
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f8d9 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009336:	e0b3      	b.n	80094a0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800933c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009340:	429a      	cmp	r2, r3
 8009342:	f040 80ad 	bne.w	80094a0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009350:	f040 80a6 	bne.w	80094a0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2202      	movs	r2, #2
 8009358:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 f8c1 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
      return;
 8009366:	e09b      	b.n	80094a0 <HAL_UART_IRQHandler+0x548>
 8009368:	08009679 	.word	0x08009679
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009374:	b29b      	uxth	r3, r3
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009380:	b29b      	uxth	r3, r3
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 808e 	beq.w	80094a4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 8089 	beq.w	80094a4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	330c      	adds	r3, #12
 8009398:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	330c      	adds	r3, #12
 80093b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80093b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80093b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3314      	adds	r3, #20
 80093d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	623b      	str	r3, [r7, #32]
   return(result);
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3314      	adds	r3, #20
 80093ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80093ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e3      	bne.n	80093ca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330c      	adds	r3, #12
 8009416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0310 	bic.w	r3, r3, #16
 8009426:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009434:	61fa      	str	r2, [r7, #28]
 8009436:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	69b9      	ldr	r1, [r7, #24]
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	617b      	str	r3, [r7, #20]
   return(result);
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e3      	bne.n	8009410 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800944e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f847 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800945a:	e023      	b.n	80094a4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800945c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009464:	2b00      	cmp	r3, #0
 8009466:	d009      	beq.n	800947c <HAL_UART_IRQHandler+0x524>
 8009468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800946c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f910 	bl	800969a <UART_Transmit_IT>
    return;
 800947a:	e014      	b.n	80094a6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800947c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00e      	beq.n	80094a6 <HAL_UART_IRQHandler+0x54e>
 8009488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800948c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d008      	beq.n	80094a6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f950 	bl	800973a <UART_EndTransmit_IT>
    return;
 800949a:	e004      	b.n	80094a6 <HAL_UART_IRQHandler+0x54e>
    return;
 800949c:	bf00      	nop
 800949e:	e002      	b.n	80094a6 <HAL_UART_IRQHandler+0x54e>
      return;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <HAL_UART_IRQHandler+0x54e>
      return;
 80094a4:	bf00      	nop
  }
}
 80094a6:	37e8      	adds	r7, #232	@ 0xe8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	4613      	mov	r3, r2
 800950e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009510:	e03b      	b.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009518:	d037      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951a:	f7fc f93f 	bl	800579c <HAL_GetTick>
 800951e:	4602      	mov	r2, r0
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	6a3a      	ldr	r2, [r7, #32]
 8009526:	429a      	cmp	r2, r3
 8009528:	d302      	bcc.n	8009530 <UART_WaitOnFlagUntilTimeout+0x30>
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e03a      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	d023      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2b80      	cmp	r3, #128	@ 0x80
 8009546:	d020      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b40      	cmp	r3, #64	@ 0x40
 800954c:	d01d      	beq.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0308 	and.w	r3, r3, #8
 8009558:	2b08      	cmp	r3, #8
 800955a:	d116      	bne.n	800958a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f81d 	bl	80095b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2208      	movs	r2, #8
 800957c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e00f      	b.n	80095aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	429a      	cmp	r2, r3
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d0b4      	beq.n	8009512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3718      	adds	r7, #24
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095b2:	b480      	push	{r7}
 80095b4:	b095      	sub	sp, #84	@ 0x54
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	330c      	adds	r3, #12
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c4:	e853 3f00 	ldrex	r3, [r3]
 80095c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	330c      	adds	r3, #12
 80095d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095da:	643a      	str	r2, [r7, #64]	@ 0x40
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e5      	bne.n	80095ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3314      	adds	r3, #20
 80095f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	f023 0301 	bic.w	r3, r3, #1
 8009604:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3314      	adds	r3, #20
 800960c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800960e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009610:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e5      	bne.n	80095ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009626:	2b01      	cmp	r3, #1
 8009628:	d119      	bne.n	800965e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	330c      	adds	r3, #12
 8009630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	60bb      	str	r3, [r7, #8]
   return(result);
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	f023 0310 	bic.w	r3, r3, #16
 8009640:	647b      	str	r3, [r7, #68]	@ 0x44
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	330c      	adds	r3, #12
 8009648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800964a:	61ba      	str	r2, [r7, #24]
 800964c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6979      	ldr	r1, [r7, #20]
 8009650:	69ba      	ldr	r2, [r7, #24]
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	613b      	str	r3, [r7, #16]
   return(result);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e5      	bne.n	800962a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800966c:	bf00      	nop
 800966e:	3754      	adds	r7, #84	@ 0x54
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff ff21 	bl	80094d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b21      	cmp	r3, #33	@ 0x21
 80096ac:	d13e      	bne.n	800972c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	d114      	bne.n	80096e2 <UART_Transmit_IT+0x48>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d110      	bne.n	80096e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	1c9a      	adds	r2, r3, #2
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	621a      	str	r2, [r3, #32]
 80096e0:	e008      	b.n	80096f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	1c59      	adds	r1, r3, #1
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6211      	str	r1, [r2, #32]
 80096ec:	781a      	ldrb	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	4619      	mov	r1, r3
 8009702:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10f      	bne.n	8009728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800972c:	2302      	movs	r3, #2
  }
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fea6 	bl	80094ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b08c      	sub	sp, #48	@ 0x30
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009776:	2300      	movs	r3, #0
 8009778:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b22      	cmp	r3, #34	@ 0x22
 8009784:	f040 80aa 	bne.w	80098dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009790:	d115      	bne.n	80097be <UART_Receive_IT+0x54>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d111      	bne.n	80097be <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	1c9a      	adds	r2, r3, #2
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80097bc:	e024      	b.n	8009808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097cc:	d007      	beq.n	80097de <UART_Receive_IT+0x74>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <UART_Receive_IT+0x82>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	701a      	strb	r2, [r3, #0]
 80097ea:	e008      	b.n	80097fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29b      	uxth	r3, r3
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4619      	mov	r1, r3
 8009816:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009818:	2b00      	cmp	r3, #0
 800981a:	d15d      	bne.n	80098d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0220 	bic.w	r2, r2, #32
 800982a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800983a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f022 0201 	bic.w	r2, r2, #1
 800984a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800985e:	2b01      	cmp	r3, #1
 8009860:	d135      	bne.n	80098ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2200      	movs	r2, #0
 8009866:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	330c      	adds	r3, #12
 800986e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	e853 3f00 	ldrex	r3, [r3]
 8009876:	613b      	str	r3, [r7, #16]
   return(result);
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f023 0310 	bic.w	r3, r3, #16
 800987e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	330c      	adds	r3, #12
 8009886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009888:	623a      	str	r2, [r7, #32]
 800988a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800988c:	69f9      	ldr	r1, [r7, #28]
 800988e:	6a3a      	ldr	r2, [r7, #32]
 8009890:	e841 2300 	strex	r3, r2, [r1]
 8009894:	61bb      	str	r3, [r7, #24]
   return(result);
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e5      	bne.n	8009868 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0310 	and.w	r3, r3, #16
 80098a6:	2b10      	cmp	r3, #16
 80098a8:	d10a      	bne.n	80098c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098aa:	2300      	movs	r3, #0
 80098ac:	60fb      	str	r3, [r7, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	60fb      	str	r3, [r7, #12]
 80098be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7ff fe0e 	bl	80094e8 <HAL_UARTEx_RxEventCallback>
 80098cc:	e002      	b.n	80098d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7ff fdf6 	bl	80094c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	e002      	b.n	80098de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	e000      	b.n	80098de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80098dc:	2302      	movs	r3, #2
  }
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3730      	adds	r7, #48	@ 0x30
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098ec:	b0c0      	sub	sp, #256	@ 0x100
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009904:	68d9      	ldr	r1, [r3, #12]
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	ea40 0301 	orr.w	r3, r0, r1
 8009910:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	431a      	orrs	r2, r3
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	431a      	orrs	r2, r3
 8009928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	4313      	orrs	r3, r2
 8009930:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009940:	f021 010c 	bic.w	r1, r1, #12
 8009944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800994e:	430b      	orrs	r3, r1
 8009950:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800995e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009962:	6999      	ldr	r1, [r3, #24]
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	ea40 0301 	orr.w	r3, r0, r1
 800996e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4b8f      	ldr	r3, [pc, #572]	@ (8009bb4 <UART_SetConfig+0x2cc>)
 8009978:	429a      	cmp	r2, r3
 800997a:	d005      	beq.n	8009988 <UART_SetConfig+0xa0>
 800997c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b8d      	ldr	r3, [pc, #564]	@ (8009bb8 <UART_SetConfig+0x2d0>)
 8009984:	429a      	cmp	r2, r3
 8009986:	d104      	bne.n	8009992 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009988:	f7fd fae2 	bl	8006f50 <HAL_RCC_GetPCLK2Freq>
 800998c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009990:	e003      	b.n	800999a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009992:	f7fd fac9 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 8009996:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800999a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099a4:	f040 810c 	bne.w	8009bc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099ac:	2200      	movs	r2, #0
 80099ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80099b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80099ba:	4622      	mov	r2, r4
 80099bc:	462b      	mov	r3, r5
 80099be:	1891      	adds	r1, r2, r2
 80099c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80099c2:	415b      	adcs	r3, r3
 80099c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80099ca:	4621      	mov	r1, r4
 80099cc:	eb12 0801 	adds.w	r8, r2, r1
 80099d0:	4629      	mov	r1, r5
 80099d2:	eb43 0901 	adc.w	r9, r3, r1
 80099d6:	f04f 0200 	mov.w	r2, #0
 80099da:	f04f 0300 	mov.w	r3, #0
 80099de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099ea:	4690      	mov	r8, r2
 80099ec:	4699      	mov	r9, r3
 80099ee:	4623      	mov	r3, r4
 80099f0:	eb18 0303 	adds.w	r3, r8, r3
 80099f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099f8:	462b      	mov	r3, r5
 80099fa:	eb49 0303 	adc.w	r3, r9, r3
 80099fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a16:	460b      	mov	r3, r1
 8009a18:	18db      	adds	r3, r3, r3
 8009a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	eb42 0303 	adc.w	r3, r2, r3
 8009a22:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009a28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009a2c:	f7f7 f8c4 	bl	8000bb8 <__aeabi_uldivmod>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4b61      	ldr	r3, [pc, #388]	@ (8009bbc <UART_SetConfig+0x2d4>)
 8009a36:	fba3 2302 	umull	r2, r3, r3, r2
 8009a3a:	095b      	lsrs	r3, r3, #5
 8009a3c:	011c      	lsls	r4, r3, #4
 8009a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009a4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	1891      	adds	r1, r2, r2
 8009a56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a58:	415b      	adcs	r3, r3
 8009a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a60:	4641      	mov	r1, r8
 8009a62:	eb12 0a01 	adds.w	sl, r2, r1
 8009a66:	4649      	mov	r1, r9
 8009a68:	eb43 0b01 	adc.w	fp, r3, r1
 8009a6c:	f04f 0200 	mov.w	r2, #0
 8009a70:	f04f 0300 	mov.w	r3, #0
 8009a74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a80:	4692      	mov	sl, r2
 8009a82:	469b      	mov	fp, r3
 8009a84:	4643      	mov	r3, r8
 8009a86:	eb1a 0303 	adds.w	r3, sl, r3
 8009a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a8e:	464b      	mov	r3, r9
 8009a90:	eb4b 0303 	adc.w	r3, fp, r3
 8009a94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009aa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009aa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009aac:	460b      	mov	r3, r1
 8009aae:	18db      	adds	r3, r3, r3
 8009ab0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	eb42 0303 	adc.w	r3, r2, r3
 8009ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009abe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ac2:	f7f7 f879 	bl	8000bb8 <__aeabi_uldivmod>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4611      	mov	r1, r2
 8009acc:	4b3b      	ldr	r3, [pc, #236]	@ (8009bbc <UART_SetConfig+0x2d4>)
 8009ace:	fba3 2301 	umull	r2, r3, r3, r1
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	2264      	movs	r2, #100	@ 0x64
 8009ad6:	fb02 f303 	mul.w	r3, r2, r3
 8009ada:	1acb      	subs	r3, r1, r3
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ae2:	4b36      	ldr	r3, [pc, #216]	@ (8009bbc <UART_SetConfig+0x2d4>)
 8009ae4:	fba3 2302 	umull	r2, r3, r3, r2
 8009ae8:	095b      	lsrs	r3, r3, #5
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009af0:	441c      	add	r4, r3
 8009af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009af6:	2200      	movs	r2, #0
 8009af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009afc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009b00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009b04:	4642      	mov	r2, r8
 8009b06:	464b      	mov	r3, r9
 8009b08:	1891      	adds	r1, r2, r2
 8009b0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b0c:	415b      	adcs	r3, r3
 8009b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009b14:	4641      	mov	r1, r8
 8009b16:	1851      	adds	r1, r2, r1
 8009b18:	6339      	str	r1, [r7, #48]	@ 0x30
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	414b      	adcs	r3, r1
 8009b1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b20:	f04f 0200 	mov.w	r2, #0
 8009b24:	f04f 0300 	mov.w	r3, #0
 8009b28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009b2c:	4659      	mov	r1, fp
 8009b2e:	00cb      	lsls	r3, r1, #3
 8009b30:	4651      	mov	r1, sl
 8009b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b36:	4651      	mov	r1, sl
 8009b38:	00ca      	lsls	r2, r1, #3
 8009b3a:	4610      	mov	r0, r2
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4642      	mov	r2, r8
 8009b42:	189b      	adds	r3, r3, r2
 8009b44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b48:	464b      	mov	r3, r9
 8009b4a:	460a      	mov	r2, r1
 8009b4c:	eb42 0303 	adc.w	r3, r2, r3
 8009b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b68:	460b      	mov	r3, r1
 8009b6a:	18db      	adds	r3, r3, r3
 8009b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b6e:	4613      	mov	r3, r2
 8009b70:	eb42 0303 	adc.w	r3, r2, r3
 8009b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b7e:	f7f7 f81b 	bl	8000bb8 <__aeabi_uldivmod>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <UART_SetConfig+0x2d4>)
 8009b88:	fba3 1302 	umull	r1, r3, r3, r2
 8009b8c:	095b      	lsrs	r3, r3, #5
 8009b8e:	2164      	movs	r1, #100	@ 0x64
 8009b90:	fb01 f303 	mul.w	r3, r1, r3
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	00db      	lsls	r3, r3, #3
 8009b98:	3332      	adds	r3, #50	@ 0x32
 8009b9a:	4a08      	ldr	r2, [pc, #32]	@ (8009bbc <UART_SetConfig+0x2d4>)
 8009b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba0:	095b      	lsrs	r3, r3, #5
 8009ba2:	f003 0207 	and.w	r2, r3, #7
 8009ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4422      	add	r2, r4
 8009bae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009bb0:	e106      	b.n	8009dc0 <UART_SetConfig+0x4d8>
 8009bb2:	bf00      	nop
 8009bb4:	40011000 	.word	0x40011000
 8009bb8:	40011400 	.word	0x40011400
 8009bbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009bce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009bd2:	4642      	mov	r2, r8
 8009bd4:	464b      	mov	r3, r9
 8009bd6:	1891      	adds	r1, r2, r2
 8009bd8:	6239      	str	r1, [r7, #32]
 8009bda:	415b      	adcs	r3, r3
 8009bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009be2:	4641      	mov	r1, r8
 8009be4:	1854      	adds	r4, r2, r1
 8009be6:	4649      	mov	r1, r9
 8009be8:	eb43 0501 	adc.w	r5, r3, r1
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	00eb      	lsls	r3, r5, #3
 8009bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bfa:	00e2      	lsls	r2, r4, #3
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	461d      	mov	r5, r3
 8009c00:	4643      	mov	r3, r8
 8009c02:	18e3      	adds	r3, r4, r3
 8009c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c08:	464b      	mov	r3, r9
 8009c0a:	eb45 0303 	adc.w	r3, r5, r3
 8009c0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c22:	f04f 0200 	mov.w	r2, #0
 8009c26:	f04f 0300 	mov.w	r3, #0
 8009c2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c2e:	4629      	mov	r1, r5
 8009c30:	008b      	lsls	r3, r1, #2
 8009c32:	4621      	mov	r1, r4
 8009c34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c38:	4621      	mov	r1, r4
 8009c3a:	008a      	lsls	r2, r1, #2
 8009c3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009c40:	f7f6 ffba 	bl	8000bb8 <__aeabi_uldivmod>
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	4b60      	ldr	r3, [pc, #384]	@ (8009dcc <UART_SetConfig+0x4e4>)
 8009c4a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	011c      	lsls	r4, r3, #4
 8009c52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c64:	4642      	mov	r2, r8
 8009c66:	464b      	mov	r3, r9
 8009c68:	1891      	adds	r1, r2, r2
 8009c6a:	61b9      	str	r1, [r7, #24]
 8009c6c:	415b      	adcs	r3, r3
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c74:	4641      	mov	r1, r8
 8009c76:	1851      	adds	r1, r2, r1
 8009c78:	6139      	str	r1, [r7, #16]
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	414b      	adcs	r3, r1
 8009c7e:	617b      	str	r3, [r7, #20]
 8009c80:	f04f 0200 	mov.w	r2, #0
 8009c84:	f04f 0300 	mov.w	r3, #0
 8009c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c8c:	4659      	mov	r1, fp
 8009c8e:	00cb      	lsls	r3, r1, #3
 8009c90:	4651      	mov	r1, sl
 8009c92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c96:	4651      	mov	r1, sl
 8009c98:	00ca      	lsls	r2, r1, #3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4642      	mov	r2, r8
 8009ca2:	189b      	adds	r3, r3, r2
 8009ca4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ca8:	464b      	mov	r3, r9
 8009caa:	460a      	mov	r2, r1
 8009cac:	eb42 0303 	adc.w	r3, r2, r3
 8009cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ccc:	4649      	mov	r1, r9
 8009cce:	008b      	lsls	r3, r1, #2
 8009cd0:	4641      	mov	r1, r8
 8009cd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cd6:	4641      	mov	r1, r8
 8009cd8:	008a      	lsls	r2, r1, #2
 8009cda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009cde:	f7f6 ff6b 	bl	8000bb8 <__aeabi_uldivmod>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4b38      	ldr	r3, [pc, #224]	@ (8009dcc <UART_SetConfig+0x4e4>)
 8009cea:	fba3 2301 	umull	r2, r3, r3, r1
 8009cee:	095b      	lsrs	r3, r3, #5
 8009cf0:	2264      	movs	r2, #100	@ 0x64
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
 8009cf6:	1acb      	subs	r3, r1, r3
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	3332      	adds	r3, #50	@ 0x32
 8009cfc:	4a33      	ldr	r2, [pc, #204]	@ (8009dcc <UART_SetConfig+0x4e4>)
 8009cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009d02:	095b      	lsrs	r3, r3, #5
 8009d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d08:	441c      	add	r4, r3
 8009d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d0e:	2200      	movs	r2, #0
 8009d10:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d12:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009d18:	4642      	mov	r2, r8
 8009d1a:	464b      	mov	r3, r9
 8009d1c:	1891      	adds	r1, r2, r2
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	415b      	adcs	r3, r3
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d28:	4641      	mov	r1, r8
 8009d2a:	1851      	adds	r1, r2, r1
 8009d2c:	6039      	str	r1, [r7, #0]
 8009d2e:	4649      	mov	r1, r9
 8009d30:	414b      	adcs	r3, r1
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	f04f 0200 	mov.w	r2, #0
 8009d38:	f04f 0300 	mov.w	r3, #0
 8009d3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d40:	4659      	mov	r1, fp
 8009d42:	00cb      	lsls	r3, r1, #3
 8009d44:	4651      	mov	r1, sl
 8009d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d4a:	4651      	mov	r1, sl
 8009d4c:	00ca      	lsls	r2, r1, #3
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4619      	mov	r1, r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	4642      	mov	r2, r8
 8009d56:	189b      	adds	r3, r3, r2
 8009d58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	460a      	mov	r2, r1
 8009d5e:	eb42 0303 	adc.w	r3, r2, r3
 8009d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	f04f 0300 	mov.w	r3, #0
 8009d78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	008b      	lsls	r3, r1, #2
 8009d80:	4641      	mov	r1, r8
 8009d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d86:	4641      	mov	r1, r8
 8009d88:	008a      	lsls	r2, r1, #2
 8009d8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d8e:	f7f6 ff13 	bl	8000bb8 <__aeabi_uldivmod>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <UART_SetConfig+0x4e4>)
 8009d98:	fba3 1302 	umull	r1, r3, r3, r2
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	2164      	movs	r1, #100	@ 0x64
 8009da0:	fb01 f303 	mul.w	r3, r1, r3
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	3332      	adds	r3, #50	@ 0x32
 8009daa:	4a08      	ldr	r2, [pc, #32]	@ (8009dcc <UART_SetConfig+0x4e4>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	f003 020f 	and.w	r2, r3, #15
 8009db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4422      	add	r2, r4
 8009dbe:	609a      	str	r2, [r3, #8]
}
 8009dc0:	bf00      	nop
 8009dc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dcc:	51eb851f 	.word	0x51eb851f

08009dd0 <__cvt>:
 8009dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	ec57 6b10 	vmov	r6, r7, d0
 8009dd8:	2f00      	cmp	r7, #0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4619      	mov	r1, r3
 8009dde:	463b      	mov	r3, r7
 8009de0:	bfbb      	ittet	lt
 8009de2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009de6:	461f      	movlt	r7, r3
 8009de8:	2300      	movge	r3, #0
 8009dea:	232d      	movlt	r3, #45	@ 0x2d
 8009dec:	700b      	strb	r3, [r1, #0]
 8009dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009df4:	4691      	mov	r9, r2
 8009df6:	f023 0820 	bic.w	r8, r3, #32
 8009dfa:	bfbc      	itt	lt
 8009dfc:	4632      	movlt	r2, r6
 8009dfe:	4616      	movlt	r6, r2
 8009e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e04:	d005      	beq.n	8009e12 <__cvt+0x42>
 8009e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e0a:	d100      	bne.n	8009e0e <__cvt+0x3e>
 8009e0c:	3401      	adds	r4, #1
 8009e0e:	2102      	movs	r1, #2
 8009e10:	e000      	b.n	8009e14 <__cvt+0x44>
 8009e12:	2103      	movs	r1, #3
 8009e14:	ab03      	add	r3, sp, #12
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	ab02      	add	r3, sp, #8
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	ec47 6b10 	vmov	d0, r6, r7
 8009e20:	4653      	mov	r3, sl
 8009e22:	4622      	mov	r2, r4
 8009e24:	f000 fe74 	bl	800ab10 <_dtoa_r>
 8009e28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e2c:	4605      	mov	r5, r0
 8009e2e:	d119      	bne.n	8009e64 <__cvt+0x94>
 8009e30:	f019 0f01 	tst.w	r9, #1
 8009e34:	d00e      	beq.n	8009e54 <__cvt+0x84>
 8009e36:	eb00 0904 	add.w	r9, r0, r4
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4639      	mov	r1, r7
 8009e42:	f7f6 fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e46:	b108      	cbz	r0, 8009e4c <__cvt+0x7c>
 8009e48:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e4c:	2230      	movs	r2, #48	@ 0x30
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	454b      	cmp	r3, r9
 8009e52:	d31e      	bcc.n	8009e92 <__cvt+0xc2>
 8009e54:	9b03      	ldr	r3, [sp, #12]
 8009e56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e58:	1b5b      	subs	r3, r3, r5
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	b004      	add	sp, #16
 8009e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e68:	eb00 0904 	add.w	r9, r0, r4
 8009e6c:	d1e5      	bne.n	8009e3a <__cvt+0x6a>
 8009e6e:	7803      	ldrb	r3, [r0, #0]
 8009e70:	2b30      	cmp	r3, #48	@ 0x30
 8009e72:	d10a      	bne.n	8009e8a <__cvt+0xba>
 8009e74:	2200      	movs	r2, #0
 8009e76:	2300      	movs	r3, #0
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fe2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e80:	b918      	cbnz	r0, 8009e8a <__cvt+0xba>
 8009e82:	f1c4 0401 	rsb	r4, r4, #1
 8009e86:	f8ca 4000 	str.w	r4, [sl]
 8009e8a:	f8da 3000 	ldr.w	r3, [sl]
 8009e8e:	4499      	add	r9, r3
 8009e90:	e7d3      	b.n	8009e3a <__cvt+0x6a>
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	9103      	str	r1, [sp, #12]
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	e7d9      	b.n	8009e4e <__cvt+0x7e>

08009e9a <__exponent>:
 8009e9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	bfba      	itte	lt
 8009ea0:	4249      	neglt	r1, r1
 8009ea2:	232d      	movlt	r3, #45	@ 0x2d
 8009ea4:	232b      	movge	r3, #43	@ 0x2b
 8009ea6:	2909      	cmp	r1, #9
 8009ea8:	7002      	strb	r2, [r0, #0]
 8009eaa:	7043      	strb	r3, [r0, #1]
 8009eac:	dd29      	ble.n	8009f02 <__exponent+0x68>
 8009eae:	f10d 0307 	add.w	r3, sp, #7
 8009eb2:	461d      	mov	r5, r3
 8009eb4:	270a      	movs	r7, #10
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ebc:	fb07 1416 	mls	r4, r7, r6, r1
 8009ec0:	3430      	adds	r4, #48	@ 0x30
 8009ec2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	2c63      	cmp	r4, #99	@ 0x63
 8009eca:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ece:	4631      	mov	r1, r6
 8009ed0:	dcf1      	bgt.n	8009eb6 <__exponent+0x1c>
 8009ed2:	3130      	adds	r1, #48	@ 0x30
 8009ed4:	1e94      	subs	r4, r2, #2
 8009ed6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009eda:	1c41      	adds	r1, r0, #1
 8009edc:	4623      	mov	r3, r4
 8009ede:	42ab      	cmp	r3, r5
 8009ee0:	d30a      	bcc.n	8009ef8 <__exponent+0x5e>
 8009ee2:	f10d 0309 	add.w	r3, sp, #9
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	42ac      	cmp	r4, r5
 8009eea:	bf88      	it	hi
 8009eec:	2300      	movhi	r3, #0
 8009eee:	3302      	adds	r3, #2
 8009ef0:	4403      	add	r3, r0
 8009ef2:	1a18      	subs	r0, r3, r0
 8009ef4:	b003      	add	sp, #12
 8009ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009efc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f00:	e7ed      	b.n	8009ede <__exponent+0x44>
 8009f02:	2330      	movs	r3, #48	@ 0x30
 8009f04:	3130      	adds	r1, #48	@ 0x30
 8009f06:	7083      	strb	r3, [r0, #2]
 8009f08:	70c1      	strb	r1, [r0, #3]
 8009f0a:	1d03      	adds	r3, r0, #4
 8009f0c:	e7f1      	b.n	8009ef2 <__exponent+0x58>
	...

08009f10 <_printf_float>:
 8009f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f14:	b08d      	sub	sp, #52	@ 0x34
 8009f16:	460c      	mov	r4, r1
 8009f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	461f      	mov	r7, r3
 8009f20:	4605      	mov	r5, r0
 8009f22:	f000 fcf5 	bl	800a910 <_localeconv_r>
 8009f26:	6803      	ldr	r3, [r0, #0]
 8009f28:	9304      	str	r3, [sp, #16]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f6 f9a8 	bl	8000280 <strlen>
 8009f30:	2300      	movs	r3, #0
 8009f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f34:	f8d8 3000 	ldr.w	r3, [r8]
 8009f38:	9005      	str	r0, [sp, #20]
 8009f3a:	3307      	adds	r3, #7
 8009f3c:	f023 0307 	bic.w	r3, r3, #7
 8009f40:	f103 0208 	add.w	r2, r3, #8
 8009f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f48:	f8d4 b000 	ldr.w	fp, [r4]
 8009f4c:	f8c8 2000 	str.w	r2, [r8]
 8009f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f58:	9307      	str	r3, [sp, #28]
 8009f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f66:	4b9c      	ldr	r3, [pc, #624]	@ (800a1d8 <_printf_float+0x2c8>)
 8009f68:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6c:	f7f6 fde6 	bl	8000b3c <__aeabi_dcmpun>
 8009f70:	bb70      	cbnz	r0, 8009fd0 <_printf_float+0xc0>
 8009f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f76:	4b98      	ldr	r3, [pc, #608]	@ (800a1d8 <_printf_float+0x2c8>)
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7c:	f7f6 fdc0 	bl	8000b00 <__aeabi_dcmple>
 8009f80:	bb30      	cbnz	r0, 8009fd0 <_printf_float+0xc0>
 8009f82:	2200      	movs	r2, #0
 8009f84:	2300      	movs	r3, #0
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 fdaf 	bl	8000aec <__aeabi_dcmplt>
 8009f8e:	b110      	cbz	r0, 8009f96 <_printf_float+0x86>
 8009f90:	232d      	movs	r3, #45	@ 0x2d
 8009f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f96:	4a91      	ldr	r2, [pc, #580]	@ (800a1dc <_printf_float+0x2cc>)
 8009f98:	4b91      	ldr	r3, [pc, #580]	@ (800a1e0 <_printf_float+0x2d0>)
 8009f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009f9e:	bf8c      	ite	hi
 8009fa0:	4690      	movhi	r8, r2
 8009fa2:	4698      	movls	r8, r3
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	f02b 0304 	bic.w	r3, fp, #4
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	f04f 0900 	mov.w	r9, #0
 8009fb2:	9700      	str	r7, [sp, #0]
 8009fb4:	4633      	mov	r3, r6
 8009fb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 f9d2 	bl	800a364 <_printf_common>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f040 808d 	bne.w	800a0e0 <_printf_float+0x1d0>
 8009fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fca:	b00d      	add	sp, #52	@ 0x34
 8009fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd0:	4642      	mov	r2, r8
 8009fd2:	464b      	mov	r3, r9
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	f7f6 fdb0 	bl	8000b3c <__aeabi_dcmpun>
 8009fdc:	b140      	cbz	r0, 8009ff0 <_printf_float+0xe0>
 8009fde:	464b      	mov	r3, r9
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfbc      	itt	lt
 8009fe4:	232d      	movlt	r3, #45	@ 0x2d
 8009fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009fea:	4a7e      	ldr	r2, [pc, #504]	@ (800a1e4 <_printf_float+0x2d4>)
 8009fec:	4b7e      	ldr	r3, [pc, #504]	@ (800a1e8 <_printf_float+0x2d8>)
 8009fee:	e7d4      	b.n	8009f9a <_printf_float+0x8a>
 8009ff0:	6863      	ldr	r3, [r4, #4]
 8009ff2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009ff6:	9206      	str	r2, [sp, #24]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	d13b      	bne.n	800a074 <_printf_float+0x164>
 8009ffc:	2306      	movs	r3, #6
 8009ffe:	6063      	str	r3, [r4, #4]
 800a000:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a004:	2300      	movs	r3, #0
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	9303      	str	r3, [sp, #12]
 800a00a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a00c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a010:	ab09      	add	r3, sp, #36	@ 0x24
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	6861      	ldr	r1, [r4, #4]
 800a016:	ec49 8b10 	vmov	d0, r8, r9
 800a01a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a01e:	4628      	mov	r0, r5
 800a020:	f7ff fed6 	bl	8009dd0 <__cvt>
 800a024:	9b06      	ldr	r3, [sp, #24]
 800a026:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a028:	2b47      	cmp	r3, #71	@ 0x47
 800a02a:	4680      	mov	r8, r0
 800a02c:	d129      	bne.n	800a082 <_printf_float+0x172>
 800a02e:	1cc8      	adds	r0, r1, #3
 800a030:	db02      	blt.n	800a038 <_printf_float+0x128>
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	4299      	cmp	r1, r3
 800a036:	dd41      	ble.n	800a0bc <_printf_float+0x1ac>
 800a038:	f1aa 0a02 	sub.w	sl, sl, #2
 800a03c:	fa5f fa8a 	uxtb.w	sl, sl
 800a040:	3901      	subs	r1, #1
 800a042:	4652      	mov	r2, sl
 800a044:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a048:	9109      	str	r1, [sp, #36]	@ 0x24
 800a04a:	f7ff ff26 	bl	8009e9a <__exponent>
 800a04e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a050:	1813      	adds	r3, r2, r0
 800a052:	2a01      	cmp	r2, #1
 800a054:	4681      	mov	r9, r0
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	dc02      	bgt.n	800a060 <_printf_float+0x150>
 800a05a:	6822      	ldr	r2, [r4, #0]
 800a05c:	07d2      	lsls	r2, r2, #31
 800a05e:	d501      	bpl.n	800a064 <_printf_float+0x154>
 800a060:	3301      	adds	r3, #1
 800a062:	6123      	str	r3, [r4, #16]
 800a064:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0a2      	beq.n	8009fb2 <_printf_float+0xa2>
 800a06c:	232d      	movs	r3, #45	@ 0x2d
 800a06e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a072:	e79e      	b.n	8009fb2 <_printf_float+0xa2>
 800a074:	9a06      	ldr	r2, [sp, #24]
 800a076:	2a47      	cmp	r2, #71	@ 0x47
 800a078:	d1c2      	bne.n	800a000 <_printf_float+0xf0>
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1c0      	bne.n	800a000 <_printf_float+0xf0>
 800a07e:	2301      	movs	r3, #1
 800a080:	e7bd      	b.n	8009ffe <_printf_float+0xee>
 800a082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a086:	d9db      	bls.n	800a040 <_printf_float+0x130>
 800a088:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a08c:	d118      	bne.n	800a0c0 <_printf_float+0x1b0>
 800a08e:	2900      	cmp	r1, #0
 800a090:	6863      	ldr	r3, [r4, #4]
 800a092:	dd0b      	ble.n	800a0ac <_printf_float+0x19c>
 800a094:	6121      	str	r1, [r4, #16]
 800a096:	b913      	cbnz	r3, 800a09e <_printf_float+0x18e>
 800a098:	6822      	ldr	r2, [r4, #0]
 800a09a:	07d0      	lsls	r0, r2, #31
 800a09c:	d502      	bpl.n	800a0a4 <_printf_float+0x194>
 800a09e:	3301      	adds	r3, #1
 800a0a0:	440b      	add	r3, r1
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0a6:	f04f 0900 	mov.w	r9, #0
 800a0aa:	e7db      	b.n	800a064 <_printf_float+0x154>
 800a0ac:	b913      	cbnz	r3, 800a0b4 <_printf_float+0x1a4>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	07d2      	lsls	r2, r2, #31
 800a0b2:	d501      	bpl.n	800a0b8 <_printf_float+0x1a8>
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	e7f4      	b.n	800a0a2 <_printf_float+0x192>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e7f2      	b.n	800a0a2 <_printf_float+0x192>
 800a0bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a0c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0c2:	4299      	cmp	r1, r3
 800a0c4:	db05      	blt.n	800a0d2 <_printf_float+0x1c2>
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	6121      	str	r1, [r4, #16]
 800a0ca:	07d8      	lsls	r0, r3, #31
 800a0cc:	d5ea      	bpl.n	800a0a4 <_printf_float+0x194>
 800a0ce:	1c4b      	adds	r3, r1, #1
 800a0d0:	e7e7      	b.n	800a0a2 <_printf_float+0x192>
 800a0d2:	2900      	cmp	r1, #0
 800a0d4:	bfd4      	ite	le
 800a0d6:	f1c1 0202 	rsble	r2, r1, #2
 800a0da:	2201      	movgt	r2, #1
 800a0dc:	4413      	add	r3, r2
 800a0de:	e7e0      	b.n	800a0a2 <_printf_float+0x192>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	055a      	lsls	r2, r3, #21
 800a0e4:	d407      	bmi.n	800a0f6 <_printf_float+0x1e6>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b8      	blx	r7
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d12b      	bne.n	800a14c <_printf_float+0x23c>
 800a0f4:	e767      	b.n	8009fc6 <_printf_float+0xb6>
 800a0f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0fa:	f240 80dd 	bls.w	800a2b8 <_printf_float+0x3a8>
 800a0fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a102:	2200      	movs	r2, #0
 800a104:	2300      	movs	r3, #0
 800a106:	f7f6 fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d033      	beq.n	800a176 <_printf_float+0x266>
 800a10e:	4a37      	ldr	r2, [pc, #220]	@ (800a1ec <_printf_float+0x2dc>)
 800a110:	2301      	movs	r3, #1
 800a112:	4631      	mov	r1, r6
 800a114:	4628      	mov	r0, r5
 800a116:	47b8      	blx	r7
 800a118:	3001      	adds	r0, #1
 800a11a:	f43f af54 	beq.w	8009fc6 <_printf_float+0xb6>
 800a11e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a122:	4543      	cmp	r3, r8
 800a124:	db02      	blt.n	800a12c <_printf_float+0x21c>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	07d8      	lsls	r0, r3, #31
 800a12a:	d50f      	bpl.n	800a14c <_printf_float+0x23c>
 800a12c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a130:	4631      	mov	r1, r6
 800a132:	4628      	mov	r0, r5
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	f43f af45 	beq.w	8009fc6 <_printf_float+0xb6>
 800a13c:	f04f 0900 	mov.w	r9, #0
 800a140:	f108 38ff 	add.w	r8, r8, #4294967295
 800a144:	f104 0a1a 	add.w	sl, r4, #26
 800a148:	45c8      	cmp	r8, r9
 800a14a:	dc09      	bgt.n	800a160 <_printf_float+0x250>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	079b      	lsls	r3, r3, #30
 800a150:	f100 8103 	bmi.w	800a35a <_printf_float+0x44a>
 800a154:	68e0      	ldr	r0, [r4, #12]
 800a156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a158:	4298      	cmp	r0, r3
 800a15a:	bfb8      	it	lt
 800a15c:	4618      	movlt	r0, r3
 800a15e:	e734      	b.n	8009fca <_printf_float+0xba>
 800a160:	2301      	movs	r3, #1
 800a162:	4652      	mov	r2, sl
 800a164:	4631      	mov	r1, r6
 800a166:	4628      	mov	r0, r5
 800a168:	47b8      	blx	r7
 800a16a:	3001      	adds	r0, #1
 800a16c:	f43f af2b 	beq.w	8009fc6 <_printf_float+0xb6>
 800a170:	f109 0901 	add.w	r9, r9, #1
 800a174:	e7e8      	b.n	800a148 <_printf_float+0x238>
 800a176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a178:	2b00      	cmp	r3, #0
 800a17a:	dc39      	bgt.n	800a1f0 <_printf_float+0x2e0>
 800a17c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1ec <_printf_float+0x2dc>)
 800a17e:	2301      	movs	r3, #1
 800a180:	4631      	mov	r1, r6
 800a182:	4628      	mov	r0, r5
 800a184:	47b8      	blx	r7
 800a186:	3001      	adds	r0, #1
 800a188:	f43f af1d 	beq.w	8009fc6 <_printf_float+0xb6>
 800a18c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a190:	ea59 0303 	orrs.w	r3, r9, r3
 800a194:	d102      	bne.n	800a19c <_printf_float+0x28c>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	07d9      	lsls	r1, r3, #31
 800a19a:	d5d7      	bpl.n	800a14c <_printf_float+0x23c>
 800a19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	47b8      	blx	r7
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	f43f af0d 	beq.w	8009fc6 <_printf_float+0xb6>
 800a1ac:	f04f 0a00 	mov.w	sl, #0
 800a1b0:	f104 0b1a 	add.w	fp, r4, #26
 800a1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b6:	425b      	negs	r3, r3
 800a1b8:	4553      	cmp	r3, sl
 800a1ba:	dc01      	bgt.n	800a1c0 <_printf_float+0x2b0>
 800a1bc:	464b      	mov	r3, r9
 800a1be:	e793      	b.n	800a0e8 <_printf_float+0x1d8>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	465a      	mov	r2, fp
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b8      	blx	r7
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f43f aefb 	beq.w	8009fc6 <_printf_float+0xb6>
 800a1d0:	f10a 0a01 	add.w	sl, sl, #1
 800a1d4:	e7ee      	b.n	800a1b4 <_printf_float+0x2a4>
 800a1d6:	bf00      	nop
 800a1d8:	7fefffff 	.word	0x7fefffff
 800a1dc:	0800f08c 	.word	0x0800f08c
 800a1e0:	0800f088 	.word	0x0800f088
 800a1e4:	0800f094 	.word	0x0800f094
 800a1e8:	0800f090 	.word	0x0800f090
 800a1ec:	0800f098 	.word	0x0800f098
 800a1f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a1f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a1f6:	4553      	cmp	r3, sl
 800a1f8:	bfa8      	it	ge
 800a1fa:	4653      	movge	r3, sl
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	4699      	mov	r9, r3
 800a200:	dc36      	bgt.n	800a270 <_printf_float+0x360>
 800a202:	f04f 0b00 	mov.w	fp, #0
 800a206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a20a:	f104 021a 	add.w	r2, r4, #26
 800a20e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a210:	9306      	str	r3, [sp, #24]
 800a212:	eba3 0309 	sub.w	r3, r3, r9
 800a216:	455b      	cmp	r3, fp
 800a218:	dc31      	bgt.n	800a27e <_printf_float+0x36e>
 800a21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21c:	459a      	cmp	sl, r3
 800a21e:	dc3a      	bgt.n	800a296 <_printf_float+0x386>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	07da      	lsls	r2, r3, #31
 800a224:	d437      	bmi.n	800a296 <_printf_float+0x386>
 800a226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a228:	ebaa 0903 	sub.w	r9, sl, r3
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	ebaa 0303 	sub.w	r3, sl, r3
 800a232:	4599      	cmp	r9, r3
 800a234:	bfa8      	it	ge
 800a236:	4699      	movge	r9, r3
 800a238:	f1b9 0f00 	cmp.w	r9, #0
 800a23c:	dc33      	bgt.n	800a2a6 <_printf_float+0x396>
 800a23e:	f04f 0800 	mov.w	r8, #0
 800a242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a246:	f104 0b1a 	add.w	fp, r4, #26
 800a24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24c:	ebaa 0303 	sub.w	r3, sl, r3
 800a250:	eba3 0309 	sub.w	r3, r3, r9
 800a254:	4543      	cmp	r3, r8
 800a256:	f77f af79 	ble.w	800a14c <_printf_float+0x23c>
 800a25a:	2301      	movs	r3, #1
 800a25c:	465a      	mov	r2, fp
 800a25e:	4631      	mov	r1, r6
 800a260:	4628      	mov	r0, r5
 800a262:	47b8      	blx	r7
 800a264:	3001      	adds	r0, #1
 800a266:	f43f aeae 	beq.w	8009fc6 <_printf_float+0xb6>
 800a26a:	f108 0801 	add.w	r8, r8, #1
 800a26e:	e7ec      	b.n	800a24a <_printf_float+0x33a>
 800a270:	4642      	mov	r2, r8
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	d1c2      	bne.n	800a202 <_printf_float+0x2f2>
 800a27c:	e6a3      	b.n	8009fc6 <_printf_float+0xb6>
 800a27e:	2301      	movs	r3, #1
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	9206      	str	r2, [sp, #24]
 800a286:	47b8      	blx	r7
 800a288:	3001      	adds	r0, #1
 800a28a:	f43f ae9c 	beq.w	8009fc6 <_printf_float+0xb6>
 800a28e:	9a06      	ldr	r2, [sp, #24]
 800a290:	f10b 0b01 	add.w	fp, fp, #1
 800a294:	e7bb      	b.n	800a20e <_printf_float+0x2fe>
 800a296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d1c0      	bne.n	800a226 <_printf_float+0x316>
 800a2a4:	e68f      	b.n	8009fc6 <_printf_float+0xb6>
 800a2a6:	9a06      	ldr	r2, [sp, #24]
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4442      	add	r2, r8
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	47b8      	blx	r7
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d1c3      	bne.n	800a23e <_printf_float+0x32e>
 800a2b6:	e686      	b.n	8009fc6 <_printf_float+0xb6>
 800a2b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2bc:	f1ba 0f01 	cmp.w	sl, #1
 800a2c0:	dc01      	bgt.n	800a2c6 <_printf_float+0x3b6>
 800a2c2:	07db      	lsls	r3, r3, #31
 800a2c4:	d536      	bpl.n	800a334 <_printf_float+0x424>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4642      	mov	r2, r8
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b8      	blx	r7
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	f43f ae78 	beq.w	8009fc6 <_printf_float+0xb6>
 800a2d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b8      	blx	r7
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	f43f ae70 	beq.w	8009fc6 <_printf_float+0xb6>
 800a2e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2f2:	f7f6 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2f6:	b9c0      	cbnz	r0, 800a32a <_printf_float+0x41a>
 800a2f8:	4653      	mov	r3, sl
 800a2fa:	f108 0201 	add.w	r2, r8, #1
 800a2fe:	4631      	mov	r1, r6
 800a300:	4628      	mov	r0, r5
 800a302:	47b8      	blx	r7
 800a304:	3001      	adds	r0, #1
 800a306:	d10c      	bne.n	800a322 <_printf_float+0x412>
 800a308:	e65d      	b.n	8009fc6 <_printf_float+0xb6>
 800a30a:	2301      	movs	r3, #1
 800a30c:	465a      	mov	r2, fp
 800a30e:	4631      	mov	r1, r6
 800a310:	4628      	mov	r0, r5
 800a312:	47b8      	blx	r7
 800a314:	3001      	adds	r0, #1
 800a316:	f43f ae56 	beq.w	8009fc6 <_printf_float+0xb6>
 800a31a:	f108 0801 	add.w	r8, r8, #1
 800a31e:	45d0      	cmp	r8, sl
 800a320:	dbf3      	blt.n	800a30a <_printf_float+0x3fa>
 800a322:	464b      	mov	r3, r9
 800a324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a328:	e6df      	b.n	800a0ea <_printf_float+0x1da>
 800a32a:	f04f 0800 	mov.w	r8, #0
 800a32e:	f104 0b1a 	add.w	fp, r4, #26
 800a332:	e7f4      	b.n	800a31e <_printf_float+0x40e>
 800a334:	2301      	movs	r3, #1
 800a336:	4642      	mov	r2, r8
 800a338:	e7e1      	b.n	800a2fe <_printf_float+0x3ee>
 800a33a:	2301      	movs	r3, #1
 800a33c:	464a      	mov	r2, r9
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	f43f ae3e 	beq.w	8009fc6 <_printf_float+0xb6>
 800a34a:	f108 0801 	add.w	r8, r8, #1
 800a34e:	68e3      	ldr	r3, [r4, #12]
 800a350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a352:	1a5b      	subs	r3, r3, r1
 800a354:	4543      	cmp	r3, r8
 800a356:	dcf0      	bgt.n	800a33a <_printf_float+0x42a>
 800a358:	e6fc      	b.n	800a154 <_printf_float+0x244>
 800a35a:	f04f 0800 	mov.w	r8, #0
 800a35e:	f104 0919 	add.w	r9, r4, #25
 800a362:	e7f4      	b.n	800a34e <_printf_float+0x43e>

0800a364 <_printf_common>:
 800a364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	4616      	mov	r6, r2
 800a36a:	4698      	mov	r8, r3
 800a36c:	688a      	ldr	r2, [r1, #8]
 800a36e:	690b      	ldr	r3, [r1, #16]
 800a370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a374:	4293      	cmp	r3, r2
 800a376:	bfb8      	it	lt
 800a378:	4613      	movlt	r3, r2
 800a37a:	6033      	str	r3, [r6, #0]
 800a37c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a380:	4607      	mov	r7, r0
 800a382:	460c      	mov	r4, r1
 800a384:	b10a      	cbz	r2, 800a38a <_printf_common+0x26>
 800a386:	3301      	adds	r3, #1
 800a388:	6033      	str	r3, [r6, #0]
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	0699      	lsls	r1, r3, #26
 800a38e:	bf42      	ittt	mi
 800a390:	6833      	ldrmi	r3, [r6, #0]
 800a392:	3302      	addmi	r3, #2
 800a394:	6033      	strmi	r3, [r6, #0]
 800a396:	6825      	ldr	r5, [r4, #0]
 800a398:	f015 0506 	ands.w	r5, r5, #6
 800a39c:	d106      	bne.n	800a3ac <_printf_common+0x48>
 800a39e:	f104 0a19 	add.w	sl, r4, #25
 800a3a2:	68e3      	ldr	r3, [r4, #12]
 800a3a4:	6832      	ldr	r2, [r6, #0]
 800a3a6:	1a9b      	subs	r3, r3, r2
 800a3a8:	42ab      	cmp	r3, r5
 800a3aa:	dc26      	bgt.n	800a3fa <_printf_common+0x96>
 800a3ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3b0:	6822      	ldr	r2, [r4, #0]
 800a3b2:	3b00      	subs	r3, #0
 800a3b4:	bf18      	it	ne
 800a3b6:	2301      	movne	r3, #1
 800a3b8:	0692      	lsls	r2, r2, #26
 800a3ba:	d42b      	bmi.n	800a414 <_printf_common+0xb0>
 800a3bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3c0:	4641      	mov	r1, r8
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	47c8      	blx	r9
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	d01e      	beq.n	800a408 <_printf_common+0xa4>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	6922      	ldr	r2, [r4, #16]
 800a3ce:	f003 0306 	and.w	r3, r3, #6
 800a3d2:	2b04      	cmp	r3, #4
 800a3d4:	bf02      	ittt	eq
 800a3d6:	68e5      	ldreq	r5, [r4, #12]
 800a3d8:	6833      	ldreq	r3, [r6, #0]
 800a3da:	1aed      	subeq	r5, r5, r3
 800a3dc:	68a3      	ldr	r3, [r4, #8]
 800a3de:	bf0c      	ite	eq
 800a3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3e4:	2500      	movne	r5, #0
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	bfc4      	itt	gt
 800a3ea:	1a9b      	subgt	r3, r3, r2
 800a3ec:	18ed      	addgt	r5, r5, r3
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	341a      	adds	r4, #26
 800a3f2:	42b5      	cmp	r5, r6
 800a3f4:	d11a      	bne.n	800a42c <_printf_common+0xc8>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	e008      	b.n	800a40c <_printf_common+0xa8>
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4652      	mov	r2, sl
 800a3fe:	4641      	mov	r1, r8
 800a400:	4638      	mov	r0, r7
 800a402:	47c8      	blx	r9
 800a404:	3001      	adds	r0, #1
 800a406:	d103      	bne.n	800a410 <_printf_common+0xac>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a410:	3501      	adds	r5, #1
 800a412:	e7c6      	b.n	800a3a2 <_printf_common+0x3e>
 800a414:	18e1      	adds	r1, r4, r3
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	2030      	movs	r0, #48	@ 0x30
 800a41a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a41e:	4422      	add	r2, r4
 800a420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a428:	3302      	adds	r3, #2
 800a42a:	e7c7      	b.n	800a3bc <_printf_common+0x58>
 800a42c:	2301      	movs	r3, #1
 800a42e:	4622      	mov	r2, r4
 800a430:	4641      	mov	r1, r8
 800a432:	4638      	mov	r0, r7
 800a434:	47c8      	blx	r9
 800a436:	3001      	adds	r0, #1
 800a438:	d0e6      	beq.n	800a408 <_printf_common+0xa4>
 800a43a:	3601      	adds	r6, #1
 800a43c:	e7d9      	b.n	800a3f2 <_printf_common+0x8e>
	...

0800a440 <_printf_i>:
 800a440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a444:	7e0f      	ldrb	r7, [r1, #24]
 800a446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a448:	2f78      	cmp	r7, #120	@ 0x78
 800a44a:	4691      	mov	r9, r2
 800a44c:	4680      	mov	r8, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	469a      	mov	sl, r3
 800a452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a456:	d807      	bhi.n	800a468 <_printf_i+0x28>
 800a458:	2f62      	cmp	r7, #98	@ 0x62
 800a45a:	d80a      	bhi.n	800a472 <_printf_i+0x32>
 800a45c:	2f00      	cmp	r7, #0
 800a45e:	f000 80d1 	beq.w	800a604 <_printf_i+0x1c4>
 800a462:	2f58      	cmp	r7, #88	@ 0x58
 800a464:	f000 80b8 	beq.w	800a5d8 <_printf_i+0x198>
 800a468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a46c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a470:	e03a      	b.n	800a4e8 <_printf_i+0xa8>
 800a472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a476:	2b15      	cmp	r3, #21
 800a478:	d8f6      	bhi.n	800a468 <_printf_i+0x28>
 800a47a:	a101      	add	r1, pc, #4	@ (adr r1, 800a480 <_printf_i+0x40>)
 800a47c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a480:	0800a4d9 	.word	0x0800a4d9
 800a484:	0800a4ed 	.word	0x0800a4ed
 800a488:	0800a469 	.word	0x0800a469
 800a48c:	0800a469 	.word	0x0800a469
 800a490:	0800a469 	.word	0x0800a469
 800a494:	0800a469 	.word	0x0800a469
 800a498:	0800a4ed 	.word	0x0800a4ed
 800a49c:	0800a469 	.word	0x0800a469
 800a4a0:	0800a469 	.word	0x0800a469
 800a4a4:	0800a469 	.word	0x0800a469
 800a4a8:	0800a469 	.word	0x0800a469
 800a4ac:	0800a5eb 	.word	0x0800a5eb
 800a4b0:	0800a517 	.word	0x0800a517
 800a4b4:	0800a5a5 	.word	0x0800a5a5
 800a4b8:	0800a469 	.word	0x0800a469
 800a4bc:	0800a469 	.word	0x0800a469
 800a4c0:	0800a60d 	.word	0x0800a60d
 800a4c4:	0800a469 	.word	0x0800a469
 800a4c8:	0800a517 	.word	0x0800a517
 800a4cc:	0800a469 	.word	0x0800a469
 800a4d0:	0800a469 	.word	0x0800a469
 800a4d4:	0800a5ad 	.word	0x0800a5ad
 800a4d8:	6833      	ldr	r3, [r6, #0]
 800a4da:	1d1a      	adds	r2, r3, #4
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6032      	str	r2, [r6, #0]
 800a4e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e09c      	b.n	800a626 <_printf_i+0x1e6>
 800a4ec:	6833      	ldr	r3, [r6, #0]
 800a4ee:	6820      	ldr	r0, [r4, #0]
 800a4f0:	1d19      	adds	r1, r3, #4
 800a4f2:	6031      	str	r1, [r6, #0]
 800a4f4:	0606      	lsls	r6, r0, #24
 800a4f6:	d501      	bpl.n	800a4fc <_printf_i+0xbc>
 800a4f8:	681d      	ldr	r5, [r3, #0]
 800a4fa:	e003      	b.n	800a504 <_printf_i+0xc4>
 800a4fc:	0645      	lsls	r5, r0, #25
 800a4fe:	d5fb      	bpl.n	800a4f8 <_printf_i+0xb8>
 800a500:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a504:	2d00      	cmp	r5, #0
 800a506:	da03      	bge.n	800a510 <_printf_i+0xd0>
 800a508:	232d      	movs	r3, #45	@ 0x2d
 800a50a:	426d      	negs	r5, r5
 800a50c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a510:	4858      	ldr	r0, [pc, #352]	@ (800a674 <_printf_i+0x234>)
 800a512:	230a      	movs	r3, #10
 800a514:	e011      	b.n	800a53a <_printf_i+0xfa>
 800a516:	6821      	ldr	r1, [r4, #0]
 800a518:	6833      	ldr	r3, [r6, #0]
 800a51a:	0608      	lsls	r0, r1, #24
 800a51c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a520:	d402      	bmi.n	800a528 <_printf_i+0xe8>
 800a522:	0649      	lsls	r1, r1, #25
 800a524:	bf48      	it	mi
 800a526:	b2ad      	uxthmi	r5, r5
 800a528:	2f6f      	cmp	r7, #111	@ 0x6f
 800a52a:	4852      	ldr	r0, [pc, #328]	@ (800a674 <_printf_i+0x234>)
 800a52c:	6033      	str	r3, [r6, #0]
 800a52e:	bf14      	ite	ne
 800a530:	230a      	movne	r3, #10
 800a532:	2308      	moveq	r3, #8
 800a534:	2100      	movs	r1, #0
 800a536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a53a:	6866      	ldr	r6, [r4, #4]
 800a53c:	60a6      	str	r6, [r4, #8]
 800a53e:	2e00      	cmp	r6, #0
 800a540:	db05      	blt.n	800a54e <_printf_i+0x10e>
 800a542:	6821      	ldr	r1, [r4, #0]
 800a544:	432e      	orrs	r6, r5
 800a546:	f021 0104 	bic.w	r1, r1, #4
 800a54a:	6021      	str	r1, [r4, #0]
 800a54c:	d04b      	beq.n	800a5e6 <_printf_i+0x1a6>
 800a54e:	4616      	mov	r6, r2
 800a550:	fbb5 f1f3 	udiv	r1, r5, r3
 800a554:	fb03 5711 	mls	r7, r3, r1, r5
 800a558:	5dc7      	ldrb	r7, [r0, r7]
 800a55a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a55e:	462f      	mov	r7, r5
 800a560:	42bb      	cmp	r3, r7
 800a562:	460d      	mov	r5, r1
 800a564:	d9f4      	bls.n	800a550 <_printf_i+0x110>
 800a566:	2b08      	cmp	r3, #8
 800a568:	d10b      	bne.n	800a582 <_printf_i+0x142>
 800a56a:	6823      	ldr	r3, [r4, #0]
 800a56c:	07df      	lsls	r7, r3, #31
 800a56e:	d508      	bpl.n	800a582 <_printf_i+0x142>
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	6861      	ldr	r1, [r4, #4]
 800a574:	4299      	cmp	r1, r3
 800a576:	bfde      	ittt	le
 800a578:	2330      	movle	r3, #48	@ 0x30
 800a57a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a57e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a582:	1b92      	subs	r2, r2, r6
 800a584:	6122      	str	r2, [r4, #16]
 800a586:	f8cd a000 	str.w	sl, [sp]
 800a58a:	464b      	mov	r3, r9
 800a58c:	aa03      	add	r2, sp, #12
 800a58e:	4621      	mov	r1, r4
 800a590:	4640      	mov	r0, r8
 800a592:	f7ff fee7 	bl	800a364 <_printf_common>
 800a596:	3001      	adds	r0, #1
 800a598:	d14a      	bne.n	800a630 <_printf_i+0x1f0>
 800a59a:	f04f 30ff 	mov.w	r0, #4294967295
 800a59e:	b004      	add	sp, #16
 800a5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	f043 0320 	orr.w	r3, r3, #32
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	4832      	ldr	r0, [pc, #200]	@ (800a678 <_printf_i+0x238>)
 800a5ae:	2778      	movs	r7, #120	@ 0x78
 800a5b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	6831      	ldr	r1, [r6, #0]
 800a5b8:	061f      	lsls	r7, r3, #24
 800a5ba:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5be:	d402      	bmi.n	800a5c6 <_printf_i+0x186>
 800a5c0:	065f      	lsls	r7, r3, #25
 800a5c2:	bf48      	it	mi
 800a5c4:	b2ad      	uxthmi	r5, r5
 800a5c6:	6031      	str	r1, [r6, #0]
 800a5c8:	07d9      	lsls	r1, r3, #31
 800a5ca:	bf44      	itt	mi
 800a5cc:	f043 0320 	orrmi.w	r3, r3, #32
 800a5d0:	6023      	strmi	r3, [r4, #0]
 800a5d2:	b11d      	cbz	r5, 800a5dc <_printf_i+0x19c>
 800a5d4:	2310      	movs	r3, #16
 800a5d6:	e7ad      	b.n	800a534 <_printf_i+0xf4>
 800a5d8:	4826      	ldr	r0, [pc, #152]	@ (800a674 <_printf_i+0x234>)
 800a5da:	e7e9      	b.n	800a5b0 <_printf_i+0x170>
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	f023 0320 	bic.w	r3, r3, #32
 800a5e2:	6023      	str	r3, [r4, #0]
 800a5e4:	e7f6      	b.n	800a5d4 <_printf_i+0x194>
 800a5e6:	4616      	mov	r6, r2
 800a5e8:	e7bd      	b.n	800a566 <_printf_i+0x126>
 800a5ea:	6833      	ldr	r3, [r6, #0]
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	6961      	ldr	r1, [r4, #20]
 800a5f0:	1d18      	adds	r0, r3, #4
 800a5f2:	6030      	str	r0, [r6, #0]
 800a5f4:	062e      	lsls	r6, r5, #24
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	d501      	bpl.n	800a5fe <_printf_i+0x1be>
 800a5fa:	6019      	str	r1, [r3, #0]
 800a5fc:	e002      	b.n	800a604 <_printf_i+0x1c4>
 800a5fe:	0668      	lsls	r0, r5, #25
 800a600:	d5fb      	bpl.n	800a5fa <_printf_i+0x1ba>
 800a602:	8019      	strh	r1, [r3, #0]
 800a604:	2300      	movs	r3, #0
 800a606:	6123      	str	r3, [r4, #16]
 800a608:	4616      	mov	r6, r2
 800a60a:	e7bc      	b.n	800a586 <_printf_i+0x146>
 800a60c:	6833      	ldr	r3, [r6, #0]
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	6032      	str	r2, [r6, #0]
 800a612:	681e      	ldr	r6, [r3, #0]
 800a614:	6862      	ldr	r2, [r4, #4]
 800a616:	2100      	movs	r1, #0
 800a618:	4630      	mov	r0, r6
 800a61a:	f7f5 fde1 	bl	80001e0 <memchr>
 800a61e:	b108      	cbz	r0, 800a624 <_printf_i+0x1e4>
 800a620:	1b80      	subs	r0, r0, r6
 800a622:	6060      	str	r0, [r4, #4]
 800a624:	6863      	ldr	r3, [r4, #4]
 800a626:	6123      	str	r3, [r4, #16]
 800a628:	2300      	movs	r3, #0
 800a62a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a62e:	e7aa      	b.n	800a586 <_printf_i+0x146>
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	4632      	mov	r2, r6
 800a634:	4649      	mov	r1, r9
 800a636:	4640      	mov	r0, r8
 800a638:	47d0      	blx	sl
 800a63a:	3001      	adds	r0, #1
 800a63c:	d0ad      	beq.n	800a59a <_printf_i+0x15a>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	079b      	lsls	r3, r3, #30
 800a642:	d413      	bmi.n	800a66c <_printf_i+0x22c>
 800a644:	68e0      	ldr	r0, [r4, #12]
 800a646:	9b03      	ldr	r3, [sp, #12]
 800a648:	4298      	cmp	r0, r3
 800a64a:	bfb8      	it	lt
 800a64c:	4618      	movlt	r0, r3
 800a64e:	e7a6      	b.n	800a59e <_printf_i+0x15e>
 800a650:	2301      	movs	r3, #1
 800a652:	4632      	mov	r2, r6
 800a654:	4649      	mov	r1, r9
 800a656:	4640      	mov	r0, r8
 800a658:	47d0      	blx	sl
 800a65a:	3001      	adds	r0, #1
 800a65c:	d09d      	beq.n	800a59a <_printf_i+0x15a>
 800a65e:	3501      	adds	r5, #1
 800a660:	68e3      	ldr	r3, [r4, #12]
 800a662:	9903      	ldr	r1, [sp, #12]
 800a664:	1a5b      	subs	r3, r3, r1
 800a666:	42ab      	cmp	r3, r5
 800a668:	dcf2      	bgt.n	800a650 <_printf_i+0x210>
 800a66a:	e7eb      	b.n	800a644 <_printf_i+0x204>
 800a66c:	2500      	movs	r5, #0
 800a66e:	f104 0619 	add.w	r6, r4, #25
 800a672:	e7f5      	b.n	800a660 <_printf_i+0x220>
 800a674:	0800f09a 	.word	0x0800f09a
 800a678:	0800f0ab 	.word	0x0800f0ab

0800a67c <std>:
 800a67c:	2300      	movs	r3, #0
 800a67e:	b510      	push	{r4, lr}
 800a680:	4604      	mov	r4, r0
 800a682:	e9c0 3300 	strd	r3, r3, [r0]
 800a686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a68a:	6083      	str	r3, [r0, #8]
 800a68c:	8181      	strh	r1, [r0, #12]
 800a68e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a690:	81c2      	strh	r2, [r0, #14]
 800a692:	6183      	str	r3, [r0, #24]
 800a694:	4619      	mov	r1, r3
 800a696:	2208      	movs	r2, #8
 800a698:	305c      	adds	r0, #92	@ 0x5c
 800a69a:	f000 f931 	bl	800a900 <memset>
 800a69e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <std+0x58>)
 800a6a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d8 <std+0x5c>)
 800a6a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <std+0x60>)
 800a6a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <std+0x64>)
 800a6ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <std+0x68>)
 800a6b0:	6224      	str	r4, [r4, #32]
 800a6b2:	429c      	cmp	r4, r3
 800a6b4:	d006      	beq.n	800a6c4 <std+0x48>
 800a6b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6ba:	4294      	cmp	r4, r2
 800a6bc:	d002      	beq.n	800a6c4 <std+0x48>
 800a6be:	33d0      	adds	r3, #208	@ 0xd0
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	d105      	bne.n	800a6d0 <std+0x54>
 800a6c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6cc:	f000 b994 	b.w	800a9f8 <__retarget_lock_init_recursive>
 800a6d0:	bd10      	pop	{r4, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0800a801 	.word	0x0800a801
 800a6d8:	0800a823 	.word	0x0800a823
 800a6dc:	0800a85b 	.word	0x0800a85b
 800a6e0:	0800a87f 	.word	0x0800a87f
 800a6e4:	200014dc 	.word	0x200014dc

0800a6e8 <stdio_exit_handler>:
 800a6e8:	4a02      	ldr	r2, [pc, #8]	@ (800a6f4 <stdio_exit_handler+0xc>)
 800a6ea:	4903      	ldr	r1, [pc, #12]	@ (800a6f8 <stdio_exit_handler+0x10>)
 800a6ec:	4803      	ldr	r0, [pc, #12]	@ (800a6fc <stdio_exit_handler+0x14>)
 800a6ee:	f000 b869 	b.w	800a7c4 <_fwalk_sglue>
 800a6f2:	bf00      	nop
 800a6f4:	20000014 	.word	0x20000014
 800a6f8:	0800c35d 	.word	0x0800c35d
 800a6fc:	20000024 	.word	0x20000024

0800a700 <cleanup_stdio>:
 800a700:	6841      	ldr	r1, [r0, #4]
 800a702:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <cleanup_stdio+0x34>)
 800a704:	4299      	cmp	r1, r3
 800a706:	b510      	push	{r4, lr}
 800a708:	4604      	mov	r4, r0
 800a70a:	d001      	beq.n	800a710 <cleanup_stdio+0x10>
 800a70c:	f001 fe26 	bl	800c35c <_fflush_r>
 800a710:	68a1      	ldr	r1, [r4, #8]
 800a712:	4b09      	ldr	r3, [pc, #36]	@ (800a738 <cleanup_stdio+0x38>)
 800a714:	4299      	cmp	r1, r3
 800a716:	d002      	beq.n	800a71e <cleanup_stdio+0x1e>
 800a718:	4620      	mov	r0, r4
 800a71a:	f001 fe1f 	bl	800c35c <_fflush_r>
 800a71e:	68e1      	ldr	r1, [r4, #12]
 800a720:	4b06      	ldr	r3, [pc, #24]	@ (800a73c <cleanup_stdio+0x3c>)
 800a722:	4299      	cmp	r1, r3
 800a724:	d004      	beq.n	800a730 <cleanup_stdio+0x30>
 800a726:	4620      	mov	r0, r4
 800a728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a72c:	f001 be16 	b.w	800c35c <_fflush_r>
 800a730:	bd10      	pop	{r4, pc}
 800a732:	bf00      	nop
 800a734:	200014dc 	.word	0x200014dc
 800a738:	20001544 	.word	0x20001544
 800a73c:	200015ac 	.word	0x200015ac

0800a740 <global_stdio_init.part.0>:
 800a740:	b510      	push	{r4, lr}
 800a742:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <global_stdio_init.part.0+0x30>)
 800a744:	4c0b      	ldr	r4, [pc, #44]	@ (800a774 <global_stdio_init.part.0+0x34>)
 800a746:	4a0c      	ldr	r2, [pc, #48]	@ (800a778 <global_stdio_init.part.0+0x38>)
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	4620      	mov	r0, r4
 800a74c:	2200      	movs	r2, #0
 800a74e:	2104      	movs	r1, #4
 800a750:	f7ff ff94 	bl	800a67c <std>
 800a754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a758:	2201      	movs	r2, #1
 800a75a:	2109      	movs	r1, #9
 800a75c:	f7ff ff8e 	bl	800a67c <std>
 800a760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a764:	2202      	movs	r2, #2
 800a766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a76a:	2112      	movs	r1, #18
 800a76c:	f7ff bf86 	b.w	800a67c <std>
 800a770:	20001614 	.word	0x20001614
 800a774:	200014dc 	.word	0x200014dc
 800a778:	0800a6e9 	.word	0x0800a6e9

0800a77c <__sfp_lock_acquire>:
 800a77c:	4801      	ldr	r0, [pc, #4]	@ (800a784 <__sfp_lock_acquire+0x8>)
 800a77e:	f000 b93c 	b.w	800a9fa <__retarget_lock_acquire_recursive>
 800a782:	bf00      	nop
 800a784:	2000161d 	.word	0x2000161d

0800a788 <__sfp_lock_release>:
 800a788:	4801      	ldr	r0, [pc, #4]	@ (800a790 <__sfp_lock_release+0x8>)
 800a78a:	f000 b937 	b.w	800a9fc <__retarget_lock_release_recursive>
 800a78e:	bf00      	nop
 800a790:	2000161d 	.word	0x2000161d

0800a794 <__sinit>:
 800a794:	b510      	push	{r4, lr}
 800a796:	4604      	mov	r4, r0
 800a798:	f7ff fff0 	bl	800a77c <__sfp_lock_acquire>
 800a79c:	6a23      	ldr	r3, [r4, #32]
 800a79e:	b11b      	cbz	r3, 800a7a8 <__sinit+0x14>
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	f7ff bff0 	b.w	800a788 <__sfp_lock_release>
 800a7a8:	4b04      	ldr	r3, [pc, #16]	@ (800a7bc <__sinit+0x28>)
 800a7aa:	6223      	str	r3, [r4, #32]
 800a7ac:	4b04      	ldr	r3, [pc, #16]	@ (800a7c0 <__sinit+0x2c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1f5      	bne.n	800a7a0 <__sinit+0xc>
 800a7b4:	f7ff ffc4 	bl	800a740 <global_stdio_init.part.0>
 800a7b8:	e7f2      	b.n	800a7a0 <__sinit+0xc>
 800a7ba:	bf00      	nop
 800a7bc:	0800a701 	.word	0x0800a701
 800a7c0:	20001614 	.word	0x20001614

0800a7c4 <_fwalk_sglue>:
 800a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c8:	4607      	mov	r7, r0
 800a7ca:	4688      	mov	r8, r1
 800a7cc:	4614      	mov	r4, r2
 800a7ce:	2600      	movs	r6, #0
 800a7d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a7d8:	d505      	bpl.n	800a7e6 <_fwalk_sglue+0x22>
 800a7da:	6824      	ldr	r4, [r4, #0]
 800a7dc:	2c00      	cmp	r4, #0
 800a7de:	d1f7      	bne.n	800a7d0 <_fwalk_sglue+0xc>
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d907      	bls.n	800a7fc <_fwalk_sglue+0x38>
 800a7ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	d003      	beq.n	800a7fc <_fwalk_sglue+0x38>
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	4638      	mov	r0, r7
 800a7f8:	47c0      	blx	r8
 800a7fa:	4306      	orrs	r6, r0
 800a7fc:	3568      	adds	r5, #104	@ 0x68
 800a7fe:	e7e9      	b.n	800a7d4 <_fwalk_sglue+0x10>

0800a800 <__sread>:
 800a800:	b510      	push	{r4, lr}
 800a802:	460c      	mov	r4, r1
 800a804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a808:	f000 f8a8 	bl	800a95c <_read_r>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	bfab      	itete	ge
 800a810:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a812:	89a3      	ldrhlt	r3, [r4, #12]
 800a814:	181b      	addge	r3, r3, r0
 800a816:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a81a:	bfac      	ite	ge
 800a81c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a81e:	81a3      	strhlt	r3, [r4, #12]
 800a820:	bd10      	pop	{r4, pc}

0800a822 <__swrite>:
 800a822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a826:	461f      	mov	r7, r3
 800a828:	898b      	ldrh	r3, [r1, #12]
 800a82a:	05db      	lsls	r3, r3, #23
 800a82c:	4605      	mov	r5, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	4616      	mov	r6, r2
 800a832:	d505      	bpl.n	800a840 <__swrite+0x1e>
 800a834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a838:	2302      	movs	r3, #2
 800a83a:	2200      	movs	r2, #0
 800a83c:	f000 f87c 	bl	800a938 <_lseek_r>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a846:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a84a:	81a3      	strh	r3, [r4, #12]
 800a84c:	4632      	mov	r2, r6
 800a84e:	463b      	mov	r3, r7
 800a850:	4628      	mov	r0, r5
 800a852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a856:	f000 b893 	b.w	800a980 <_write_r>

0800a85a <__sseek>:
 800a85a:	b510      	push	{r4, lr}
 800a85c:	460c      	mov	r4, r1
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 f869 	bl	800a938 <_lseek_r>
 800a866:	1c43      	adds	r3, r0, #1
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	bf15      	itete	ne
 800a86c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a86e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a872:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a876:	81a3      	strheq	r3, [r4, #12]
 800a878:	bf18      	it	ne
 800a87a:	81a3      	strhne	r3, [r4, #12]
 800a87c:	bd10      	pop	{r4, pc}

0800a87e <__sclose>:
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 b849 	b.w	800a918 <_close_r>

0800a886 <_vsniprintf_r>:
 800a886:	b530      	push	{r4, r5, lr}
 800a888:	4614      	mov	r4, r2
 800a88a:	2c00      	cmp	r4, #0
 800a88c:	b09b      	sub	sp, #108	@ 0x6c
 800a88e:	4605      	mov	r5, r0
 800a890:	461a      	mov	r2, r3
 800a892:	da05      	bge.n	800a8a0 <_vsniprintf_r+0x1a>
 800a894:	238b      	movs	r3, #139	@ 0x8b
 800a896:	6003      	str	r3, [r0, #0]
 800a898:	f04f 30ff 	mov.w	r0, #4294967295
 800a89c:	b01b      	add	sp, #108	@ 0x6c
 800a89e:	bd30      	pop	{r4, r5, pc}
 800a8a0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a8a4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a8a8:	f04f 0300 	mov.w	r3, #0
 800a8ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800a8ae:	bf14      	ite	ne
 800a8b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8b4:	4623      	moveq	r3, r4
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	9305      	str	r3, [sp, #20]
 800a8ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8be:	9100      	str	r1, [sp, #0]
 800a8c0:	9104      	str	r1, [sp, #16]
 800a8c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a8c6:	4669      	mov	r1, sp
 800a8c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a8ca:	f001 fbc7 	bl	800c05c <_svfiprintf_r>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	bfbc      	itt	lt
 800a8d2:	238b      	movlt	r3, #139	@ 0x8b
 800a8d4:	602b      	strlt	r3, [r5, #0]
 800a8d6:	2c00      	cmp	r4, #0
 800a8d8:	d0e0      	beq.n	800a89c <_vsniprintf_r+0x16>
 800a8da:	9b00      	ldr	r3, [sp, #0]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	701a      	strb	r2, [r3, #0]
 800a8e0:	e7dc      	b.n	800a89c <_vsniprintf_r+0x16>
	...

0800a8e4 <vsniprintf>:
 800a8e4:	b507      	push	{r0, r1, r2, lr}
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	460a      	mov	r2, r1
 800a8ec:	4601      	mov	r1, r0
 800a8ee:	4803      	ldr	r0, [pc, #12]	@ (800a8fc <vsniprintf+0x18>)
 800a8f0:	6800      	ldr	r0, [r0, #0]
 800a8f2:	f7ff ffc8 	bl	800a886 <_vsniprintf_r>
 800a8f6:	b003      	add	sp, #12
 800a8f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a8fc:	20000020 	.word	0x20000020

0800a900 <memset>:
 800a900:	4402      	add	r2, r0
 800a902:	4603      	mov	r3, r0
 800a904:	4293      	cmp	r3, r2
 800a906:	d100      	bne.n	800a90a <memset+0xa>
 800a908:	4770      	bx	lr
 800a90a:	f803 1b01 	strb.w	r1, [r3], #1
 800a90e:	e7f9      	b.n	800a904 <memset+0x4>

0800a910 <_localeconv_r>:
 800a910:	4800      	ldr	r0, [pc, #0]	@ (800a914 <_localeconv_r+0x4>)
 800a912:	4770      	bx	lr
 800a914:	20000160 	.word	0x20000160

0800a918 <_close_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	@ (800a934 <_close_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7fa fe0a 	bl	800553c <_close>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_close_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_close_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20001618 	.word	0x20001618

0800a938 <_lseek_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d07      	ldr	r5, [pc, #28]	@ (800a958 <_lseek_r+0x20>)
 800a93c:	4604      	mov	r4, r0
 800a93e:	4608      	mov	r0, r1
 800a940:	4611      	mov	r1, r2
 800a942:	2200      	movs	r2, #0
 800a944:	602a      	str	r2, [r5, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	f7fa fe1f 	bl	800558a <_lseek>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_lseek_r+0x1e>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_lseek_r+0x1e>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	20001618 	.word	0x20001618

0800a95c <_read_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4d07      	ldr	r5, [pc, #28]	@ (800a97c <_read_r+0x20>)
 800a960:	4604      	mov	r4, r0
 800a962:	4608      	mov	r0, r1
 800a964:	4611      	mov	r1, r2
 800a966:	2200      	movs	r2, #0
 800a968:	602a      	str	r2, [r5, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f7fa fdad 	bl	80054ca <_read>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_read_r+0x1e>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_read_r+0x1e>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20001618 	.word	0x20001618

0800a980 <_write_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4d07      	ldr	r5, [pc, #28]	@ (800a9a0 <_write_r+0x20>)
 800a984:	4604      	mov	r4, r0
 800a986:	4608      	mov	r0, r1
 800a988:	4611      	mov	r1, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7fa fdb8 	bl	8005504 <_write>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_write_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_write_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	20001618 	.word	0x20001618

0800a9a4 <__errno>:
 800a9a4:	4b01      	ldr	r3, [pc, #4]	@ (800a9ac <__errno+0x8>)
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	20000020 	.word	0x20000020

0800a9b0 <__libc_init_array>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	4d0d      	ldr	r5, [pc, #52]	@ (800a9e8 <__libc_init_array+0x38>)
 800a9b4:	4c0d      	ldr	r4, [pc, #52]	@ (800a9ec <__libc_init_array+0x3c>)
 800a9b6:	1b64      	subs	r4, r4, r5
 800a9b8:	10a4      	asrs	r4, r4, #2
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	42a6      	cmp	r6, r4
 800a9be:	d109      	bne.n	800a9d4 <__libc_init_array+0x24>
 800a9c0:	4d0b      	ldr	r5, [pc, #44]	@ (800a9f0 <__libc_init_array+0x40>)
 800a9c2:	4c0c      	ldr	r4, [pc, #48]	@ (800a9f4 <__libc_init_array+0x44>)
 800a9c4:	f002 f868 	bl	800ca98 <_init>
 800a9c8:	1b64      	subs	r4, r4, r5
 800a9ca:	10a4      	asrs	r4, r4, #2
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	42a6      	cmp	r6, r4
 800a9d0:	d105      	bne.n	800a9de <__libc_init_array+0x2e>
 800a9d2:	bd70      	pop	{r4, r5, r6, pc}
 800a9d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d8:	4798      	blx	r3
 800a9da:	3601      	adds	r6, #1
 800a9dc:	e7ee      	b.n	800a9bc <__libc_init_array+0xc>
 800a9de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9e2:	4798      	blx	r3
 800a9e4:	3601      	adds	r6, #1
 800a9e6:	e7f2      	b.n	800a9ce <__libc_init_array+0x1e>
 800a9e8:	0800f404 	.word	0x0800f404
 800a9ec:	0800f404 	.word	0x0800f404
 800a9f0:	0800f404 	.word	0x0800f404
 800a9f4:	0800f408 	.word	0x0800f408

0800a9f8 <__retarget_lock_init_recursive>:
 800a9f8:	4770      	bx	lr

0800a9fa <__retarget_lock_acquire_recursive>:
 800a9fa:	4770      	bx	lr

0800a9fc <__retarget_lock_release_recursive>:
 800a9fc:	4770      	bx	lr

0800a9fe <quorem>:
 800a9fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa02:	6903      	ldr	r3, [r0, #16]
 800aa04:	690c      	ldr	r4, [r1, #16]
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	4607      	mov	r7, r0
 800aa0a:	db7e      	blt.n	800ab0a <quorem+0x10c>
 800aa0c:	3c01      	subs	r4, #1
 800aa0e:	f101 0814 	add.w	r8, r1, #20
 800aa12:	00a3      	lsls	r3, r4, #2
 800aa14:	f100 0514 	add.w	r5, r0, #20
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa30:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa34:	d32e      	bcc.n	800aa94 <quorem+0x96>
 800aa36:	f04f 0a00 	mov.w	sl, #0
 800aa3a:	46c4      	mov	ip, r8
 800aa3c:	46ae      	mov	lr, r5
 800aa3e:	46d3      	mov	fp, sl
 800aa40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa44:	b298      	uxth	r0, r3
 800aa46:	fb06 a000 	mla	r0, r6, r0, sl
 800aa4a:	0c02      	lsrs	r2, r0, #16
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	fb06 2303 	mla	r3, r6, r3, r2
 800aa52:	f8de 2000 	ldr.w	r2, [lr]
 800aa56:	b280      	uxth	r0, r0
 800aa58:	b292      	uxth	r2, r2
 800aa5a:	1a12      	subs	r2, r2, r0
 800aa5c:	445a      	add	r2, fp
 800aa5e:	f8de 0000 	ldr.w	r0, [lr]
 800aa62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aa6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aa70:	b292      	uxth	r2, r2
 800aa72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aa76:	45e1      	cmp	r9, ip
 800aa78:	f84e 2b04 	str.w	r2, [lr], #4
 800aa7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aa80:	d2de      	bcs.n	800aa40 <quorem+0x42>
 800aa82:	9b00      	ldr	r3, [sp, #0]
 800aa84:	58eb      	ldr	r3, [r5, r3]
 800aa86:	b92b      	cbnz	r3, 800aa94 <quorem+0x96>
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	3b04      	subs	r3, #4
 800aa8c:	429d      	cmp	r5, r3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	d32f      	bcc.n	800aaf2 <quorem+0xf4>
 800aa92:	613c      	str	r4, [r7, #16]
 800aa94:	4638      	mov	r0, r7
 800aa96:	f001 f97d 	bl	800bd94 <__mcmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	db25      	blt.n	800aaea <quorem+0xec>
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	2000      	movs	r0, #0
 800aaa2:	f858 2b04 	ldr.w	r2, [r8], #4
 800aaa6:	f8d1 c000 	ldr.w	ip, [r1]
 800aaaa:	fa1f fe82 	uxth.w	lr, r2
 800aaae:	fa1f f38c 	uxth.w	r3, ip
 800aab2:	eba3 030e 	sub.w	r3, r3, lr
 800aab6:	4403      	add	r3, r0
 800aab8:	0c12      	lsrs	r2, r2, #16
 800aaba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aabe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aac8:	45c1      	cmp	r9, r8
 800aaca:	f841 3b04 	str.w	r3, [r1], #4
 800aace:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aad2:	d2e6      	bcs.n	800aaa2 <quorem+0xa4>
 800aad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aadc:	b922      	cbnz	r2, 800aae8 <quorem+0xea>
 800aade:	3b04      	subs	r3, #4
 800aae0:	429d      	cmp	r5, r3
 800aae2:	461a      	mov	r2, r3
 800aae4:	d30b      	bcc.n	800aafe <quorem+0x100>
 800aae6:	613c      	str	r4, [r7, #16]
 800aae8:	3601      	adds	r6, #1
 800aaea:	4630      	mov	r0, r6
 800aaec:	b003      	add	sp, #12
 800aaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf2:	6812      	ldr	r2, [r2, #0]
 800aaf4:	3b04      	subs	r3, #4
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	d1cb      	bne.n	800aa92 <quorem+0x94>
 800aafa:	3c01      	subs	r4, #1
 800aafc:	e7c6      	b.n	800aa8c <quorem+0x8e>
 800aafe:	6812      	ldr	r2, [r2, #0]
 800ab00:	3b04      	subs	r3, #4
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	d1ef      	bne.n	800aae6 <quorem+0xe8>
 800ab06:	3c01      	subs	r4, #1
 800ab08:	e7ea      	b.n	800aae0 <quorem+0xe2>
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e7ee      	b.n	800aaec <quorem+0xee>
	...

0800ab10 <_dtoa_r>:
 800ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab14:	69c7      	ldr	r7, [r0, #28]
 800ab16:	b097      	sub	sp, #92	@ 0x5c
 800ab18:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ab1c:	ec55 4b10 	vmov	r4, r5, d0
 800ab20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ab22:	9107      	str	r1, [sp, #28]
 800ab24:	4681      	mov	r9, r0
 800ab26:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab28:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab2a:	b97f      	cbnz	r7, 800ab4c <_dtoa_r+0x3c>
 800ab2c:	2010      	movs	r0, #16
 800ab2e:	f000 fe09 	bl	800b744 <malloc>
 800ab32:	4602      	mov	r2, r0
 800ab34:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab38:	b920      	cbnz	r0, 800ab44 <_dtoa_r+0x34>
 800ab3a:	4ba9      	ldr	r3, [pc, #676]	@ (800ade0 <_dtoa_r+0x2d0>)
 800ab3c:	21ef      	movs	r1, #239	@ 0xef
 800ab3e:	48a9      	ldr	r0, [pc, #676]	@ (800ade4 <_dtoa_r+0x2d4>)
 800ab40:	f001 fc6c 	bl	800c41c <__assert_func>
 800ab44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ab48:	6007      	str	r7, [r0, #0]
 800ab4a:	60c7      	str	r7, [r0, #12]
 800ab4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab50:	6819      	ldr	r1, [r3, #0]
 800ab52:	b159      	cbz	r1, 800ab6c <_dtoa_r+0x5c>
 800ab54:	685a      	ldr	r2, [r3, #4]
 800ab56:	604a      	str	r2, [r1, #4]
 800ab58:	2301      	movs	r3, #1
 800ab5a:	4093      	lsls	r3, r2
 800ab5c:	608b      	str	r3, [r1, #8]
 800ab5e:	4648      	mov	r0, r9
 800ab60:	f000 fee6 	bl	800b930 <_Bfree>
 800ab64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	1e2b      	subs	r3, r5, #0
 800ab6e:	bfb9      	ittee	lt
 800ab70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ab74:	9305      	strlt	r3, [sp, #20]
 800ab76:	2300      	movge	r3, #0
 800ab78:	6033      	strge	r3, [r6, #0]
 800ab7a:	9f05      	ldr	r7, [sp, #20]
 800ab7c:	4b9a      	ldr	r3, [pc, #616]	@ (800ade8 <_dtoa_r+0x2d8>)
 800ab7e:	bfbc      	itt	lt
 800ab80:	2201      	movlt	r2, #1
 800ab82:	6032      	strlt	r2, [r6, #0]
 800ab84:	43bb      	bics	r3, r7
 800ab86:	d112      	bne.n	800abae <_dtoa_r+0x9e>
 800ab88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab94:	4323      	orrs	r3, r4
 800ab96:	f000 855a 	beq.w	800b64e <_dtoa_r+0xb3e>
 800ab9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800adfc <_dtoa_r+0x2ec>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 855c 	beq.w	800b65e <_dtoa_r+0xb4e>
 800aba6:	f10a 0303 	add.w	r3, sl, #3
 800abaa:	f000 bd56 	b.w	800b65a <_dtoa_r+0xb4a>
 800abae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800abb2:	2200      	movs	r2, #0
 800abb4:	ec51 0b17 	vmov	r0, r1, d7
 800abb8:	2300      	movs	r3, #0
 800abba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800abbe:	f7f5 ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800abc2:	4680      	mov	r8, r0
 800abc4:	b158      	cbz	r0, 800abde <_dtoa_r+0xce>
 800abc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abc8:	2301      	movs	r3, #1
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abce:	b113      	cbz	r3, 800abd6 <_dtoa_r+0xc6>
 800abd0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800abd2:	4b86      	ldr	r3, [pc, #536]	@ (800adec <_dtoa_r+0x2dc>)
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ae00 <_dtoa_r+0x2f0>
 800abda:	f000 bd40 	b.w	800b65e <_dtoa_r+0xb4e>
 800abde:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800abe2:	aa14      	add	r2, sp, #80	@ 0x50
 800abe4:	a915      	add	r1, sp, #84	@ 0x54
 800abe6:	4648      	mov	r0, r9
 800abe8:	f001 f984 	bl	800bef4 <__d2b>
 800abec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800abf0:	9002      	str	r0, [sp, #8]
 800abf2:	2e00      	cmp	r6, #0
 800abf4:	d078      	beq.n	800ace8 <_dtoa_r+0x1d8>
 800abf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800abf8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800abfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ac08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ac0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ac10:	4619      	mov	r1, r3
 800ac12:	2200      	movs	r2, #0
 800ac14:	4b76      	ldr	r3, [pc, #472]	@ (800adf0 <_dtoa_r+0x2e0>)
 800ac16:	f7f5 fb3f 	bl	8000298 <__aeabi_dsub>
 800ac1a:	a36b      	add	r3, pc, #428	@ (adr r3, 800adc8 <_dtoa_r+0x2b8>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 fcf2 	bl	8000608 <__aeabi_dmul>
 800ac24:	a36a      	add	r3, pc, #424	@ (adr r3, 800add0 <_dtoa_r+0x2c0>)
 800ac26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2a:	f7f5 fb37 	bl	800029c <__adddf3>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	4630      	mov	r0, r6
 800ac32:	460d      	mov	r5, r1
 800ac34:	f7f5 fc7e 	bl	8000534 <__aeabi_i2d>
 800ac38:	a367      	add	r3, pc, #412	@ (adr r3, 800add8 <_dtoa_r+0x2c8>)
 800ac3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3e:	f7f5 fce3 	bl	8000608 <__aeabi_dmul>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	4620      	mov	r0, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	f7f5 fb27 	bl	800029c <__adddf3>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	460d      	mov	r5, r1
 800ac52:	f7f5 ff89 	bl	8000b68 <__aeabi_d2iz>
 800ac56:	2200      	movs	r2, #0
 800ac58:	4607      	mov	r7, r0
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	4629      	mov	r1, r5
 800ac60:	f7f5 ff44 	bl	8000aec <__aeabi_dcmplt>
 800ac64:	b140      	cbz	r0, 800ac78 <_dtoa_r+0x168>
 800ac66:	4638      	mov	r0, r7
 800ac68:	f7f5 fc64 	bl	8000534 <__aeabi_i2d>
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	462b      	mov	r3, r5
 800ac70:	f7f5 ff32 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac74:	b900      	cbnz	r0, 800ac78 <_dtoa_r+0x168>
 800ac76:	3f01      	subs	r7, #1
 800ac78:	2f16      	cmp	r7, #22
 800ac7a:	d852      	bhi.n	800ad22 <_dtoa_r+0x212>
 800ac7c:	4b5d      	ldr	r3, [pc, #372]	@ (800adf4 <_dtoa_r+0x2e4>)
 800ac7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ac8a:	f7f5 ff2f 	bl	8000aec <__aeabi_dcmplt>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d049      	beq.n	800ad26 <_dtoa_r+0x216>
 800ac92:	3f01      	subs	r7, #1
 800ac94:	2300      	movs	r3, #0
 800ac96:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac9a:	1b9b      	subs	r3, r3, r6
 800ac9c:	1e5a      	subs	r2, r3, #1
 800ac9e:	bf45      	ittet	mi
 800aca0:	f1c3 0301 	rsbmi	r3, r3, #1
 800aca4:	9300      	strmi	r3, [sp, #0]
 800aca6:	2300      	movpl	r3, #0
 800aca8:	2300      	movmi	r3, #0
 800acaa:	9206      	str	r2, [sp, #24]
 800acac:	bf54      	ite	pl
 800acae:	9300      	strpl	r3, [sp, #0]
 800acb0:	9306      	strmi	r3, [sp, #24]
 800acb2:	2f00      	cmp	r7, #0
 800acb4:	db39      	blt.n	800ad2a <_dtoa_r+0x21a>
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	970d      	str	r7, [sp, #52]	@ 0x34
 800acba:	443b      	add	r3, r7
 800acbc:	9306      	str	r3, [sp, #24]
 800acbe:	2300      	movs	r3, #0
 800acc0:	9308      	str	r3, [sp, #32]
 800acc2:	9b07      	ldr	r3, [sp, #28]
 800acc4:	2b09      	cmp	r3, #9
 800acc6:	d863      	bhi.n	800ad90 <_dtoa_r+0x280>
 800acc8:	2b05      	cmp	r3, #5
 800acca:	bfc4      	itt	gt
 800accc:	3b04      	subgt	r3, #4
 800acce:	9307      	strgt	r3, [sp, #28]
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	f1a3 0302 	sub.w	r3, r3, #2
 800acd6:	bfcc      	ite	gt
 800acd8:	2400      	movgt	r4, #0
 800acda:	2401      	movle	r4, #1
 800acdc:	2b03      	cmp	r3, #3
 800acde:	d863      	bhi.n	800ada8 <_dtoa_r+0x298>
 800ace0:	e8df f003 	tbb	[pc, r3]
 800ace4:	2b375452 	.word	0x2b375452
 800ace8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800acec:	441e      	add	r6, r3
 800acee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	bfc1      	itttt	gt
 800acf6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800acfa:	409f      	lslgt	r7, r3
 800acfc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ad00:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ad04:	bfd6      	itet	le
 800ad06:	f1c3 0320 	rsble	r3, r3, #32
 800ad0a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ad0e:	fa04 f003 	lslle.w	r0, r4, r3
 800ad12:	f7f5 fbff 	bl	8000514 <__aeabi_ui2d>
 800ad16:	2201      	movs	r2, #1
 800ad18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ad1c:	3e01      	subs	r6, #1
 800ad1e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ad20:	e776      	b.n	800ac10 <_dtoa_r+0x100>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e7b7      	b.n	800ac96 <_dtoa_r+0x186>
 800ad26:	9010      	str	r0, [sp, #64]	@ 0x40
 800ad28:	e7b6      	b.n	800ac98 <_dtoa_r+0x188>
 800ad2a:	9b00      	ldr	r3, [sp, #0]
 800ad2c:	1bdb      	subs	r3, r3, r7
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	427b      	negs	r3, r7
 800ad32:	9308      	str	r3, [sp, #32]
 800ad34:	2300      	movs	r3, #0
 800ad36:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad38:	e7c3      	b.n	800acc2 <_dtoa_r+0x1b2>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad40:	eb07 0b03 	add.w	fp, r7, r3
 800ad44:	f10b 0301 	add.w	r3, fp, #1
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	9303      	str	r3, [sp, #12]
 800ad4c:	bfb8      	it	lt
 800ad4e:	2301      	movlt	r3, #1
 800ad50:	e006      	b.n	800ad60 <_dtoa_r+0x250>
 800ad52:	2301      	movs	r3, #1
 800ad54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dd28      	ble.n	800adae <_dtoa_r+0x29e>
 800ad5c:	469b      	mov	fp, r3
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ad64:	2100      	movs	r1, #0
 800ad66:	2204      	movs	r2, #4
 800ad68:	f102 0514 	add.w	r5, r2, #20
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	d926      	bls.n	800adbe <_dtoa_r+0x2ae>
 800ad70:	6041      	str	r1, [r0, #4]
 800ad72:	4648      	mov	r0, r9
 800ad74:	f000 fd9c 	bl	800b8b0 <_Balloc>
 800ad78:	4682      	mov	sl, r0
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	d142      	bne.n	800ae04 <_dtoa_r+0x2f4>
 800ad7e:	4b1e      	ldr	r3, [pc, #120]	@ (800adf8 <_dtoa_r+0x2e8>)
 800ad80:	4602      	mov	r2, r0
 800ad82:	f240 11af 	movw	r1, #431	@ 0x1af
 800ad86:	e6da      	b.n	800ab3e <_dtoa_r+0x2e>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e7e3      	b.n	800ad54 <_dtoa_r+0x244>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	e7d5      	b.n	800ad3c <_dtoa_r+0x22c>
 800ad90:	2401      	movs	r4, #1
 800ad92:	2300      	movs	r3, #0
 800ad94:	9307      	str	r3, [sp, #28]
 800ad96:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad98:	f04f 3bff 	mov.w	fp, #4294967295
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ada2:	2312      	movs	r3, #18
 800ada4:	920c      	str	r2, [sp, #48]	@ 0x30
 800ada6:	e7db      	b.n	800ad60 <_dtoa_r+0x250>
 800ada8:	2301      	movs	r3, #1
 800adaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800adac:	e7f4      	b.n	800ad98 <_dtoa_r+0x288>
 800adae:	f04f 0b01 	mov.w	fp, #1
 800adb2:	f8cd b00c 	str.w	fp, [sp, #12]
 800adb6:	465b      	mov	r3, fp
 800adb8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800adbc:	e7d0      	b.n	800ad60 <_dtoa_r+0x250>
 800adbe:	3101      	adds	r1, #1
 800adc0:	0052      	lsls	r2, r2, #1
 800adc2:	e7d1      	b.n	800ad68 <_dtoa_r+0x258>
 800adc4:	f3af 8000 	nop.w
 800adc8:	636f4361 	.word	0x636f4361
 800adcc:	3fd287a7 	.word	0x3fd287a7
 800add0:	8b60c8b3 	.word	0x8b60c8b3
 800add4:	3fc68a28 	.word	0x3fc68a28
 800add8:	509f79fb 	.word	0x509f79fb
 800addc:	3fd34413 	.word	0x3fd34413
 800ade0:	0800f0c9 	.word	0x0800f0c9
 800ade4:	0800f0e0 	.word	0x0800f0e0
 800ade8:	7ff00000 	.word	0x7ff00000
 800adec:	0800f099 	.word	0x0800f099
 800adf0:	3ff80000 	.word	0x3ff80000
 800adf4:	0800f230 	.word	0x0800f230
 800adf8:	0800f138 	.word	0x0800f138
 800adfc:	0800f0c5 	.word	0x0800f0c5
 800ae00:	0800f098 	.word	0x0800f098
 800ae04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ae08:	6018      	str	r0, [r3, #0]
 800ae0a:	9b03      	ldr	r3, [sp, #12]
 800ae0c:	2b0e      	cmp	r3, #14
 800ae0e:	f200 80a1 	bhi.w	800af54 <_dtoa_r+0x444>
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	f000 809e 	beq.w	800af54 <_dtoa_r+0x444>
 800ae18:	2f00      	cmp	r7, #0
 800ae1a:	dd33      	ble.n	800ae84 <_dtoa_r+0x374>
 800ae1c:	4b9c      	ldr	r3, [pc, #624]	@ (800b090 <_dtoa_r+0x580>)
 800ae1e:	f007 020f 	and.w	r2, r7, #15
 800ae22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae26:	ed93 7b00 	vldr	d7, [r3]
 800ae2a:	05f8      	lsls	r0, r7, #23
 800ae2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ae30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ae34:	d516      	bpl.n	800ae64 <_dtoa_r+0x354>
 800ae36:	4b97      	ldr	r3, [pc, #604]	@ (800b094 <_dtoa_r+0x584>)
 800ae38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ae40:	f7f5 fd0c 	bl	800085c <__aeabi_ddiv>
 800ae44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae48:	f004 040f 	and.w	r4, r4, #15
 800ae4c:	2603      	movs	r6, #3
 800ae4e:	4d91      	ldr	r5, [pc, #580]	@ (800b094 <_dtoa_r+0x584>)
 800ae50:	b954      	cbnz	r4, 800ae68 <_dtoa_r+0x358>
 800ae52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae5a:	f7f5 fcff 	bl	800085c <__aeabi_ddiv>
 800ae5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae62:	e028      	b.n	800aeb6 <_dtoa_r+0x3a6>
 800ae64:	2602      	movs	r6, #2
 800ae66:	e7f2      	b.n	800ae4e <_dtoa_r+0x33e>
 800ae68:	07e1      	lsls	r1, r4, #31
 800ae6a:	d508      	bpl.n	800ae7e <_dtoa_r+0x36e>
 800ae6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae74:	f7f5 fbc8 	bl	8000608 <__aeabi_dmul>
 800ae78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	1064      	asrs	r4, r4, #1
 800ae80:	3508      	adds	r5, #8
 800ae82:	e7e5      	b.n	800ae50 <_dtoa_r+0x340>
 800ae84:	f000 80af 	beq.w	800afe6 <_dtoa_r+0x4d6>
 800ae88:	427c      	negs	r4, r7
 800ae8a:	4b81      	ldr	r3, [pc, #516]	@ (800b090 <_dtoa_r+0x580>)
 800ae8c:	4d81      	ldr	r5, [pc, #516]	@ (800b094 <_dtoa_r+0x584>)
 800ae8e:	f004 020f 	and.w	r2, r4, #15
 800ae92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ae96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae9e:	f7f5 fbb3 	bl	8000608 <__aeabi_dmul>
 800aea2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aea6:	1124      	asrs	r4, r4, #4
 800aea8:	2300      	movs	r3, #0
 800aeaa:	2602      	movs	r6, #2
 800aeac:	2c00      	cmp	r4, #0
 800aeae:	f040 808f 	bne.w	800afd0 <_dtoa_r+0x4c0>
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1d3      	bne.n	800ae5e <_dtoa_r+0x34e>
 800aeb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aeb8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 8094 	beq.w	800afea <_dtoa_r+0x4da>
 800aec2:	4b75      	ldr	r3, [pc, #468]	@ (800b098 <_dtoa_r+0x588>)
 800aec4:	2200      	movs	r2, #0
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 fe0f 	bl	8000aec <__aeabi_dcmplt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	f000 808b 	beq.w	800afea <_dtoa_r+0x4da>
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 8087 	beq.w	800afea <_dtoa_r+0x4da>
 800aedc:	f1bb 0f00 	cmp.w	fp, #0
 800aee0:	dd34      	ble.n	800af4c <_dtoa_r+0x43c>
 800aee2:	4620      	mov	r0, r4
 800aee4:	4b6d      	ldr	r3, [pc, #436]	@ (800b09c <_dtoa_r+0x58c>)
 800aee6:	2200      	movs	r2, #0
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 fb8d 	bl	8000608 <__aeabi_dmul>
 800aeee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aef2:	f107 38ff 	add.w	r8, r7, #4294967295
 800aef6:	3601      	adds	r6, #1
 800aef8:	465c      	mov	r4, fp
 800aefa:	4630      	mov	r0, r6
 800aefc:	f7f5 fb1a 	bl	8000534 <__aeabi_i2d>
 800af00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af04:	f7f5 fb80 	bl	8000608 <__aeabi_dmul>
 800af08:	4b65      	ldr	r3, [pc, #404]	@ (800b0a0 <_dtoa_r+0x590>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	f7f5 f9c6 	bl	800029c <__adddf3>
 800af10:	4605      	mov	r5, r0
 800af12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800af16:	2c00      	cmp	r4, #0
 800af18:	d16a      	bne.n	800aff0 <_dtoa_r+0x4e0>
 800af1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af1e:	4b61      	ldr	r3, [pc, #388]	@ (800b0a4 <_dtoa_r+0x594>)
 800af20:	2200      	movs	r2, #0
 800af22:	f7f5 f9b9 	bl	8000298 <__aeabi_dsub>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af2e:	462a      	mov	r2, r5
 800af30:	4633      	mov	r3, r6
 800af32:	f7f5 fdf9 	bl	8000b28 <__aeabi_dcmpgt>
 800af36:	2800      	cmp	r0, #0
 800af38:	f040 8298 	bne.w	800b46c <_dtoa_r+0x95c>
 800af3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af40:	462a      	mov	r2, r5
 800af42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800af46:	f7f5 fdd1 	bl	8000aec <__aeabi_dcmplt>
 800af4a:	bb38      	cbnz	r0, 800af9c <_dtoa_r+0x48c>
 800af4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800af50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800af54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af56:	2b00      	cmp	r3, #0
 800af58:	f2c0 8157 	blt.w	800b20a <_dtoa_r+0x6fa>
 800af5c:	2f0e      	cmp	r7, #14
 800af5e:	f300 8154 	bgt.w	800b20a <_dtoa_r+0x6fa>
 800af62:	4b4b      	ldr	r3, [pc, #300]	@ (800b090 <_dtoa_r+0x580>)
 800af64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800af68:	ed93 7b00 	vldr	d7, [r3]
 800af6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af6e:	2b00      	cmp	r3, #0
 800af70:	ed8d 7b00 	vstr	d7, [sp]
 800af74:	f280 80e5 	bge.w	800b142 <_dtoa_r+0x632>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f300 80e1 	bgt.w	800b142 <_dtoa_r+0x632>
 800af80:	d10c      	bne.n	800af9c <_dtoa_r+0x48c>
 800af82:	4b48      	ldr	r3, [pc, #288]	@ (800b0a4 <_dtoa_r+0x594>)
 800af84:	2200      	movs	r2, #0
 800af86:	ec51 0b17 	vmov	r0, r1, d7
 800af8a:	f7f5 fb3d 	bl	8000608 <__aeabi_dmul>
 800af8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af92:	f7f5 fdbf 	bl	8000b14 <__aeabi_dcmpge>
 800af96:	2800      	cmp	r0, #0
 800af98:	f000 8266 	beq.w	800b468 <_dtoa_r+0x958>
 800af9c:	2400      	movs	r4, #0
 800af9e:	4625      	mov	r5, r4
 800afa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afa2:	4656      	mov	r6, sl
 800afa4:	ea6f 0803 	mvn.w	r8, r3
 800afa8:	2700      	movs	r7, #0
 800afaa:	4621      	mov	r1, r4
 800afac:	4648      	mov	r0, r9
 800afae:	f000 fcbf 	bl	800b930 <_Bfree>
 800afb2:	2d00      	cmp	r5, #0
 800afb4:	f000 80bd 	beq.w	800b132 <_dtoa_r+0x622>
 800afb8:	b12f      	cbz	r7, 800afc6 <_dtoa_r+0x4b6>
 800afba:	42af      	cmp	r7, r5
 800afbc:	d003      	beq.n	800afc6 <_dtoa_r+0x4b6>
 800afbe:	4639      	mov	r1, r7
 800afc0:	4648      	mov	r0, r9
 800afc2:	f000 fcb5 	bl	800b930 <_Bfree>
 800afc6:	4629      	mov	r1, r5
 800afc8:	4648      	mov	r0, r9
 800afca:	f000 fcb1 	bl	800b930 <_Bfree>
 800afce:	e0b0      	b.n	800b132 <_dtoa_r+0x622>
 800afd0:	07e2      	lsls	r2, r4, #31
 800afd2:	d505      	bpl.n	800afe0 <_dtoa_r+0x4d0>
 800afd4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afd8:	f7f5 fb16 	bl	8000608 <__aeabi_dmul>
 800afdc:	3601      	adds	r6, #1
 800afde:	2301      	movs	r3, #1
 800afe0:	1064      	asrs	r4, r4, #1
 800afe2:	3508      	adds	r5, #8
 800afe4:	e762      	b.n	800aeac <_dtoa_r+0x39c>
 800afe6:	2602      	movs	r6, #2
 800afe8:	e765      	b.n	800aeb6 <_dtoa_r+0x3a6>
 800afea:	9c03      	ldr	r4, [sp, #12]
 800afec:	46b8      	mov	r8, r7
 800afee:	e784      	b.n	800aefa <_dtoa_r+0x3ea>
 800aff0:	4b27      	ldr	r3, [pc, #156]	@ (800b090 <_dtoa_r+0x580>)
 800aff2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aff4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aff8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800affc:	4454      	add	r4, sl
 800affe:	2900      	cmp	r1, #0
 800b000:	d054      	beq.n	800b0ac <_dtoa_r+0x59c>
 800b002:	4929      	ldr	r1, [pc, #164]	@ (800b0a8 <_dtoa_r+0x598>)
 800b004:	2000      	movs	r0, #0
 800b006:	f7f5 fc29 	bl	800085c <__aeabi_ddiv>
 800b00a:	4633      	mov	r3, r6
 800b00c:	462a      	mov	r2, r5
 800b00e:	f7f5 f943 	bl	8000298 <__aeabi_dsub>
 800b012:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b016:	4656      	mov	r6, sl
 800b018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01c:	f7f5 fda4 	bl	8000b68 <__aeabi_d2iz>
 800b020:	4605      	mov	r5, r0
 800b022:	f7f5 fa87 	bl	8000534 <__aeabi_i2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b02e:	f7f5 f933 	bl	8000298 <__aeabi_dsub>
 800b032:	3530      	adds	r5, #48	@ 0x30
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b03c:	f806 5b01 	strb.w	r5, [r6], #1
 800b040:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b044:	f7f5 fd52 	bl	8000aec <__aeabi_dcmplt>
 800b048:	2800      	cmp	r0, #0
 800b04a:	d172      	bne.n	800b132 <_dtoa_r+0x622>
 800b04c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b050:	4911      	ldr	r1, [pc, #68]	@ (800b098 <_dtoa_r+0x588>)
 800b052:	2000      	movs	r0, #0
 800b054:	f7f5 f920 	bl	8000298 <__aeabi_dsub>
 800b058:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b05c:	f7f5 fd46 	bl	8000aec <__aeabi_dcmplt>
 800b060:	2800      	cmp	r0, #0
 800b062:	f040 80b4 	bne.w	800b1ce <_dtoa_r+0x6be>
 800b066:	42a6      	cmp	r6, r4
 800b068:	f43f af70 	beq.w	800af4c <_dtoa_r+0x43c>
 800b06c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b070:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <_dtoa_r+0x58c>)
 800b072:	2200      	movs	r2, #0
 800b074:	f7f5 fac8 	bl	8000608 <__aeabi_dmul>
 800b078:	4b08      	ldr	r3, [pc, #32]	@ (800b09c <_dtoa_r+0x58c>)
 800b07a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b07e:	2200      	movs	r2, #0
 800b080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b084:	f7f5 fac0 	bl	8000608 <__aeabi_dmul>
 800b088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b08c:	e7c4      	b.n	800b018 <_dtoa_r+0x508>
 800b08e:	bf00      	nop
 800b090:	0800f230 	.word	0x0800f230
 800b094:	0800f208 	.word	0x0800f208
 800b098:	3ff00000 	.word	0x3ff00000
 800b09c:	40240000 	.word	0x40240000
 800b0a0:	401c0000 	.word	0x401c0000
 800b0a4:	40140000 	.word	0x40140000
 800b0a8:	3fe00000 	.word	0x3fe00000
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	f7f5 faaa 	bl	8000608 <__aeabi_dmul>
 800b0b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b0b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b0ba:	4656      	mov	r6, sl
 800b0bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c0:	f7f5 fd52 	bl	8000b68 <__aeabi_d2iz>
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	f7f5 fa35 	bl	8000534 <__aeabi_i2d>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d2:	f7f5 f8e1 	bl	8000298 <__aeabi_dsub>
 800b0d6:	3530      	adds	r5, #48	@ 0x30
 800b0d8:	f806 5b01 	strb.w	r5, [r6], #1
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	42a6      	cmp	r6, r4
 800b0e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0e6:	f04f 0200 	mov.w	r2, #0
 800b0ea:	d124      	bne.n	800b136 <_dtoa_r+0x626>
 800b0ec:	4baf      	ldr	r3, [pc, #700]	@ (800b3ac <_dtoa_r+0x89c>)
 800b0ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b0f2:	f7f5 f8d3 	bl	800029c <__adddf3>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0fe:	f7f5 fd13 	bl	8000b28 <__aeabi_dcmpgt>
 800b102:	2800      	cmp	r0, #0
 800b104:	d163      	bne.n	800b1ce <_dtoa_r+0x6be>
 800b106:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b10a:	49a8      	ldr	r1, [pc, #672]	@ (800b3ac <_dtoa_r+0x89c>)
 800b10c:	2000      	movs	r0, #0
 800b10e:	f7f5 f8c3 	bl	8000298 <__aeabi_dsub>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b11a:	f7f5 fce7 	bl	8000aec <__aeabi_dcmplt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	f43f af14 	beq.w	800af4c <_dtoa_r+0x43c>
 800b124:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b126:	1e73      	subs	r3, r6, #1
 800b128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b12a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b12e:	2b30      	cmp	r3, #48	@ 0x30
 800b130:	d0f8      	beq.n	800b124 <_dtoa_r+0x614>
 800b132:	4647      	mov	r7, r8
 800b134:	e03b      	b.n	800b1ae <_dtoa_r+0x69e>
 800b136:	4b9e      	ldr	r3, [pc, #632]	@ (800b3b0 <_dtoa_r+0x8a0>)
 800b138:	f7f5 fa66 	bl	8000608 <__aeabi_dmul>
 800b13c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b140:	e7bc      	b.n	800b0bc <_dtoa_r+0x5ac>
 800b142:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b146:	4656      	mov	r6, sl
 800b148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b14c:	4620      	mov	r0, r4
 800b14e:	4629      	mov	r1, r5
 800b150:	f7f5 fb84 	bl	800085c <__aeabi_ddiv>
 800b154:	f7f5 fd08 	bl	8000b68 <__aeabi_d2iz>
 800b158:	4680      	mov	r8, r0
 800b15a:	f7f5 f9eb 	bl	8000534 <__aeabi_i2d>
 800b15e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b162:	f7f5 fa51 	bl	8000608 <__aeabi_dmul>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4620      	mov	r0, r4
 800b16c:	4629      	mov	r1, r5
 800b16e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b172:	f7f5 f891 	bl	8000298 <__aeabi_dsub>
 800b176:	f806 4b01 	strb.w	r4, [r6], #1
 800b17a:	9d03      	ldr	r5, [sp, #12]
 800b17c:	eba6 040a 	sub.w	r4, r6, sl
 800b180:	42a5      	cmp	r5, r4
 800b182:	4602      	mov	r2, r0
 800b184:	460b      	mov	r3, r1
 800b186:	d133      	bne.n	800b1f0 <_dtoa_r+0x6e0>
 800b188:	f7f5 f888 	bl	800029c <__adddf3>
 800b18c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b190:	4604      	mov	r4, r0
 800b192:	460d      	mov	r5, r1
 800b194:	f7f5 fcc8 	bl	8000b28 <__aeabi_dcmpgt>
 800b198:	b9c0      	cbnz	r0, 800b1cc <_dtoa_r+0x6bc>
 800b19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	f7f5 fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1a6:	b110      	cbz	r0, 800b1ae <_dtoa_r+0x69e>
 800b1a8:	f018 0f01 	tst.w	r8, #1
 800b1ac:	d10e      	bne.n	800b1cc <_dtoa_r+0x6bc>
 800b1ae:	9902      	ldr	r1, [sp, #8]
 800b1b0:	4648      	mov	r0, r9
 800b1b2:	f000 fbbd 	bl	800b930 <_Bfree>
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	7033      	strb	r3, [r6, #0]
 800b1ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1bc:	3701      	adds	r7, #1
 800b1be:	601f      	str	r7, [r3, #0]
 800b1c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	f000 824b 	beq.w	800b65e <_dtoa_r+0xb4e>
 800b1c8:	601e      	str	r6, [r3, #0]
 800b1ca:	e248      	b.n	800b65e <_dtoa_r+0xb4e>
 800b1cc:	46b8      	mov	r8, r7
 800b1ce:	4633      	mov	r3, r6
 800b1d0:	461e      	mov	r6, r3
 800b1d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1d6:	2a39      	cmp	r2, #57	@ 0x39
 800b1d8:	d106      	bne.n	800b1e8 <_dtoa_r+0x6d8>
 800b1da:	459a      	cmp	sl, r3
 800b1dc:	d1f8      	bne.n	800b1d0 <_dtoa_r+0x6c0>
 800b1de:	2230      	movs	r2, #48	@ 0x30
 800b1e0:	f108 0801 	add.w	r8, r8, #1
 800b1e4:	f88a 2000 	strb.w	r2, [sl]
 800b1e8:	781a      	ldrb	r2, [r3, #0]
 800b1ea:	3201      	adds	r2, #1
 800b1ec:	701a      	strb	r2, [r3, #0]
 800b1ee:	e7a0      	b.n	800b132 <_dtoa_r+0x622>
 800b1f0:	4b6f      	ldr	r3, [pc, #444]	@ (800b3b0 <_dtoa_r+0x8a0>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	f7f5 fa08 	bl	8000608 <__aeabi_dmul>
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	460d      	mov	r5, r1
 800b200:	f7f5 fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b204:	2800      	cmp	r0, #0
 800b206:	d09f      	beq.n	800b148 <_dtoa_r+0x638>
 800b208:	e7d1      	b.n	800b1ae <_dtoa_r+0x69e>
 800b20a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b20c:	2a00      	cmp	r2, #0
 800b20e:	f000 80ea 	beq.w	800b3e6 <_dtoa_r+0x8d6>
 800b212:	9a07      	ldr	r2, [sp, #28]
 800b214:	2a01      	cmp	r2, #1
 800b216:	f300 80cd 	bgt.w	800b3b4 <_dtoa_r+0x8a4>
 800b21a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b21c:	2a00      	cmp	r2, #0
 800b21e:	f000 80c1 	beq.w	800b3a4 <_dtoa_r+0x894>
 800b222:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b226:	9c08      	ldr	r4, [sp, #32]
 800b228:	9e00      	ldr	r6, [sp, #0]
 800b22a:	9a00      	ldr	r2, [sp, #0]
 800b22c:	441a      	add	r2, r3
 800b22e:	9200      	str	r2, [sp, #0]
 800b230:	9a06      	ldr	r2, [sp, #24]
 800b232:	2101      	movs	r1, #1
 800b234:	441a      	add	r2, r3
 800b236:	4648      	mov	r0, r9
 800b238:	9206      	str	r2, [sp, #24]
 800b23a:	f000 fc2d 	bl	800ba98 <__i2b>
 800b23e:	4605      	mov	r5, r0
 800b240:	b166      	cbz	r6, 800b25c <_dtoa_r+0x74c>
 800b242:	9b06      	ldr	r3, [sp, #24]
 800b244:	2b00      	cmp	r3, #0
 800b246:	dd09      	ble.n	800b25c <_dtoa_r+0x74c>
 800b248:	42b3      	cmp	r3, r6
 800b24a:	9a00      	ldr	r2, [sp, #0]
 800b24c:	bfa8      	it	ge
 800b24e:	4633      	movge	r3, r6
 800b250:	1ad2      	subs	r2, r2, r3
 800b252:	9200      	str	r2, [sp, #0]
 800b254:	9a06      	ldr	r2, [sp, #24]
 800b256:	1af6      	subs	r6, r6, r3
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	9306      	str	r3, [sp, #24]
 800b25c:	9b08      	ldr	r3, [sp, #32]
 800b25e:	b30b      	cbz	r3, 800b2a4 <_dtoa_r+0x794>
 800b260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80c6 	beq.w	800b3f4 <_dtoa_r+0x8e4>
 800b268:	2c00      	cmp	r4, #0
 800b26a:	f000 80c0 	beq.w	800b3ee <_dtoa_r+0x8de>
 800b26e:	4629      	mov	r1, r5
 800b270:	4622      	mov	r2, r4
 800b272:	4648      	mov	r0, r9
 800b274:	f000 fcc8 	bl	800bc08 <__pow5mult>
 800b278:	9a02      	ldr	r2, [sp, #8]
 800b27a:	4601      	mov	r1, r0
 800b27c:	4605      	mov	r5, r0
 800b27e:	4648      	mov	r0, r9
 800b280:	f000 fc20 	bl	800bac4 <__multiply>
 800b284:	9902      	ldr	r1, [sp, #8]
 800b286:	4680      	mov	r8, r0
 800b288:	4648      	mov	r0, r9
 800b28a:	f000 fb51 	bl	800b930 <_Bfree>
 800b28e:	9b08      	ldr	r3, [sp, #32]
 800b290:	1b1b      	subs	r3, r3, r4
 800b292:	9308      	str	r3, [sp, #32]
 800b294:	f000 80b1 	beq.w	800b3fa <_dtoa_r+0x8ea>
 800b298:	9a08      	ldr	r2, [sp, #32]
 800b29a:	4641      	mov	r1, r8
 800b29c:	4648      	mov	r0, r9
 800b29e:	f000 fcb3 	bl	800bc08 <__pow5mult>
 800b2a2:	9002      	str	r0, [sp, #8]
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	4648      	mov	r0, r9
 800b2a8:	f000 fbf6 	bl	800ba98 <__i2b>
 800b2ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 81d8 	beq.w	800b666 <_dtoa_r+0xb56>
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	4601      	mov	r1, r0
 800b2ba:	4648      	mov	r0, r9
 800b2bc:	f000 fca4 	bl	800bc08 <__pow5mult>
 800b2c0:	9b07      	ldr	r3, [sp, #28]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	f300 809f 	bgt.w	800b408 <_dtoa_r+0x8f8>
 800b2ca:	9b04      	ldr	r3, [sp, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f040 8097 	bne.w	800b400 <_dtoa_r+0x8f0>
 800b2d2:	9b05      	ldr	r3, [sp, #20]
 800b2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	f040 8093 	bne.w	800b404 <_dtoa_r+0x8f4>
 800b2de:	9b05      	ldr	r3, [sp, #20]
 800b2e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2e4:	0d1b      	lsrs	r3, r3, #20
 800b2e6:	051b      	lsls	r3, r3, #20
 800b2e8:	b133      	cbz	r3, 800b2f8 <_dtoa_r+0x7e8>
 800b2ea:	9b00      	ldr	r3, [sp, #0]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	9b06      	ldr	r3, [sp, #24]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	9306      	str	r3, [sp, #24]
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	9308      	str	r3, [sp, #32]
 800b2fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 81b8 	beq.w	800b672 <_dtoa_r+0xb62>
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b308:	6918      	ldr	r0, [r3, #16]
 800b30a:	f000 fb79 	bl	800ba00 <__hi0bits>
 800b30e:	f1c0 0020 	rsb	r0, r0, #32
 800b312:	9b06      	ldr	r3, [sp, #24]
 800b314:	4418      	add	r0, r3
 800b316:	f010 001f 	ands.w	r0, r0, #31
 800b31a:	f000 8082 	beq.w	800b422 <_dtoa_r+0x912>
 800b31e:	f1c0 0320 	rsb	r3, r0, #32
 800b322:	2b04      	cmp	r3, #4
 800b324:	dd73      	ble.n	800b40e <_dtoa_r+0x8fe>
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	f1c0 001c 	rsb	r0, r0, #28
 800b32c:	4403      	add	r3, r0
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	9b06      	ldr	r3, [sp, #24]
 800b332:	4403      	add	r3, r0
 800b334:	4406      	add	r6, r0
 800b336:	9306      	str	r3, [sp, #24]
 800b338:	9b00      	ldr	r3, [sp, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	dd05      	ble.n	800b34a <_dtoa_r+0x83a>
 800b33e:	9902      	ldr	r1, [sp, #8]
 800b340:	461a      	mov	r2, r3
 800b342:	4648      	mov	r0, r9
 800b344:	f000 fcba 	bl	800bcbc <__lshift>
 800b348:	9002      	str	r0, [sp, #8]
 800b34a:	9b06      	ldr	r3, [sp, #24]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dd05      	ble.n	800b35c <_dtoa_r+0x84c>
 800b350:	4621      	mov	r1, r4
 800b352:	461a      	mov	r2, r3
 800b354:	4648      	mov	r0, r9
 800b356:	f000 fcb1 	bl	800bcbc <__lshift>
 800b35a:	4604      	mov	r4, r0
 800b35c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d061      	beq.n	800b426 <_dtoa_r+0x916>
 800b362:	9802      	ldr	r0, [sp, #8]
 800b364:	4621      	mov	r1, r4
 800b366:	f000 fd15 	bl	800bd94 <__mcmp>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	da5b      	bge.n	800b426 <_dtoa_r+0x916>
 800b36e:	2300      	movs	r3, #0
 800b370:	9902      	ldr	r1, [sp, #8]
 800b372:	220a      	movs	r2, #10
 800b374:	4648      	mov	r0, r9
 800b376:	f000 fafd 	bl	800b974 <__multadd>
 800b37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37c:	9002      	str	r0, [sp, #8]
 800b37e:	f107 38ff 	add.w	r8, r7, #4294967295
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 8177 	beq.w	800b676 <_dtoa_r+0xb66>
 800b388:	4629      	mov	r1, r5
 800b38a:	2300      	movs	r3, #0
 800b38c:	220a      	movs	r2, #10
 800b38e:	4648      	mov	r0, r9
 800b390:	f000 faf0 	bl	800b974 <__multadd>
 800b394:	f1bb 0f00 	cmp.w	fp, #0
 800b398:	4605      	mov	r5, r0
 800b39a:	dc6f      	bgt.n	800b47c <_dtoa_r+0x96c>
 800b39c:	9b07      	ldr	r3, [sp, #28]
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	dc49      	bgt.n	800b436 <_dtoa_r+0x926>
 800b3a2:	e06b      	b.n	800b47c <_dtoa_r+0x96c>
 800b3a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b3aa:	e73c      	b.n	800b226 <_dtoa_r+0x716>
 800b3ac:	3fe00000 	.word	0x3fe00000
 800b3b0:	40240000 	.word	0x40240000
 800b3b4:	9b03      	ldr	r3, [sp, #12]
 800b3b6:	1e5c      	subs	r4, r3, #1
 800b3b8:	9b08      	ldr	r3, [sp, #32]
 800b3ba:	42a3      	cmp	r3, r4
 800b3bc:	db09      	blt.n	800b3d2 <_dtoa_r+0x8c2>
 800b3be:	1b1c      	subs	r4, r3, r4
 800b3c0:	9b03      	ldr	r3, [sp, #12]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f6bf af30 	bge.w	800b228 <_dtoa_r+0x718>
 800b3c8:	9b00      	ldr	r3, [sp, #0]
 800b3ca:	9a03      	ldr	r2, [sp, #12]
 800b3cc:	1a9e      	subs	r6, r3, r2
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e72b      	b.n	800b22a <_dtoa_r+0x71a>
 800b3d2:	9b08      	ldr	r3, [sp, #32]
 800b3d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b3d6:	9408      	str	r4, [sp, #32]
 800b3d8:	1ae3      	subs	r3, r4, r3
 800b3da:	441a      	add	r2, r3
 800b3dc:	9e00      	ldr	r6, [sp, #0]
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b3e2:	2400      	movs	r4, #0
 800b3e4:	e721      	b.n	800b22a <_dtoa_r+0x71a>
 800b3e6:	9c08      	ldr	r4, [sp, #32]
 800b3e8:	9e00      	ldr	r6, [sp, #0]
 800b3ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b3ec:	e728      	b.n	800b240 <_dtoa_r+0x730>
 800b3ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b3f2:	e751      	b.n	800b298 <_dtoa_r+0x788>
 800b3f4:	9a08      	ldr	r2, [sp, #32]
 800b3f6:	9902      	ldr	r1, [sp, #8]
 800b3f8:	e750      	b.n	800b29c <_dtoa_r+0x78c>
 800b3fa:	f8cd 8008 	str.w	r8, [sp, #8]
 800b3fe:	e751      	b.n	800b2a4 <_dtoa_r+0x794>
 800b400:	2300      	movs	r3, #0
 800b402:	e779      	b.n	800b2f8 <_dtoa_r+0x7e8>
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	e777      	b.n	800b2f8 <_dtoa_r+0x7e8>
 800b408:	2300      	movs	r3, #0
 800b40a:	9308      	str	r3, [sp, #32]
 800b40c:	e779      	b.n	800b302 <_dtoa_r+0x7f2>
 800b40e:	d093      	beq.n	800b338 <_dtoa_r+0x828>
 800b410:	9a00      	ldr	r2, [sp, #0]
 800b412:	331c      	adds	r3, #28
 800b414:	441a      	add	r2, r3
 800b416:	9200      	str	r2, [sp, #0]
 800b418:	9a06      	ldr	r2, [sp, #24]
 800b41a:	441a      	add	r2, r3
 800b41c:	441e      	add	r6, r3
 800b41e:	9206      	str	r2, [sp, #24]
 800b420:	e78a      	b.n	800b338 <_dtoa_r+0x828>
 800b422:	4603      	mov	r3, r0
 800b424:	e7f4      	b.n	800b410 <_dtoa_r+0x900>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	46b8      	mov	r8, r7
 800b42c:	dc20      	bgt.n	800b470 <_dtoa_r+0x960>
 800b42e:	469b      	mov	fp, r3
 800b430:	9b07      	ldr	r3, [sp, #28]
 800b432:	2b02      	cmp	r3, #2
 800b434:	dd1e      	ble.n	800b474 <_dtoa_r+0x964>
 800b436:	f1bb 0f00 	cmp.w	fp, #0
 800b43a:	f47f adb1 	bne.w	800afa0 <_dtoa_r+0x490>
 800b43e:	4621      	mov	r1, r4
 800b440:	465b      	mov	r3, fp
 800b442:	2205      	movs	r2, #5
 800b444:	4648      	mov	r0, r9
 800b446:	f000 fa95 	bl	800b974 <__multadd>
 800b44a:	4601      	mov	r1, r0
 800b44c:	4604      	mov	r4, r0
 800b44e:	9802      	ldr	r0, [sp, #8]
 800b450:	f000 fca0 	bl	800bd94 <__mcmp>
 800b454:	2800      	cmp	r0, #0
 800b456:	f77f ada3 	ble.w	800afa0 <_dtoa_r+0x490>
 800b45a:	4656      	mov	r6, sl
 800b45c:	2331      	movs	r3, #49	@ 0x31
 800b45e:	f806 3b01 	strb.w	r3, [r6], #1
 800b462:	f108 0801 	add.w	r8, r8, #1
 800b466:	e59f      	b.n	800afa8 <_dtoa_r+0x498>
 800b468:	9c03      	ldr	r4, [sp, #12]
 800b46a:	46b8      	mov	r8, r7
 800b46c:	4625      	mov	r5, r4
 800b46e:	e7f4      	b.n	800b45a <_dtoa_r+0x94a>
 800b470:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 8101 	beq.w	800b67e <_dtoa_r+0xb6e>
 800b47c:	2e00      	cmp	r6, #0
 800b47e:	dd05      	ble.n	800b48c <_dtoa_r+0x97c>
 800b480:	4629      	mov	r1, r5
 800b482:	4632      	mov	r2, r6
 800b484:	4648      	mov	r0, r9
 800b486:	f000 fc19 	bl	800bcbc <__lshift>
 800b48a:	4605      	mov	r5, r0
 800b48c:	9b08      	ldr	r3, [sp, #32]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d05c      	beq.n	800b54c <_dtoa_r+0xa3c>
 800b492:	6869      	ldr	r1, [r5, #4]
 800b494:	4648      	mov	r0, r9
 800b496:	f000 fa0b 	bl	800b8b0 <_Balloc>
 800b49a:	4606      	mov	r6, r0
 800b49c:	b928      	cbnz	r0, 800b4aa <_dtoa_r+0x99a>
 800b49e:	4b82      	ldr	r3, [pc, #520]	@ (800b6a8 <_dtoa_r+0xb98>)
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b4a6:	f7ff bb4a 	b.w	800ab3e <_dtoa_r+0x2e>
 800b4aa:	692a      	ldr	r2, [r5, #16]
 800b4ac:	3202      	adds	r2, #2
 800b4ae:	0092      	lsls	r2, r2, #2
 800b4b0:	f105 010c 	add.w	r1, r5, #12
 800b4b4:	300c      	adds	r0, #12
 800b4b6:	f000 ffa3 	bl	800c400 <memcpy>
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4648      	mov	r0, r9
 800b4c0:	f000 fbfc 	bl	800bcbc <__lshift>
 800b4c4:	f10a 0301 	add.w	r3, sl, #1
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	eb0a 030b 	add.w	r3, sl, fp
 800b4ce:	9308      	str	r3, [sp, #32]
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	462f      	mov	r7, r5
 800b4d8:	9306      	str	r3, [sp, #24]
 800b4da:	4605      	mov	r5, r0
 800b4dc:	9b00      	ldr	r3, [sp, #0]
 800b4de:	9802      	ldr	r0, [sp, #8]
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	f103 3bff 	add.w	fp, r3, #4294967295
 800b4e6:	f7ff fa8a 	bl	800a9fe <quorem>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	3330      	adds	r3, #48	@ 0x30
 800b4ee:	9003      	str	r0, [sp, #12]
 800b4f0:	4639      	mov	r1, r7
 800b4f2:	9802      	ldr	r0, [sp, #8]
 800b4f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4f6:	f000 fc4d 	bl	800bd94 <__mcmp>
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	9004      	str	r0, [sp, #16]
 800b4fe:	4621      	mov	r1, r4
 800b500:	4648      	mov	r0, r9
 800b502:	f000 fc63 	bl	800bdcc <__mdiff>
 800b506:	68c2      	ldr	r2, [r0, #12]
 800b508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b50a:	4606      	mov	r6, r0
 800b50c:	bb02      	cbnz	r2, 800b550 <_dtoa_r+0xa40>
 800b50e:	4601      	mov	r1, r0
 800b510:	9802      	ldr	r0, [sp, #8]
 800b512:	f000 fc3f 	bl	800bd94 <__mcmp>
 800b516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b518:	4602      	mov	r2, r0
 800b51a:	4631      	mov	r1, r6
 800b51c:	4648      	mov	r0, r9
 800b51e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b520:	9309      	str	r3, [sp, #36]	@ 0x24
 800b522:	f000 fa05 	bl	800b930 <_Bfree>
 800b526:	9b07      	ldr	r3, [sp, #28]
 800b528:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b52a:	9e00      	ldr	r6, [sp, #0]
 800b52c:	ea42 0103 	orr.w	r1, r2, r3
 800b530:	9b06      	ldr	r3, [sp, #24]
 800b532:	4319      	orrs	r1, r3
 800b534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b536:	d10d      	bne.n	800b554 <_dtoa_r+0xa44>
 800b538:	2b39      	cmp	r3, #57	@ 0x39
 800b53a:	d027      	beq.n	800b58c <_dtoa_r+0xa7c>
 800b53c:	9a04      	ldr	r2, [sp, #16]
 800b53e:	2a00      	cmp	r2, #0
 800b540:	dd01      	ble.n	800b546 <_dtoa_r+0xa36>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	3331      	adds	r3, #49	@ 0x31
 800b546:	f88b 3000 	strb.w	r3, [fp]
 800b54a:	e52e      	b.n	800afaa <_dtoa_r+0x49a>
 800b54c:	4628      	mov	r0, r5
 800b54e:	e7b9      	b.n	800b4c4 <_dtoa_r+0x9b4>
 800b550:	2201      	movs	r2, #1
 800b552:	e7e2      	b.n	800b51a <_dtoa_r+0xa0a>
 800b554:	9904      	ldr	r1, [sp, #16]
 800b556:	2900      	cmp	r1, #0
 800b558:	db04      	blt.n	800b564 <_dtoa_r+0xa54>
 800b55a:	9807      	ldr	r0, [sp, #28]
 800b55c:	4301      	orrs	r1, r0
 800b55e:	9806      	ldr	r0, [sp, #24]
 800b560:	4301      	orrs	r1, r0
 800b562:	d120      	bne.n	800b5a6 <_dtoa_r+0xa96>
 800b564:	2a00      	cmp	r2, #0
 800b566:	ddee      	ble.n	800b546 <_dtoa_r+0xa36>
 800b568:	9902      	ldr	r1, [sp, #8]
 800b56a:	9300      	str	r3, [sp, #0]
 800b56c:	2201      	movs	r2, #1
 800b56e:	4648      	mov	r0, r9
 800b570:	f000 fba4 	bl	800bcbc <__lshift>
 800b574:	4621      	mov	r1, r4
 800b576:	9002      	str	r0, [sp, #8]
 800b578:	f000 fc0c 	bl	800bd94 <__mcmp>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	9b00      	ldr	r3, [sp, #0]
 800b580:	dc02      	bgt.n	800b588 <_dtoa_r+0xa78>
 800b582:	d1e0      	bne.n	800b546 <_dtoa_r+0xa36>
 800b584:	07da      	lsls	r2, r3, #31
 800b586:	d5de      	bpl.n	800b546 <_dtoa_r+0xa36>
 800b588:	2b39      	cmp	r3, #57	@ 0x39
 800b58a:	d1da      	bne.n	800b542 <_dtoa_r+0xa32>
 800b58c:	2339      	movs	r3, #57	@ 0x39
 800b58e:	f88b 3000 	strb.w	r3, [fp]
 800b592:	4633      	mov	r3, r6
 800b594:	461e      	mov	r6, r3
 800b596:	3b01      	subs	r3, #1
 800b598:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b59c:	2a39      	cmp	r2, #57	@ 0x39
 800b59e:	d04e      	beq.n	800b63e <_dtoa_r+0xb2e>
 800b5a0:	3201      	adds	r2, #1
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	e501      	b.n	800afaa <_dtoa_r+0x49a>
 800b5a6:	2a00      	cmp	r2, #0
 800b5a8:	dd03      	ble.n	800b5b2 <_dtoa_r+0xaa2>
 800b5aa:	2b39      	cmp	r3, #57	@ 0x39
 800b5ac:	d0ee      	beq.n	800b58c <_dtoa_r+0xa7c>
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	e7c9      	b.n	800b546 <_dtoa_r+0xa36>
 800b5b2:	9a00      	ldr	r2, [sp, #0]
 800b5b4:	9908      	ldr	r1, [sp, #32]
 800b5b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b5ba:	428a      	cmp	r2, r1
 800b5bc:	d028      	beq.n	800b610 <_dtoa_r+0xb00>
 800b5be:	9902      	ldr	r1, [sp, #8]
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	220a      	movs	r2, #10
 800b5c4:	4648      	mov	r0, r9
 800b5c6:	f000 f9d5 	bl	800b974 <__multadd>
 800b5ca:	42af      	cmp	r7, r5
 800b5cc:	9002      	str	r0, [sp, #8]
 800b5ce:	f04f 0300 	mov.w	r3, #0
 800b5d2:	f04f 020a 	mov.w	r2, #10
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	4648      	mov	r0, r9
 800b5da:	d107      	bne.n	800b5ec <_dtoa_r+0xadc>
 800b5dc:	f000 f9ca 	bl	800b974 <__multadd>
 800b5e0:	4607      	mov	r7, r0
 800b5e2:	4605      	mov	r5, r0
 800b5e4:	9b00      	ldr	r3, [sp, #0]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	9300      	str	r3, [sp, #0]
 800b5ea:	e777      	b.n	800b4dc <_dtoa_r+0x9cc>
 800b5ec:	f000 f9c2 	bl	800b974 <__multadd>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4607      	mov	r7, r0
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	220a      	movs	r2, #10
 800b5f8:	4648      	mov	r0, r9
 800b5fa:	f000 f9bb 	bl	800b974 <__multadd>
 800b5fe:	4605      	mov	r5, r0
 800b600:	e7f0      	b.n	800b5e4 <_dtoa_r+0xad4>
 800b602:	f1bb 0f00 	cmp.w	fp, #0
 800b606:	bfcc      	ite	gt
 800b608:	465e      	movgt	r6, fp
 800b60a:	2601      	movle	r6, #1
 800b60c:	4456      	add	r6, sl
 800b60e:	2700      	movs	r7, #0
 800b610:	9902      	ldr	r1, [sp, #8]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	2201      	movs	r2, #1
 800b616:	4648      	mov	r0, r9
 800b618:	f000 fb50 	bl	800bcbc <__lshift>
 800b61c:	4621      	mov	r1, r4
 800b61e:	9002      	str	r0, [sp, #8]
 800b620:	f000 fbb8 	bl	800bd94 <__mcmp>
 800b624:	2800      	cmp	r0, #0
 800b626:	dcb4      	bgt.n	800b592 <_dtoa_r+0xa82>
 800b628:	d102      	bne.n	800b630 <_dtoa_r+0xb20>
 800b62a:	9b00      	ldr	r3, [sp, #0]
 800b62c:	07db      	lsls	r3, r3, #31
 800b62e:	d4b0      	bmi.n	800b592 <_dtoa_r+0xa82>
 800b630:	4633      	mov	r3, r6
 800b632:	461e      	mov	r6, r3
 800b634:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b638:	2a30      	cmp	r2, #48	@ 0x30
 800b63a:	d0fa      	beq.n	800b632 <_dtoa_r+0xb22>
 800b63c:	e4b5      	b.n	800afaa <_dtoa_r+0x49a>
 800b63e:	459a      	cmp	sl, r3
 800b640:	d1a8      	bne.n	800b594 <_dtoa_r+0xa84>
 800b642:	2331      	movs	r3, #49	@ 0x31
 800b644:	f108 0801 	add.w	r8, r8, #1
 800b648:	f88a 3000 	strb.w	r3, [sl]
 800b64c:	e4ad      	b.n	800afaa <_dtoa_r+0x49a>
 800b64e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b650:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b6ac <_dtoa_r+0xb9c>
 800b654:	b11b      	cbz	r3, 800b65e <_dtoa_r+0xb4e>
 800b656:	f10a 0308 	add.w	r3, sl, #8
 800b65a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	4650      	mov	r0, sl
 800b660:	b017      	add	sp, #92	@ 0x5c
 800b662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b666:	9b07      	ldr	r3, [sp, #28]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	f77f ae2e 	ble.w	800b2ca <_dtoa_r+0x7ba>
 800b66e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b670:	9308      	str	r3, [sp, #32]
 800b672:	2001      	movs	r0, #1
 800b674:	e64d      	b.n	800b312 <_dtoa_r+0x802>
 800b676:	f1bb 0f00 	cmp.w	fp, #0
 800b67a:	f77f aed9 	ble.w	800b430 <_dtoa_r+0x920>
 800b67e:	4656      	mov	r6, sl
 800b680:	9802      	ldr	r0, [sp, #8]
 800b682:	4621      	mov	r1, r4
 800b684:	f7ff f9bb 	bl	800a9fe <quorem>
 800b688:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b68c:	f806 3b01 	strb.w	r3, [r6], #1
 800b690:	eba6 020a 	sub.w	r2, r6, sl
 800b694:	4593      	cmp	fp, r2
 800b696:	ddb4      	ble.n	800b602 <_dtoa_r+0xaf2>
 800b698:	9902      	ldr	r1, [sp, #8]
 800b69a:	2300      	movs	r3, #0
 800b69c:	220a      	movs	r2, #10
 800b69e:	4648      	mov	r0, r9
 800b6a0:	f000 f968 	bl	800b974 <__multadd>
 800b6a4:	9002      	str	r0, [sp, #8]
 800b6a6:	e7eb      	b.n	800b680 <_dtoa_r+0xb70>
 800b6a8:	0800f138 	.word	0x0800f138
 800b6ac:	0800f0bc 	.word	0x0800f0bc

0800b6b0 <_free_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	2900      	cmp	r1, #0
 800b6b6:	d041      	beq.n	800b73c <_free_r+0x8c>
 800b6b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6bc:	1f0c      	subs	r4, r1, #4
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	bfb8      	it	lt
 800b6c2:	18e4      	addlt	r4, r4, r3
 800b6c4:	f000 f8e8 	bl	800b898 <__malloc_lock>
 800b6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b740 <_free_r+0x90>)
 800b6ca:	6813      	ldr	r3, [r2, #0]
 800b6cc:	b933      	cbnz	r3, 800b6dc <_free_r+0x2c>
 800b6ce:	6063      	str	r3, [r4, #4]
 800b6d0:	6014      	str	r4, [r2, #0]
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d8:	f000 b8e4 	b.w	800b8a4 <__malloc_unlock>
 800b6dc:	42a3      	cmp	r3, r4
 800b6de:	d908      	bls.n	800b6f2 <_free_r+0x42>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	1821      	adds	r1, r4, r0
 800b6e4:	428b      	cmp	r3, r1
 800b6e6:	bf01      	itttt	eq
 800b6e8:	6819      	ldreq	r1, [r3, #0]
 800b6ea:	685b      	ldreq	r3, [r3, #4]
 800b6ec:	1809      	addeq	r1, r1, r0
 800b6ee:	6021      	streq	r1, [r4, #0]
 800b6f0:	e7ed      	b.n	800b6ce <_free_r+0x1e>
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	b10b      	cbz	r3, 800b6fc <_free_r+0x4c>
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d9fa      	bls.n	800b6f2 <_free_r+0x42>
 800b6fc:	6811      	ldr	r1, [r2, #0]
 800b6fe:	1850      	adds	r0, r2, r1
 800b700:	42a0      	cmp	r0, r4
 800b702:	d10b      	bne.n	800b71c <_free_r+0x6c>
 800b704:	6820      	ldr	r0, [r4, #0]
 800b706:	4401      	add	r1, r0
 800b708:	1850      	adds	r0, r2, r1
 800b70a:	4283      	cmp	r3, r0
 800b70c:	6011      	str	r1, [r2, #0]
 800b70e:	d1e0      	bne.n	800b6d2 <_free_r+0x22>
 800b710:	6818      	ldr	r0, [r3, #0]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	6053      	str	r3, [r2, #4]
 800b716:	4408      	add	r0, r1
 800b718:	6010      	str	r0, [r2, #0]
 800b71a:	e7da      	b.n	800b6d2 <_free_r+0x22>
 800b71c:	d902      	bls.n	800b724 <_free_r+0x74>
 800b71e:	230c      	movs	r3, #12
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	e7d6      	b.n	800b6d2 <_free_r+0x22>
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	1821      	adds	r1, r4, r0
 800b728:	428b      	cmp	r3, r1
 800b72a:	bf04      	itt	eq
 800b72c:	6819      	ldreq	r1, [r3, #0]
 800b72e:	685b      	ldreq	r3, [r3, #4]
 800b730:	6063      	str	r3, [r4, #4]
 800b732:	bf04      	itt	eq
 800b734:	1809      	addeq	r1, r1, r0
 800b736:	6021      	streq	r1, [r4, #0]
 800b738:	6054      	str	r4, [r2, #4]
 800b73a:	e7ca      	b.n	800b6d2 <_free_r+0x22>
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
 800b73e:	bf00      	nop
 800b740:	20001624 	.word	0x20001624

0800b744 <malloc>:
 800b744:	4b02      	ldr	r3, [pc, #8]	@ (800b750 <malloc+0xc>)
 800b746:	4601      	mov	r1, r0
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	f000 b825 	b.w	800b798 <_malloc_r>
 800b74e:	bf00      	nop
 800b750:	20000020 	.word	0x20000020

0800b754 <sbrk_aligned>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	4e0f      	ldr	r6, [pc, #60]	@ (800b794 <sbrk_aligned+0x40>)
 800b758:	460c      	mov	r4, r1
 800b75a:	6831      	ldr	r1, [r6, #0]
 800b75c:	4605      	mov	r5, r0
 800b75e:	b911      	cbnz	r1, 800b766 <sbrk_aligned+0x12>
 800b760:	f000 fe3e 	bl	800c3e0 <_sbrk_r>
 800b764:	6030      	str	r0, [r6, #0]
 800b766:	4621      	mov	r1, r4
 800b768:	4628      	mov	r0, r5
 800b76a:	f000 fe39 	bl	800c3e0 <_sbrk_r>
 800b76e:	1c43      	adds	r3, r0, #1
 800b770:	d103      	bne.n	800b77a <sbrk_aligned+0x26>
 800b772:	f04f 34ff 	mov.w	r4, #4294967295
 800b776:	4620      	mov	r0, r4
 800b778:	bd70      	pop	{r4, r5, r6, pc}
 800b77a:	1cc4      	adds	r4, r0, #3
 800b77c:	f024 0403 	bic.w	r4, r4, #3
 800b780:	42a0      	cmp	r0, r4
 800b782:	d0f8      	beq.n	800b776 <sbrk_aligned+0x22>
 800b784:	1a21      	subs	r1, r4, r0
 800b786:	4628      	mov	r0, r5
 800b788:	f000 fe2a 	bl	800c3e0 <_sbrk_r>
 800b78c:	3001      	adds	r0, #1
 800b78e:	d1f2      	bne.n	800b776 <sbrk_aligned+0x22>
 800b790:	e7ef      	b.n	800b772 <sbrk_aligned+0x1e>
 800b792:	bf00      	nop
 800b794:	20001620 	.word	0x20001620

0800b798 <_malloc_r>:
 800b798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b79c:	1ccd      	adds	r5, r1, #3
 800b79e:	f025 0503 	bic.w	r5, r5, #3
 800b7a2:	3508      	adds	r5, #8
 800b7a4:	2d0c      	cmp	r5, #12
 800b7a6:	bf38      	it	cc
 800b7a8:	250c      	movcc	r5, #12
 800b7aa:	2d00      	cmp	r5, #0
 800b7ac:	4606      	mov	r6, r0
 800b7ae:	db01      	blt.n	800b7b4 <_malloc_r+0x1c>
 800b7b0:	42a9      	cmp	r1, r5
 800b7b2:	d904      	bls.n	800b7be <_malloc_r+0x26>
 800b7b4:	230c      	movs	r3, #12
 800b7b6:	6033      	str	r3, [r6, #0]
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b894 <_malloc_r+0xfc>
 800b7c2:	f000 f869 	bl	800b898 <__malloc_lock>
 800b7c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b7ca:	461c      	mov	r4, r3
 800b7cc:	bb44      	cbnz	r4, 800b820 <_malloc_r+0x88>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff ffbf 	bl	800b754 <sbrk_aligned>
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	4604      	mov	r4, r0
 800b7da:	d158      	bne.n	800b88e <_malloc_r+0xf6>
 800b7dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b7e0:	4627      	mov	r7, r4
 800b7e2:	2f00      	cmp	r7, #0
 800b7e4:	d143      	bne.n	800b86e <_malloc_r+0xd6>
 800b7e6:	2c00      	cmp	r4, #0
 800b7e8:	d04b      	beq.n	800b882 <_malloc_r+0xea>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	eb04 0903 	add.w	r9, r4, r3
 800b7f4:	f000 fdf4 	bl	800c3e0 <_sbrk_r>
 800b7f8:	4581      	cmp	r9, r0
 800b7fa:	d142      	bne.n	800b882 <_malloc_r+0xea>
 800b7fc:	6821      	ldr	r1, [r4, #0]
 800b7fe:	1a6d      	subs	r5, r5, r1
 800b800:	4629      	mov	r1, r5
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ffa6 	bl	800b754 <sbrk_aligned>
 800b808:	3001      	adds	r0, #1
 800b80a:	d03a      	beq.n	800b882 <_malloc_r+0xea>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	442b      	add	r3, r5
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	f8d8 3000 	ldr.w	r3, [r8]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	bb62      	cbnz	r2, 800b874 <_malloc_r+0xdc>
 800b81a:	f8c8 7000 	str.w	r7, [r8]
 800b81e:	e00f      	b.n	800b840 <_malloc_r+0xa8>
 800b820:	6822      	ldr	r2, [r4, #0]
 800b822:	1b52      	subs	r2, r2, r5
 800b824:	d420      	bmi.n	800b868 <_malloc_r+0xd0>
 800b826:	2a0b      	cmp	r2, #11
 800b828:	d917      	bls.n	800b85a <_malloc_r+0xc2>
 800b82a:	1961      	adds	r1, r4, r5
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	6025      	str	r5, [r4, #0]
 800b830:	bf18      	it	ne
 800b832:	6059      	strne	r1, [r3, #4]
 800b834:	6863      	ldr	r3, [r4, #4]
 800b836:	bf08      	it	eq
 800b838:	f8c8 1000 	streq.w	r1, [r8]
 800b83c:	5162      	str	r2, [r4, r5]
 800b83e:	604b      	str	r3, [r1, #4]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 f82f 	bl	800b8a4 <__malloc_unlock>
 800b846:	f104 000b 	add.w	r0, r4, #11
 800b84a:	1d23      	adds	r3, r4, #4
 800b84c:	f020 0007 	bic.w	r0, r0, #7
 800b850:	1ac2      	subs	r2, r0, r3
 800b852:	bf1c      	itt	ne
 800b854:	1a1b      	subne	r3, r3, r0
 800b856:	50a3      	strne	r3, [r4, r2]
 800b858:	e7af      	b.n	800b7ba <_malloc_r+0x22>
 800b85a:	6862      	ldr	r2, [r4, #4]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	bf0c      	ite	eq
 800b860:	f8c8 2000 	streq.w	r2, [r8]
 800b864:	605a      	strne	r2, [r3, #4]
 800b866:	e7eb      	b.n	800b840 <_malloc_r+0xa8>
 800b868:	4623      	mov	r3, r4
 800b86a:	6864      	ldr	r4, [r4, #4]
 800b86c:	e7ae      	b.n	800b7cc <_malloc_r+0x34>
 800b86e:	463c      	mov	r4, r7
 800b870:	687f      	ldr	r7, [r7, #4]
 800b872:	e7b6      	b.n	800b7e2 <_malloc_r+0x4a>
 800b874:	461a      	mov	r2, r3
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	42a3      	cmp	r3, r4
 800b87a:	d1fb      	bne.n	800b874 <_malloc_r+0xdc>
 800b87c:	2300      	movs	r3, #0
 800b87e:	6053      	str	r3, [r2, #4]
 800b880:	e7de      	b.n	800b840 <_malloc_r+0xa8>
 800b882:	230c      	movs	r3, #12
 800b884:	6033      	str	r3, [r6, #0]
 800b886:	4630      	mov	r0, r6
 800b888:	f000 f80c 	bl	800b8a4 <__malloc_unlock>
 800b88c:	e794      	b.n	800b7b8 <_malloc_r+0x20>
 800b88e:	6005      	str	r5, [r0, #0]
 800b890:	e7d6      	b.n	800b840 <_malloc_r+0xa8>
 800b892:	bf00      	nop
 800b894:	20001624 	.word	0x20001624

0800b898 <__malloc_lock>:
 800b898:	4801      	ldr	r0, [pc, #4]	@ (800b8a0 <__malloc_lock+0x8>)
 800b89a:	f7ff b8ae 	b.w	800a9fa <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	2000161c 	.word	0x2000161c

0800b8a4 <__malloc_unlock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	@ (800b8ac <__malloc_unlock+0x8>)
 800b8a6:	f7ff b8a9 	b.w	800a9fc <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	2000161c 	.word	0x2000161c

0800b8b0 <_Balloc>:
 800b8b0:	b570      	push	{r4, r5, r6, lr}
 800b8b2:	69c6      	ldr	r6, [r0, #28]
 800b8b4:	4604      	mov	r4, r0
 800b8b6:	460d      	mov	r5, r1
 800b8b8:	b976      	cbnz	r6, 800b8d8 <_Balloc+0x28>
 800b8ba:	2010      	movs	r0, #16
 800b8bc:	f7ff ff42 	bl	800b744 <malloc>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	61e0      	str	r0, [r4, #28]
 800b8c4:	b920      	cbnz	r0, 800b8d0 <_Balloc+0x20>
 800b8c6:	4b18      	ldr	r3, [pc, #96]	@ (800b928 <_Balloc+0x78>)
 800b8c8:	4818      	ldr	r0, [pc, #96]	@ (800b92c <_Balloc+0x7c>)
 800b8ca:	216b      	movs	r1, #107	@ 0x6b
 800b8cc:	f000 fda6 	bl	800c41c <__assert_func>
 800b8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d4:	6006      	str	r6, [r0, #0]
 800b8d6:	60c6      	str	r6, [r0, #12]
 800b8d8:	69e6      	ldr	r6, [r4, #28]
 800b8da:	68f3      	ldr	r3, [r6, #12]
 800b8dc:	b183      	cbz	r3, 800b900 <_Balloc+0x50>
 800b8de:	69e3      	ldr	r3, [r4, #28]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8e6:	b9b8      	cbnz	r0, 800b918 <_Balloc+0x68>
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ee:	1d72      	adds	r2, r6, #5
 800b8f0:	0092      	lsls	r2, r2, #2
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 fdb0 	bl	800c458 <_calloc_r>
 800b8f8:	b160      	cbz	r0, 800b914 <_Balloc+0x64>
 800b8fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8fe:	e00e      	b.n	800b91e <_Balloc+0x6e>
 800b900:	2221      	movs	r2, #33	@ 0x21
 800b902:	2104      	movs	r1, #4
 800b904:	4620      	mov	r0, r4
 800b906:	f000 fda7 	bl	800c458 <_calloc_r>
 800b90a:	69e3      	ldr	r3, [r4, #28]
 800b90c:	60f0      	str	r0, [r6, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d1e4      	bne.n	800b8de <_Balloc+0x2e>
 800b914:	2000      	movs	r0, #0
 800b916:	bd70      	pop	{r4, r5, r6, pc}
 800b918:	6802      	ldr	r2, [r0, #0]
 800b91a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b91e:	2300      	movs	r3, #0
 800b920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b924:	e7f7      	b.n	800b916 <_Balloc+0x66>
 800b926:	bf00      	nop
 800b928:	0800f0c9 	.word	0x0800f0c9
 800b92c:	0800f149 	.word	0x0800f149

0800b930 <_Bfree>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	69c6      	ldr	r6, [r0, #28]
 800b934:	4605      	mov	r5, r0
 800b936:	460c      	mov	r4, r1
 800b938:	b976      	cbnz	r6, 800b958 <_Bfree+0x28>
 800b93a:	2010      	movs	r0, #16
 800b93c:	f7ff ff02 	bl	800b744 <malloc>
 800b940:	4602      	mov	r2, r0
 800b942:	61e8      	str	r0, [r5, #28]
 800b944:	b920      	cbnz	r0, 800b950 <_Bfree+0x20>
 800b946:	4b09      	ldr	r3, [pc, #36]	@ (800b96c <_Bfree+0x3c>)
 800b948:	4809      	ldr	r0, [pc, #36]	@ (800b970 <_Bfree+0x40>)
 800b94a:	218f      	movs	r1, #143	@ 0x8f
 800b94c:	f000 fd66 	bl	800c41c <__assert_func>
 800b950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b954:	6006      	str	r6, [r0, #0]
 800b956:	60c6      	str	r6, [r0, #12]
 800b958:	b13c      	cbz	r4, 800b96a <_Bfree+0x3a>
 800b95a:	69eb      	ldr	r3, [r5, #28]
 800b95c:	6862      	ldr	r2, [r4, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b964:	6021      	str	r1, [r4, #0]
 800b966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b96a:	bd70      	pop	{r4, r5, r6, pc}
 800b96c:	0800f0c9 	.word	0x0800f0c9
 800b970:	0800f149 	.word	0x0800f149

0800b974 <__multadd>:
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	690d      	ldr	r5, [r1, #16]
 800b97a:	4607      	mov	r7, r0
 800b97c:	460c      	mov	r4, r1
 800b97e:	461e      	mov	r6, r3
 800b980:	f101 0c14 	add.w	ip, r1, #20
 800b984:	2000      	movs	r0, #0
 800b986:	f8dc 3000 	ldr.w	r3, [ip]
 800b98a:	b299      	uxth	r1, r3
 800b98c:	fb02 6101 	mla	r1, r2, r1, r6
 800b990:	0c1e      	lsrs	r6, r3, #16
 800b992:	0c0b      	lsrs	r3, r1, #16
 800b994:	fb02 3306 	mla	r3, r2, r6, r3
 800b998:	b289      	uxth	r1, r1
 800b99a:	3001      	adds	r0, #1
 800b99c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b9a0:	4285      	cmp	r5, r0
 800b9a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b9a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b9aa:	dcec      	bgt.n	800b986 <__multadd+0x12>
 800b9ac:	b30e      	cbz	r6, 800b9f2 <__multadd+0x7e>
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	42ab      	cmp	r3, r5
 800b9b2:	dc19      	bgt.n	800b9e8 <__multadd+0x74>
 800b9b4:	6861      	ldr	r1, [r4, #4]
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	3101      	adds	r1, #1
 800b9ba:	f7ff ff79 	bl	800b8b0 <_Balloc>
 800b9be:	4680      	mov	r8, r0
 800b9c0:	b928      	cbnz	r0, 800b9ce <__multadd+0x5a>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f8 <__multadd+0x84>)
 800b9c6:	480d      	ldr	r0, [pc, #52]	@ (800b9fc <__multadd+0x88>)
 800b9c8:	21ba      	movs	r1, #186	@ 0xba
 800b9ca:	f000 fd27 	bl	800c41c <__assert_func>
 800b9ce:	6922      	ldr	r2, [r4, #16]
 800b9d0:	3202      	adds	r2, #2
 800b9d2:	f104 010c 	add.w	r1, r4, #12
 800b9d6:	0092      	lsls	r2, r2, #2
 800b9d8:	300c      	adds	r0, #12
 800b9da:	f000 fd11 	bl	800c400 <memcpy>
 800b9de:	4621      	mov	r1, r4
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f7ff ffa5 	bl	800b930 <_Bfree>
 800b9e6:	4644      	mov	r4, r8
 800b9e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	615e      	str	r6, [r3, #20]
 800b9f0:	6125      	str	r5, [r4, #16]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f8:	0800f138 	.word	0x0800f138
 800b9fc:	0800f149 	.word	0x0800f149

0800ba00 <__hi0bits>:
 800ba00:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ba04:	4603      	mov	r3, r0
 800ba06:	bf36      	itet	cc
 800ba08:	0403      	lslcc	r3, r0, #16
 800ba0a:	2000      	movcs	r0, #0
 800ba0c:	2010      	movcc	r0, #16
 800ba0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ba12:	bf3c      	itt	cc
 800ba14:	021b      	lslcc	r3, r3, #8
 800ba16:	3008      	addcc	r0, #8
 800ba18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba1c:	bf3c      	itt	cc
 800ba1e:	011b      	lslcc	r3, r3, #4
 800ba20:	3004      	addcc	r0, #4
 800ba22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba26:	bf3c      	itt	cc
 800ba28:	009b      	lslcc	r3, r3, #2
 800ba2a:	3002      	addcc	r0, #2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	db05      	blt.n	800ba3c <__hi0bits+0x3c>
 800ba30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ba34:	f100 0001 	add.w	r0, r0, #1
 800ba38:	bf08      	it	eq
 800ba3a:	2020      	moveq	r0, #32
 800ba3c:	4770      	bx	lr

0800ba3e <__lo0bits>:
 800ba3e:	6803      	ldr	r3, [r0, #0]
 800ba40:	4602      	mov	r2, r0
 800ba42:	f013 0007 	ands.w	r0, r3, #7
 800ba46:	d00b      	beq.n	800ba60 <__lo0bits+0x22>
 800ba48:	07d9      	lsls	r1, r3, #31
 800ba4a:	d421      	bmi.n	800ba90 <__lo0bits+0x52>
 800ba4c:	0798      	lsls	r0, r3, #30
 800ba4e:	bf49      	itett	mi
 800ba50:	085b      	lsrmi	r3, r3, #1
 800ba52:	089b      	lsrpl	r3, r3, #2
 800ba54:	2001      	movmi	r0, #1
 800ba56:	6013      	strmi	r3, [r2, #0]
 800ba58:	bf5c      	itt	pl
 800ba5a:	6013      	strpl	r3, [r2, #0]
 800ba5c:	2002      	movpl	r0, #2
 800ba5e:	4770      	bx	lr
 800ba60:	b299      	uxth	r1, r3
 800ba62:	b909      	cbnz	r1, 800ba68 <__lo0bits+0x2a>
 800ba64:	0c1b      	lsrs	r3, r3, #16
 800ba66:	2010      	movs	r0, #16
 800ba68:	b2d9      	uxtb	r1, r3
 800ba6a:	b909      	cbnz	r1, 800ba70 <__lo0bits+0x32>
 800ba6c:	3008      	adds	r0, #8
 800ba6e:	0a1b      	lsrs	r3, r3, #8
 800ba70:	0719      	lsls	r1, r3, #28
 800ba72:	bf04      	itt	eq
 800ba74:	091b      	lsreq	r3, r3, #4
 800ba76:	3004      	addeq	r0, #4
 800ba78:	0799      	lsls	r1, r3, #30
 800ba7a:	bf04      	itt	eq
 800ba7c:	089b      	lsreq	r3, r3, #2
 800ba7e:	3002      	addeq	r0, #2
 800ba80:	07d9      	lsls	r1, r3, #31
 800ba82:	d403      	bmi.n	800ba8c <__lo0bits+0x4e>
 800ba84:	085b      	lsrs	r3, r3, #1
 800ba86:	f100 0001 	add.w	r0, r0, #1
 800ba8a:	d003      	beq.n	800ba94 <__lo0bits+0x56>
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	4770      	bx	lr
 800ba90:	2000      	movs	r0, #0
 800ba92:	4770      	bx	lr
 800ba94:	2020      	movs	r0, #32
 800ba96:	4770      	bx	lr

0800ba98 <__i2b>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	f7ff ff07 	bl	800b8b0 <_Balloc>
 800baa2:	4602      	mov	r2, r0
 800baa4:	b928      	cbnz	r0, 800bab2 <__i2b+0x1a>
 800baa6:	4b05      	ldr	r3, [pc, #20]	@ (800babc <__i2b+0x24>)
 800baa8:	4805      	ldr	r0, [pc, #20]	@ (800bac0 <__i2b+0x28>)
 800baaa:	f240 1145 	movw	r1, #325	@ 0x145
 800baae:	f000 fcb5 	bl	800c41c <__assert_func>
 800bab2:	2301      	movs	r3, #1
 800bab4:	6144      	str	r4, [r0, #20]
 800bab6:	6103      	str	r3, [r0, #16]
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	bf00      	nop
 800babc:	0800f138 	.word	0x0800f138
 800bac0:	0800f149 	.word	0x0800f149

0800bac4 <__multiply>:
 800bac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac8:	4617      	mov	r7, r2
 800baca:	690a      	ldr	r2, [r1, #16]
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	429a      	cmp	r2, r3
 800bad0:	bfa8      	it	ge
 800bad2:	463b      	movge	r3, r7
 800bad4:	4689      	mov	r9, r1
 800bad6:	bfa4      	itt	ge
 800bad8:	460f      	movge	r7, r1
 800bada:	4699      	movge	r9, r3
 800badc:	693d      	ldr	r5, [r7, #16]
 800bade:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	eb05 060a 	add.w	r6, r5, sl
 800baea:	42b3      	cmp	r3, r6
 800baec:	b085      	sub	sp, #20
 800baee:	bfb8      	it	lt
 800baf0:	3101      	addlt	r1, #1
 800baf2:	f7ff fedd 	bl	800b8b0 <_Balloc>
 800baf6:	b930      	cbnz	r0, 800bb06 <__multiply+0x42>
 800baf8:	4602      	mov	r2, r0
 800bafa:	4b41      	ldr	r3, [pc, #260]	@ (800bc00 <__multiply+0x13c>)
 800bafc:	4841      	ldr	r0, [pc, #260]	@ (800bc04 <__multiply+0x140>)
 800bafe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bb02:	f000 fc8b 	bl	800c41c <__assert_func>
 800bb06:	f100 0414 	add.w	r4, r0, #20
 800bb0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bb0e:	4623      	mov	r3, r4
 800bb10:	2200      	movs	r2, #0
 800bb12:	4573      	cmp	r3, lr
 800bb14:	d320      	bcc.n	800bb58 <__multiply+0x94>
 800bb16:	f107 0814 	add.w	r8, r7, #20
 800bb1a:	f109 0114 	add.w	r1, r9, #20
 800bb1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bb22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	1beb      	subs	r3, r5, r7
 800bb2a:	3b15      	subs	r3, #21
 800bb2c:	f023 0303 	bic.w	r3, r3, #3
 800bb30:	3304      	adds	r3, #4
 800bb32:	3715      	adds	r7, #21
 800bb34:	42bd      	cmp	r5, r7
 800bb36:	bf38      	it	cc
 800bb38:	2304      	movcc	r3, #4
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	9b02      	ldr	r3, [sp, #8]
 800bb3e:	9103      	str	r1, [sp, #12]
 800bb40:	428b      	cmp	r3, r1
 800bb42:	d80c      	bhi.n	800bb5e <__multiply+0x9a>
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	dd03      	ble.n	800bb50 <__multiply+0x8c>
 800bb48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d055      	beq.n	800bbfc <__multiply+0x138>
 800bb50:	6106      	str	r6, [r0, #16]
 800bb52:	b005      	add	sp, #20
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	f843 2b04 	str.w	r2, [r3], #4
 800bb5c:	e7d9      	b.n	800bb12 <__multiply+0x4e>
 800bb5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb62:	f1ba 0f00 	cmp.w	sl, #0
 800bb66:	d01f      	beq.n	800bba8 <__multiply+0xe4>
 800bb68:	46c4      	mov	ip, r8
 800bb6a:	46a1      	mov	r9, r4
 800bb6c:	2700      	movs	r7, #0
 800bb6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb72:	f8d9 3000 	ldr.w	r3, [r9]
 800bb76:	fa1f fb82 	uxth.w	fp, r2
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb80:	443b      	add	r3, r7
 800bb82:	f8d9 7000 	ldr.w	r7, [r9]
 800bb86:	0c12      	lsrs	r2, r2, #16
 800bb88:	0c3f      	lsrs	r7, r7, #16
 800bb8a:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb98:	4565      	cmp	r5, ip
 800bb9a:	f849 3b04 	str.w	r3, [r9], #4
 800bb9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bba2:	d8e4      	bhi.n	800bb6e <__multiply+0xaa>
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	50e7      	str	r7, [r4, r3]
 800bba8:	9b03      	ldr	r3, [sp, #12]
 800bbaa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bbae:	3104      	adds	r1, #4
 800bbb0:	f1b9 0f00 	cmp.w	r9, #0
 800bbb4:	d020      	beq.n	800bbf8 <__multiply+0x134>
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	4647      	mov	r7, r8
 800bbba:	46a4      	mov	ip, r4
 800bbbc:	f04f 0a00 	mov.w	sl, #0
 800bbc0:	f8b7 b000 	ldrh.w	fp, [r7]
 800bbc4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bbc8:	fb09 220b 	mla	r2, r9, fp, r2
 800bbcc:	4452      	add	r2, sl
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbd4:	f84c 3b04 	str.w	r3, [ip], #4
 800bbd8:	f857 3b04 	ldr.w	r3, [r7], #4
 800bbdc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbe0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bbe4:	fb09 330a 	mla	r3, r9, sl, r3
 800bbe8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbec:	42bd      	cmp	r5, r7
 800bbee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbf2:	d8e5      	bhi.n	800bbc0 <__multiply+0xfc>
 800bbf4:	9a01      	ldr	r2, [sp, #4]
 800bbf6:	50a3      	str	r3, [r4, r2]
 800bbf8:	3404      	adds	r4, #4
 800bbfa:	e79f      	b.n	800bb3c <__multiply+0x78>
 800bbfc:	3e01      	subs	r6, #1
 800bbfe:	e7a1      	b.n	800bb44 <__multiply+0x80>
 800bc00:	0800f138 	.word	0x0800f138
 800bc04:	0800f149 	.word	0x0800f149

0800bc08 <__pow5mult>:
 800bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc0c:	4615      	mov	r5, r2
 800bc0e:	f012 0203 	ands.w	r2, r2, #3
 800bc12:	4607      	mov	r7, r0
 800bc14:	460e      	mov	r6, r1
 800bc16:	d007      	beq.n	800bc28 <__pow5mult+0x20>
 800bc18:	4c25      	ldr	r4, [pc, #148]	@ (800bcb0 <__pow5mult+0xa8>)
 800bc1a:	3a01      	subs	r2, #1
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc22:	f7ff fea7 	bl	800b974 <__multadd>
 800bc26:	4606      	mov	r6, r0
 800bc28:	10ad      	asrs	r5, r5, #2
 800bc2a:	d03d      	beq.n	800bca8 <__pow5mult+0xa0>
 800bc2c:	69fc      	ldr	r4, [r7, #28]
 800bc2e:	b97c      	cbnz	r4, 800bc50 <__pow5mult+0x48>
 800bc30:	2010      	movs	r0, #16
 800bc32:	f7ff fd87 	bl	800b744 <malloc>
 800bc36:	4602      	mov	r2, r0
 800bc38:	61f8      	str	r0, [r7, #28]
 800bc3a:	b928      	cbnz	r0, 800bc48 <__pow5mult+0x40>
 800bc3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb4 <__pow5mult+0xac>)
 800bc3e:	481e      	ldr	r0, [pc, #120]	@ (800bcb8 <__pow5mult+0xb0>)
 800bc40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc44:	f000 fbea 	bl	800c41c <__assert_func>
 800bc48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc4c:	6004      	str	r4, [r0, #0]
 800bc4e:	60c4      	str	r4, [r0, #12]
 800bc50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc58:	b94c      	cbnz	r4, 800bc6e <__pow5mult+0x66>
 800bc5a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc5e:	4638      	mov	r0, r7
 800bc60:	f7ff ff1a 	bl	800ba98 <__i2b>
 800bc64:	2300      	movs	r3, #0
 800bc66:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	6003      	str	r3, [r0, #0]
 800bc6e:	f04f 0900 	mov.w	r9, #0
 800bc72:	07eb      	lsls	r3, r5, #31
 800bc74:	d50a      	bpl.n	800bc8c <__pow5mult+0x84>
 800bc76:	4631      	mov	r1, r6
 800bc78:	4622      	mov	r2, r4
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	f7ff ff22 	bl	800bac4 <__multiply>
 800bc80:	4631      	mov	r1, r6
 800bc82:	4680      	mov	r8, r0
 800bc84:	4638      	mov	r0, r7
 800bc86:	f7ff fe53 	bl	800b930 <_Bfree>
 800bc8a:	4646      	mov	r6, r8
 800bc8c:	106d      	asrs	r5, r5, #1
 800bc8e:	d00b      	beq.n	800bca8 <__pow5mult+0xa0>
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	b938      	cbnz	r0, 800bca4 <__pow5mult+0x9c>
 800bc94:	4622      	mov	r2, r4
 800bc96:	4621      	mov	r1, r4
 800bc98:	4638      	mov	r0, r7
 800bc9a:	f7ff ff13 	bl	800bac4 <__multiply>
 800bc9e:	6020      	str	r0, [r4, #0]
 800bca0:	f8c0 9000 	str.w	r9, [r0]
 800bca4:	4604      	mov	r4, r0
 800bca6:	e7e4      	b.n	800bc72 <__pow5mult+0x6a>
 800bca8:	4630      	mov	r0, r6
 800bcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcae:	bf00      	nop
 800bcb0:	0800f1fc 	.word	0x0800f1fc
 800bcb4:	0800f0c9 	.word	0x0800f0c9
 800bcb8:	0800f149 	.word	0x0800f149

0800bcbc <__lshift>:
 800bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	6849      	ldr	r1, [r1, #4]
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	4607      	mov	r7, r0
 800bcce:	4691      	mov	r9, r2
 800bcd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcd4:	f108 0601 	add.w	r6, r8, #1
 800bcd8:	42b3      	cmp	r3, r6
 800bcda:	db0b      	blt.n	800bcf4 <__lshift+0x38>
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7ff fde7 	bl	800b8b0 <_Balloc>
 800bce2:	4605      	mov	r5, r0
 800bce4:	b948      	cbnz	r0, 800bcfa <__lshift+0x3e>
 800bce6:	4602      	mov	r2, r0
 800bce8:	4b28      	ldr	r3, [pc, #160]	@ (800bd8c <__lshift+0xd0>)
 800bcea:	4829      	ldr	r0, [pc, #164]	@ (800bd90 <__lshift+0xd4>)
 800bcec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcf0:	f000 fb94 	bl	800c41c <__assert_func>
 800bcf4:	3101      	adds	r1, #1
 800bcf6:	005b      	lsls	r3, r3, #1
 800bcf8:	e7ee      	b.n	800bcd8 <__lshift+0x1c>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f100 0114 	add.w	r1, r0, #20
 800bd00:	f100 0210 	add.w	r2, r0, #16
 800bd04:	4618      	mov	r0, r3
 800bd06:	4553      	cmp	r3, sl
 800bd08:	db33      	blt.n	800bd72 <__lshift+0xb6>
 800bd0a:	6920      	ldr	r0, [r4, #16]
 800bd0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd10:	f104 0314 	add.w	r3, r4, #20
 800bd14:	f019 091f 	ands.w	r9, r9, #31
 800bd18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bd20:	d02b      	beq.n	800bd7a <__lshift+0xbe>
 800bd22:	f1c9 0e20 	rsb	lr, r9, #32
 800bd26:	468a      	mov	sl, r1
 800bd28:	2200      	movs	r2, #0
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bd30:	4310      	orrs	r0, r2
 800bd32:	f84a 0b04 	str.w	r0, [sl], #4
 800bd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd3a:	459c      	cmp	ip, r3
 800bd3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd40:	d8f3      	bhi.n	800bd2a <__lshift+0x6e>
 800bd42:	ebac 0304 	sub.w	r3, ip, r4
 800bd46:	3b15      	subs	r3, #21
 800bd48:	f023 0303 	bic.w	r3, r3, #3
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	f104 0015 	add.w	r0, r4, #21
 800bd52:	4560      	cmp	r0, ip
 800bd54:	bf88      	it	hi
 800bd56:	2304      	movhi	r3, #4
 800bd58:	50ca      	str	r2, [r1, r3]
 800bd5a:	b10a      	cbz	r2, 800bd60 <__lshift+0xa4>
 800bd5c:	f108 0602 	add.w	r6, r8, #2
 800bd60:	3e01      	subs	r6, #1
 800bd62:	4638      	mov	r0, r7
 800bd64:	612e      	str	r6, [r5, #16]
 800bd66:	4621      	mov	r1, r4
 800bd68:	f7ff fde2 	bl	800b930 <_Bfree>
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd76:	3301      	adds	r3, #1
 800bd78:	e7c5      	b.n	800bd06 <__lshift+0x4a>
 800bd7a:	3904      	subs	r1, #4
 800bd7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd84:	459c      	cmp	ip, r3
 800bd86:	d8f9      	bhi.n	800bd7c <__lshift+0xc0>
 800bd88:	e7ea      	b.n	800bd60 <__lshift+0xa4>
 800bd8a:	bf00      	nop
 800bd8c:	0800f138 	.word	0x0800f138
 800bd90:	0800f149 	.word	0x0800f149

0800bd94 <__mcmp>:
 800bd94:	690a      	ldr	r2, [r1, #16]
 800bd96:	4603      	mov	r3, r0
 800bd98:	6900      	ldr	r0, [r0, #16]
 800bd9a:	1a80      	subs	r0, r0, r2
 800bd9c:	b530      	push	{r4, r5, lr}
 800bd9e:	d10e      	bne.n	800bdbe <__mcmp+0x2a>
 800bda0:	3314      	adds	r3, #20
 800bda2:	3114      	adds	r1, #20
 800bda4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bda8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bdac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bdb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bdb4:	4295      	cmp	r5, r2
 800bdb6:	d003      	beq.n	800bdc0 <__mcmp+0x2c>
 800bdb8:	d205      	bcs.n	800bdc6 <__mcmp+0x32>
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	bd30      	pop	{r4, r5, pc}
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	d3f3      	bcc.n	800bdac <__mcmp+0x18>
 800bdc4:	e7fb      	b.n	800bdbe <__mcmp+0x2a>
 800bdc6:	2001      	movs	r0, #1
 800bdc8:	e7f9      	b.n	800bdbe <__mcmp+0x2a>
	...

0800bdcc <__mdiff>:
 800bdcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd0:	4689      	mov	r9, r1
 800bdd2:	4606      	mov	r6, r0
 800bdd4:	4611      	mov	r1, r2
 800bdd6:	4648      	mov	r0, r9
 800bdd8:	4614      	mov	r4, r2
 800bdda:	f7ff ffdb 	bl	800bd94 <__mcmp>
 800bdde:	1e05      	subs	r5, r0, #0
 800bde0:	d112      	bne.n	800be08 <__mdiff+0x3c>
 800bde2:	4629      	mov	r1, r5
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff fd63 	bl	800b8b0 <_Balloc>
 800bdea:	4602      	mov	r2, r0
 800bdec:	b928      	cbnz	r0, 800bdfa <__mdiff+0x2e>
 800bdee:	4b3f      	ldr	r3, [pc, #252]	@ (800beec <__mdiff+0x120>)
 800bdf0:	f240 2137 	movw	r1, #567	@ 0x237
 800bdf4:	483e      	ldr	r0, [pc, #248]	@ (800bef0 <__mdiff+0x124>)
 800bdf6:	f000 fb11 	bl	800c41c <__assert_func>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be00:	4610      	mov	r0, r2
 800be02:	b003      	add	sp, #12
 800be04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be08:	bfbc      	itt	lt
 800be0a:	464b      	movlt	r3, r9
 800be0c:	46a1      	movlt	r9, r4
 800be0e:	4630      	mov	r0, r6
 800be10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800be14:	bfba      	itte	lt
 800be16:	461c      	movlt	r4, r3
 800be18:	2501      	movlt	r5, #1
 800be1a:	2500      	movge	r5, #0
 800be1c:	f7ff fd48 	bl	800b8b0 <_Balloc>
 800be20:	4602      	mov	r2, r0
 800be22:	b918      	cbnz	r0, 800be2c <__mdiff+0x60>
 800be24:	4b31      	ldr	r3, [pc, #196]	@ (800beec <__mdiff+0x120>)
 800be26:	f240 2145 	movw	r1, #581	@ 0x245
 800be2a:	e7e3      	b.n	800bdf4 <__mdiff+0x28>
 800be2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800be30:	6926      	ldr	r6, [r4, #16]
 800be32:	60c5      	str	r5, [r0, #12]
 800be34:	f109 0310 	add.w	r3, r9, #16
 800be38:	f109 0514 	add.w	r5, r9, #20
 800be3c:	f104 0e14 	add.w	lr, r4, #20
 800be40:	f100 0b14 	add.w	fp, r0, #20
 800be44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	46d9      	mov	r9, fp
 800be50:	f04f 0c00 	mov.w	ip, #0
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	fa1f f38a 	uxth.w	r3, sl
 800be64:	4619      	mov	r1, r3
 800be66:	b283      	uxth	r3, r0
 800be68:	1acb      	subs	r3, r1, r3
 800be6a:	0c00      	lsrs	r0, r0, #16
 800be6c:	4463      	add	r3, ip
 800be6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be76:	b29b      	uxth	r3, r3
 800be78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be7c:	4576      	cmp	r6, lr
 800be7e:	f849 3b04 	str.w	r3, [r9], #4
 800be82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be86:	d8e5      	bhi.n	800be54 <__mdiff+0x88>
 800be88:	1b33      	subs	r3, r6, r4
 800be8a:	3b15      	subs	r3, #21
 800be8c:	f023 0303 	bic.w	r3, r3, #3
 800be90:	3415      	adds	r4, #21
 800be92:	3304      	adds	r3, #4
 800be94:	42a6      	cmp	r6, r4
 800be96:	bf38      	it	cc
 800be98:	2304      	movcc	r3, #4
 800be9a:	441d      	add	r5, r3
 800be9c:	445b      	add	r3, fp
 800be9e:	461e      	mov	r6, r3
 800bea0:	462c      	mov	r4, r5
 800bea2:	4544      	cmp	r4, r8
 800bea4:	d30e      	bcc.n	800bec4 <__mdiff+0xf8>
 800bea6:	f108 0103 	add.w	r1, r8, #3
 800beaa:	1b49      	subs	r1, r1, r5
 800beac:	f021 0103 	bic.w	r1, r1, #3
 800beb0:	3d03      	subs	r5, #3
 800beb2:	45a8      	cmp	r8, r5
 800beb4:	bf38      	it	cc
 800beb6:	2100      	movcc	r1, #0
 800beb8:	440b      	add	r3, r1
 800beba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bebe:	b191      	cbz	r1, 800bee6 <__mdiff+0x11a>
 800bec0:	6117      	str	r7, [r2, #16]
 800bec2:	e79d      	b.n	800be00 <__mdiff+0x34>
 800bec4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bec8:	46e6      	mov	lr, ip
 800beca:	0c08      	lsrs	r0, r1, #16
 800becc:	fa1c fc81 	uxtah	ip, ip, r1
 800bed0:	4471      	add	r1, lr
 800bed2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bed6:	b289      	uxth	r1, r1
 800bed8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bedc:	f846 1b04 	str.w	r1, [r6], #4
 800bee0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bee4:	e7dd      	b.n	800bea2 <__mdiff+0xd6>
 800bee6:	3f01      	subs	r7, #1
 800bee8:	e7e7      	b.n	800beba <__mdiff+0xee>
 800beea:	bf00      	nop
 800beec:	0800f138 	.word	0x0800f138
 800bef0:	0800f149 	.word	0x0800f149

0800bef4 <__d2b>:
 800bef4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bef8:	460f      	mov	r7, r1
 800befa:	2101      	movs	r1, #1
 800befc:	ec59 8b10 	vmov	r8, r9, d0
 800bf00:	4616      	mov	r6, r2
 800bf02:	f7ff fcd5 	bl	800b8b0 <_Balloc>
 800bf06:	4604      	mov	r4, r0
 800bf08:	b930      	cbnz	r0, 800bf18 <__d2b+0x24>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	4b23      	ldr	r3, [pc, #140]	@ (800bf9c <__d2b+0xa8>)
 800bf0e:	4824      	ldr	r0, [pc, #144]	@ (800bfa0 <__d2b+0xac>)
 800bf10:	f240 310f 	movw	r1, #783	@ 0x30f
 800bf14:	f000 fa82 	bl	800c41c <__assert_func>
 800bf18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf20:	b10d      	cbz	r5, 800bf26 <__d2b+0x32>
 800bf22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	f1b8 0300 	subs.w	r3, r8, #0
 800bf2c:	d023      	beq.n	800bf76 <__d2b+0x82>
 800bf2e:	4668      	mov	r0, sp
 800bf30:	9300      	str	r3, [sp, #0]
 800bf32:	f7ff fd84 	bl	800ba3e <__lo0bits>
 800bf36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bf3a:	b1d0      	cbz	r0, 800bf72 <__d2b+0x7e>
 800bf3c:	f1c0 0320 	rsb	r3, r0, #32
 800bf40:	fa02 f303 	lsl.w	r3, r2, r3
 800bf44:	430b      	orrs	r3, r1
 800bf46:	40c2      	lsrs	r2, r0
 800bf48:	6163      	str	r3, [r4, #20]
 800bf4a:	9201      	str	r2, [sp, #4]
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	61a3      	str	r3, [r4, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bf0c      	ite	eq
 800bf54:	2201      	moveq	r2, #1
 800bf56:	2202      	movne	r2, #2
 800bf58:	6122      	str	r2, [r4, #16]
 800bf5a:	b1a5      	cbz	r5, 800bf86 <__d2b+0x92>
 800bf5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf60:	4405      	add	r5, r0
 800bf62:	603d      	str	r5, [r7, #0]
 800bf64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf68:	6030      	str	r0, [r6, #0]
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	b003      	add	sp, #12
 800bf6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf72:	6161      	str	r1, [r4, #20]
 800bf74:	e7ea      	b.n	800bf4c <__d2b+0x58>
 800bf76:	a801      	add	r0, sp, #4
 800bf78:	f7ff fd61 	bl	800ba3e <__lo0bits>
 800bf7c:	9b01      	ldr	r3, [sp, #4]
 800bf7e:	6163      	str	r3, [r4, #20]
 800bf80:	3020      	adds	r0, #32
 800bf82:	2201      	movs	r2, #1
 800bf84:	e7e8      	b.n	800bf58 <__d2b+0x64>
 800bf86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf8e:	6038      	str	r0, [r7, #0]
 800bf90:	6918      	ldr	r0, [r3, #16]
 800bf92:	f7ff fd35 	bl	800ba00 <__hi0bits>
 800bf96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf9a:	e7e5      	b.n	800bf68 <__d2b+0x74>
 800bf9c:	0800f138 	.word	0x0800f138
 800bfa0:	0800f149 	.word	0x0800f149

0800bfa4 <__ssputs_r>:
 800bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	688e      	ldr	r6, [r1, #8]
 800bfaa:	461f      	mov	r7, r3
 800bfac:	42be      	cmp	r6, r7
 800bfae:	680b      	ldr	r3, [r1, #0]
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	4690      	mov	r8, r2
 800bfb6:	d82d      	bhi.n	800c014 <__ssputs_r+0x70>
 800bfb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfc0:	d026      	beq.n	800c010 <__ssputs_r+0x6c>
 800bfc2:	6965      	ldr	r5, [r4, #20]
 800bfc4:	6909      	ldr	r1, [r1, #16]
 800bfc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfca:	eba3 0901 	sub.w	r9, r3, r1
 800bfce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfd2:	1c7b      	adds	r3, r7, #1
 800bfd4:	444b      	add	r3, r9
 800bfd6:	106d      	asrs	r5, r5, #1
 800bfd8:	429d      	cmp	r5, r3
 800bfda:	bf38      	it	cc
 800bfdc:	461d      	movcc	r5, r3
 800bfde:	0553      	lsls	r3, r2, #21
 800bfe0:	d527      	bpl.n	800c032 <__ssputs_r+0x8e>
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	f7ff fbd8 	bl	800b798 <_malloc_r>
 800bfe8:	4606      	mov	r6, r0
 800bfea:	b360      	cbz	r0, 800c046 <__ssputs_r+0xa2>
 800bfec:	6921      	ldr	r1, [r4, #16]
 800bfee:	464a      	mov	r2, r9
 800bff0:	f000 fa06 	bl	800c400 <memcpy>
 800bff4:	89a3      	ldrh	r3, [r4, #12]
 800bff6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bffe:	81a3      	strh	r3, [r4, #12]
 800c000:	6126      	str	r6, [r4, #16]
 800c002:	6165      	str	r5, [r4, #20]
 800c004:	444e      	add	r6, r9
 800c006:	eba5 0509 	sub.w	r5, r5, r9
 800c00a:	6026      	str	r6, [r4, #0]
 800c00c:	60a5      	str	r5, [r4, #8]
 800c00e:	463e      	mov	r6, r7
 800c010:	42be      	cmp	r6, r7
 800c012:	d900      	bls.n	800c016 <__ssputs_r+0x72>
 800c014:	463e      	mov	r6, r7
 800c016:	6820      	ldr	r0, [r4, #0]
 800c018:	4632      	mov	r2, r6
 800c01a:	4641      	mov	r1, r8
 800c01c:	f000 f9c6 	bl	800c3ac <memmove>
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	1b9b      	subs	r3, r3, r6
 800c024:	60a3      	str	r3, [r4, #8]
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	4433      	add	r3, r6
 800c02a:	6023      	str	r3, [r4, #0]
 800c02c:	2000      	movs	r0, #0
 800c02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c032:	462a      	mov	r2, r5
 800c034:	f000 fa36 	bl	800c4a4 <_realloc_r>
 800c038:	4606      	mov	r6, r0
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d1e0      	bne.n	800c000 <__ssputs_r+0x5c>
 800c03e:	6921      	ldr	r1, [r4, #16]
 800c040:	4650      	mov	r0, sl
 800c042:	f7ff fb35 	bl	800b6b0 <_free_r>
 800c046:	230c      	movs	r3, #12
 800c048:	f8ca 3000 	str.w	r3, [sl]
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c052:	81a3      	strh	r3, [r4, #12]
 800c054:	f04f 30ff 	mov.w	r0, #4294967295
 800c058:	e7e9      	b.n	800c02e <__ssputs_r+0x8a>
	...

0800c05c <_svfiprintf_r>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	4698      	mov	r8, r3
 800c062:	898b      	ldrh	r3, [r1, #12]
 800c064:	061b      	lsls	r3, r3, #24
 800c066:	b09d      	sub	sp, #116	@ 0x74
 800c068:	4607      	mov	r7, r0
 800c06a:	460d      	mov	r5, r1
 800c06c:	4614      	mov	r4, r2
 800c06e:	d510      	bpl.n	800c092 <_svfiprintf_r+0x36>
 800c070:	690b      	ldr	r3, [r1, #16]
 800c072:	b973      	cbnz	r3, 800c092 <_svfiprintf_r+0x36>
 800c074:	2140      	movs	r1, #64	@ 0x40
 800c076:	f7ff fb8f 	bl	800b798 <_malloc_r>
 800c07a:	6028      	str	r0, [r5, #0]
 800c07c:	6128      	str	r0, [r5, #16]
 800c07e:	b930      	cbnz	r0, 800c08e <_svfiprintf_r+0x32>
 800c080:	230c      	movs	r3, #12
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	b01d      	add	sp, #116	@ 0x74
 800c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08e:	2340      	movs	r3, #64	@ 0x40
 800c090:	616b      	str	r3, [r5, #20]
 800c092:	2300      	movs	r3, #0
 800c094:	9309      	str	r3, [sp, #36]	@ 0x24
 800c096:	2320      	movs	r3, #32
 800c098:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0a0:	2330      	movs	r3, #48	@ 0x30
 800c0a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c240 <_svfiprintf_r+0x1e4>
 800c0a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0aa:	f04f 0901 	mov.w	r9, #1
 800c0ae:	4623      	mov	r3, r4
 800c0b0:	469a      	mov	sl, r3
 800c0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0b6:	b10a      	cbz	r2, 800c0bc <_svfiprintf_r+0x60>
 800c0b8:	2a25      	cmp	r2, #37	@ 0x25
 800c0ba:	d1f9      	bne.n	800c0b0 <_svfiprintf_r+0x54>
 800c0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c0c0:	d00b      	beq.n	800c0da <_svfiprintf_r+0x7e>
 800c0c2:	465b      	mov	r3, fp
 800c0c4:	4622      	mov	r2, r4
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4638      	mov	r0, r7
 800c0ca:	f7ff ff6b 	bl	800bfa4 <__ssputs_r>
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	f000 80a7 	beq.w	800c222 <_svfiprintf_r+0x1c6>
 800c0d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0d6:	445a      	add	r2, fp
 800c0d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0da:	f89a 3000 	ldrb.w	r3, [sl]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 809f 	beq.w	800c222 <_svfiprintf_r+0x1c6>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0ee:	f10a 0a01 	add.w	sl, sl, #1
 800c0f2:	9304      	str	r3, [sp, #16]
 800c0f4:	9307      	str	r3, [sp, #28]
 800c0f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0fc:	4654      	mov	r4, sl
 800c0fe:	2205      	movs	r2, #5
 800c100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c104:	484e      	ldr	r0, [pc, #312]	@ (800c240 <_svfiprintf_r+0x1e4>)
 800c106:	f7f4 f86b 	bl	80001e0 <memchr>
 800c10a:	9a04      	ldr	r2, [sp, #16]
 800c10c:	b9d8      	cbnz	r0, 800c146 <_svfiprintf_r+0xea>
 800c10e:	06d0      	lsls	r0, r2, #27
 800c110:	bf44      	itt	mi
 800c112:	2320      	movmi	r3, #32
 800c114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c118:	0711      	lsls	r1, r2, #28
 800c11a:	bf44      	itt	mi
 800c11c:	232b      	movmi	r3, #43	@ 0x2b
 800c11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c122:	f89a 3000 	ldrb.w	r3, [sl]
 800c126:	2b2a      	cmp	r3, #42	@ 0x2a
 800c128:	d015      	beq.n	800c156 <_svfiprintf_r+0xfa>
 800c12a:	9a07      	ldr	r2, [sp, #28]
 800c12c:	4654      	mov	r4, sl
 800c12e:	2000      	movs	r0, #0
 800c130:	f04f 0c0a 	mov.w	ip, #10
 800c134:	4621      	mov	r1, r4
 800c136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c13a:	3b30      	subs	r3, #48	@ 0x30
 800c13c:	2b09      	cmp	r3, #9
 800c13e:	d94b      	bls.n	800c1d8 <_svfiprintf_r+0x17c>
 800c140:	b1b0      	cbz	r0, 800c170 <_svfiprintf_r+0x114>
 800c142:	9207      	str	r2, [sp, #28]
 800c144:	e014      	b.n	800c170 <_svfiprintf_r+0x114>
 800c146:	eba0 0308 	sub.w	r3, r0, r8
 800c14a:	fa09 f303 	lsl.w	r3, r9, r3
 800c14e:	4313      	orrs	r3, r2
 800c150:	9304      	str	r3, [sp, #16]
 800c152:	46a2      	mov	sl, r4
 800c154:	e7d2      	b.n	800c0fc <_svfiprintf_r+0xa0>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	1d19      	adds	r1, r3, #4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	9103      	str	r1, [sp, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bfbb      	ittet	lt
 800c162:	425b      	neglt	r3, r3
 800c164:	f042 0202 	orrlt.w	r2, r2, #2
 800c168:	9307      	strge	r3, [sp, #28]
 800c16a:	9307      	strlt	r3, [sp, #28]
 800c16c:	bfb8      	it	lt
 800c16e:	9204      	strlt	r2, [sp, #16]
 800c170:	7823      	ldrb	r3, [r4, #0]
 800c172:	2b2e      	cmp	r3, #46	@ 0x2e
 800c174:	d10a      	bne.n	800c18c <_svfiprintf_r+0x130>
 800c176:	7863      	ldrb	r3, [r4, #1]
 800c178:	2b2a      	cmp	r3, #42	@ 0x2a
 800c17a:	d132      	bne.n	800c1e2 <_svfiprintf_r+0x186>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	1d1a      	adds	r2, r3, #4
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	9203      	str	r2, [sp, #12]
 800c184:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c188:	3402      	adds	r4, #2
 800c18a:	9305      	str	r3, [sp, #20]
 800c18c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c250 <_svfiprintf_r+0x1f4>
 800c190:	7821      	ldrb	r1, [r4, #0]
 800c192:	2203      	movs	r2, #3
 800c194:	4650      	mov	r0, sl
 800c196:	f7f4 f823 	bl	80001e0 <memchr>
 800c19a:	b138      	cbz	r0, 800c1ac <_svfiprintf_r+0x150>
 800c19c:	9b04      	ldr	r3, [sp, #16]
 800c19e:	eba0 000a 	sub.w	r0, r0, sl
 800c1a2:	2240      	movs	r2, #64	@ 0x40
 800c1a4:	4082      	lsls	r2, r0
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	3401      	adds	r4, #1
 800c1aa:	9304      	str	r3, [sp, #16]
 800c1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b0:	4824      	ldr	r0, [pc, #144]	@ (800c244 <_svfiprintf_r+0x1e8>)
 800c1b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1b6:	2206      	movs	r2, #6
 800c1b8:	f7f4 f812 	bl	80001e0 <memchr>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d036      	beq.n	800c22e <_svfiprintf_r+0x1d2>
 800c1c0:	4b21      	ldr	r3, [pc, #132]	@ (800c248 <_svfiprintf_r+0x1ec>)
 800c1c2:	bb1b      	cbnz	r3, 800c20c <_svfiprintf_r+0x1b0>
 800c1c4:	9b03      	ldr	r3, [sp, #12]
 800c1c6:	3307      	adds	r3, #7
 800c1c8:	f023 0307 	bic.w	r3, r3, #7
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	9303      	str	r3, [sp, #12]
 800c1d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1d2:	4433      	add	r3, r6
 800c1d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1d6:	e76a      	b.n	800c0ae <_svfiprintf_r+0x52>
 800c1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1dc:	460c      	mov	r4, r1
 800c1de:	2001      	movs	r0, #1
 800c1e0:	e7a8      	b.n	800c134 <_svfiprintf_r+0xd8>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	3401      	adds	r4, #1
 800c1e6:	9305      	str	r3, [sp, #20]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	f04f 0c0a 	mov.w	ip, #10
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1f4:	3a30      	subs	r2, #48	@ 0x30
 800c1f6:	2a09      	cmp	r2, #9
 800c1f8:	d903      	bls.n	800c202 <_svfiprintf_r+0x1a6>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0c6      	beq.n	800c18c <_svfiprintf_r+0x130>
 800c1fe:	9105      	str	r1, [sp, #20]
 800c200:	e7c4      	b.n	800c18c <_svfiprintf_r+0x130>
 800c202:	fb0c 2101 	mla	r1, ip, r1, r2
 800c206:	4604      	mov	r4, r0
 800c208:	2301      	movs	r3, #1
 800c20a:	e7f0      	b.n	800c1ee <_svfiprintf_r+0x192>
 800c20c:	ab03      	add	r3, sp, #12
 800c20e:	9300      	str	r3, [sp, #0]
 800c210:	462a      	mov	r2, r5
 800c212:	4b0e      	ldr	r3, [pc, #56]	@ (800c24c <_svfiprintf_r+0x1f0>)
 800c214:	a904      	add	r1, sp, #16
 800c216:	4638      	mov	r0, r7
 800c218:	f7fd fe7a 	bl	8009f10 <_printf_float>
 800c21c:	1c42      	adds	r2, r0, #1
 800c21e:	4606      	mov	r6, r0
 800c220:	d1d6      	bne.n	800c1d0 <_svfiprintf_r+0x174>
 800c222:	89ab      	ldrh	r3, [r5, #12]
 800c224:	065b      	lsls	r3, r3, #25
 800c226:	f53f af2d 	bmi.w	800c084 <_svfiprintf_r+0x28>
 800c22a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c22c:	e72c      	b.n	800c088 <_svfiprintf_r+0x2c>
 800c22e:	ab03      	add	r3, sp, #12
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	462a      	mov	r2, r5
 800c234:	4b05      	ldr	r3, [pc, #20]	@ (800c24c <_svfiprintf_r+0x1f0>)
 800c236:	a904      	add	r1, sp, #16
 800c238:	4638      	mov	r0, r7
 800c23a:	f7fe f901 	bl	800a440 <_printf_i>
 800c23e:	e7ed      	b.n	800c21c <_svfiprintf_r+0x1c0>
 800c240:	0800f1a2 	.word	0x0800f1a2
 800c244:	0800f1ac 	.word	0x0800f1ac
 800c248:	08009f11 	.word	0x08009f11
 800c24c:	0800bfa5 	.word	0x0800bfa5
 800c250:	0800f1a8 	.word	0x0800f1a8

0800c254 <__sflush_r>:
 800c254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25c:	0716      	lsls	r6, r2, #28
 800c25e:	4605      	mov	r5, r0
 800c260:	460c      	mov	r4, r1
 800c262:	d454      	bmi.n	800c30e <__sflush_r+0xba>
 800c264:	684b      	ldr	r3, [r1, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	dc02      	bgt.n	800c270 <__sflush_r+0x1c>
 800c26a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	dd48      	ble.n	800c302 <__sflush_r+0xae>
 800c270:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c272:	2e00      	cmp	r6, #0
 800c274:	d045      	beq.n	800c302 <__sflush_r+0xae>
 800c276:	2300      	movs	r3, #0
 800c278:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c27c:	682f      	ldr	r7, [r5, #0]
 800c27e:	6a21      	ldr	r1, [r4, #32]
 800c280:	602b      	str	r3, [r5, #0]
 800c282:	d030      	beq.n	800c2e6 <__sflush_r+0x92>
 800c284:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	0759      	lsls	r1, r3, #29
 800c28a:	d505      	bpl.n	800c298 <__sflush_r+0x44>
 800c28c:	6863      	ldr	r3, [r4, #4]
 800c28e:	1ad2      	subs	r2, r2, r3
 800c290:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c292:	b10b      	cbz	r3, 800c298 <__sflush_r+0x44>
 800c294:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c296:	1ad2      	subs	r2, r2, r3
 800c298:	2300      	movs	r3, #0
 800c29a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c29c:	6a21      	ldr	r1, [r4, #32]
 800c29e:	4628      	mov	r0, r5
 800c2a0:	47b0      	blx	r6
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	d106      	bne.n	800c2b6 <__sflush_r+0x62>
 800c2a8:	6829      	ldr	r1, [r5, #0]
 800c2aa:	291d      	cmp	r1, #29
 800c2ac:	d82b      	bhi.n	800c306 <__sflush_r+0xb2>
 800c2ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c358 <__sflush_r+0x104>)
 800c2b0:	40ca      	lsrs	r2, r1
 800c2b2:	07d6      	lsls	r6, r2, #31
 800c2b4:	d527      	bpl.n	800c306 <__sflush_r+0xb2>
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	6062      	str	r2, [r4, #4]
 800c2ba:	04d9      	lsls	r1, r3, #19
 800c2bc:	6922      	ldr	r2, [r4, #16]
 800c2be:	6022      	str	r2, [r4, #0]
 800c2c0:	d504      	bpl.n	800c2cc <__sflush_r+0x78>
 800c2c2:	1c42      	adds	r2, r0, #1
 800c2c4:	d101      	bne.n	800c2ca <__sflush_r+0x76>
 800c2c6:	682b      	ldr	r3, [r5, #0]
 800c2c8:	b903      	cbnz	r3, 800c2cc <__sflush_r+0x78>
 800c2ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800c2cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2ce:	602f      	str	r7, [r5, #0]
 800c2d0:	b1b9      	cbz	r1, 800c302 <__sflush_r+0xae>
 800c2d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c2d6:	4299      	cmp	r1, r3
 800c2d8:	d002      	beq.n	800c2e0 <__sflush_r+0x8c>
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f7ff f9e8 	bl	800b6b0 <_free_r>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c2e4:	e00d      	b.n	800c302 <__sflush_r+0xae>
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	47b0      	blx	r6
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	1c50      	adds	r0, r2, #1
 800c2f0:	d1c9      	bne.n	800c286 <__sflush_r+0x32>
 800c2f2:	682b      	ldr	r3, [r5, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d0c6      	beq.n	800c286 <__sflush_r+0x32>
 800c2f8:	2b1d      	cmp	r3, #29
 800c2fa:	d001      	beq.n	800c300 <__sflush_r+0xac>
 800c2fc:	2b16      	cmp	r3, #22
 800c2fe:	d11e      	bne.n	800c33e <__sflush_r+0xea>
 800c300:	602f      	str	r7, [r5, #0]
 800c302:	2000      	movs	r0, #0
 800c304:	e022      	b.n	800c34c <__sflush_r+0xf8>
 800c306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c30a:	b21b      	sxth	r3, r3
 800c30c:	e01b      	b.n	800c346 <__sflush_r+0xf2>
 800c30e:	690f      	ldr	r7, [r1, #16]
 800c310:	2f00      	cmp	r7, #0
 800c312:	d0f6      	beq.n	800c302 <__sflush_r+0xae>
 800c314:	0793      	lsls	r3, r2, #30
 800c316:	680e      	ldr	r6, [r1, #0]
 800c318:	bf08      	it	eq
 800c31a:	694b      	ldreq	r3, [r1, #20]
 800c31c:	600f      	str	r7, [r1, #0]
 800c31e:	bf18      	it	ne
 800c320:	2300      	movne	r3, #0
 800c322:	eba6 0807 	sub.w	r8, r6, r7
 800c326:	608b      	str	r3, [r1, #8]
 800c328:	f1b8 0f00 	cmp.w	r8, #0
 800c32c:	dde9      	ble.n	800c302 <__sflush_r+0xae>
 800c32e:	6a21      	ldr	r1, [r4, #32]
 800c330:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c332:	4643      	mov	r3, r8
 800c334:	463a      	mov	r2, r7
 800c336:	4628      	mov	r0, r5
 800c338:	47b0      	blx	r6
 800c33a:	2800      	cmp	r0, #0
 800c33c:	dc08      	bgt.n	800c350 <__sflush_r+0xfc>
 800c33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	f04f 30ff 	mov.w	r0, #4294967295
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	4407      	add	r7, r0
 800c352:	eba8 0800 	sub.w	r8, r8, r0
 800c356:	e7e7      	b.n	800c328 <__sflush_r+0xd4>
 800c358:	20400001 	.word	0x20400001

0800c35c <_fflush_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	690b      	ldr	r3, [r1, #16]
 800c360:	4605      	mov	r5, r0
 800c362:	460c      	mov	r4, r1
 800c364:	b913      	cbnz	r3, 800c36c <_fflush_r+0x10>
 800c366:	2500      	movs	r5, #0
 800c368:	4628      	mov	r0, r5
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	b118      	cbz	r0, 800c376 <_fflush_r+0x1a>
 800c36e:	6a03      	ldr	r3, [r0, #32]
 800c370:	b90b      	cbnz	r3, 800c376 <_fflush_r+0x1a>
 800c372:	f7fe fa0f 	bl	800a794 <__sinit>
 800c376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d0f3      	beq.n	800c366 <_fflush_r+0xa>
 800c37e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c380:	07d0      	lsls	r0, r2, #31
 800c382:	d404      	bmi.n	800c38e <_fflush_r+0x32>
 800c384:	0599      	lsls	r1, r3, #22
 800c386:	d402      	bmi.n	800c38e <_fflush_r+0x32>
 800c388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c38a:	f7fe fb36 	bl	800a9fa <__retarget_lock_acquire_recursive>
 800c38e:	4628      	mov	r0, r5
 800c390:	4621      	mov	r1, r4
 800c392:	f7ff ff5f 	bl	800c254 <__sflush_r>
 800c396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c398:	07da      	lsls	r2, r3, #31
 800c39a:	4605      	mov	r5, r0
 800c39c:	d4e4      	bmi.n	800c368 <_fflush_r+0xc>
 800c39e:	89a3      	ldrh	r3, [r4, #12]
 800c3a0:	059b      	lsls	r3, r3, #22
 800c3a2:	d4e1      	bmi.n	800c368 <_fflush_r+0xc>
 800c3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c3a6:	f7fe fb29 	bl	800a9fc <__retarget_lock_release_recursive>
 800c3aa:	e7dd      	b.n	800c368 <_fflush_r+0xc>

0800c3ac <memmove>:
 800c3ac:	4288      	cmp	r0, r1
 800c3ae:	b510      	push	{r4, lr}
 800c3b0:	eb01 0402 	add.w	r4, r1, r2
 800c3b4:	d902      	bls.n	800c3bc <memmove+0x10>
 800c3b6:	4284      	cmp	r4, r0
 800c3b8:	4623      	mov	r3, r4
 800c3ba:	d807      	bhi.n	800c3cc <memmove+0x20>
 800c3bc:	1e43      	subs	r3, r0, #1
 800c3be:	42a1      	cmp	r1, r4
 800c3c0:	d008      	beq.n	800c3d4 <memmove+0x28>
 800c3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3ca:	e7f8      	b.n	800c3be <memmove+0x12>
 800c3cc:	4402      	add	r2, r0
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	428a      	cmp	r2, r1
 800c3d2:	d100      	bne.n	800c3d6 <memmove+0x2a>
 800c3d4:	bd10      	pop	{r4, pc}
 800c3d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3de:	e7f7      	b.n	800c3d0 <memmove+0x24>

0800c3e0 <_sbrk_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d06      	ldr	r5, [pc, #24]	@ (800c3fc <_sbrk_r+0x1c>)
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	4608      	mov	r0, r1
 800c3ea:	602b      	str	r3, [r5, #0]
 800c3ec:	f7f9 f8da 	bl	80055a4 <_sbrk>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_sbrk_r+0x1a>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_sbrk_r+0x1a>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20001618 	.word	0x20001618

0800c400 <memcpy>:
 800c400:	440a      	add	r2, r1
 800c402:	4291      	cmp	r1, r2
 800c404:	f100 33ff 	add.w	r3, r0, #4294967295
 800c408:	d100      	bne.n	800c40c <memcpy+0xc>
 800c40a:	4770      	bx	lr
 800c40c:	b510      	push	{r4, lr}
 800c40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c412:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c416:	4291      	cmp	r1, r2
 800c418:	d1f9      	bne.n	800c40e <memcpy+0xe>
 800c41a:	bd10      	pop	{r4, pc}

0800c41c <__assert_func>:
 800c41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c41e:	4614      	mov	r4, r2
 800c420:	461a      	mov	r2, r3
 800c422:	4b09      	ldr	r3, [pc, #36]	@ (800c448 <__assert_func+0x2c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4605      	mov	r5, r0
 800c428:	68d8      	ldr	r0, [r3, #12]
 800c42a:	b14c      	cbz	r4, 800c440 <__assert_func+0x24>
 800c42c:	4b07      	ldr	r3, [pc, #28]	@ (800c44c <__assert_func+0x30>)
 800c42e:	9100      	str	r1, [sp, #0]
 800c430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c434:	4906      	ldr	r1, [pc, #24]	@ (800c450 <__assert_func+0x34>)
 800c436:	462b      	mov	r3, r5
 800c438:	f000 f870 	bl	800c51c <fiprintf>
 800c43c:	f000 f880 	bl	800c540 <abort>
 800c440:	4b04      	ldr	r3, [pc, #16]	@ (800c454 <__assert_func+0x38>)
 800c442:	461c      	mov	r4, r3
 800c444:	e7f3      	b.n	800c42e <__assert_func+0x12>
 800c446:	bf00      	nop
 800c448:	20000020 	.word	0x20000020
 800c44c:	0800f1bd 	.word	0x0800f1bd
 800c450:	0800f1ca 	.word	0x0800f1ca
 800c454:	0800f1f8 	.word	0x0800f1f8

0800c458 <_calloc_r>:
 800c458:	b570      	push	{r4, r5, r6, lr}
 800c45a:	fba1 5402 	umull	r5, r4, r1, r2
 800c45e:	b934      	cbnz	r4, 800c46e <_calloc_r+0x16>
 800c460:	4629      	mov	r1, r5
 800c462:	f7ff f999 	bl	800b798 <_malloc_r>
 800c466:	4606      	mov	r6, r0
 800c468:	b928      	cbnz	r0, 800c476 <_calloc_r+0x1e>
 800c46a:	4630      	mov	r0, r6
 800c46c:	bd70      	pop	{r4, r5, r6, pc}
 800c46e:	220c      	movs	r2, #12
 800c470:	6002      	str	r2, [r0, #0]
 800c472:	2600      	movs	r6, #0
 800c474:	e7f9      	b.n	800c46a <_calloc_r+0x12>
 800c476:	462a      	mov	r2, r5
 800c478:	4621      	mov	r1, r4
 800c47a:	f7fe fa41 	bl	800a900 <memset>
 800c47e:	e7f4      	b.n	800c46a <_calloc_r+0x12>

0800c480 <__ascii_mbtowc>:
 800c480:	b082      	sub	sp, #8
 800c482:	b901      	cbnz	r1, 800c486 <__ascii_mbtowc+0x6>
 800c484:	a901      	add	r1, sp, #4
 800c486:	b142      	cbz	r2, 800c49a <__ascii_mbtowc+0x1a>
 800c488:	b14b      	cbz	r3, 800c49e <__ascii_mbtowc+0x1e>
 800c48a:	7813      	ldrb	r3, [r2, #0]
 800c48c:	600b      	str	r3, [r1, #0]
 800c48e:	7812      	ldrb	r2, [r2, #0]
 800c490:	1e10      	subs	r0, r2, #0
 800c492:	bf18      	it	ne
 800c494:	2001      	movne	r0, #1
 800c496:	b002      	add	sp, #8
 800c498:	4770      	bx	lr
 800c49a:	4610      	mov	r0, r2
 800c49c:	e7fb      	b.n	800c496 <__ascii_mbtowc+0x16>
 800c49e:	f06f 0001 	mvn.w	r0, #1
 800c4a2:	e7f8      	b.n	800c496 <__ascii_mbtowc+0x16>

0800c4a4 <_realloc_r>:
 800c4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a8:	4607      	mov	r7, r0
 800c4aa:	4614      	mov	r4, r2
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	b921      	cbnz	r1, 800c4ba <_realloc_r+0x16>
 800c4b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	f7ff b96f 	b.w	800b798 <_malloc_r>
 800c4ba:	b92a      	cbnz	r2, 800c4c8 <_realloc_r+0x24>
 800c4bc:	f7ff f8f8 	bl	800b6b0 <_free_r>
 800c4c0:	4625      	mov	r5, r4
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c8:	f000 f841 	bl	800c54e <_malloc_usable_size_r>
 800c4cc:	4284      	cmp	r4, r0
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	d802      	bhi.n	800c4d8 <_realloc_r+0x34>
 800c4d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4d6:	d8f4      	bhi.n	800c4c2 <_realloc_r+0x1e>
 800c4d8:	4621      	mov	r1, r4
 800c4da:	4638      	mov	r0, r7
 800c4dc:	f7ff f95c 	bl	800b798 <_malloc_r>
 800c4e0:	4680      	mov	r8, r0
 800c4e2:	b908      	cbnz	r0, 800c4e8 <_realloc_r+0x44>
 800c4e4:	4645      	mov	r5, r8
 800c4e6:	e7ec      	b.n	800c4c2 <_realloc_r+0x1e>
 800c4e8:	42b4      	cmp	r4, r6
 800c4ea:	4622      	mov	r2, r4
 800c4ec:	4629      	mov	r1, r5
 800c4ee:	bf28      	it	cs
 800c4f0:	4632      	movcs	r2, r6
 800c4f2:	f7ff ff85 	bl	800c400 <memcpy>
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7ff f8d9 	bl	800b6b0 <_free_r>
 800c4fe:	e7f1      	b.n	800c4e4 <_realloc_r+0x40>

0800c500 <__ascii_wctomb>:
 800c500:	4603      	mov	r3, r0
 800c502:	4608      	mov	r0, r1
 800c504:	b141      	cbz	r1, 800c518 <__ascii_wctomb+0x18>
 800c506:	2aff      	cmp	r2, #255	@ 0xff
 800c508:	d904      	bls.n	800c514 <__ascii_wctomb+0x14>
 800c50a:	228a      	movs	r2, #138	@ 0x8a
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	f04f 30ff 	mov.w	r0, #4294967295
 800c512:	4770      	bx	lr
 800c514:	700a      	strb	r2, [r1, #0]
 800c516:	2001      	movs	r0, #1
 800c518:	4770      	bx	lr
	...

0800c51c <fiprintf>:
 800c51c:	b40e      	push	{r1, r2, r3}
 800c51e:	b503      	push	{r0, r1, lr}
 800c520:	4601      	mov	r1, r0
 800c522:	ab03      	add	r3, sp, #12
 800c524:	4805      	ldr	r0, [pc, #20]	@ (800c53c <fiprintf+0x20>)
 800c526:	f853 2b04 	ldr.w	r2, [r3], #4
 800c52a:	6800      	ldr	r0, [r0, #0]
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	f000 f83f 	bl	800c5b0 <_vfiprintf_r>
 800c532:	b002      	add	sp, #8
 800c534:	f85d eb04 	ldr.w	lr, [sp], #4
 800c538:	b003      	add	sp, #12
 800c53a:	4770      	bx	lr
 800c53c:	20000020 	.word	0x20000020

0800c540 <abort>:
 800c540:	b508      	push	{r3, lr}
 800c542:	2006      	movs	r0, #6
 800c544:	f000 fa08 	bl	800c958 <raise>
 800c548:	2001      	movs	r0, #1
 800c54a:	f7f8 ffb3 	bl	80054b4 <_exit>

0800c54e <_malloc_usable_size_r>:
 800c54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c552:	1f18      	subs	r0, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfbc      	itt	lt
 800c558:	580b      	ldrlt	r3, [r1, r0]
 800c55a:	18c0      	addlt	r0, r0, r3
 800c55c:	4770      	bx	lr

0800c55e <__sfputc_r>:
 800c55e:	6893      	ldr	r3, [r2, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	b410      	push	{r4}
 800c566:	6093      	str	r3, [r2, #8]
 800c568:	da08      	bge.n	800c57c <__sfputc_r+0x1e>
 800c56a:	6994      	ldr	r4, [r2, #24]
 800c56c:	42a3      	cmp	r3, r4
 800c56e:	db01      	blt.n	800c574 <__sfputc_r+0x16>
 800c570:	290a      	cmp	r1, #10
 800c572:	d103      	bne.n	800c57c <__sfputc_r+0x1e>
 800c574:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c578:	f000 b932 	b.w	800c7e0 <__swbuf_r>
 800c57c:	6813      	ldr	r3, [r2, #0]
 800c57e:	1c58      	adds	r0, r3, #1
 800c580:	6010      	str	r0, [r2, #0]
 800c582:	7019      	strb	r1, [r3, #0]
 800c584:	4608      	mov	r0, r1
 800c586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <__sfputs_r>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	4606      	mov	r6, r0
 800c590:	460f      	mov	r7, r1
 800c592:	4614      	mov	r4, r2
 800c594:	18d5      	adds	r5, r2, r3
 800c596:	42ac      	cmp	r4, r5
 800c598:	d101      	bne.n	800c59e <__sfputs_r+0x12>
 800c59a:	2000      	movs	r0, #0
 800c59c:	e007      	b.n	800c5ae <__sfputs_r+0x22>
 800c59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a2:	463a      	mov	r2, r7
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	f7ff ffda 	bl	800c55e <__sfputc_r>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d1f3      	bne.n	800c596 <__sfputs_r+0xa>
 800c5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5b0 <_vfiprintf_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	460d      	mov	r5, r1
 800c5b6:	b09d      	sub	sp, #116	@ 0x74
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	4698      	mov	r8, r3
 800c5bc:	4606      	mov	r6, r0
 800c5be:	b118      	cbz	r0, 800c5c8 <_vfiprintf_r+0x18>
 800c5c0:	6a03      	ldr	r3, [r0, #32]
 800c5c2:	b90b      	cbnz	r3, 800c5c8 <_vfiprintf_r+0x18>
 800c5c4:	f7fe f8e6 	bl	800a794 <__sinit>
 800c5c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5ca:	07d9      	lsls	r1, r3, #31
 800c5cc:	d405      	bmi.n	800c5da <_vfiprintf_r+0x2a>
 800c5ce:	89ab      	ldrh	r3, [r5, #12]
 800c5d0:	059a      	lsls	r2, r3, #22
 800c5d2:	d402      	bmi.n	800c5da <_vfiprintf_r+0x2a>
 800c5d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5d6:	f7fe fa10 	bl	800a9fa <__retarget_lock_acquire_recursive>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	071b      	lsls	r3, r3, #28
 800c5de:	d501      	bpl.n	800c5e4 <_vfiprintf_r+0x34>
 800c5e0:	692b      	ldr	r3, [r5, #16]
 800c5e2:	b99b      	cbnz	r3, 800c60c <_vfiprintf_r+0x5c>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	f000 f938 	bl	800c85c <__swsetup_r>
 800c5ec:	b170      	cbz	r0, 800c60c <_vfiprintf_r+0x5c>
 800c5ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5f0:	07dc      	lsls	r4, r3, #31
 800c5f2:	d504      	bpl.n	800c5fe <_vfiprintf_r+0x4e>
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	b01d      	add	sp, #116	@ 0x74
 800c5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fe:	89ab      	ldrh	r3, [r5, #12]
 800c600:	0598      	lsls	r0, r3, #22
 800c602:	d4f7      	bmi.n	800c5f4 <_vfiprintf_r+0x44>
 800c604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c606:	f7fe f9f9 	bl	800a9fc <__retarget_lock_release_recursive>
 800c60a:	e7f3      	b.n	800c5f4 <_vfiprintf_r+0x44>
 800c60c:	2300      	movs	r3, #0
 800c60e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c610:	2320      	movs	r3, #32
 800c612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c616:	f8cd 800c 	str.w	r8, [sp, #12]
 800c61a:	2330      	movs	r3, #48	@ 0x30
 800c61c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c7cc <_vfiprintf_r+0x21c>
 800c620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c624:	f04f 0901 	mov.w	r9, #1
 800c628:	4623      	mov	r3, r4
 800c62a:	469a      	mov	sl, r3
 800c62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c630:	b10a      	cbz	r2, 800c636 <_vfiprintf_r+0x86>
 800c632:	2a25      	cmp	r2, #37	@ 0x25
 800c634:	d1f9      	bne.n	800c62a <_vfiprintf_r+0x7a>
 800c636:	ebba 0b04 	subs.w	fp, sl, r4
 800c63a:	d00b      	beq.n	800c654 <_vfiprintf_r+0xa4>
 800c63c:	465b      	mov	r3, fp
 800c63e:	4622      	mov	r2, r4
 800c640:	4629      	mov	r1, r5
 800c642:	4630      	mov	r0, r6
 800c644:	f7ff ffa2 	bl	800c58c <__sfputs_r>
 800c648:	3001      	adds	r0, #1
 800c64a:	f000 80a7 	beq.w	800c79c <_vfiprintf_r+0x1ec>
 800c64e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c650:	445a      	add	r2, fp
 800c652:	9209      	str	r2, [sp, #36]	@ 0x24
 800c654:	f89a 3000 	ldrb.w	r3, [sl]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 809f 	beq.w	800c79c <_vfiprintf_r+0x1ec>
 800c65e:	2300      	movs	r3, #0
 800c660:	f04f 32ff 	mov.w	r2, #4294967295
 800c664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c668:	f10a 0a01 	add.w	sl, sl, #1
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c674:	931a      	str	r3, [sp, #104]	@ 0x68
 800c676:	4654      	mov	r4, sl
 800c678:	2205      	movs	r2, #5
 800c67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67e:	4853      	ldr	r0, [pc, #332]	@ (800c7cc <_vfiprintf_r+0x21c>)
 800c680:	f7f3 fdae 	bl	80001e0 <memchr>
 800c684:	9a04      	ldr	r2, [sp, #16]
 800c686:	b9d8      	cbnz	r0, 800c6c0 <_vfiprintf_r+0x110>
 800c688:	06d1      	lsls	r1, r2, #27
 800c68a:	bf44      	itt	mi
 800c68c:	2320      	movmi	r3, #32
 800c68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c692:	0713      	lsls	r3, r2, #28
 800c694:	bf44      	itt	mi
 800c696:	232b      	movmi	r3, #43	@ 0x2b
 800c698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c69c:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6a2:	d015      	beq.n	800c6d0 <_vfiprintf_r+0x120>
 800c6a4:	9a07      	ldr	r2, [sp, #28]
 800c6a6:	4654      	mov	r4, sl
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	f04f 0c0a 	mov.w	ip, #10
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b4:	3b30      	subs	r3, #48	@ 0x30
 800c6b6:	2b09      	cmp	r3, #9
 800c6b8:	d94b      	bls.n	800c752 <_vfiprintf_r+0x1a2>
 800c6ba:	b1b0      	cbz	r0, 800c6ea <_vfiprintf_r+0x13a>
 800c6bc:	9207      	str	r2, [sp, #28]
 800c6be:	e014      	b.n	800c6ea <_vfiprintf_r+0x13a>
 800c6c0:	eba0 0308 	sub.w	r3, r0, r8
 800c6c4:	fa09 f303 	lsl.w	r3, r9, r3
 800c6c8:	4313      	orrs	r3, r2
 800c6ca:	9304      	str	r3, [sp, #16]
 800c6cc:	46a2      	mov	sl, r4
 800c6ce:	e7d2      	b.n	800c676 <_vfiprintf_r+0xc6>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	1d19      	adds	r1, r3, #4
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	9103      	str	r1, [sp, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	bfbb      	ittet	lt
 800c6dc:	425b      	neglt	r3, r3
 800c6de:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e2:	9307      	strge	r3, [sp, #28]
 800c6e4:	9307      	strlt	r3, [sp, #28]
 800c6e6:	bfb8      	it	lt
 800c6e8:	9204      	strlt	r2, [sp, #16]
 800c6ea:	7823      	ldrb	r3, [r4, #0]
 800c6ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6ee:	d10a      	bne.n	800c706 <_vfiprintf_r+0x156>
 800c6f0:	7863      	ldrb	r3, [r4, #1]
 800c6f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6f4:	d132      	bne.n	800c75c <_vfiprintf_r+0x1ac>
 800c6f6:	9b03      	ldr	r3, [sp, #12]
 800c6f8:	1d1a      	adds	r2, r3, #4
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	9203      	str	r2, [sp, #12]
 800c6fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c702:	3402      	adds	r4, #2
 800c704:	9305      	str	r3, [sp, #20]
 800c706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7dc <_vfiprintf_r+0x22c>
 800c70a:	7821      	ldrb	r1, [r4, #0]
 800c70c:	2203      	movs	r2, #3
 800c70e:	4650      	mov	r0, sl
 800c710:	f7f3 fd66 	bl	80001e0 <memchr>
 800c714:	b138      	cbz	r0, 800c726 <_vfiprintf_r+0x176>
 800c716:	9b04      	ldr	r3, [sp, #16]
 800c718:	eba0 000a 	sub.w	r0, r0, sl
 800c71c:	2240      	movs	r2, #64	@ 0x40
 800c71e:	4082      	lsls	r2, r0
 800c720:	4313      	orrs	r3, r2
 800c722:	3401      	adds	r4, #1
 800c724:	9304      	str	r3, [sp, #16]
 800c726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72a:	4829      	ldr	r0, [pc, #164]	@ (800c7d0 <_vfiprintf_r+0x220>)
 800c72c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c730:	2206      	movs	r2, #6
 800c732:	f7f3 fd55 	bl	80001e0 <memchr>
 800c736:	2800      	cmp	r0, #0
 800c738:	d03f      	beq.n	800c7ba <_vfiprintf_r+0x20a>
 800c73a:	4b26      	ldr	r3, [pc, #152]	@ (800c7d4 <_vfiprintf_r+0x224>)
 800c73c:	bb1b      	cbnz	r3, 800c786 <_vfiprintf_r+0x1d6>
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	3307      	adds	r3, #7
 800c742:	f023 0307 	bic.w	r3, r3, #7
 800c746:	3308      	adds	r3, #8
 800c748:	9303      	str	r3, [sp, #12]
 800c74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74c:	443b      	add	r3, r7
 800c74e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c750:	e76a      	b.n	800c628 <_vfiprintf_r+0x78>
 800c752:	fb0c 3202 	mla	r2, ip, r2, r3
 800c756:	460c      	mov	r4, r1
 800c758:	2001      	movs	r0, #1
 800c75a:	e7a8      	b.n	800c6ae <_vfiprintf_r+0xfe>
 800c75c:	2300      	movs	r3, #0
 800c75e:	3401      	adds	r4, #1
 800c760:	9305      	str	r3, [sp, #20]
 800c762:	4619      	mov	r1, r3
 800c764:	f04f 0c0a 	mov.w	ip, #10
 800c768:	4620      	mov	r0, r4
 800c76a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c76e:	3a30      	subs	r2, #48	@ 0x30
 800c770:	2a09      	cmp	r2, #9
 800c772:	d903      	bls.n	800c77c <_vfiprintf_r+0x1cc>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d0c6      	beq.n	800c706 <_vfiprintf_r+0x156>
 800c778:	9105      	str	r1, [sp, #20]
 800c77a:	e7c4      	b.n	800c706 <_vfiprintf_r+0x156>
 800c77c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c780:	4604      	mov	r4, r0
 800c782:	2301      	movs	r3, #1
 800c784:	e7f0      	b.n	800c768 <_vfiprintf_r+0x1b8>
 800c786:	ab03      	add	r3, sp, #12
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	462a      	mov	r2, r5
 800c78c:	4b12      	ldr	r3, [pc, #72]	@ (800c7d8 <_vfiprintf_r+0x228>)
 800c78e:	a904      	add	r1, sp, #16
 800c790:	4630      	mov	r0, r6
 800c792:	f7fd fbbd 	bl	8009f10 <_printf_float>
 800c796:	4607      	mov	r7, r0
 800c798:	1c78      	adds	r0, r7, #1
 800c79a:	d1d6      	bne.n	800c74a <_vfiprintf_r+0x19a>
 800c79c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c79e:	07d9      	lsls	r1, r3, #31
 800c7a0:	d405      	bmi.n	800c7ae <_vfiprintf_r+0x1fe>
 800c7a2:	89ab      	ldrh	r3, [r5, #12]
 800c7a4:	059a      	lsls	r2, r3, #22
 800c7a6:	d402      	bmi.n	800c7ae <_vfiprintf_r+0x1fe>
 800c7a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7aa:	f7fe f927 	bl	800a9fc <__retarget_lock_release_recursive>
 800c7ae:	89ab      	ldrh	r3, [r5, #12]
 800c7b0:	065b      	lsls	r3, r3, #25
 800c7b2:	f53f af1f 	bmi.w	800c5f4 <_vfiprintf_r+0x44>
 800c7b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7b8:	e71e      	b.n	800c5f8 <_vfiprintf_r+0x48>
 800c7ba:	ab03      	add	r3, sp, #12
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	462a      	mov	r2, r5
 800c7c0:	4b05      	ldr	r3, [pc, #20]	@ (800c7d8 <_vfiprintf_r+0x228>)
 800c7c2:	a904      	add	r1, sp, #16
 800c7c4:	4630      	mov	r0, r6
 800c7c6:	f7fd fe3b 	bl	800a440 <_printf_i>
 800c7ca:	e7e4      	b.n	800c796 <_vfiprintf_r+0x1e6>
 800c7cc:	0800f1a2 	.word	0x0800f1a2
 800c7d0:	0800f1ac 	.word	0x0800f1ac
 800c7d4:	08009f11 	.word	0x08009f11
 800c7d8:	0800c58d 	.word	0x0800c58d
 800c7dc:	0800f1a8 	.word	0x0800f1a8

0800c7e0 <__swbuf_r>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	460e      	mov	r6, r1
 800c7e4:	4614      	mov	r4, r2
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	b118      	cbz	r0, 800c7f2 <__swbuf_r+0x12>
 800c7ea:	6a03      	ldr	r3, [r0, #32]
 800c7ec:	b90b      	cbnz	r3, 800c7f2 <__swbuf_r+0x12>
 800c7ee:	f7fd ffd1 	bl	800a794 <__sinit>
 800c7f2:	69a3      	ldr	r3, [r4, #24]
 800c7f4:	60a3      	str	r3, [r4, #8]
 800c7f6:	89a3      	ldrh	r3, [r4, #12]
 800c7f8:	071a      	lsls	r2, r3, #28
 800c7fa:	d501      	bpl.n	800c800 <__swbuf_r+0x20>
 800c7fc:	6923      	ldr	r3, [r4, #16]
 800c7fe:	b943      	cbnz	r3, 800c812 <__swbuf_r+0x32>
 800c800:	4621      	mov	r1, r4
 800c802:	4628      	mov	r0, r5
 800c804:	f000 f82a 	bl	800c85c <__swsetup_r>
 800c808:	b118      	cbz	r0, 800c812 <__swbuf_r+0x32>
 800c80a:	f04f 37ff 	mov.w	r7, #4294967295
 800c80e:	4638      	mov	r0, r7
 800c810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	6922      	ldr	r2, [r4, #16]
 800c816:	1a98      	subs	r0, r3, r2
 800c818:	6963      	ldr	r3, [r4, #20]
 800c81a:	b2f6      	uxtb	r6, r6
 800c81c:	4283      	cmp	r3, r0
 800c81e:	4637      	mov	r7, r6
 800c820:	dc05      	bgt.n	800c82e <__swbuf_r+0x4e>
 800c822:	4621      	mov	r1, r4
 800c824:	4628      	mov	r0, r5
 800c826:	f7ff fd99 	bl	800c35c <_fflush_r>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d1ed      	bne.n	800c80a <__swbuf_r+0x2a>
 800c82e:	68a3      	ldr	r3, [r4, #8]
 800c830:	3b01      	subs	r3, #1
 800c832:	60a3      	str	r3, [r4, #8]
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	6022      	str	r2, [r4, #0]
 800c83a:	701e      	strb	r6, [r3, #0]
 800c83c:	6962      	ldr	r2, [r4, #20]
 800c83e:	1c43      	adds	r3, r0, #1
 800c840:	429a      	cmp	r2, r3
 800c842:	d004      	beq.n	800c84e <__swbuf_r+0x6e>
 800c844:	89a3      	ldrh	r3, [r4, #12]
 800c846:	07db      	lsls	r3, r3, #31
 800c848:	d5e1      	bpl.n	800c80e <__swbuf_r+0x2e>
 800c84a:	2e0a      	cmp	r6, #10
 800c84c:	d1df      	bne.n	800c80e <__swbuf_r+0x2e>
 800c84e:	4621      	mov	r1, r4
 800c850:	4628      	mov	r0, r5
 800c852:	f7ff fd83 	bl	800c35c <_fflush_r>
 800c856:	2800      	cmp	r0, #0
 800c858:	d0d9      	beq.n	800c80e <__swbuf_r+0x2e>
 800c85a:	e7d6      	b.n	800c80a <__swbuf_r+0x2a>

0800c85c <__swsetup_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4b29      	ldr	r3, [pc, #164]	@ (800c904 <__swsetup_r+0xa8>)
 800c860:	4605      	mov	r5, r0
 800c862:	6818      	ldr	r0, [r3, #0]
 800c864:	460c      	mov	r4, r1
 800c866:	b118      	cbz	r0, 800c870 <__swsetup_r+0x14>
 800c868:	6a03      	ldr	r3, [r0, #32]
 800c86a:	b90b      	cbnz	r3, 800c870 <__swsetup_r+0x14>
 800c86c:	f7fd ff92 	bl	800a794 <__sinit>
 800c870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c874:	0719      	lsls	r1, r3, #28
 800c876:	d422      	bmi.n	800c8be <__swsetup_r+0x62>
 800c878:	06da      	lsls	r2, r3, #27
 800c87a:	d407      	bmi.n	800c88c <__swsetup_r+0x30>
 800c87c:	2209      	movs	r2, #9
 800c87e:	602a      	str	r2, [r5, #0]
 800c880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c884:	81a3      	strh	r3, [r4, #12]
 800c886:	f04f 30ff 	mov.w	r0, #4294967295
 800c88a:	e033      	b.n	800c8f4 <__swsetup_r+0x98>
 800c88c:	0758      	lsls	r0, r3, #29
 800c88e:	d512      	bpl.n	800c8b6 <__swsetup_r+0x5a>
 800c890:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c892:	b141      	cbz	r1, 800c8a6 <__swsetup_r+0x4a>
 800c894:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c898:	4299      	cmp	r1, r3
 800c89a:	d002      	beq.n	800c8a2 <__swsetup_r+0x46>
 800c89c:	4628      	mov	r0, r5
 800c89e:	f7fe ff07 	bl	800b6b0 <_free_r>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8a6:	89a3      	ldrh	r3, [r4, #12]
 800c8a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	6063      	str	r3, [r4, #4]
 800c8b2:	6923      	ldr	r3, [r4, #16]
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	89a3      	ldrh	r3, [r4, #12]
 800c8b8:	f043 0308 	orr.w	r3, r3, #8
 800c8bc:	81a3      	strh	r3, [r4, #12]
 800c8be:	6923      	ldr	r3, [r4, #16]
 800c8c0:	b94b      	cbnz	r3, 800c8d6 <__swsetup_r+0x7a>
 800c8c2:	89a3      	ldrh	r3, [r4, #12]
 800c8c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8cc:	d003      	beq.n	800c8d6 <__swsetup_r+0x7a>
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	f000 f883 	bl	800c9dc <__smakebuf_r>
 800c8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8da:	f013 0201 	ands.w	r2, r3, #1
 800c8de:	d00a      	beq.n	800c8f6 <__swsetup_r+0x9a>
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	60a2      	str	r2, [r4, #8]
 800c8e4:	6962      	ldr	r2, [r4, #20]
 800c8e6:	4252      	negs	r2, r2
 800c8e8:	61a2      	str	r2, [r4, #24]
 800c8ea:	6922      	ldr	r2, [r4, #16]
 800c8ec:	b942      	cbnz	r2, 800c900 <__swsetup_r+0xa4>
 800c8ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c8f2:	d1c5      	bne.n	800c880 <__swsetup_r+0x24>
 800c8f4:	bd38      	pop	{r3, r4, r5, pc}
 800c8f6:	0799      	lsls	r1, r3, #30
 800c8f8:	bf58      	it	pl
 800c8fa:	6962      	ldrpl	r2, [r4, #20]
 800c8fc:	60a2      	str	r2, [r4, #8]
 800c8fe:	e7f4      	b.n	800c8ea <__swsetup_r+0x8e>
 800c900:	2000      	movs	r0, #0
 800c902:	e7f7      	b.n	800c8f4 <__swsetup_r+0x98>
 800c904:	20000020 	.word	0x20000020

0800c908 <_raise_r>:
 800c908:	291f      	cmp	r1, #31
 800c90a:	b538      	push	{r3, r4, r5, lr}
 800c90c:	4605      	mov	r5, r0
 800c90e:	460c      	mov	r4, r1
 800c910:	d904      	bls.n	800c91c <_raise_r+0x14>
 800c912:	2316      	movs	r3, #22
 800c914:	6003      	str	r3, [r0, #0]
 800c916:	f04f 30ff 	mov.w	r0, #4294967295
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c91e:	b112      	cbz	r2, 800c926 <_raise_r+0x1e>
 800c920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c924:	b94b      	cbnz	r3, 800c93a <_raise_r+0x32>
 800c926:	4628      	mov	r0, r5
 800c928:	f000 f830 	bl	800c98c <_getpid_r>
 800c92c:	4622      	mov	r2, r4
 800c92e:	4601      	mov	r1, r0
 800c930:	4628      	mov	r0, r5
 800c932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c936:	f000 b817 	b.w	800c968 <_kill_r>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d00a      	beq.n	800c954 <_raise_r+0x4c>
 800c93e:	1c59      	adds	r1, r3, #1
 800c940:	d103      	bne.n	800c94a <_raise_r+0x42>
 800c942:	2316      	movs	r3, #22
 800c944:	6003      	str	r3, [r0, #0]
 800c946:	2001      	movs	r0, #1
 800c948:	e7e7      	b.n	800c91a <_raise_r+0x12>
 800c94a:	2100      	movs	r1, #0
 800c94c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c950:	4620      	mov	r0, r4
 800c952:	4798      	blx	r3
 800c954:	2000      	movs	r0, #0
 800c956:	e7e0      	b.n	800c91a <_raise_r+0x12>

0800c958 <raise>:
 800c958:	4b02      	ldr	r3, [pc, #8]	@ (800c964 <raise+0xc>)
 800c95a:	4601      	mov	r1, r0
 800c95c:	6818      	ldr	r0, [r3, #0]
 800c95e:	f7ff bfd3 	b.w	800c908 <_raise_r>
 800c962:	bf00      	nop
 800c964:	20000020 	.word	0x20000020

0800c968 <_kill_r>:
 800c968:	b538      	push	{r3, r4, r5, lr}
 800c96a:	4d07      	ldr	r5, [pc, #28]	@ (800c988 <_kill_r+0x20>)
 800c96c:	2300      	movs	r3, #0
 800c96e:	4604      	mov	r4, r0
 800c970:	4608      	mov	r0, r1
 800c972:	4611      	mov	r1, r2
 800c974:	602b      	str	r3, [r5, #0]
 800c976:	f7f8 fd8d 	bl	8005494 <_kill>
 800c97a:	1c43      	adds	r3, r0, #1
 800c97c:	d102      	bne.n	800c984 <_kill_r+0x1c>
 800c97e:	682b      	ldr	r3, [r5, #0]
 800c980:	b103      	cbz	r3, 800c984 <_kill_r+0x1c>
 800c982:	6023      	str	r3, [r4, #0]
 800c984:	bd38      	pop	{r3, r4, r5, pc}
 800c986:	bf00      	nop
 800c988:	20001618 	.word	0x20001618

0800c98c <_getpid_r>:
 800c98c:	f7f8 bd7a 	b.w	8005484 <_getpid>

0800c990 <__swhatbuf_r>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	460c      	mov	r4, r1
 800c994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c998:	2900      	cmp	r1, #0
 800c99a:	b096      	sub	sp, #88	@ 0x58
 800c99c:	4615      	mov	r5, r2
 800c99e:	461e      	mov	r6, r3
 800c9a0:	da0d      	bge.n	800c9be <__swhatbuf_r+0x2e>
 800c9a2:	89a3      	ldrh	r3, [r4, #12]
 800c9a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c9a8:	f04f 0100 	mov.w	r1, #0
 800c9ac:	bf14      	ite	ne
 800c9ae:	2340      	movne	r3, #64	@ 0x40
 800c9b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	6031      	str	r1, [r6, #0]
 800c9b8:	602b      	str	r3, [r5, #0]
 800c9ba:	b016      	add	sp, #88	@ 0x58
 800c9bc:	bd70      	pop	{r4, r5, r6, pc}
 800c9be:	466a      	mov	r2, sp
 800c9c0:	f000 f848 	bl	800ca54 <_fstat_r>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	dbec      	blt.n	800c9a2 <__swhatbuf_r+0x12>
 800c9c8:	9901      	ldr	r1, [sp, #4]
 800c9ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c9ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c9d2:	4259      	negs	r1, r3
 800c9d4:	4159      	adcs	r1, r3
 800c9d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c9da:	e7eb      	b.n	800c9b4 <__swhatbuf_r+0x24>

0800c9dc <__smakebuf_r>:
 800c9dc:	898b      	ldrh	r3, [r1, #12]
 800c9de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9e0:	079d      	lsls	r5, r3, #30
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	d507      	bpl.n	800c9f8 <__smakebuf_r+0x1c>
 800c9e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	6123      	str	r3, [r4, #16]
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	6163      	str	r3, [r4, #20]
 800c9f4:	b003      	add	sp, #12
 800c9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f8:	ab01      	add	r3, sp, #4
 800c9fa:	466a      	mov	r2, sp
 800c9fc:	f7ff ffc8 	bl	800c990 <__swhatbuf_r>
 800ca00:	9f00      	ldr	r7, [sp, #0]
 800ca02:	4605      	mov	r5, r0
 800ca04:	4639      	mov	r1, r7
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7fe fec6 	bl	800b798 <_malloc_r>
 800ca0c:	b948      	cbnz	r0, 800ca22 <__smakebuf_r+0x46>
 800ca0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca12:	059a      	lsls	r2, r3, #22
 800ca14:	d4ee      	bmi.n	800c9f4 <__smakebuf_r+0x18>
 800ca16:	f023 0303 	bic.w	r3, r3, #3
 800ca1a:	f043 0302 	orr.w	r3, r3, #2
 800ca1e:	81a3      	strh	r3, [r4, #12]
 800ca20:	e7e2      	b.n	800c9e8 <__smakebuf_r+0xc>
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	6020      	str	r0, [r4, #0]
 800ca26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca2a:	81a3      	strh	r3, [r4, #12]
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca32:	b15b      	cbz	r3, 800ca4c <__smakebuf_r+0x70>
 800ca34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f000 f81d 	bl	800ca78 <_isatty_r>
 800ca3e:	b128      	cbz	r0, 800ca4c <__smakebuf_r+0x70>
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	f023 0303 	bic.w	r3, r3, #3
 800ca46:	f043 0301 	orr.w	r3, r3, #1
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	431d      	orrs	r5, r3
 800ca50:	81a5      	strh	r5, [r4, #12]
 800ca52:	e7cf      	b.n	800c9f4 <__smakebuf_r+0x18>

0800ca54 <_fstat_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4d07      	ldr	r5, [pc, #28]	@ (800ca74 <_fstat_r+0x20>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	4611      	mov	r1, r2
 800ca60:	602b      	str	r3, [r5, #0]
 800ca62:	f7f8 fd77 	bl	8005554 <_fstat>
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d102      	bne.n	800ca70 <_fstat_r+0x1c>
 800ca6a:	682b      	ldr	r3, [r5, #0]
 800ca6c:	b103      	cbz	r3, 800ca70 <_fstat_r+0x1c>
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	bd38      	pop	{r3, r4, r5, pc}
 800ca72:	bf00      	nop
 800ca74:	20001618 	.word	0x20001618

0800ca78 <_isatty_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4d06      	ldr	r5, [pc, #24]	@ (800ca94 <_isatty_r+0x1c>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4608      	mov	r0, r1
 800ca82:	602b      	str	r3, [r5, #0]
 800ca84:	f7f8 fd76 	bl	8005574 <_isatty>
 800ca88:	1c43      	adds	r3, r0, #1
 800ca8a:	d102      	bne.n	800ca92 <_isatty_r+0x1a>
 800ca8c:	682b      	ldr	r3, [r5, #0]
 800ca8e:	b103      	cbz	r3, 800ca92 <_isatty_r+0x1a>
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
 800ca94:	20001618 	.word	0x20001618

0800ca98 <_init>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	bf00      	nop
 800ca9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca9e:	bc08      	pop	{r3}
 800caa0:	469e      	mov	lr, r3
 800caa2:	4770      	bx	lr

0800caa4 <_fini>:
 800caa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caa6:	bf00      	nop
 800caa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800caaa:	bc08      	pop	{r3}
 800caac:	469e      	mov	lr, r3
 800caae:	4770      	bx	lr

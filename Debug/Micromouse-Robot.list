
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fdc  0800ac28  0800ac28  0000bc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc04  0800cc04  0000e1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc04  0800cc04  0000dc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc0c  0800cc0c  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc0c  0800cc0c  0000dc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc10  0800cc10  0000dc10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800cc14  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001434  200001e0  0800cdf4  0000e1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001614  0800cdf4  0000e614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016323  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003674  00000000  00000000  00024533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00027ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f96  00000000  00000000  00028f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a76f  00000000  00000000  00029ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001810a  00000000  00000000  0004463d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a001b  00000000  00000000  0005c747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc762  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006258  00000000  00000000  000fc7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00102a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac10 	.word	0x0800ac10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800ac10 	.word	0x0800ac10

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f002 fd11 	bl	8003928 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f004 ff49 	bl	8005de0 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 fce9 	bl	8003928 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f004 fff1 	bl	8005f40 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002c4 	.word	0x200002c4

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f004 ffe4 	bl	8005f40 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002c4 	.word	0x200002c4

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff f94b 	bl	8000280 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	4803      	ldr	r0, [pc, #12]	@ (8001004 <send_bluetooth_message+0x28>)
 8000ff6:	f005 ffdd 	bl	8006fb4 <HAL_UART_Transmit>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200003e4 	.word	0x200003e4

08001008 <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 8001008:	b40f      	push	{r0, r1, r2, r3}
 800100a:	b580      	push	{r7, lr}
 800100c:	b0c2      	sub	sp, #264	@ 0x108
 800100e:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001010:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001018:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800101c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800101e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001026:	f107 0008 	add.w	r0, r7, #8
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001030:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001034:	f007 fd10 	bl	8008a58 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ffcd 	bl	8000fdc <send_bluetooth_message>
}
 8001042:	bf00      	nop
 8001044:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001048:	46bd      	mov	sp, r7
 800104a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800104e:	b004      	add	sp, #16
 8001050:	4770      	bx	lr
	...

08001054 <send_championship_stats>:

/**
 * @brief Send championship statistics
 */
void send_championship_stats(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🏆 CHAMPIONSHIP STATISTICS 🏆\r\n");
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <send_championship_stats+0x34>)
 800105a:	f7ff ffbf 	bl	8000fdc <send_bluetooth_message>
    send_bluetooth_printf("Algorithm: Flood Fill + Championship Heuristics\r\n");
 800105e:	480b      	ldr	r0, [pc, #44]	@ (800108c <send_championship_stats+0x38>)
 8001060:	f7ff ffd2 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("MCU: STM32F411CEU6 @ 84MHz\r\n");
 8001064:	480a      	ldr	r0, [pc, #40]	@ (8001090 <send_championship_stats+0x3c>)
 8001066:	f7ff ffcf 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("Sensors: 4x TEFT4300 IR + MPU9250 Gyro\r\n");
 800106a:	480a      	ldr	r0, [pc, #40]	@ (8001094 <send_championship_stats+0x40>)
 800106c:	f7ff ffcc 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("Motors: DRV8833 H-Bridge with Encoders\r\n");
 8001070:	4809      	ldr	r0, [pc, #36]	@ (8001098 <send_championship_stats+0x44>)
 8001072:	f7ff ffc9 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("International Standard: IEEE Micromouse Compliant\r\n");
 8001076:	4809      	ldr	r0, [pc, #36]	@ (800109c <send_championship_stats+0x48>)
 8001078:	f7ff ffc6 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_message("====================================\r\n");
 800107c:	4808      	ldr	r0, [pc, #32]	@ (80010a0 <send_championship_stats+0x4c>)
 800107e:	f7ff ffad 	bl	8000fdc <send_bluetooth_message>
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	0800aec4 	.word	0x0800aec4
 800108c:	0800aeec 	.word	0x0800aeec
 8001090:	0800af20 	.word	0x0800af20
 8001094:	0800af40 	.word	0x0800af40
 8001098:	0800af6c 	.word	0x0800af6c
 800109c:	0800af98 	.word	0x0800af98
 80010a0:	0800afcc 	.word	0x0800afcc

080010a4 <reset_heading_pid>:
}

/**
 * @brief Reset heading PID state
 */
static void reset_heading_pid(void) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    yaw_deg = 0.0f;
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <reset_heading_pid+0x28>)
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
    yaw_err_i = 0.0f;
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <reset_heading_pid+0x2c>)
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
    yaw_err_prev = 0.0f;
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <reset_heading_pid+0x30>)
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
    send_bluetooth_message("Heading PID reset\r\n");
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <reset_heading_pid+0x34>)
 80010c2:	f7ff ff8b 	bl	8000fdc <send_bluetooth_message>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000200 	.word	0x20000200
 80010d0:	20000204 	.word	0x20000204
 80010d4:	20000208 	.word	0x20000208
 80010d8:	0800aff4 	.word	0x0800aff4

080010dc <set_heading_pid_gains>:
}

/**
 * @brief Set heading PID gains for tuning
 */
void set_heading_pid_gains(float kp, float ki, float kd) {
 80010dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010e0:	b088      	sub	sp, #32
 80010e2:	af04      	add	r7, sp, #16
 80010e4:	ed87 0a03 	vstr	s0, [r7, #12]
 80010e8:	edc7 0a02 	vstr	s1, [r7, #8]
 80010ec:	ed87 1a01 	vstr	s2, [r7, #4]
    Kp_yaw = kp;
 80010f0:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <set_heading_pid_gains+0x64>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6013      	str	r3, [r2, #0]
    Ki_yaw = ki;
 80010f6:	4a13      	ldr	r2, [pc, #76]	@ (8001144 <set_heading_pid_gains+0x68>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	6013      	str	r3, [r2, #0]
    Kd_yaw = kd;
 80010fc:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <set_heading_pid_gains+0x6c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
    reset_heading_pid(); // Reset state when gains change
 8001102:	f7ff ffcf 	bl	80010a4 <reset_heading_pid>
    send_bluetooth_printf("Heading PID updated: Kp=%.2f, Ki=%.3f, Kd=%.2f\r\n", kp, ki, kd);
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff fa26 	bl	8000558 <__aeabi_f2d>
 800110c:	4680      	mov	r8, r0
 800110e:	4689      	mov	r9, r1
 8001110:	68b8      	ldr	r0, [r7, #8]
 8001112:	f7ff fa21 	bl	8000558 <__aeabi_f2d>
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fa1c 	bl	8000558 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001128:	e9cd 4500 	strd	r4, r5, [sp]
 800112c:	4642      	mov	r2, r8
 800112e:	464b      	mov	r3, r9
 8001130:	4806      	ldr	r0, [pc, #24]	@ (800114c <set_heading_pid_gains+0x70>)
 8001132:	f7ff ff69 	bl	8001008 <send_bluetooth_printf>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	200001fc 	.word	0x200001fc
 8001148:	20000004 	.word	0x20000004
 800114c:	0800b18c 	.word	0x0800b18c

08001150 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001160:	b2db      	uxtb	r3, r3
 8001162:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800116e:	4817      	ldr	r0, [pc, #92]	@ (80011cc <mpu9250_read_register+0x7c>)
 8001170:	f003 fb18 	bl	80047a4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8001174:	f107 010d 	add.w	r1, r7, #13
 8001178:	2364      	movs	r3, #100	@ 0x64
 800117a:	2201      	movs	r2, #1
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <mpu9250_read_register+0x80>)
 800117e:	f004 f83e 	bl	80051fe <HAL_SPI_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	2364      	movs	r3, #100	@ 0x64
 800118c:	2201      	movs	r2, #1
 800118e:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <mpu9250_read_register+0x80>)
 8001190:	f004 f979 	bl	8005486 <HAL_SPI_Receive>
 8001194:	4603      	mov	r3, r0
 8001196:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800119e:	480b      	ldr	r0, [pc, #44]	@ (80011cc <mpu9250_read_register+0x7c>)
 80011a0:	f003 fb00 	bl	80047a4 <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <mpu9250_read_register+0x60>
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 80011b0:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <mpu9250_read_register+0x84>)
 80011b2:	f7ff ff13 	bl	8000fdc <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 80011b6:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <mpu9250_read_register+0x88>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80011bc:	23ff      	movs	r3, #255	@ 0xff
 80011be:	e000      	b.n	80011c2 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80011c0:	7b3b      	ldrb	r3, [r7, #12]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020400 	.word	0x40020400
 80011d0:	2000026c 	.word	0x2000026c
 80011d4:	0800b428 	.word	0x0800b428
 80011d8:	2000020c 	.word	0x2000020c

080011dc <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	71fb      	strb	r3, [r7, #7]
 80011e8:	4613      	mov	r3, r2
 80011ea:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	733b      	strb	r3, [r7, #12]
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fa:	4811      	ldr	r0, [pc, #68]	@ (8001240 <mpu9250_write_register+0x64>)
 80011fc:	f003 fad2 	bl	80047a4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 8001200:	f107 010c 	add.w	r1, r7, #12
 8001204:	2364      	movs	r3, #100	@ 0x64
 8001206:	2202      	movs	r2, #2
 8001208:	480e      	ldr	r0, [pc, #56]	@ (8001244 <mpu9250_write_register+0x68>)
 800120a:	f003 fff8 	bl	80051fe <HAL_SPI_Transmit>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001218:	4809      	ldr	r0, [pc, #36]	@ (8001240 <mpu9250_write_register+0x64>)
 800121a:	f003 fac3 	bl	80047a4 <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <mpu9250_write_register+0x6c>)
 8001226:	f7ff fed9 	bl	8000fdc <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <mpu9250_write_register+0x70>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8001230:	2001      	movs	r0, #1
 8001232:	f002 fb79 	bl	8003928 <HAL_Delay>
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40020400 	.word	0x40020400
 8001244:	2000026c 	.word	0x2000026c
 8001248:	0800b44c 	.word	0x0800b44c
 800124c:	2000020c 	.word	0x2000020c

08001250 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 8001256:	483c      	ldr	r0, [pc, #240]	@ (8001348 <mpu9250_init+0xf8>)
 8001258:	f7ff fec0 	bl	8000fdc <send_bluetooth_message>
    HAL_Delay(200);
 800125c:	20c8      	movs	r0, #200	@ 0xc8
 800125e:	f002 fb63 	bl	8003928 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8001262:	2180      	movs	r1, #128	@ 0x80
 8001264:	206b      	movs	r0, #107	@ 0x6b
 8001266:	f7ff ffb9 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800126a:	20fa      	movs	r0, #250	@ 0xfa
 800126c:	f002 fb5c 	bl	8003928 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8001270:	2100      	movs	r1, #0
 8001272:	206b      	movs	r0, #107	@ 0x6b
 8001274:	f7ff ffb2 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(50);
 8001278:	2032      	movs	r0, #50	@ 0x32
 800127a:	f002 fb55 	bl	8003928 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 800127e:	2101      	movs	r1, #1
 8001280:	206b      	movs	r0, #107	@ 0x6b
 8001282:	f7ff ffab 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(50);
 8001286:	2032      	movs	r0, #50	@ 0x32
 8001288:	f002 fb4e 	bl	8003928 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 800128c:	2100      	movs	r1, #0
 800128e:	206c      	movs	r0, #108	@ 0x6c
 8001290:	f7ff ffa4 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(10);
 8001294:	200a      	movs	r0, #10
 8001296:	f002 fb47 	bl	8003928 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 800129a:	206a      	movs	r0, #106	@ 0x6a
 800129c:	f7ff ff58 	bl	8001150 <mpu9250_read_register>
 80012a0:	4603      	mov	r3, r0
 80012a2:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4619      	mov	r1, r3
 80012b0:	206a      	movs	r0, #106	@ 0x6a
 80012b2:	f7ff ff93 	bl	80011dc <mpu9250_write_register>
     HAL_Delay(10);
 80012b6:	200a      	movs	r0, #10
 80012b8:	f002 fb36 	bl	8003928 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80012bc:	2104      	movs	r1, #4
 80012be:	2019      	movs	r0, #25
 80012c0:	f7ff ff8c 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f002 fb2f 	bl	8003928 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80012ca:	2102      	movs	r1, #2
 80012cc:	201a      	movs	r0, #26
 80012ce:	f7ff ff85 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f002 fb28 	bl	8003928 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 80012d8:	2108      	movs	r1, #8
 80012da:	201b      	movs	r0, #27
 80012dc:	f7ff ff7e 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(10);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f002 fb21 	bl	8003928 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 80012e6:	2108      	movs	r1, #8
 80012e8:	201c      	movs	r0, #28
 80012ea:	f7ff ff77 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(10);
 80012ee:	200a      	movs	r0, #10
 80012f0:	f002 fb1a 	bl	8003928 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 80012f4:	2102      	movs	r1, #2
 80012f6:	201d      	movs	r0, #29
 80012f8:	f7ff ff70 	bl	80011dc <mpu9250_write_register>
    HAL_Delay(10);
 80012fc:	200a      	movs	r0, #10
 80012fe:	f002 fb13 	bl	8003928 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 8001302:	2075      	movs	r0, #117	@ 0x75
 8001304:	f7ff ff24 	bl	8001150 <mpu9250_read_register>
 8001308:	4603      	mov	r3, r0
 800130a:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	4619      	mov	r1, r3
 8001310:	480e      	ldr	r0, [pc, #56]	@ (800134c <mpu9250_init+0xfc>)
 8001312:	f7ff fe79 	bl	8001008 <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b70      	cmp	r3, #112	@ 0x70
 800131a:	d009      	beq.n	8001330 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	4619      	mov	r1, r3
 8001320:	480b      	ldr	r0, [pc, #44]	@ (8001350 <mpu9250_init+0x100>)
 8001322:	f7ff fe71 	bl	8001008 <send_bluetooth_printf>
        mpu9250_initialized=false;
 8001326:	4b0b      	ldr	r3, [pc, #44]	@ (8001354 <mpu9250_init+0x104>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
        return false;
 800132c:	2300      	movs	r3, #0
 800132e:	e006      	b.n	800133e <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8001330:	4809      	ldr	r0, [pc, #36]	@ (8001358 <mpu9250_init+0x108>)
 8001332:	f7ff fe53 	bl	8000fdc <send_bluetooth_message>
    mpu9250_initialized=true;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <mpu9250_init+0x104>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
    return true;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	0800b474 	.word	0x0800b474
 800134c:	0800b4a0 	.word	0x0800b4a0
 8001350:	0800b4b4 	.word	0x0800b4b4
 8001354:	2000020c 	.word	0x2000020c
 8001358:	0800b4dc 	.word	0x0800b4dc

0800135c <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 800135c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001360:	b088      	sub	sp, #32
 8001362:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8001364:	4b4e      	ldr	r3, [pc, #312]	@ (80014a0 <mpu9250_calibrate_bias+0x144>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8001372:	484c      	ldr	r0, [pc, #304]	@ (80014a4 <mpu9250_calibrate_bias+0x148>)
 8001374:	f7ff fe32 	bl	8000fdc <send_bluetooth_message>
        return;
 8001378:	e08e      	b.n	8001498 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 800137a:	484b      	ldr	r0, [pc, #300]	@ (80014a8 <mpu9250_calibrate_bias+0x14c>)
 800137c:	f7ff fe2e 	bl	8000fdc <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8001380:	4b4a      	ldr	r3, [pc, #296]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 8001382:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001386:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	e02e      	b.n	80013fe <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 80013a0:	f000 f896 	bl	80014d0 <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 80013a4:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <mpu9250_calibrate_bias+0x154>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ba:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 80013be:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <mpu9250_calibrate_bias+0x154>)
 80013c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <mpu9250_calibrate_bias+0x154>)
 80013da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80013f2:	2003      	movs	r0, #3
 80013f4:	f002 fa98 	bl	8003928 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8cb      	bhi.n	80013a0 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 8001408:	4b28      	ldr	r3, [pc, #160]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001414:	edd7 6a03 	vldr	s13, [r7, #12]
 8001418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 800141e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8001422:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800142e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 8001438:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 800143c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001448:	edd7 6a01 	vldr	s13, [r7, #4]
 800144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 8001452:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 8001458:	2201      	movs	r2, #1
 800145a:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 800145e:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f879 	bl	8000558 <__aeabi_f2d>
 8001466:	4680      	mov	r8, r0
 8001468:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800146a:	4b10      	ldr	r3, [pc, #64]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 800146c:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f872 	bl	8000558 <__aeabi_f2d>
 8001474:	4604      	mov	r4, r0
 8001476:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <mpu9250_calibrate_bias+0x150>)
 800147a:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f86b 	bl	8000558 <__aeabi_f2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800148a:	e9cd 4500 	strd	r4, r5, [sp]
 800148e:	4642      	mov	r2, r8
 8001490:	464b      	mov	r3, r9
 8001492:	4808      	ldr	r0, [pc, #32]	@ (80014b4 <mpu9250_calibrate_bias+0x158>)
 8001494:	f7ff fdb8 	bl	8001008 <send_bluetooth_printf>
}
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014a0:	2000020c 	.word	0x2000020c
 80014a4:	0800b4f0 	.word	0x0800b4f0
 80014a8:	0800b51c 	.word	0x0800b51c
 80014ac:	20000210 	.word	0x20000210
 80014b0:	20001450 	.word	0x20001450
 80014b4:	0800b550 	.word	0x0800b550

080014b8 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 80014bc:	4b03      	ldr	r3, [pc, #12]	@ (80014cc <mpu9250_is_initialized+0x14>)
 80014be:	781b      	ldrb	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000020c 	.word	0x2000020c

080014d0 <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 80014d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001594 <mpu9250_read_gyro+0xc4>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 80014e4:	482c      	ldr	r0, [pc, #176]	@ (8001598 <mpu9250_read_gyro+0xc8>)
 80014e6:	f7ff fd79 	bl	8000fdc <send_bluetooth_message>
        return;
 80014ea:	e050      	b.n	800158e <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 80014ec:	23c3      	movs	r3, #195	@ 0xc3
 80014ee:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f6:	4829      	ldr	r0, [pc, #164]	@ (800159c <mpu9250_read_gyro+0xcc>)
 80014f8:	f003 f954 	bl	80047a4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80014fc:	1df9      	adds	r1, r7, #7
 80014fe:	2364      	movs	r3, #100	@ 0x64
 8001500:	2201      	movs	r2, #1
 8001502:	4827      	ldr	r0, [pc, #156]	@ (80015a0 <mpu9250_read_gyro+0xd0>)
 8001504:	f003 fe7b 	bl	80051fe <HAL_SPI_Transmit>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001518:	4820      	ldr	r0, [pc, #128]	@ (800159c <mpu9250_read_gyro+0xcc>)
 800151a:	f003 f943 	bl	80047a4 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 800151e:	4821      	ldr	r0, [pc, #132]	@ (80015a4 <mpu9250_read_gyro+0xd4>)
 8001520:	f7ff fd5c 	bl	8000fdc <send_bluetooth_message>
        return;
 8001524:	e033      	b.n	800158e <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001526:	f107 0108 	add.w	r1, r7, #8
 800152a:	2364      	movs	r3, #100	@ 0x64
 800152c:	2206      	movs	r2, #6
 800152e:	481c      	ldr	r0, [pc, #112]	@ (80015a0 <mpu9250_read_gyro+0xd0>)
 8001530:	f003 ffa9 	bl	8005486 <HAL_SPI_Receive>
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800153e:	4817      	ldr	r0, [pc, #92]	@ (800159c <mpu9250_read_gyro+0xcc>)
 8001540:	f003 f930 	bl	80047a4 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 800154a:	4817      	ldr	r0, [pc, #92]	@ (80015a8 <mpu9250_read_gyro+0xd8>)
 800154c:	f7ff fd46 	bl	8000fdc <send_bluetooth_message>
        return;
 8001550:	e01d      	b.n	800158e <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001552:	7a3b      	ldrb	r3, [r7, #8]
 8001554:	b21b      	sxth	r3, r3
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	7a7b      	ldrb	r3, [r7, #9]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21a      	sxth	r2, r3
 8001562:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <mpu9250_read_gyro+0xdc>)
 8001564:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001566:	7abb      	ldrb	r3, [r7, #10]
 8001568:	b21b      	sxth	r3, r3
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <mpu9250_read_gyro+0xdc>)
 8001578:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 800157a:	7b3b      	ldrb	r3, [r7, #12]
 800157c:	b21b      	sxth	r3, r3
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	7b7b      	ldrb	r3, [r7, #13]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21a      	sxth	r2, r3
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <mpu9250_read_gyro+0xdc>)
 800158c:	809a      	strh	r2, [r3, #4]
}
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000020c 	.word	0x2000020c
 8001598:	0800b580 	.word	0x0800b580
 800159c:	40020400 	.word	0x40020400
 80015a0:	2000026c 	.word	0x2000026c
 80015a4:	0800b5b4 	.word	0x0800b5b4
 80015a8:	0800b5d8 	.word	0x0800b5d8
 80015ac:	20001450 	.word	0x20001450

080015b0 <mpu9250_read_accel>:

/**
 * @brief Read raw accelerometer data - FIXED with error checking
 */
void mpu9250_read_accel(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 80015b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <mpu9250_read_accel+0xc4>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <mpu9250_read_accel+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read accel\r\n");
 80015c4:	482c      	ldr	r0, [pc, #176]	@ (8001678 <mpu9250_read_accel+0xc8>)
 80015c6:	f7ff fd09 	bl	8000fdc <send_bluetooth_message>
        return;
 80015ca:	e050      	b.n	800166e <mpu9250_read_accel+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_ACCEL_XOUT_H | 0x80; // Set read bit
 80015cc:	23bb      	movs	r3, #187	@ 0xbb
 80015ce:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015d6:	4829      	ldr	r0, [pc, #164]	@ (800167c <mpu9250_read_accel+0xcc>)
 80015d8:	f003 f8e4 	bl	80047a4 <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80015dc:	1df9      	adds	r1, r7, #7
 80015de:	2364      	movs	r3, #100	@ 0x64
 80015e0:	2201      	movs	r2, #1
 80015e2:	4827      	ldr	r0, [pc, #156]	@ (8001680 <mpu9250_read_accel+0xd0>)
 80015e4:	f003 fe0b 	bl	80051fe <HAL_SPI_Transmit>
 80015e8:	4603      	mov	r3, r0
 80015ea:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <mpu9250_read_accel+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f8:	4820      	ldr	r0, [pc, #128]	@ (800167c <mpu9250_read_accel+0xcc>)
 80015fa:	f003 f8d3 	bl	80047a4 <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in accel read\r\n");
 80015fe:	4821      	ldr	r0, [pc, #132]	@ (8001684 <mpu9250_read_accel+0xd4>)
 8001600:	f7ff fcec 	bl	8000fdc <send_bluetooth_message>
        return;
 8001604:	e033      	b.n	800166e <mpu9250_read_accel+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8001606:	f107 0108 	add.w	r1, r7, #8
 800160a:	2364      	movs	r3, #100	@ 0x64
 800160c:	2206      	movs	r2, #6
 800160e:	481c      	ldr	r0, [pc, #112]	@ (8001680 <mpu9250_read_accel+0xd0>)
 8001610:	f003 ff39 	bl	8005486 <HAL_SPI_Receive>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800161e:	4817      	ldr	r0, [pc, #92]	@ (800167c <mpu9250_read_accel+0xcc>)
 8001620:	f003 f8c0 	bl	80047a4 <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <mpu9250_read_accel+0x82>
        send_bluetooth_message("SPI receive error in accel read\r\n");
 800162a:	4817      	ldr	r0, [pc, #92]	@ (8001688 <mpu9250_read_accel+0xd8>)
 800162c:	f7ff fcd6 	bl	8000fdc <send_bluetooth_message>
        return;
 8001630:	e01d      	b.n	800166e <mpu9250_read_accel+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.accel_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 8001632:	7a3b      	ldrb	r3, [r7, #8]
 8001634:	b21b      	sxth	r3, r3
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7a7b      	ldrb	r3, [r7, #9]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <mpu9250_read_accel+0xdc>)
 8001644:	80da      	strh	r2, [r3, #6]
    gyro.accel_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 8001646:	7abb      	ldrb	r3, [r7, #10]
 8001648:	b21b      	sxth	r3, r3
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b0d      	ldr	r3, [pc, #52]	@ (800168c <mpu9250_read_accel+0xdc>)
 8001658:	811a      	strh	r2, [r3, #8]
    gyro.accel_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	b21b      	sxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21a      	sxth	r2, r3
 800166a:	4b08      	ldr	r3, [pc, #32]	@ (800168c <mpu9250_read_accel+0xdc>)
 800166c:	815a      	strh	r2, [r3, #10]
}
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	2000020c 	.word	0x2000020c
 8001678:	0800b5fc 	.word	0x0800b5fc
 800167c:	40020400 	.word	0x40020400
 8001680:	2000026c 	.word	0x2000026c
 8001684:	0800b634 	.word	0x0800b634
 8001688:	0800b658 	.word	0x0800b658
 800168c:	20001450 	.word	0x20001450

08001690 <mpu9250_read_all>:

/**
 * @brief Read all IMU data
 */
void mpu9250_read_all(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    mpu9250_read_accel();
 8001694:	f7ff ff8c 	bl	80015b0 <mpu9250_read_accel>
    mpu9250_read_gyro();
 8001698:	f7ff ff1a 	bl	80014d0 <mpu9250_read_gyro>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)

    return (float)gyro.gyro_z / 65.5f;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <mpu9250_get_gyro_z_dps+0x2c>)
 80016a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80016d0 <mpu9250_get_gyro_z_dps+0x30>
 80016b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20001450 	.word	0x20001450
 80016d0:	42830000 	.word	0x42830000

080016d4 <mpu9250_send_status>:

/**
 * @brief Get MPU9250 status for debugging - NEW FUNCTION
 */
void mpu9250_send_status(void)
{
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af02      	add	r7, sp, #8
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
                         mpu9250_initialized ? "OK" : "FAILED");
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <mpu9250_send_status+0xc0>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
    send_bluetooth_printf("MPU9250 Status - Init:%s\r\n",
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <mpu9250_send_status+0x12>
 80016e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001798 <mpu9250_send_status+0xc4>)
 80016e4:	e000      	b.n	80016e8 <mpu9250_send_status+0x14>
 80016e6:	4b2d      	ldr	r3, [pc, #180]	@ (800179c <mpu9250_send_status+0xc8>)
 80016e8:	4619      	mov	r1, r3
 80016ea:	482d      	ldr	r0, [pc, #180]	@ (80017a0 <mpu9250_send_status+0xcc>)
 80016ec:	f7ff fc8c 	bl	8001008 <send_bluetooth_printf>

    if (mpu9250_initialized) {
 80016f0:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <mpu9250_send_status+0xc0>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d048      	beq.n	800178a <mpu9250_send_status+0xb6>
        uint8_t who_am_i = mpu9250_read_register(MPU9250_WHO_AM_I);
 80016f8:	2075      	movs	r0, #117	@ 0x75
 80016fa:	f7ff fd29 	bl	8001150 <mpu9250_read_register>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
        uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 8001702:	206a      	movs	r0, #106	@ 0x6a
 8001704:	f7ff fd24 	bl	8001150 <mpu9250_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	71bb      	strb	r3, [r7, #6]
        uint8_t pwr_mgmt = mpu9250_read_register(MPU9250_PWR_MGMT_1);
 800170c:	206b      	movs	r0, #107	@ 0x6b
 800170e:	f7ff fd1f 	bl	8001150 <mpu9250_read_register>
 8001712:	4603      	mov	r3, r0
 8001714:	717b      	strb	r3, [r7, #5]

        send_bluetooth_printf("WHO_AM_I:0x%02X USER_CTRL:0x%02X PWR_MGMT:0x%02X\r\n",
 8001716:	79f9      	ldrb	r1, [r7, #7]
 8001718:	79ba      	ldrb	r2, [r7, #6]
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	4821      	ldr	r0, [pc, #132]	@ (80017a4 <mpu9250_send_status+0xd0>)
 800171e:	f7ff fc73 	bl	8001008 <send_bluetooth_printf>
                             who_am_i, user_ctrl, pwr_mgmt);

        if (user_ctrl & 0x10) {
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <mpu9250_send_status+0x60>
            send_bluetooth_message("I2C disabled: ✅\r\n");
 800172c:	481e      	ldr	r0, [pc, #120]	@ (80017a8 <mpu9250_send_status+0xd4>)
 800172e:	f7ff fc55 	bl	8000fdc <send_bluetooth_message>
 8001732:	e002      	b.n	800173a <mpu9250_send_status+0x66>
        } else {
            send_bluetooth_message("I2C disabled: ❌\r\n");
 8001734:	481d      	ldr	r0, [pc, #116]	@ (80017ac <mpu9250_send_status+0xd8>)
 8001736:	f7ff fc51 	bl	8000fdc <send_bluetooth_message>
        }

        // Read current sensor values
        mpu9250_read_all();
 800173a:	f7ff ffa9 	bl	8001690 <mpu9250_read_all>
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <mpu9250_send_status+0xdc>)
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8001744:	461c      	mov	r4, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <mpu9250_send_status+0xdc>)
 8001748:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 800174c:	461d      	mov	r5, r3
                             gyro.gyro_x, gyro.gyro_y, mpu9250_get_gyro_z_dps());
 800174e:	f7ff ffa7 	bl	80016a0 <mpu9250_get_gyro_z_dps>
 8001752:	ee10 3a10 	vmov	r3, s0
        send_bluetooth_printf("Gyro X:%d Y:%d Z:%.1f°/s\r\n",
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fefe 	bl	8000558 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9cd 2300 	strd	r2, r3, [sp]
 8001764:	462a      	mov	r2, r5
 8001766:	4621      	mov	r1, r4
 8001768:	4812      	ldr	r0, [pc, #72]	@ (80017b4 <mpu9250_send_status+0xe0>)
 800176a:	f7ff fc4d 	bl	8001008 <send_bluetooth_printf>
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800176e:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <mpu9250_send_status+0xdc>)
 8001770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001774:	4619      	mov	r1, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <mpu9250_send_status+0xdc>)
 8001778:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 800177c:	461a      	mov	r2, r3
                             gyro.accel_x, gyro.accel_y, gyro.accel_z);
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <mpu9250_send_status+0xdc>)
 8001780:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
        send_bluetooth_printf("Accel X:%d Y:%d Z:%d\r\n",
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <mpu9250_send_status+0xe4>)
 8001786:	f7ff fc3f 	bl	8001008 <send_bluetooth_printf>
    }
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	2000020c 	.word	0x2000020c
 8001798:	0800b67c 	.word	0x0800b67c
 800179c:	0800b680 	.word	0x0800b680
 80017a0:	0800b688 	.word	0x0800b688
 80017a4:	0800b6a4 	.word	0x0800b6a4
 80017a8:	0800b6d8 	.word	0x0800b6d8
 80017ac:	0800b6ec 	.word	0x0800b6ec
 80017b0:	20001450 	.word	0x20001450
 80017b4:	0800b700 	.word	0x0800b700
 80017b8:	0800b71c 	.word	0x0800b71c

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f002 f840 	bl	8003844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f8a6 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f000 fbd6 	bl	8001f78 <MX_GPIO_Init>
  MX_ADC1_Init();
 80017cc:	f000 f90a 	bl	80019e4 <MX_ADC1_Init>
  MX_SPI2_Init();
 80017d0:	f000 f992 	bl	8001af8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80017d4:	f000 f9c6 	bl	8001b64 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017d8:	f000 fa64 	bl	8001ca4 <MX_TIM2_Init>
  MX_TIM4_Init();
 80017dc:	f000 fb4e 	bl	8001e7c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80017e0:	f000 fba0 	bl	8001f24 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80017e4:	f000 fab2 	bl	8001d4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize micromouse system */
  championship_micromouse_init();
 80017e8:	f000 fcf8 	bl	80021dc <championship_micromouse_init>
  verify_adc_gpio_configuration();
 80017ec:	f000 fca6 	bl	800213c <verify_adc_gpio_configuration>
  adc_system_diagnostics();
 80017f0:	f000 fee0 	bl	80025b4 <adc_system_diagnostics>

  // Check gyro initialization
  if (mpu9250_is_initialized()) {
 80017f4:	f7ff fe60 	bl	80014b8 <mpu9250_is_initialized>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d022      	beq.n	8001844 <main+0x88>
	  send_bluetooth_message("Calibrating gyro for heading control...\r\n");
 80017fe:	483a      	ldr	r0, [pc, #232]	@ (80018e8 <main+0x12c>)
 8001800:	f7ff fbec 	bl	8000fdc <send_bluetooth_message>
	  send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during calibration!\r\n");
 8001804:	4839      	ldr	r0, [pc, #228]	@ (80018ec <main+0x130>)
 8001806:	f7ff fbe9 	bl	8000fdc <send_bluetooth_message>
	  HAL_Delay(2000);  // Give user time to see message
 800180a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800180e:	f002 f88b 	bl	8003928 <HAL_Delay>
	  mpu9250_calibrate_bias();
 8001812:	f7ff fda3 	bl	800135c <mpu9250_calibrate_bias>
	  send_bluetooth_message("✅ Gyro calibration complete\r\n");
 8001816:	4836      	ldr	r0, [pc, #216]	@ (80018f0 <main+0x134>)
 8001818:	f7ff fbe0 	bl	8000fdc <send_bluetooth_message>

	  // Set initial conservative PID gains
	  set_heading_pid_gains(1.0f, 0.0f, 0.1f);
 800181c:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 80018f4 <main+0x138>
 8001820:	eddf 0a35 	vldr	s1, [pc, #212]	@ 80018f8 <main+0x13c>
 8001824:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001828:	f7ff fc58 	bl	80010dc <set_heading_pid_gains>
	  while(1){
		  mpu9250_read_all();
 800182c:	f7ff ff30 	bl	8001690 <mpu9250_read_all>
		  mpu9250_get_gyro_z_dps();// get the raw reading from gyro
 8001830:	f7ff ff36 	bl	80016a0 <mpu9250_get_gyro_z_dps>
		  mpu9250_send_status();
 8001834:	f7ff ff4e 	bl	80016d4 <mpu9250_send_status>
		  HAL_Delay(500);
 8001838:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800183c:	f002 f874 	bl	8003928 <HAL_Delay>
		  mpu9250_read_all();
 8001840:	bf00      	nop
 8001842:	e7f3      	b.n	800182c <main+0x70>

	  }


  } else {
	  send_bluetooth_message("⚠️ Gyro not available - using basic movement\r\n");
 8001844:	482d      	ldr	r0, [pc, #180]	@ (80018fc <main+0x140>)
 8001846:	f7ff fbc9 	bl	8000fdc <send_bluetooth_message>
//  test_encoder_manual();
//  test_encoder_rotation();
//  left_test = get_left_encoder_total();
//  right_test = get_right_encoder_total();

  if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 800184a:	f000 fdcf 	bl	80023ec <get_left_encoder_total>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d107      	bne.n	8001864 <main+0xa8>
 8001854:	f000 fdd4 	bl	8002400 <get_right_encoder_total>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <main+0xa8>
      send_bluetooth_message("⚠️ WARNING: Encoders may not be working\r\n");
 800185e:	4828      	ldr	r0, [pc, #160]	@ (8001900 <main+0x144>)
 8001860:	f7ff fbbc 	bl	8000fdc <send_bluetooth_message>




  /* Play startup tone */
  play_startup_tone();
 8001864:	f7ff fb8c 	bl	8000f80 <play_startup_tone>

  /* Status LEDs test */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2110      	movs	r1, #16
 800186c:	4825      	ldr	r0, [pc, #148]	@ (8001904 <main+0x148>)
 800186e:	f002 ff99 	bl	80047a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2120      	movs	r1, #32
 8001876:	4823      	ldr	r0, [pc, #140]	@ (8001904 <main+0x148>)
 8001878:	f002 ff94 	bl	80047a4 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800187c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001880:	f002 f852 	bl	8003928 <HAL_Delay>
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2110      	movs	r1, #16
 8001888:	481e      	ldr	r0, [pc, #120]	@ (8001904 <main+0x148>)
 800188a:	f002 ff8b 	bl	80047a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2120      	movs	r1, #32
 8001892:	481c      	ldr	r0, [pc, #112]	@ (8001904 <main+0x148>)
 8001894:	f002 ff86 	bl	80047a4 <HAL_GPIO_WritePin>

  /* Send startup message via Bluetooth */
  send_bluetooth_message("Championship Micromouse Ready!\r\n");
 8001898:	481b      	ldr	r0, [pc, #108]	@ (8001908 <main+0x14c>)
 800189a:	f7ff fb9f 	bl	8000fdc <send_bluetooth_message>

  send_championship_stats();
 800189e:	f7ff fbd9 	bl	8001054 <send_championship_stats>

  /* Wait for start button */
  send_bluetooth_message("Press button to start exploration...\r\n");
 80018a2:	481a      	ldr	r0, [pc, #104]	@ (800190c <main+0x150>)
 80018a4:	f7ff fb9a 	bl	8000fdc <send_bluetooth_message>
//      // Blink LED to show ready state
//      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
//  }

  /* Reset LEDs */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2110      	movs	r1, #16
 80018ac:	4815      	ldr	r0, [pc, #84]	@ (8001904 <main+0x148>)
 80018ae:	f002 ff79 	bl	80047a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2120      	movs	r1, #32
 80018b6:	4813      	ldr	r0, [pc, #76]	@ (8001904 <main+0x148>)
 80018b8:	f002 ff74 	bl	80047a4 <HAL_GPIO_WritePin>

  /* Start exploration after delay */
  play_confirmation_tone();
 80018bc:	f7ff fb7c 	bl	8000fb8 <play_confirmation_tone>
  HAL_Delay(2000);
 80018c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018c4:	f002 f830 	bl	8003928 <HAL_Delay>

  /* Main micromouse algorithm */
  send_bluetooth_message("Starting maze exploration...\r\n");
 80018c8:	4811      	ldr	r0, [pc, #68]	@ (8001910 <main+0x154>)
 80018ca:	f7ff fb87 	bl	8000fdc <send_bluetooth_message>

  /* Initialize movement system */
  start_encoders();
 80018ce:	f000 fda1 	bl	8002414 <start_encoders>
  calibrate_sensors();
 80018d2:	f000 ffcb 	bl	800286c <calibrate_sensors>
  while(1){
	  //update_sensors();
	  diagnostic_sensor_test();
 80018d6:	f000 ff23 	bl	8002720 <diagnostic_sensor_test>
	  HAL_Delay(500);
 80018da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018de:	f002 f823 	bl	8003928 <HAL_Delay>
	  diagnostic_sensor_test();
 80018e2:	bf00      	nop
 80018e4:	e7f7      	b.n	80018d6 <main+0x11a>
 80018e6:	bf00      	nop
 80018e8:	0800b734 	.word	0x0800b734
 80018ec:	0800b760 	.word	0x0800b760
 80018f0:	0800b794 	.word	0x0800b794
 80018f4:	3dcccccd 	.word	0x3dcccccd
 80018f8:	00000000 	.word	0x00000000
 80018fc:	0800b7b4 	.word	0x0800b7b4
 8001900:	0800b7e8 	.word	0x0800b7e8
 8001904:	40020400 	.word	0x40020400
 8001908:	0800b818 	.word	0x0800b818
 800190c:	0800b83c 	.word	0x0800b83c
 8001910:	0800b864 	.word	0x0800b864

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	@ 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2230      	movs	r2, #48	@ 0x30
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f007 f8a6 	bl	8008a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <SystemClock_Config+0xc8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	4a26      	ldr	r2, [pc, #152]	@ (80019dc <SystemClock_Config+0xc8>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	@ 0x40
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <SystemClock_Config+0xc8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <SystemClock_Config+0xcc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a20      	ldr	r2, [pc, #128]	@ (80019e0 <SystemClock_Config+0xcc>)
 800195e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <SystemClock_Config+0xcc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001978:	2310      	movs	r3, #16
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001984:	2310      	movs	r3, #16
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001988:	23a8      	movs	r3, #168	@ 0xa8
 800198a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f002 ff4f 	bl	800483c <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019a4:	f000 fc06 	bl	80021b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2102      	movs	r1, #2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f003 f9b1 	bl	8004d2c <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019d0:	f000 fbf0 	bl	80021b4 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3750      	adds	r7, #80	@ 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aec <MX_ADC1_Init+0x108>)
 80019f8:	4a3d      	ldr	r2, [pc, #244]	@ (8001af0 <MX_ADC1_Init+0x10c>)
 80019fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019fc:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <MX_ADC1_Init+0x108>)
 80019fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a04:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a0a:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a10:	4b36      	ldr	r3, [pc, #216]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a16:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1e:	4b33      	ldr	r3, [pc, #204]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a24:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a26:	4a33      	ldr	r2, [pc, #204]	@ (8001af4 <MX_ADC1_Init+0x110>)
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2a:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001a30:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a32:	2205      	movs	r2, #5
 8001a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a44:	4829      	ldr	r0, [pc, #164]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a46:	f001 ff93 	bl	8003970 <HAL_ADC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a50:	f000 fbb0 	bl	80021b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4821      	ldr	r0, [pc, #132]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a66:	f002 f947 	bl	8003cf8 <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fba0 	bl	80021b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	481a      	ldr	r0, [pc, #104]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a82:	f002 f939 	bl	8003cf8 <HAL_ADC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a8c:	f000 fb92 	bl	80021b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a90:	2303      	movs	r3, #3
 8001a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a94:	2303      	movs	r3, #3
 8001a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4813      	ldr	r0, [pc, #76]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001a9e:	f002 f92b 	bl	8003cf8 <HAL_ADC_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001aa8:	f000 fb84 	bl	80021b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001aac:	2304      	movs	r3, #4
 8001aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001aba:	f002 f91d 	bl	8003cf8 <HAL_ADC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001ac4:	f000 fb76 	bl	80021b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001acc:	2305      	movs	r3, #5
 8001ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	@ (8001aec <MX_ADC1_Init+0x108>)
 8001ad6:	f002 f90f 	bl	8003cf8 <HAL_ADC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ae0:	f000 fb68 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000224 	.word	0x20000224
 8001af0:	40012000 	.word	0x40012000
 8001af4:	0f000001 	.word	0x0f000001

08001af8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001afe:	4a18      	ldr	r2, [pc, #96]	@ (8001b60 <MX_SPI2_Init+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b2c:	2230      	movs	r2, #48	@ 0x30
 8001b2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b36:	4b09      	ldr	r3, [pc, #36]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b44:	220a      	movs	r2, #10
 8001b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <MX_SPI2_Init+0x64>)
 8001b4a:	f003 facf 	bl	80050ec <HAL_SPI_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b54:	f000 fb2e 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000026c 	.word	0x2000026c
 8001b60:	40003800 	.word	0x40003800

08001b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b096      	sub	sp, #88	@ 0x58
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
 8001b90:	611a      	str	r2, [r3, #16]
 8001b92:	615a      	str	r2, [r3, #20]
 8001b94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2220      	movs	r2, #32
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f006 ff69 	bl	8008a74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca0 <MX_TIM1_Init+0x13c>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001baa:	2214      	movs	r2, #20
 8001bac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8001bb4:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bb6:	22c8      	movs	r2, #200	@ 0xc8
 8001bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bba:	4b38      	ldr	r3, [pc, #224]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc0:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bc6:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bc8:	2280      	movs	r2, #128	@ 0x80
 8001bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bcc:	4833      	ldr	r0, [pc, #204]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bce:	f004 f85f 	bl	8005c90 <HAL_TIM_Base_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001bd8:	f000 faec 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001be6:	4619      	mov	r1, r3
 8001be8:	482c      	ldr	r0, [pc, #176]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bea:	f004 fcf3 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001bf4:	f000 fade 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bf8:	4828      	ldr	r0, [pc, #160]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001bfa:	f004 f898 	bl	8005d2e <HAL_TIM_PWM_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c04:	f000 fad6 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c14:	4619      	mov	r1, r3
 8001c16:	4821      	ldr	r0, [pc, #132]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001c18:	f005 f8a8 	bl	8006d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001c22:	f000 fac7 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c26:	2360      	movs	r3, #96	@ 0x60
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8001c2a:	2364      	movs	r3, #100	@ 0x64
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c46:	2208      	movs	r2, #8
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4814      	ldr	r0, [pc, #80]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001c4c:	f004 fc00 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c56:	f000 faad 	bl	80021b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4807      	ldr	r0, [pc, #28]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001c7e:	f005 f8e3 	bl	8006e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001c88:	f000 fa94 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c8c:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <MX_TIM1_Init+0x138>)
 8001c8e:	f001 fbb5 	bl	80033fc <HAL_TIM_MspPostInit>

}
 8001c92:	bf00      	nop
 8001c94:	3758      	adds	r7, #88	@ 0x58
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200002c4 	.word	0x200002c4
 8001ca0:	40010000 	.word	0x40010000

08001ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	@ 0x30
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2224      	movs	r2, #36	@ 0x24
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f006 fede 	bl	8008a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc0:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001cc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001cd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d00:	2301      	movs	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001d14:	f004 f978 	bl	8006008 <HAL_TIM_Encoder_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001d1e:	f000 fa49 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4806      	ldr	r0, [pc, #24]	@ (8001d48 <MX_TIM2_Init+0xa4>)
 8001d30:	f005 f81c 	bl	8006d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001d3a:	f000 fa3b 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	@ 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000030c 	.word	0x2000030c

08001d4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08e      	sub	sp, #56	@ 0x38
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d60:	f107 0320 	add.w	r3, r7, #32
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e78 <MX_TIM3_Init+0x12c>)
 8001d80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8001d82:	4b3c      	ldr	r3, [pc, #240]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001d84:	2204      	movs	r2, #4
 8001d86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b3a      	ldr	r3, [pc, #232]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001d90:	f240 3246 	movw	r2, #838	@ 0x346
 8001d94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b37      	ldr	r3, [pc, #220]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9c:	4b35      	ldr	r3, [pc, #212]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001d9e:	2280      	movs	r2, #128	@ 0x80
 8001da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001da2:	4834      	ldr	r0, [pc, #208]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001da4:	f003 ff74 	bl	8005c90 <HAL_TIM_Base_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dae:	f000 fa01 	bl	80021b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001db8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	482d      	ldr	r0, [pc, #180]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001dc0:	f004 fc08 	bl	80065d4 <HAL_TIM_ConfigClockSource>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dca:	f000 f9f3 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dce:	4829      	ldr	r0, [pc, #164]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001dd0:	f003 ffad 	bl	8005d2e <HAL_TIM_PWM_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dda:	f000 f9eb 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	4619      	mov	r1, r3
 8001dec:	4821      	ldr	r0, [pc, #132]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001dee:	f004 ffbd 	bl	8006d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001df8:	f000 f9dc 	bl	80021b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfc:	2360      	movs	r3, #96	@ 0x60
 8001dfe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	4818      	ldr	r0, [pc, #96]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001e14:	f004 fb1c 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e1e:	f000 f9c9 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4812      	ldr	r0, [pc, #72]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001e2a:	f004 fb11 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e34:	f000 f9be 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001e40:	f004 fb06 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001e4a:	f000 f9b3 	bl	80021b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	220c      	movs	r2, #12
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001e56:	f004 fafb 	bl	8006450 <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001e60:	f000 f9a8 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_TIM3_Init+0x128>)
 8001e66:	f001 fac9 	bl	80033fc <HAL_TIM_MspPostInit>

}
 8001e6a:	bf00      	nop
 8001e6c:	3738      	adds	r7, #56	@ 0x38
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000354 	.word	0x20000354
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2224      	movs	r2, #36	@ 0x24
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f006 fdf2 	bl	8008a74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e98:	4b20      	ldr	r3, [pc, #128]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001e9a:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <MX_TIM4_Init+0xa4>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001eac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ee2:	f107 030c 	add.w	r3, r7, #12
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001eea:	f004 f88d 	bl	8006008 <HAL_TIM_Encoder_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ef4:	f000 f95e 	bl	80021b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_TIM4_Init+0xa0>)
 8001f06:	f004 ff31 	bl	8006d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f10:	f000 f950 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	@ 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	2000039c 	.word	0x2000039c
 8001f20:	40000800 	.word	0x40000800

08001f24 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <MX_USART6_UART_Init+0x50>)
 8001f2c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f2e:	4b10      	ldr	r3, [pc, #64]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001f34:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_USART6_UART_Init+0x4c>)
 8001f5c:	f004 ffda 	bl	8006f14 <HAL_UART_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f66:	f000 f925 	bl	80021b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200003e4 	.word	0x200003e4
 8001f74:	40011400 	.word	0x40011400

08001f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b4b      	ldr	r3, [pc, #300]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a4a      	ldr	r2, [pc, #296]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b48      	ldr	r3, [pc, #288]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a43      	ldr	r2, [pc, #268]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a3c      	ldr	r2, [pc, #240]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <MX_GPIO_Init+0x148>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fe8:	4836      	ldr	r0, [pc, #216]	@ (80020c4 <MX_GPIO_Init+0x14c>)
 8001fea:	f002 fbdb 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f241 3130 	movw	r1, #4912	@ 0x1330
 8001ff4:	4834      	ldr	r0, [pc, #208]	@ (80020c8 <MX_GPIO_Init+0x150>)
 8001ff6:	f002 fbd5 	bl	80047a4 <HAL_GPIO_WritePin>
                          |EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002000:	4832      	ldr	r0, [pc, #200]	@ (80020cc <MX_GPIO_Init+0x154>)
 8002002:	f002 fbcf 	bl	80047a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 8002006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200c:	2301      	movs	r3, #1
 800200e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	4619      	mov	r1, r3
 800201e:	4829      	ldr	r0, [pc, #164]	@ (80020c4 <MX_GPIO_Init+0x14c>)
 8002020:	f002 fa3c 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8002024:	2302      	movs	r3, #2
 8002026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002028:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800202c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	4824      	ldr	r0, [pc, #144]	@ (80020cc <MX_GPIO_Init+0x154>)
 800203a:	f002 fa2f 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 800203e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002042:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002044:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4619      	mov	r1, r3
 8002054:	481c      	ldr	r0, [pc, #112]	@ (80020c8 <MX_GPIO_Init+0x150>)
 8002056:	f002 fa21 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_LEFT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800205a:	f241 3330 	movw	r3, #4912	@ 0x1330
 800205e:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002060:	2301      	movs	r3, #1
 8002062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4619      	mov	r1, r3
 8002072:	4815      	ldr	r0, [pc, #84]	@ (80020c8 <MX_GPIO_Init+0x150>)
 8002074:	f002 fa12 	bl	800449c <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_RIGHT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_RIGHT_Pin|EMIT_SIDE_LEFT_Pin;
 8002078:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800207c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4619      	mov	r1, r3
 8002090:	480e      	ldr	r0, [pc, #56]	@ (80020cc <MX_GPIO_Init+0x154>)
 8002092:	f002 fa03 	bl	800449c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2105      	movs	r1, #5
 800209a:	2007      	movs	r0, #7
 800209c:	f002 f935 	bl	800430a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020a0:	2007      	movs	r0, #7
 80020a2:	f002 f94e 	bl	8004342 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2105      	movs	r1, #5
 80020aa:	2028      	movs	r0, #40	@ 0x28
 80020ac:	f002 f92d 	bl	800430a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020b0:	2028      	movs	r0, #40	@ 0x28
 80020b2:	f002 f946 	bl	8004342 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020b6:	bf00      	nop
 80020b8:	3720      	adds	r7, #32
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020800 	.word	0x40020800
 80020c8:	40020400 	.word	0x40020400
 80020cc:	40020000 	.word	0x40020000

080020d0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 80020da:	f001 fc19 	bl	8003910 <HAL_GetTick>
 80020de:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <HAL_GPIO_EXTI_Callback+0x58>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80020ea:	d919      	bls.n	8002120 <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d109      	bne.n	8002106 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_GPIO_EXTI_Callback+0x5c>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 80020f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HAL_GPIO_EXTI_Callback+0x60>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 80020fe:	480d      	ldr	r0, [pc, #52]	@ (8002134 <HAL_GPIO_EXTI_Callback+0x64>)
 8002100:	f7fe ff6c 	bl	8000fdc <send_bluetooth_message>
 8002104:	e009      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210c:	d105      	bne.n	800211a <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 800210e:	4b07      	ldr	r3, [pc, #28]	@ (800212c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002110:	2202      	movs	r2, #2
 8002112:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8002114:	4808      	ldr	r0, [pc, #32]	@ (8002138 <HAL_GPIO_EXTI_Callback+0x68>)
 8002116:	f7fe ff61 	bl	8000fdc <send_bluetooth_message>
        }
        last_press = current_time;
 800211a:	4a03      	ldr	r2, [pc, #12]	@ (8002128 <HAL_GPIO_EXTI_Callback+0x58>)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6013      	str	r3, [r2, #0]
    }
}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20001480 	.word	0x20001480
 800212c:	20001474 	.word	0x20001474
 8002130:	20001475 	.word	0x20001475
 8002134:	0800b884 	.word	0x0800b884
 8002138:	0800b89c 	.word	0x0800b89c

0800213c <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002150:	2301      	movs	r3, #1
 8002152:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002154:	2303      	movs	r3, #3
 8002156:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4619      	mov	r1, r3
 8002160:	4812      	ldr	r0, [pc, #72]	@ (80021ac <verify_adc_gpio_configuration+0x70>)
 8002162:	f002 f99b 	bl	800449c <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002166:	2304      	movs	r3, #4
 8002168:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	4619      	mov	r1, r3
 800216e:	480f      	ldr	r0, [pc, #60]	@ (80021ac <verify_adc_gpio_configuration+0x70>)
 8002170:	f002 f994 	bl	800449c <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002174:	2308      	movs	r3, #8
 8002176:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4619      	mov	r1, r3
 800217c:	480b      	ldr	r0, [pc, #44]	@ (80021ac <verify_adc_gpio_configuration+0x70>)
 800217e:	f002 f98d 	bl	800449c <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002182:	2310      	movs	r3, #16
 8002184:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4808      	ldr	r0, [pc, #32]	@ (80021ac <verify_adc_gpio_configuration+0x70>)
 800218c:	f002 f986 	bl	800449c <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002190:	2320      	movs	r3, #32
 8002192:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	4619      	mov	r1, r3
 8002198:	4804      	ldr	r0, [pc, #16]	@ (80021ac <verify_adc_gpio_configuration+0x70>)
 800219a:	f002 f97f 	bl	800449c <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 800219e:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <verify_adc_gpio_configuration+0x74>)
 80021a0:	f7fe ff1c 	bl	8000fdc <send_bluetooth_message>
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40020000 	.word	0x40020000
 80021b0:	0800b8b4 	.word	0x0800b8b4

080021b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021b8:	b672      	cpsid	i
}
 80021ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80021bc:	2110      	movs	r1, #16
 80021be:	4806      	ldr	r0, [pc, #24]	@ (80021d8 <Error_Handler+0x24>)
 80021c0:	f002 fb09 	bl	80047d6 <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 80021c4:	2120      	movs	r1, #32
 80021c6:	4804      	ldr	r0, [pc, #16]	@ (80021d8 <Error_Handler+0x24>)
 80021c8:	f002 fb05 	bl	80047d6 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 80021cc:	2064      	movs	r0, #100	@ 0x64
 80021ce:	f001 fbab 	bl	8003928 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80021d2:	bf00      	nop
 80021d4:	e7f2      	b.n	80021bc <Error_Handler+0x8>
 80021d6:	bf00      	nop
 80021d8:	40020400 	.word	0x40020400

080021dc <championship_micromouse_init>:

/**
 * @brief Initialize championship micromouse system with MMS integration
 */
void championship_micromouse_init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
    // Initialize championship maze
    initialize_championship_maze();
 80021e0:	f000 f842 	bl	8002268 <initialize_championship_maze>

    // Initialize robot state
    robot.x = 0;
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <championship_micromouse_init+0x6c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80021ea:	4b17      	ldr	r3, [pc, #92]	@ (8002248 <championship_micromouse_init+0x6c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80021f0:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <championship_micromouse_init+0x6c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <championship_micromouse_init+0x6c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <championship_micromouse_init+0x6c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 8002202:	4b11      	ldr	r3, [pc, #68]	@ (8002248 <championship_micromouse_init+0x6c>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]

    // Initialize sensors
    memset(&sensors, 0, sizeof(sensors));
 8002208:	220e      	movs	r2, #14
 800220a:	2100      	movs	r1, #0
 800220c:	480f      	ldr	r0, [pc, #60]	@ (800224c <championship_micromouse_init+0x70>)
 800220e:	f006 fc31 	bl	8008a74 <memset>
    memset(&gyro, 0, sizeof(gyro));
 8002212:	2212      	movs	r2, #18
 8002214:	2100      	movs	r1, #0
 8002216:	480e      	ldr	r0, [pc, #56]	@ (8002250 <championship_micromouse_init+0x74>)
 8002218:	f006 fc2c 	bl	8008a74 <memset>
    memset(&encoders, 0, sizeof(encoders));
 800221c:	2210      	movs	r2, #16
 800221e:	2100      	movs	r1, #0
 8002220:	480c      	ldr	r0, [pc, #48]	@ (8002254 <championship_micromouse_init+0x78>)
 8002222:	f006 fc27 	bl	8008a74 <memset>

    // Initialize championship path analysis
    exploration_steps = 0;
 8002226:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <championship_micromouse_init+0x7c>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <championship_micromouse_init+0x80>)
 800222e:	2200      	movs	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

    // Initialize gyroscope
    mpu9250_init();
 8002232:	f7ff f80d 	bl	8001250 <mpu9250_init>

    send_bluetooth_message("Championship micromouse system initialized\r\n");
 8002236:	480a      	ldr	r0, [pc, #40]	@ (8002260 <championship_micromouse_init+0x84>)
 8002238:	f7fe fed0 	bl	8000fdc <send_bluetooth_message>
    send_bluetooth_message("Based on MMS championship algorithms\r\n");
 800223c:	4809      	ldr	r0, [pc, #36]	@ (8002264 <championship_micromouse_init+0x88>)
 800223e:	f7fe fecd 	bl	8000fdc <send_bluetooth_message>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000142c 	.word	0x2000142c
 800224c:	20001440 	.word	0x20001440
 8002250:	20001450 	.word	0x20001450
 8002254:	20001464 	.word	0x20001464
 8002258:	20001478 	.word	0x20001478
 800225c:	2000147c 	.word	0x2000147c
 8002260:	0800b8dc 	.word	0x0800b8dc
 8002264:	0800b90c 	.word	0x0800b90c

08002268 <initialize_championship_maze>:

/**
 * @brief Initialize maze with championship settings (MMS style)
 */
void initialize_championship_maze(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
    // Initialize all cells
    for (int x = 0; x < MAZE_SIZE; x++) {
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e03e      	b.n	80022f2 <initialize_championship_maze+0x8a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	e035      	b.n	80022e6 <initialize_championship_maze+0x7e>
            maze[x][y].distance = MAX_DISTANCE;
 800227a:	4939      	ldr	r1, [pc, #228]	@ (8002360 <initialize_championship_maze+0xf8>)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	011a      	lsls	r2, r3, #4
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4413      	add	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	440b      	add	r3, r1
 8002288:	f242 720f 	movw	r2, #9999	@ 0x270f
 800228c:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 800228e:	4934      	ldr	r1, [pc, #208]	@ (8002360 <initialize_championship_maze+0xf8>)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	011a      	lsls	r2, r3, #4
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	440b      	add	r3, r1
 800229c:	3304      	adds	r3, #4
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 80022a2:	492f      	ldr	r1, [pc, #188]	@ (8002360 <initialize_championship_maze+0xf8>)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	011a      	lsls	r2, r3, #4
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4413      	add	r3, r2
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	440b      	add	r3, r1
 80022b0:	330c      	adds	r3, #12
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	e00e      	b.n	80022da <initialize_championship_maze+0x72>
                maze[x][y].walls[i] = false;
 80022bc:	4928      	ldr	r1, [pc, #160]	@ (8002360 <initialize_championship_maze+0xf8>)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	011a      	lsls	r2, r3, #4
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	4413      	add	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	18ca      	adds	r2, r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	3305      	adds	r3, #5
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3301      	adds	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	dded      	ble.n	80022bc <initialize_championship_maze+0x54>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	ddc6      	ble.n	800227a <initialize_championship_maze+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	ddbd      	ble.n	8002274 <initialize_championship_maze+0xc>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	e01f      	b.n	800233e <initialize_championship_maze+0xd6>
        maze[i][0].walls[SOUTH] = true;           // South boundary
 80022fe:	4a18      	ldr	r2, [pc, #96]	@ (8002360 <initialize_championship_maze+0xf8>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	4413      	add	r3, r2
 8002306:	3307      	adds	r3, #7
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true; // North boundary
 800230c:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <initialize_championship_maze+0xf8>)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4413      	add	r3, r2
 8002314:	33f5      	adds	r3, #245	@ 0xf5
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;            // West boundary
 800231a:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <initialize_championship_maze+0xf8>)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	3308      	adds	r3, #8
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;  // East boundary
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <initialize_championship_maze+0xf8>)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4413      	add	r3, r2
 8002330:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	dddc      	ble.n	80022fe <initialize_championship_maze+0x96>
    }

    // Mark start position as visited
    maze[0][0].visited = true;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <initialize_championship_maze+0xf8>)
 8002346:	2201      	movs	r2, #1
 8002348:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <initialize_championship_maze+0xf8>)
 800234c:	2201      	movs	r2, #1
 800234e:	60da      	str	r2, [r3, #12]

    send_bluetooth_message("Championship maze initialized with boundary walls\r\n");
 8002350:	4804      	ldr	r0, [pc, #16]	@ (8002364 <initialize_championship_maze+0xfc>)
 8002352:	f7fe fe43 	bl	8000fdc <send_bluetooth_message>
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000042c 	.word	0x2000042c
 8002364:	0800b934 	.word	0x0800b934

08002368 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 800236e:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <update_encoder_totals+0x6c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8002376:	4b18      	ldr	r3, [pc, #96]	@ (80023d8 <update_encoder_totals+0x70>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 800237e:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <update_encoder_totals+0x74>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	88fa      	ldrh	r2, [r7, #6]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	b29b      	uxth	r3, r3
 8002388:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <update_encoder_totals+0x78>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	88ba      	ldrh	r2, [r7, #4]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	b29b      	uxth	r3, r3
 8002394:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 8002396:	883b      	ldrh	r3, [r7, #0]
 8002398:	425b      	negs	r3, r3
 800239a:	b29b      	uxth	r3, r3
 800239c:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 800239e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <update_encoder_totals+0x7c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a0e      	ldr	r2, [pc, #56]	@ (80023e4 <update_encoder_totals+0x7c>)
 80023aa:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 80023ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <update_encoder_totals+0x80>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	4a0c      	ldr	r2, [pc, #48]	@ (80023e8 <update_encoder_totals+0x80>)
 80023b8:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 80023ba:	4a08      	ldr	r2, [pc, #32]	@ (80023dc <update_encoder_totals+0x74>)
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 80023c0:	4a07      	ldr	r2, [pc, #28]	@ (80023e0 <update_encoder_totals+0x78>)
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	8013      	strh	r3, [r2, #0]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	2000030c 	.word	0x2000030c
 80023d8:	2000039c 	.word	0x2000039c
 80023dc:	20000008 	.word	0x20000008
 80023e0:	2000000a 	.word	0x2000000a
 80023e4:	20001484 	.word	0x20001484
 80023e8:	20001488 	.word	0x20001488

080023ec <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
    update_encoder_totals();
 80023f0:	f7ff ffba 	bl	8002368 <update_encoder_totals>
    return left_total;
 80023f4:	4b01      	ldr	r3, [pc, #4]	@ (80023fc <get_left_encoder_total+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20001484 	.word	0x20001484

08002400 <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
    update_encoder_totals();
 8002404:	f7ff ffb0 	bl	8002368 <update_encoder_totals>
    return right_total;
 8002408:	4b01      	ldr	r3, [pc, #4]	@ (8002410 <get_right_encoder_total+0x10>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	20001488 	.word	0x20001488

08002414 <start_encoders>:
}

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 8002418:	213c      	movs	r1, #60	@ 0x3c
 800241a:	4815      	ldr	r0, [pc, #84]	@ (8002470 <start_encoders+0x5c>)
 800241c:	f003 fe9a 	bl	8006154 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 8002420:	213c      	movs	r1, #60	@ 0x3c
 8002422:	4814      	ldr	r0, [pc, #80]	@ (8002474 <start_encoders+0x60>)
 8002424:	f003 fe96 	bl	8006154 <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 8002428:	4b11      	ldr	r3, [pc, #68]	@ (8002470 <start_encoders+0x5c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002430:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <start_encoders+0x60>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 800243c:	2001      	movs	r0, #1
 800243e:	f001 fa73 	bl	8003928 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <start_encoders+0x64>)
 8002444:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002448:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 800244a:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <start_encoders+0x68>)
 800244c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002450:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 8002452:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <start_encoders+0x6c>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8002458:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <start_encoders+0x70>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <start_encoders+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <start_encoders+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000039c 	.word	0x2000039c
 8002474:	2000030c 	.word	0x2000030c
 8002478:	20000008 	.word	0x20000008
 800247c:	2000000a 	.word	0x2000000a
 8002480:	20001484 	.word	0x20001484
 8002484:	20001488 	.word	0x20001488
 8002488:	20001464 	.word	0x20001464

0800248c <turn_on_emitters>:
static SensorCalibration sensor_cal = {0};
/**
 * @brief Turn on IR emitters
 */
void turn_on_emitters(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002496:	480d      	ldr	r0, [pc, #52]	@ (80024cc <turn_on_emitters+0x40>)
 8002498:	f002 f984 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_SET);
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024a2:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <turn_on_emitters+0x44>)
 80024a4:	f002 f97e 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ae:	4807      	ldr	r0, [pc, #28]	@ (80024cc <turn_on_emitters+0x40>)
 80024b0:	f002 f978 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_SET);
 80024b4:	2201      	movs	r2, #1
 80024b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <turn_on_emitters+0x44>)
 80024bc:	f002 f972 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_Delay(2); // Emitter stabilization time
 80024c0:	2002      	movs	r0, #2
 80024c2:	f001 fa31 	bl	8003928 <HAL_Delay>
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020000 	.word	0x40020000

080024d4 <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024de:	480b      	ldr	r0, [pc, #44]	@ (800250c <turn_off_emitters+0x38>)
 80024e0:	f002 f960 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024ea:	4809      	ldr	r0, [pc, #36]	@ (8002510 <turn_off_emitters+0x3c>)
 80024ec:	f002 f95a 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <turn_off_emitters+0x38>)
 80024f8:	f002 f954 	bl	80047a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 80024fc:	2200      	movs	r2, #0
 80024fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002502:	4803      	ldr	r0, [pc, #12]	@ (8002510 <turn_off_emitters+0x3c>)
 8002504:	f002 f94e 	bl	80047a4 <HAL_GPIO_WritePin>
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40020400 	.word	0x40020400
 8002510:	40020000 	.word	0x40020000

08002514 <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800251c:	f107 030c 	add.w	r3, r7, #12
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
    uint16_t adc_value = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	83fb      	strh	r3, [r7, #30]

    // Configure the channel
    sConfig.Channel = channel;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES; // Longer sampling time
 8002536:	2304      	movs	r3, #4
 8002538:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800253a:	f107 030c 	add.w	r3, r7, #12
 800253e:	4619      	mov	r1, r3
 8002540:	4818      	ldr	r0, [pc, #96]	@ (80025a4 <read_adc_channel+0x90>)
 8002542:	f001 fbd9 	bl	8003cf8 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d004      	beq.n	8002556 <read_adc_channel+0x42>
        send_bluetooth_message("❌ ADC channel config failed\r\n");
 800254c:	4816      	ldr	r0, [pc, #88]	@ (80025a8 <read_adc_channel+0x94>)
 800254e:	f7fe fd45 	bl	8000fdc <send_bluetooth_message>
        return 0;
 8002552:	2300      	movs	r3, #0
 8002554:	e022      	b.n	800259c <read_adc_channel+0x88>
    }

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8002556:	4813      	ldr	r0, [pc, #76]	@ (80025a4 <read_adc_channel+0x90>)
 8002558:	f001 fa4e 	bl	80039f8 <HAL_ADC_Start>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <read_adc_channel+0x58>
        send_bluetooth_message("❌ ADC start failed\r\n");
 8002562:	4812      	ldr	r0, [pc, #72]	@ (80025ac <read_adc_channel+0x98>)
 8002564:	f7fe fd3a 	bl	8000fdc <send_bluetooth_message>
        return 0;
 8002568:	2300      	movs	r3, #0
 800256a:	e017      	b.n	800259c <read_adc_channel+0x88>
    }

    // Wait for conversion with longer timeout
    if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 800256c:	2164      	movs	r1, #100	@ 0x64
 800256e:	480d      	ldr	r0, [pc, #52]	@ (80025a4 <read_adc_channel+0x90>)
 8002570:	f001 fb29 	bl	8003bc6 <HAL_ADC_PollForConversion>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <read_adc_channel+0x76>
        send_bluetooth_message("❌ ADC conversion timeout\r\n");
 800257a:	480d      	ldr	r0, [pc, #52]	@ (80025b0 <read_adc_channel+0x9c>)
 800257c:	f7fe fd2e 	bl	8000fdc <send_bluetooth_message>
        HAL_ADC_Stop(&hadc1);
 8002580:	4808      	ldr	r0, [pc, #32]	@ (80025a4 <read_adc_channel+0x90>)
 8002582:	f001 faed 	bl	8003b60 <HAL_ADC_Stop>
        return 0;
 8002586:	2300      	movs	r3, #0
 8002588:	e008      	b.n	800259c <read_adc_channel+0x88>
    }

    // Get the converted value
    adc_value = HAL_ADC_GetValue(&hadc1);
 800258a:	4806      	ldr	r0, [pc, #24]	@ (80025a4 <read_adc_channel+0x90>)
 800258c:	f001 fba6 	bl	8003cdc <HAL_ADC_GetValue>
 8002590:	4603      	mov	r3, r0
 8002592:	83fb      	strh	r3, [r7, #30]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 8002594:	4803      	ldr	r0, [pc, #12]	@ (80025a4 <read_adc_channel+0x90>)
 8002596:	f001 fae3 	bl	8003b60 <HAL_ADC_Stop>

    return adc_value;
 800259a:	8bfb      	ldrh	r3, [r7, #30]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000224 	.word	0x20000224
 80025a8:	0800be8c 	.word	0x0800be8c
 80025ac:	0800beac 	.word	0x0800beac
 80025b0:	0800bec4 	.word	0x0800bec4

080025b4 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b08e      	sub	sp, #56	@ 0x38
 80025b8:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 80025ba:	484b      	ldr	r0, [pc, #300]	@ (80026e8 <adc_system_diagnostics+0x134>)
 80025bc:	f7fe fd0e 	bl	8000fdc <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 80025c0:	4b4a      	ldr	r3, [pc, #296]	@ (80026ec <adc_system_diagnostics+0x138>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 80025cc:	4848      	ldr	r0, [pc, #288]	@ (80026f0 <adc_system_diagnostics+0x13c>)
 80025ce:	f7fe fd05 	bl	8000fdc <send_bluetooth_message>
 80025d2:	e002      	b.n	80025da <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 80025d4:	4847      	ldr	r0, [pc, #284]	@ (80026f4 <adc_system_diagnostics+0x140>)
 80025d6:	f7fe fd01 	bl	8000fdc <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 80025da:	4b44      	ldr	r3, [pc, #272]	@ (80026ec <adc_system_diagnostics+0x138>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 80025e6:	4844      	ldr	r0, [pc, #272]	@ (80026f8 <adc_system_diagnostics+0x144>)
 80025e8:	f7fe fcf8 	bl	8000fdc <send_bluetooth_message>
 80025ec:	e002      	b.n	80025f4 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 80025ee:	4843      	ldr	r0, [pc, #268]	@ (80026fc <adc_system_diagnostics+0x148>)
 80025f0:	f7fe fcf4 	bl	8000fdc <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 80025f4:	4b42      	ldr	r3, [pc, #264]	@ (8002700 <adc_system_diagnostics+0x14c>)
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d103      	bne.n	8002604 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 80025fc:	4841      	ldr	r0, [pc, #260]	@ (8002704 <adc_system_diagnostics+0x150>)
 80025fe:	f7fe fced 	bl	8000fdc <send_bluetooth_message>
 8002602:	e005      	b.n	8002610 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8002604:	4b3e      	ldr	r3, [pc, #248]	@ (8002700 <adc_system_diagnostics+0x14c>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	4619      	mov	r1, r3
 800260a:	483f      	ldr	r0, [pc, #252]	@ (8002708 <adc_system_diagnostics+0x154>)
 800260c:	f7fe fcfc 	bl	8001008 <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8002610:	483e      	ldr	r0, [pc, #248]	@ (800270c <adc_system_diagnostics+0x158>)
 8002612:	f7fe fce3 	bl	8000fdc <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8002616:	4b3e      	ldr	r3, [pc, #248]	@ (8002710 <adc_system_diagnostics+0x15c>)
 8002618:	f107 0420 	add.w	r4, r7, #32
 800261c:	461d      	mov	r5, r3
 800261e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8002626:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <adc_system_diagnostics+0x160>)
 8002628:	f107 040c 	add.w	r4, r7, #12
 800262c:	461d      	mov	r5, r3
 800262e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002632:	682b      	ldr	r3, [r5, #0]
 8002634:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	637b      	str	r3, [r7, #52]	@ 0x34
 800263a:	e04b      	b.n	80026d4 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 800263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	3338      	adds	r3, #56	@ 0x38
 8002642:	443b      	add	r3, r7
 8002644:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff63 	bl	8002514 <read_adc_channel>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	3338      	adds	r3, #56	@ 0x38
 8002658:	443b      	add	r3, r7
 800265a:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 800265e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	3338      	adds	r3, #56	@ 0x38
 8002664:	443b      	add	r3, r7
 8002666:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 800266a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3338      	adds	r3, #56	@ 0x38
 8002670:	443b      	add	r3, r7
 8002672:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8002676:	2b00      	cmp	r3, #0
 8002678:	d01f      	beq.n	80026ba <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 800267a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	3338      	adds	r3, #56	@ 0x38
 8002680:	443b      	add	r3, r7
 8002682:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d015      	beq.n	80026b6 <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 800268a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3338      	adds	r3, #56	@ 0x38
 8002690:	443b      	add	r3, r7
 8002692:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d00b      	beq.n	80026b2 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 800269a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	3338      	adds	r3, #56	@ 0x38
 80026a0:	443b      	add	r3, r7
 80026a2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d101      	bne.n	80026ae <adc_system_diagnostics+0xfa>
 80026aa:	2204      	movs	r2, #4
 80026ac:	e006      	b.n	80026bc <adc_system_diagnostics+0x108>
 80026ae:	2205      	movs	r2, #5
 80026b0:	e004      	b.n	80026bc <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 80026b2:	2203      	movs	r2, #3
 80026b4:	e002      	b.n	80026bc <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 80026b6:	2202      	movs	r2, #2
 80026b8:	e000      	b.n	80026bc <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80026ba:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 80026bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	3338      	adds	r3, #56	@ 0x38
 80026c2:	443b      	add	r3, r7
 80026c4:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 80026c8:	4813      	ldr	r0, [pc, #76]	@ (8002718 <adc_system_diagnostics+0x164>)
 80026ca:	f7fe fc9d 	bl	8001008 <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 80026ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d0:	3301      	adds	r3, #1
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80026d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	ddb0      	ble.n	800263c <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 80026da:	4810      	ldr	r0, [pc, #64]	@ (800271c <adc_system_diagnostics+0x168>)
 80026dc:	f7fe fc7e 	bl	8000fdc <send_bluetooth_message>
}
 80026e0:	bf00      	nop
 80026e2:	3738      	adds	r7, #56	@ 0x38
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bdb0      	pop	{r4, r5, r7, pc}
 80026e8:	0800c0b0 	.word	0x0800c0b0
 80026ec:	40023800 	.word	0x40023800
 80026f0:	0800c0d4 	.word	0x0800c0d4
 80026f4:	0800c0f0 	.word	0x0800c0f0
 80026f8:	0800c10c 	.word	0x0800c10c
 80026fc:	0800c128 	.word	0x0800c128
 8002700:	20000224 	.word	0x20000224
 8002704:	0800c144 	.word	0x0800c144
 8002708:	0800c15c 	.word	0x0800c15c
 800270c:	0800c174 	.word	0x0800c174
 8002710:	0800c1a4 	.word	0x0800c1a4
 8002714:	0800c1f0 	.word	0x0800c1f0
 8002718:	0800c194 	.word	0x0800c194
 800271c:	0800c08c 	.word	0x0800c08c

08002720 <diagnostic_sensor_test>:

// Add this function to sensors.c for debugging
void diagnostic_sensor_test(void) {
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b095      	sub	sp, #84	@ 0x54
 8002724:	af02      	add	r7, sp, #8
    send_bluetooth_message("\r\n=== IR SENSOR DIAGNOSTIC ===\r\n");
 8002726:	484a      	ldr	r0, [pc, #296]	@ (8002850 <diagnostic_sensor_test+0x130>)
 8002728:	f7fe fc58 	bl	8000fdc <send_bluetooth_message>

    // Test each emitter-detector pair individually
    const char* sensor_names[] = {"Front Left", "Front Right", "Side Left", "Side Right"};
 800272c:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <diagnostic_sensor_test+0x134>)
 800272e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t channels[] = {ADC_CHANNEL_5, ADC_CHANNEL_2, ADC_CHANNEL_4, ADC_CHANNEL_3};
 8002738:	4b47      	ldr	r3, [pc, #284]	@ (8002858 <diagnostic_sensor_test+0x138>)
 800273a:	f107 041c 	add.w	r4, r7, #28
 800273e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    GPIO_TypeDef* emit_ports[] = {EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_RIGHT_GPIO_Port,
 8002744:	4b45      	ldr	r3, [pc, #276]	@ (800285c <diagnostic_sensor_test+0x13c>)
 8002746:	f107 040c 	add.w	r4, r7, #12
 800274a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800274c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                  EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_RIGHT_GPIO_Port};
    uint16_t emit_pins[] = {EMIT_FRONT_LEFT_Pin, EMIT_FRONT_RIGHT_Pin,
 8002750:	4a43      	ldr	r2, [pc, #268]	@ (8002860 <diagnostic_sensor_test+0x140>)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002758:	e883 0003 	stmia.w	r3, {r0, r1}
                           EMIT_SIDE_LEFT_Pin, EMIT_SIDE_RIGHT_Pin};

    for(int i = 0; i < 4; i++) {
 800275c:	2300      	movs	r3, #0
 800275e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002760:	e06b      	b.n	800283a <diagnostic_sensor_test+0x11a>
        // Test with emitter OFF
        HAL_GPIO_WritePin(emit_ports[i], emit_pins[i], GPIO_PIN_RESET);
 8002762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	3348      	adds	r3, #72	@ 0x48
 8002768:	443b      	add	r3, r7
 800276a:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800276e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	3348      	adds	r3, #72	@ 0x48
 8002774:	443b      	add	r3, r7
 8002776:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 800277a:	2200      	movs	r2, #0
 800277c:	4619      	mov	r1, r3
 800277e:	f002 f811 	bl	80047a4 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8002782:	200a      	movs	r0, #10
 8002784:	f001 f8d0 	bl	8003928 <HAL_Delay>
        uint16_t off_reading = read_adc_channel(channels[i]);
 8002788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3348      	adds	r3, #72	@ 0x48
 800278e:	443b      	add	r3, r7
 8002790:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff febd 	bl	8002514 <read_adc_channel>
 800279a:	4603      	mov	r3, r0
 800279c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        // Test with emitter ON
        HAL_GPIO_WritePin(emit_ports[i], emit_pins[i], GPIO_PIN_SET);
 80027a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	3348      	adds	r3, #72	@ 0x48
 80027a6:	443b      	add	r3, r7
 80027a8:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 80027ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	3348      	adds	r3, #72	@ 0x48
 80027b2:	443b      	add	r3, r7
 80027b4:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4619      	mov	r1, r3
 80027bc:	f001 fff2 	bl	80047a4 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80027c0:	200a      	movs	r0, #10
 80027c2:	f001 f8b1 	bl	8003928 <HAL_Delay>
        uint16_t on_reading = read_adc_channel(channels[i]);
 80027c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	3348      	adds	r3, #72	@ 0x48
 80027cc:	443b      	add	r3, r7
 80027ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fe9e 	bl	8002514 <read_adc_channel>
 80027d8:	4603      	mov	r3, r0
 80027da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40



        // Calculate difference
        int16_t difference = on_reading - off_reading;
 80027de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80027e2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	87fb      	strh	r3, [r7, #62]	@ 0x3e

        send_bluetooth_printf("%s: OFF=%d, ON=%d, DIFF=%d\r\n",
 80027ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	3348      	adds	r3, #72	@ 0x48
 80027f2:	443b      	add	r3, r7
 80027f4:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 80027f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80027fc:	f8b7 0040 	ldrh.w	r0, [r7, #64]	@ 0x40
 8002800:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	4603      	mov	r3, r0
 8002808:	4816      	ldr	r0, [pc, #88]	@ (8002864 <diagnostic_sensor_test+0x144>)
 800280a:	f7fe fbfd 	bl	8001008 <send_bluetooth_printf>
                             sensor_names[i], off_reading, on_reading, difference);

        // Turn off emitter
        HAL_GPIO_WritePin(emit_ports[i], emit_pins[i], GPIO_PIN_RESET);
 800280e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3348      	adds	r3, #72	@ 0x48
 8002814:	443b      	add	r3, r7
 8002816:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800281a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	3348      	adds	r3, #72	@ 0x48
 8002820:	443b      	add	r3, r7
 8002822:	f833 3c44 	ldrh.w	r3, [r3, #-68]
 8002826:	2200      	movs	r2, #0
 8002828:	4619      	mov	r1, r3
 800282a:	f001 ffbb 	bl	80047a4 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800282e:	2032      	movs	r0, #50	@ 0x32
 8002830:	f001 f87a 	bl	8003928 <HAL_Delay>
    for(int i = 0; i < 4; i++) {
 8002834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002836:	3301      	adds	r3, #1
 8002838:	647b      	str	r3, [r7, #68]	@ 0x44
 800283a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283c:	2b03      	cmp	r3, #3
 800283e:	dd90      	ble.n	8002762 <diagnostic_sensor_test+0x42>
    }

    send_bluetooth_message("=== Place hand/object 5cm from sensor and retest ===\r\n");
 8002840:	4809      	ldr	r0, [pc, #36]	@ (8002868 <diagnostic_sensor_test+0x148>)
 8002842:	f7fe fbcb 	bl	8000fdc <send_bluetooth_message>
}
 8002846:	bf00      	nop
 8002848:	374c      	adds	r7, #76	@ 0x4c
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	0800c204 	.word	0x0800c204
 8002854:	0800c2b0 	.word	0x0800c2b0
 8002858:	0800c2c0 	.word	0x0800c2c0
 800285c:	0800c2d0 	.word	0x0800c2d0
 8002860:	0800c2e0 	.word	0x0800c2e0
 8002864:	0800c228 	.word	0x0800c228
 8002868:	0800c248 	.word	0x0800c248

0800286c <calibrate_sensors>:
 * - Dynamic wall threshold calculation
 * - Sensor health validation
 * - Battery voltage baseline
 */
void calibrate_sensors(void)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b0a5      	sub	sp, #148	@ 0x94
 8002870:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ENHANCED SENSOR CALIBRATION ===\r\n");
 8002872:	48a9      	ldr	r0, [pc, #676]	@ (8002b18 <calibrate_sensors+0x2ac>)
 8002874:	f7fe fbb2 	bl	8000fdc <send_bluetooth_message>

    // Initialize calibration structure
    memset(&sensor_cal, 0, sizeof(sensor_cal));
 8002878:	2234      	movs	r2, #52	@ 0x34
 800287a:	2100      	movs	r1, #0
 800287c:	48a7      	ldr	r0, [pc, #668]	@ (8002b1c <calibrate_sensors+0x2b0>)
 800287e:	f006 f8f9 	bl	8008a74 <memset>

    // Phase 1: ADC System Validation
    send_bluetooth_message("Phase 1: ADC System Validation\r\n");
 8002882:	48a7      	ldr	r0, [pc, #668]	@ (8002b20 <calibrate_sensors+0x2b4>)
 8002884:	f7fe fbaa 	bl	8000fdc <send_bluetooth_message>

    // Check if ADC is properly initialized
    if (hadc1.State != HAL_ADC_STATE_READY) {
 8002888:	4ba6      	ldr	r3, [pc, #664]	@ (8002b24 <calibrate_sensors+0x2b8>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00c      	beq.n	80028aa <calibrate_sensors+0x3e>
        send_bluetooth_message("❌ ADC not ready - attempting re-initialization\r\n");
 8002890:	48a5      	ldr	r0, [pc, #660]	@ (8002b28 <calibrate_sensors+0x2bc>)
 8002892:	f7fe fba3 	bl	8000fdc <send_bluetooth_message>
        if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002896:	48a3      	ldr	r0, [pc, #652]	@ (8002b24 <calibrate_sensors+0x2b8>)
 8002898:	f001 f86a 	bl	8003970 <HAL_ADC_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <calibrate_sensors+0x3e>
            send_bluetooth_message("❌ CRITICAL: ADC initialization failed!\r\n");
 80028a2:	48a2      	ldr	r0, [pc, #648]	@ (8002b2c <calibrate_sensors+0x2c0>)
 80028a4:	f7fe fb9a 	bl	8000fdc <send_bluetooth_message>
            return;
 80028a8:	e3f0      	b.n	800308c <calibrate_sensors+0x820>
        }
    }

    // Verify clock enables
    if (!__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 80028aa:	4ba1      	ldr	r3, [pc, #644]	@ (8002b30 <calibrate_sensors+0x2c4>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d103      	bne.n	80028be <calibrate_sensors+0x52>
        send_bluetooth_message("❌ ADC1 clock disabled\r\n");
 80028b6:	489f      	ldr	r0, [pc, #636]	@ (8002b34 <calibrate_sensors+0x2c8>)
 80028b8:	f7fe fb90 	bl	8000fdc <send_bluetooth_message>
        return;
 80028bc:	e3e6      	b.n	800308c <calibrate_sensors+0x820>
    }

    if (!__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 80028be:	4b9c      	ldr	r3, [pc, #624]	@ (8002b30 <calibrate_sensors+0x2c4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <calibrate_sensors+0x66>
        send_bluetooth_message("❌ GPIOA clock disabled\r\n");
 80028ca:	489b      	ldr	r0, [pc, #620]	@ (8002b38 <calibrate_sensors+0x2cc>)
 80028cc:	f7fe fb86 	bl	8000fdc <send_bluetooth_message>
        return;
 80028d0:	e3dc      	b.n	800308c <calibrate_sensors+0x820>
    }

    send_bluetooth_message("✅ ADC system validation passed\r\n");
 80028d2:	489a      	ldr	r0, [pc, #616]	@ (8002b3c <calibrate_sensors+0x2d0>)
 80028d4:	f7fe fb82 	bl	8000fdc <send_bluetooth_message>

    // Phase 2: Baseline Ambient Light Measurement
    send_bluetooth_message("Phase 2: Measuring ambient baselines (IR emitters OFF)\r\n");
 80028d8:	4899      	ldr	r0, [pc, #612]	@ (8002b40 <calibrate_sensors+0x2d4>)
 80028da:	f7fe fb7f 	bl	8000fdc <send_bluetooth_message>

    // Ensure emitters are OFF
    turn_off_emitters();
 80028de:	f7ff fdf9 	bl	80024d4 <turn_off_emitters>
    HAL_Delay(100); // Allow sensors to stabilize
 80028e2:	2064      	movs	r0, #100	@ 0x64
 80028e4:	f001 f820 	bl	8003928 <HAL_Delay>

    // Take multiple ambient readings for stability
    uint32_t ambient_sum[4] = {0};
 80028e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    uint32_t ambient_readings = 50;
 80028f6:	2332      	movs	r3, #50	@ 0x32
 80028f8:	663b      	str	r3, [r7, #96]	@ 0x60

    for (int i = 0; i < ambient_readings; i++) {
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002900:	e027      	b.n	8002952 <calibrate_sensors+0xe6>
        ambient_sum[0] += read_adc_channel(ADC_CHANNEL_5); // Front Left
 8002902:	2005      	movs	r0, #5
 8002904:	f7ff fe06 	bl	8002514 <read_adc_channel>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800290e:	4413      	add	r3, r2
 8002910:	64bb      	str	r3, [r7, #72]	@ 0x48
        ambient_sum[1] += read_adc_channel(ADC_CHANNEL_2); // Front Right
 8002912:	2002      	movs	r0, #2
 8002914:	f7ff fdfe 	bl	8002514 <read_adc_channel>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800291e:	4413      	add	r3, r2
 8002920:	64fb      	str	r3, [r7, #76]	@ 0x4c
        ambient_sum[2] += read_adc_channel(ADC_CHANNEL_4); // Side Left
 8002922:	2004      	movs	r0, #4
 8002924:	f7ff fdf6 	bl	8002514 <read_adc_channel>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800292e:	4413      	add	r3, r2
 8002930:	653b      	str	r3, [r7, #80]	@ 0x50
        ambient_sum[3] += read_adc_channel(ADC_CHANNEL_3); // Side Right
 8002932:	2003      	movs	r0, #3
 8002934:	f7ff fdee 	bl	8002514 <read_adc_channel>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293e:	4413      	add	r3, r2
 8002940:	657b      	str	r3, [r7, #84]	@ 0x54
        HAL_Delay(10);
 8002942:	200a      	movs	r0, #10
 8002944:	f000 fff0 	bl	8003928 <HAL_Delay>
    for (int i = 0; i < ambient_readings; i++) {
 8002948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800294c:	3301      	adds	r3, #1
 800294e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002956:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002958:	429a      	cmp	r2, r3
 800295a:	d8d2      	bhi.n	8002902 <calibrate_sensors+0x96>
    }

    // Calculate ambient baselines
    sensor_cal.ambient_baseline[0] = ambient_sum[0] / ambient_readings; // Front Left
 800295c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800295e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	b29a      	uxth	r2, r3
 8002966:	4b6d      	ldr	r3, [pc, #436]	@ (8002b1c <calibrate_sensors+0x2b0>)
 8002968:	801a      	strh	r2, [r3, #0]
    sensor_cal.ambient_baseline[1] = ambient_sum[1] / ambient_readings; // Front Right
 800296a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800296c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	b29a      	uxth	r2, r3
 8002974:	4b69      	ldr	r3, [pc, #420]	@ (8002b1c <calibrate_sensors+0x2b0>)
 8002976:	805a      	strh	r2, [r3, #2]
    sensor_cal.ambient_baseline[2] = ambient_sum[2] / ambient_readings; // Side Left
 8002978:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800297a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	b29a      	uxth	r2, r3
 8002982:	4b66      	ldr	r3, [pc, #408]	@ (8002b1c <calibrate_sensors+0x2b0>)
 8002984:	809a      	strh	r2, [r3, #4]
    sensor_cal.ambient_baseline[3] = ambient_sum[3] / ambient_readings; // Side Right
 8002986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800298a:	fbb2 f3f3 	udiv	r3, r2, r3
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <calibrate_sensors+0x2b0>)
 8002992:	80da      	strh	r2, [r3, #6]

    send_bluetooth_message("Ambient baselines (emitters OFF):\r\n");
 8002994:	486b      	ldr	r0, [pc, #428]	@ (8002b44 <calibrate_sensors+0x2d8>)
 8002996:	f7fe fb21 	bl	8000fdc <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.ambient_baseline[0]);
 800299a:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <calibrate_sensors+0x2b0>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4869      	ldr	r0, [pc, #420]	@ (8002b48 <calibrate_sensors+0x2dc>)
 80029a2:	f7fe fb31 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.ambient_baseline[1]);
 80029a6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b1c <calibrate_sensors+0x2b0>)
 80029a8:	885b      	ldrh	r3, [r3, #2]
 80029aa:	4619      	mov	r1, r3
 80029ac:	4867      	ldr	r0, [pc, #412]	@ (8002b4c <calibrate_sensors+0x2e0>)
 80029ae:	f7fe fb2b 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.ambient_baseline[2]);
 80029b2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b1c <calibrate_sensors+0x2b0>)
 80029b4:	889b      	ldrh	r3, [r3, #4]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4865      	ldr	r0, [pc, #404]	@ (8002b50 <calibrate_sensors+0x2e4>)
 80029ba:	f7fe fb25 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.ambient_baseline[3]);
 80029be:	4b57      	ldr	r3, [pc, #348]	@ (8002b1c <calibrate_sensors+0x2b0>)
 80029c0:	88db      	ldrh	r3, [r3, #6]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4863      	ldr	r0, [pc, #396]	@ (8002b54 <calibrate_sensors+0x2e8>)
 80029c6:	f7fe fb1f 	bl	8001008 <send_bluetooth_printf>

    // Phase 3: Active Sensor Response Measurement
    send_bluetooth_message("Phase 3: Measuring sensor response (IR emitters ON)\r\n");
 80029ca:	4863      	ldr	r0, [pc, #396]	@ (8002b58 <calibrate_sensors+0x2ec>)
 80029cc:	f7fe fb06 	bl	8000fdc <send_bluetooth_message>

    // Turn on emitters and measure response
    turn_on_emitters();
 80029d0:	f7ff fd5c 	bl	800248c <turn_on_emitters>
    HAL_Delay(50); // Emitter stabilization
 80029d4:	2032      	movs	r0, #50	@ 0x32
 80029d6:	f000 ffa7 	bl	8003928 <HAL_Delay>

    uint32_t active_sum[4] = {0};
 80029da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	60da      	str	r2, [r3, #12]
    uint32_t active_readings = 50;
 80029e8:	2332      	movs	r3, #50	@ 0x32
 80029ea:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Track min/max for noise calculation
    uint16_t temp_min[4] = {4095, 4095, 4095, 4095};
 80029ec:	4a5b      	ldr	r2, [pc, #364]	@ (8002b5c <calibrate_sensors+0x2f0>)
 80029ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029f6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t temp_max[4] = {0, 0, 0, 0};
 80029fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < active_readings; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a0a:	e07a      	b.n	8002b02 <calibrate_sensors+0x296>
        uint16_t readings[4];
        readings[0] = read_adc_channel(ADC_CHANNEL_5); // Front Left
 8002a0c:	2005      	movs	r0, #5
 8002a0e:	f7ff fd81 	bl	8002514 <read_adc_channel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	803b      	strh	r3, [r7, #0]
        readings[1] = read_adc_channel(ADC_CHANNEL_2); // Front Right
 8002a16:	2002      	movs	r0, #2
 8002a18:	f7ff fd7c 	bl	8002514 <read_adc_channel>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	807b      	strh	r3, [r7, #2]
        readings[2] = read_adc_channel(ADC_CHANNEL_4); // Side Left
 8002a20:	2004      	movs	r0, #4
 8002a22:	f7ff fd77 	bl	8002514 <read_adc_channel>
 8002a26:	4603      	mov	r3, r0
 8002a28:	80bb      	strh	r3, [r7, #4]
        readings[3] = read_adc_channel(ADC_CHANNEL_3); // Side Right
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	f7ff fd72 	bl	8002514 <read_adc_channel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	80fb      	strh	r3, [r7, #6]

        for (int j = 0; j < 4; j++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a3a:	e056      	b.n	8002aea <calibrate_sensors+0x27e>
            active_sum[j] += readings[j];
 8002a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	3390      	adds	r3, #144	@ 0x90
 8002a44:	443b      	add	r3, r7
 8002a46:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002a4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	3390      	adds	r3, #144	@ 0x90
 8002a52:	443b      	add	r3, r7
 8002a54:	f833 3c90 	ldrh.w	r3, [r3, #-144]
 8002a58:	441a      	add	r2, r3
 8002a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3390      	adds	r3, #144	@ 0x90
 8002a62:	443b      	add	r3, r7
 8002a64:	f843 2c58 	str.w	r2, [r3, #-88]
            if (readings[j] < temp_min[j]) temp_min[j] = readings[j];
 8002a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	3390      	adds	r3, #144	@ 0x90
 8002a70:	443b      	add	r3, r7
 8002a72:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8002a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	3390      	adds	r3, #144	@ 0x90
 8002a7e:	443b      	add	r3, r7
 8002a80:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d20d      	bcs.n	8002aa4 <calibrate_sensors+0x238>
 8002a88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	3390      	adds	r3, #144	@ 0x90
 8002a90:	443b      	add	r3, r7
 8002a92:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8002a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	3390      	adds	r3, #144	@ 0x90
 8002a9e:	443b      	add	r3, r7
 8002aa0:	f823 2c60 	strh.w	r2, [r3, #-96]
            if (readings[j] > temp_max[j]) temp_max[j] = readings[j];
 8002aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	3390      	adds	r3, #144	@ 0x90
 8002aac:	443b      	add	r3, r7
 8002aae:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8002ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	3390      	adds	r3, #144	@ 0x90
 8002aba:	443b      	add	r3, r7
 8002abc:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d90d      	bls.n	8002ae0 <calibrate_sensors+0x274>
 8002ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	3390      	adds	r3, #144	@ 0x90
 8002acc:	443b      	add	r3, r7
 8002ace:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8002ad2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	3390      	adds	r3, #144	@ 0x90
 8002ada:	443b      	add	r3, r7
 8002adc:	f823 2c68 	strh.w	r2, [r3, #-104]
        for (int j = 0; j < 4; j++) {
 8002ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002aea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	dda4      	ble.n	8002a3c <calibrate_sensors+0x1d0>
        }
        HAL_Delay(10);
 8002af2:	200a      	movs	r0, #10
 8002af4:	f000 ff18 	bl	8003928 <HAL_Delay>
    for (int i = 0; i < active_readings; i++) {
 8002af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002afc:	3301      	adds	r3, #1
 8002afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f63f af7f 	bhi.w	8002a0c <calibrate_sensors+0x1a0>
    }

    // Calculate active response levels and noise
    uint16_t active_avg[4];
    for (int i = 0; i < 4; i++) {
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b14:	e076      	b.n	8002c04 <calibrate_sensors+0x398>
 8002b16:	bf00      	nop
 8002b18:	0800c2e8 	.word	0x0800c2e8
 8002b1c:	2000148c 	.word	0x2000148c
 8002b20:	0800c310 	.word	0x0800c310
 8002b24:	20000224 	.word	0x20000224
 8002b28:	0800c334 	.word	0x0800c334
 8002b2c:	0800c368 	.word	0x0800c368
 8002b30:	40023800 	.word	0x40023800
 8002b34:	0800c394 	.word	0x0800c394
 8002b38:	0800c3b0 	.word	0x0800c3b0
 8002b3c:	0800c3cc 	.word	0x0800c3cc
 8002b40:	0800c3f0 	.word	0x0800c3f0
 8002b44:	0800c42c 	.word	0x0800c42c
 8002b48:	0800c450 	.word	0x0800c450
 8002b4c:	0800c464 	.word	0x0800c464
 8002b50:	0800c478 	.word	0x0800c478
 8002b54:	0800c48c 	.word	0x0800c48c
 8002b58:	0800c4a0 	.word	0x0800c4a0
 8002b5c:	0800c870 	.word	0x0800c870
        active_avg[i] = active_sum[i] / active_readings;
 8002b60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	3390      	adds	r3, #144	@ 0x90
 8002b68:	443b      	add	r3, r7
 8002b6a:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	3390      	adds	r3, #144	@ 0x90
 8002b7e:	443b      	add	r3, r7
 8002b80:	f823 2c70 	strh.w	r2, [r3, #-112]
        sensor_cal.sensor_min[i] = temp_min[i];
 8002b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	3390      	adds	r3, #144	@ 0x90
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f833 1c60 	ldrh.w	r1, [r3, #-96]
 8002b92:	4aaf      	ldr	r2, [pc, #700]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b98:	3308      	adds	r3, #8
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	460a      	mov	r2, r1
 8002ba0:	805a      	strh	r2, [r3, #2]
        sensor_cal.sensor_max[i] = temp_max[i];
 8002ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	3390      	adds	r3, #144	@ 0x90
 8002baa:	443b      	add	r3, r7
 8002bac:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 8002bb0:	4aa7      	ldr	r2, [pc, #668]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002bb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	805a      	strh	r2, [r3, #2]
        sensor_cal.noise_levels[i] = (float)(temp_max[i] - temp_min[i]);
 8002bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	3390      	adds	r3, #144	@ 0x90
 8002bc8:	443b      	add	r3, r7
 8002bca:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	3390      	adds	r3, #144	@ 0x90
 8002bd8:	443b      	add	r3, r7
 8002bda:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be8:	4a99      	ldr	r2, [pc, #612]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bee:	3308      	adds	r3, #8
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8002bfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bfe:	3301      	adds	r3, #1
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	dda9      	ble.n	8002b60 <calibrate_sensors+0x2f4>
    }

    send_bluetooth_message("Active sensor response (emitters ON):\r\n");
 8002c0c:	4891      	ldr	r0, [pc, #580]	@ (8002e54 <calibrate_sensors+0x5e8>)
 8002c0e:	f7fe f9e5 	bl	8000fdc <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d (noise: %.1f)\r\n", active_avg[0], sensor_cal.noise_levels[0]);
 8002c12:	8c3b      	ldrh	r3, [r7, #32]
 8002c14:	461c      	mov	r4, r3
 8002c16:	4b8e      	ldr	r3, [pc, #568]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc9c 	bl	8000558 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4621      	mov	r1, r4
 8002c26:	488c      	ldr	r0, [pc, #560]	@ (8002e58 <calibrate_sensors+0x5ec>)
 8002c28:	f7fe f9ee 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d (noise: %.1f)\r\n", active_avg[1], sensor_cal.noise_levels[1]);
 8002c2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c2e:	461c      	mov	r4, r3
 8002c30:	4b87      	ldr	r3, [pc, #540]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fc8f 	bl	8000558 <__aeabi_f2d>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4621      	mov	r1, r4
 8002c40:	4886      	ldr	r0, [pc, #536]	@ (8002e5c <calibrate_sensors+0x5f0>)
 8002c42:	f7fe f9e1 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d (noise: %.1f)\r\n", active_avg[2], sensor_cal.noise_levels[2]);
 8002c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c48:	461c      	mov	r4, r3
 8002c4a:	4b81      	ldr	r3, [pc, #516]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc82 	bl	8000558 <__aeabi_f2d>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4621      	mov	r1, r4
 8002c5a:	4881      	ldr	r0, [pc, #516]	@ (8002e60 <calibrate_sensors+0x5f4>)
 8002c5c:	f7fe f9d4 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d (noise: %.1f)\r\n", active_avg[3], sensor_cal.noise_levels[3]);
 8002c60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002c62:	461c      	mov	r4, r3
 8002c64:	4b7a      	ldr	r3, [pc, #488]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc75 	bl	8000558 <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4621      	mov	r1, r4
 8002c74:	487b      	ldr	r0, [pc, #492]	@ (8002e64 <calibrate_sensors+0x5f8>)
 8002c76:	f7fe f9c7 	bl	8001008 <send_bluetooth_printf>

    // Phase 4: Dynamic Threshold Calculation
    send_bluetooth_message("Phase 4: Calculating dynamic wall detection thresholds\r\n");
 8002c7a:	487b      	ldr	r0, [pc, #492]	@ (8002e68 <calibrate_sensors+0x5fc>)
 8002c7c:	f7fe f9ae 	bl	8000fdc <send_bluetooth_message>

    // Calculate differential response (active - ambient)
    uint16_t differential[4];
    for (int i = 0; i < 4; i++) {
 8002c80:	2300      	movs	r3, #0
 8002c82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c84:	e028      	b.n	8002cd8 <calibrate_sensors+0x46c>
        if (active_avg[i] > sensor_cal.ambient_baseline[i]) {
 8002c86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	3390      	adds	r3, #144	@ 0x90
 8002c8c:	443b      	add	r3, r7
 8002c8e:	f833 2c70 	ldrh.w	r2, [r3, #-112]
 8002c92:	496f      	ldr	r1, [pc, #444]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c96:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d912      	bls.n	8002cc4 <calibrate_sensors+0x458>
            differential[i] = active_avg[i] - sensor_cal.ambient_baseline[i];
 8002c9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	3390      	adds	r3, #144	@ 0x90
 8002ca4:	443b      	add	r3, r7
 8002ca6:	f833 2c70 	ldrh.w	r2, [r3, #-112]
 8002caa:	4969      	ldr	r1, [pc, #420]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002cac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	3390      	adds	r3, #144	@ 0x90
 8002cbc:	443b      	add	r3, r7
 8002cbe:	f823 2c78 	strh.w	r2, [r3, #-120]
 8002cc2:	e006      	b.n	8002cd2 <calibrate_sensors+0x466>
        } else {
            differential[i] = 0; // Sensor may be faulty
 8002cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	3390      	adds	r3, #144	@ 0x90
 8002cca:	443b      	add	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f823 2c78 	strh.w	r2, [r3, #-120]
    for (int i = 0; i < 4; i++) {
 8002cd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002cd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	ddd3      	ble.n	8002c86 <calibrate_sensors+0x41a>
    }

    // Set dynamic thresholds based on differential response and noise
    // Front sensors (0,1) typically have higher response near walls
    // Side sensors (2,3) have different response characteristics
    for (int i = 0; i < 4; i++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ce2:	e08d      	b.n	8002e00 <calibrate_sensors+0x594>
        if (i < 2) { // Front sensors
 8002ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	dc30      	bgt.n	8002d4c <calibrate_sensors+0x4e0>
            // For front sensors, set threshold at 40% of differential + noise margin
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8002cea:	4a59      	ldr	r2, [pc, #356]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                          (differential[i] * 0.4f) +
 8002cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	3390      	adds	r3, #144	@ 0x90
 8002d00:	443b      	add	r3, r7
 8002d02:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0e:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8002e6c <calibrate_sensors+0x600>
 8002d12:	ee67 7aa6 	vmul.f32	s15, s15, s13
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8002d16:	ee37 7a27 	vadd.f32	s14, s14, s15
                                          (sensor_cal.noise_levels[i] * 3.0f);
 8002d1a:	4a4d      	ldr	r2, [pc, #308]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002d1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d1e:	3308      	adds	r3, #8
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002d2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                          (differential[i] * 0.4f) +
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8002d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d3a:	ee17 3a90 	vmov	r3, s15
 8002d3e:	b299      	uxth	r1, r3
 8002d40:	4a43      	ldr	r2, [pc, #268]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d44:	3304      	adds	r3, #4
 8002d46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002d4a:	e02f      	b.n	8002dac <calibrate_sensors+0x540>
        } else { // Side sensors
            // For side sensors, set threshold at 30% of differential + noise margin
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8002d4c:	4a40      	ldr	r2, [pc, #256]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                          (differential[i] * 0.3f) +
 8002d5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	3390      	adds	r3, #144	@ 0x90
 8002d62:	443b      	add	r3, r7
 8002d64:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002d68:	ee07 3a90 	vmov	s15, r3
 8002d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d70:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002e70 <calibrate_sensors+0x604>
 8002d74:	ee67 7aa6 	vmul.f32	s15, s15, s13
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8002d78:	ee37 7a27 	vadd.f32	s14, s14, s15
                                          (sensor_cal.noise_levels[i] * 3.0f);
 8002d7c:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002d7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d80:	3308      	adds	r3, #8
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	edd3 7a00 	vldr	s15, [r3]
 8002d8c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8002d90:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                          (differential[i] * 0.3f) +
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8002d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9c:	ee17 3a90 	vmov	r3, s15
 8002da0:	b299      	uxth	r1, r3
 8002da2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da6:	3304      	adds	r3, #4
 8002da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }

        // Sanity check - ensure threshold is reasonable
        if (sensor_cal.wall_thresholds[i] < sensor_cal.ambient_baseline[i] + 100) {
 8002dac:	4a28      	ldr	r2, [pc, #160]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002db4:	3363      	adds	r3, #99	@ 0x63
 8002db6:	4926      	ldr	r1, [pc, #152]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002db8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002dba:	3204      	adds	r2, #4
 8002dbc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	db0a      	blt.n	8002dda <calibrate_sensors+0x56e>
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] + 100;
 8002dc4:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dcc:	3364      	adds	r3, #100	@ 0x64
 8002dce:	b299      	uxth	r1, r3
 8002dd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002dd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        if (sensor_cal.wall_thresholds[i] > 3500) { // Don't exceed reasonable ADC range
 8002dda:	4a1d      	ldr	r2, [pc, #116]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dde:	3304      	adds	r3, #4
 8002de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002de4:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d906      	bls.n	8002dfa <calibrate_sensors+0x58e>
            sensor_cal.wall_thresholds[i] = 3500;
 8002dec:	4a18      	ldr	r2, [pc, #96]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002df0:	3304      	adds	r3, #4
 8002df2:	f640 51ac 	movw	r1, #3500	@ 0xdac
 8002df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 8002dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	f77f af6e 	ble.w	8002ce4 <calibrate_sensors+0x478>
        }
    }

    send_bluetooth_message("Dynamic wall detection thresholds:\r\n");
 8002e08:	481a      	ldr	r0, [pc, #104]	@ (8002e74 <calibrate_sensors+0x608>)
 8002e0a:	f7fe f8e7 	bl	8000fdc <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.wall_thresholds[0]);
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002e10:	891b      	ldrh	r3, [r3, #8]
 8002e12:	4619      	mov	r1, r3
 8002e14:	4818      	ldr	r0, [pc, #96]	@ (8002e78 <calibrate_sensors+0x60c>)
 8002e16:	f7fe f8f7 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.wall_thresholds[1]);
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002e1c:	895b      	ldrh	r3, [r3, #10]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4816      	ldr	r0, [pc, #88]	@ (8002e7c <calibrate_sensors+0x610>)
 8002e22:	f7fe f8f1 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.wall_thresholds[2]);
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002e28:	899b      	ldrh	r3, [r3, #12]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4814      	ldr	r0, [pc, #80]	@ (8002e80 <calibrate_sensors+0x614>)
 8002e2e:	f7fe f8eb 	bl	8001008 <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.wall_thresholds[3]);
 8002e32:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <calibrate_sensors+0x5e4>)
 8002e34:	89db      	ldrh	r3, [r3, #14]
 8002e36:	4619      	mov	r1, r3
 8002e38:	4812      	ldr	r0, [pc, #72]	@ (8002e84 <calibrate_sensors+0x618>)
 8002e3a:	f7fe f8e5 	bl	8001008 <send_bluetooth_printf>

    // Phase 5: Battery Baseline Measurement
    send_bluetooth_message("Phase 5: Battery voltage baseline measurement\r\n");
 8002e3e:	4812      	ldr	r0, [pc, #72]	@ (8002e88 <calibrate_sensors+0x61c>)
 8002e40:	f7fe f8cc 	bl	8000fdc <send_bluetooth_message>

    uint32_t battery_sum = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	677b      	str	r3, [r7, #116]	@ 0x74
    for (int i = 0; i < 20; i++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e4c:	e02c      	b.n	8002ea8 <calibrate_sensors+0x63c>
 8002e4e:	bf00      	nop
 8002e50:	2000148c 	.word	0x2000148c
 8002e54:	0800c4d8 	.word	0x0800c4d8
 8002e58:	0800c500 	.word	0x0800c500
 8002e5c:	0800c524 	.word	0x0800c524
 8002e60:	0800c548 	.word	0x0800c548
 8002e64:	0800c56c 	.word	0x0800c56c
 8002e68:	0800c590 	.word	0x0800c590
 8002e6c:	3ecccccd 	.word	0x3ecccccd
 8002e70:	3e99999a 	.word	0x3e99999a
 8002e74:	0800c5cc 	.word	0x0800c5cc
 8002e78:	0800c450 	.word	0x0800c450
 8002e7c:	0800c464 	.word	0x0800c464
 8002e80:	0800c478 	.word	0x0800c478
 8002e84:	0800c48c 	.word	0x0800c48c
 8002e88:	0800c5f4 	.word	0x0800c5f4
        battery_sum += read_adc_channel(ADC_CHANNEL_0);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7ff fb41 	bl	8002514 <read_adc_channel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e98:	4413      	add	r3, r2
 8002e9a:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_Delay(10);
 8002e9c:	200a      	movs	r0, #10
 8002e9e:	f000 fd43 	bl	8003928 <HAL_Delay>
    for (int i = 0; i < 20; i++) {
 8002ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eaa:	2b13      	cmp	r3, #19
 8002eac:	ddee      	ble.n	8002e8c <calibrate_sensors+0x620>
    }
    sensor_cal.battery_baseline = battery_sum / 20;
 8002eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb0:	4a78      	ldr	r2, [pc, #480]	@ (8003094 <calibrate_sensors+0x828>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	091b      	lsrs	r3, r3, #4
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b77      	ldr	r3, [pc, #476]	@ (8003098 <calibrate_sensors+0x82c>)
 8002ebc:	821a      	strh	r2, [r3, #16]

    float battery_voltage = (sensor_cal.battery_baseline * 3.3f) / 4096.0f;
 8002ebe:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <calibrate_sensors+0x82c>)
 8002ec0:	8a1b      	ldrh	r3, [r3, #16]
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eca:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 800309c <calibrate_sensors+0x830>
 8002ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ed2:	eddf 6a73 	vldr	s13, [pc, #460]	@ 80030a0 <calibrate_sensors+0x834>
 8002ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002eda:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
                         sensor_cal.battery_baseline, battery_voltage);
 8002ede:	4b6e      	ldr	r3, [pc, #440]	@ (8003098 <calibrate_sensors+0x82c>)
 8002ee0:	8a1b      	ldrh	r3, [r3, #16]
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
 8002ee2:	461c      	mov	r4, r3
 8002ee4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002ee6:	f7fd fb37 	bl	8000558 <__aeabi_f2d>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4621      	mov	r1, r4
 8002ef0:	486c      	ldr	r0, [pc, #432]	@ (80030a4 <calibrate_sensors+0x838>)
 8002ef2:	f7fe f889 	bl	8001008 <send_bluetooth_printf>

    // Phase 6: Sensor Health Validation
    send_bluetooth_message("Phase 6: Sensor health validation\r\n");
 8002ef6:	486c      	ldr	r0, [pc, #432]	@ (80030a8 <calibrate_sensors+0x83c>)
 8002ef8:	f7fe f870 	bl	8000fdc <send_bluetooth_message>

    bool all_sensors_healthy = true;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Check each sensor
    const char* sensor_names[4] = {"Front Left", "Front Right", "Side Left", "Side Right"};
 8002f02:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <calibrate_sensors+0x840>)
 8002f04:	f107 0408 	add.w	r4, r7, #8
 8002f08:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for (int i = 0; i < 4; i++) {
 8002f0e:	2300      	movs	r3, #0
 8002f10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f12:	e079      	b.n	8003008 <calibrate_sensors+0x79c>
        bool sensor_healthy = true;
 8002f14:	2301      	movs	r3, #1
 8002f16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

        // Check if sensor shows reasonable differential response
        if (differential[i] < 50) {
 8002f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	3390      	adds	r3, #144	@ 0x90
 8002f20:	443b      	add	r3, r7
 8002f22:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8002f26:	2b31      	cmp	r3, #49	@ 0x31
 8002f28:	d812      	bhi.n	8002f50 <calibrate_sensors+0x6e4>
            send_bluetooth_printf("⚠️ %s: Low differential response (%d)\r\n",
 8002f2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	3390      	adds	r3, #144	@ 0x90
 8002f30:	443b      	add	r3, r7
 8002f32:	f853 1c88 	ldr.w	r1, [r3, #-136]
                                 sensor_names[i], differential[i]);
 8002f36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	3390      	adds	r3, #144	@ 0x90
 8002f3c:	443b      	add	r3, r7
 8002f3e:	f833 3c78 	ldrh.w	r3, [r3, #-120]
            send_bluetooth_printf("⚠️ %s: Low differential response (%d)\r\n",
 8002f42:	461a      	mov	r2, r3
 8002f44:	485a      	ldr	r0, [pc, #360]	@ (80030b0 <calibrate_sensors+0x844>)
 8002f46:	f7fe f85f 	bl	8001008 <send_bluetooth_printf>
            sensor_healthy = false;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        // Check noise levels
        if (sensor_cal.noise_levels[i] > 200) {
 8002f50:	4a51      	ldr	r2, [pc, #324]	@ (8003098 <calibrate_sensors+0x82c>)
 8002f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f54:	3308      	adds	r3, #8
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80030b4 <calibrate_sensors+0x848>
 8002f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6c:	dd18      	ble.n	8002fa0 <calibrate_sensors+0x734>
            send_bluetooth_printf("⚠️ %s: High noise level (%.1f)\r\n",
 8002f6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	3390      	adds	r3, #144	@ 0x90
 8002f74:	443b      	add	r3, r7
 8002f76:	f853 4c88 	ldr.w	r4, [r3, #-136]
                                 sensor_names[i], sensor_cal.noise_levels[i]);
 8002f7a:	4a47      	ldr	r2, [pc, #284]	@ (8003098 <calibrate_sensors+0x82c>)
 8002f7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f7e:	3308      	adds	r3, #8
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	3304      	adds	r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
            send_bluetooth_printf("⚠️ %s: High noise level (%.1f)\r\n",
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fae5 	bl	8000558 <__aeabi_f2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4621      	mov	r1, r4
 8002f94:	4848      	ldr	r0, [pc, #288]	@ (80030b8 <calibrate_sensors+0x84c>)
 8002f96:	f7fe f837 	bl	8001008 <send_bluetooth_printf>
            sensor_healthy = false;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        // Check if readings are within reasonable ADC range
        if (sensor_cal.ambient_baseline[i] > 3800 || sensor_cal.ambient_baseline[i] < 10) {
 8002fa0:	4a3d      	ldr	r2, [pc, #244]	@ (8003098 <calibrate_sensors+0x82c>)
 8002fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa8:	f640 62d8 	movw	r2, #3800	@ 0xed8
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d805      	bhi.n	8002fbc <calibrate_sensors+0x750>
 8002fb0:	4a39      	ldr	r2, [pc, #228]	@ (8003098 <calibrate_sensors+0x82c>)
 8002fb2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb8:	2b09      	cmp	r3, #9
 8002fba:	d810      	bhi.n	8002fde <calibrate_sensors+0x772>
            send_bluetooth_printf("⚠️ %s: Ambient reading out of range (%d)\r\n",
 8002fbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3390      	adds	r3, #144	@ 0x90
 8002fc2:	443b      	add	r3, r7
 8002fc4:	f853 1c88 	ldr.w	r1, [r3, #-136]
                                 sensor_names[i], sensor_cal.ambient_baseline[i]);
 8002fc8:	4a33      	ldr	r2, [pc, #204]	@ (8003098 <calibrate_sensors+0x82c>)
 8002fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
            send_bluetooth_printf("⚠️ %s: Ambient reading out of range (%d)\r\n",
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	483a      	ldr	r0, [pc, #232]	@ (80030bc <calibrate_sensors+0x850>)
 8002fd4:	f7fe f818 	bl	8001008 <send_bluetooth_printf>
            sensor_healthy = false;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (sensor_healthy) {
 8002fde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <calibrate_sensors+0x790>
            send_bluetooth_printf("✅ %s: Healthy\r\n", sensor_names[i]);
 8002fe6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	3390      	adds	r3, #144	@ 0x90
 8002fec:	443b      	add	r3, r7
 8002fee:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4832      	ldr	r0, [pc, #200]	@ (80030c0 <calibrate_sensors+0x854>)
 8002ff6:	f7fe f807 	bl	8001008 <send_bluetooth_printf>
 8002ffa:	e002      	b.n	8003002 <calibrate_sensors+0x796>
        } else {
            all_sensors_healthy = false;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    for (int i = 0; i < 4; i++) {
 8003002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003004:	3301      	adds	r3, #1
 8003006:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003008:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800300a:	2b03      	cmp	r3, #3
 800300c:	dd82      	ble.n	8002f14 <calibrate_sensors+0x6a8>
        }
    }

    // Check battery
    if (battery_voltage < 3.0f) {
 800300e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003012:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d506      	bpl.n	800302e <calibrate_sensors+0x7c2>
        send_bluetooth_message("⚠️ Battery: Low voltage detected\r\n");
 8003020:	4828      	ldr	r0, [pc, #160]	@ (80030c4 <calibrate_sensors+0x858>)
 8003022:	f7fd ffdb 	bl	8000fdc <send_bluetooth_message>
        all_sensors_healthy = false;
 8003026:	2300      	movs	r3, #0
 8003028:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800302c:	e012      	b.n	8003054 <calibrate_sensors+0x7e8>
    } else if (battery_voltage > 4.5f) {
 800302e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003032:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	dd06      	ble.n	800304e <calibrate_sensors+0x7e2>
        send_bluetooth_message("⚠️ Battery: Voltage too high\r\n");
 8003040:	4821      	ldr	r0, [pc, #132]	@ (80030c8 <calibrate_sensors+0x85c>)
 8003042:	f7fd ffcb 	bl	8000fdc <send_bluetooth_message>
        all_sensors_healthy = false;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800304c:	e002      	b.n	8003054 <calibrate_sensors+0x7e8>
    } else {
        send_bluetooth_message("✅ Battery: Healthy\r\n");
 800304e:	481f      	ldr	r0, [pc, #124]	@ (80030cc <calibrate_sensors+0x860>)
 8003050:	f7fd ffc4 	bl	8000fdc <send_bluetooth_message>
    }

    // Phase 7: Calibration Complete
    sensor_cal.calibration_valid = all_sensors_healthy;
 8003054:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <calibrate_sensors+0x82c>)
 8003056:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800305a:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22

    turn_off_emitters(); // Save power
 800305e:	f7ff fa39 	bl	80024d4 <turn_off_emitters>

    if (sensor_cal.calibration_valid) {
 8003062:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <calibrate_sensors+0x82c>)
 8003064:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <calibrate_sensors+0x80e>
        send_bluetooth_message("✅ SENSOR CALIBRATION COMPLETE - All systems nominal\r\n");
 800306c:	4818      	ldr	r0, [pc, #96]	@ (80030d0 <calibrate_sensors+0x864>)
 800306e:	f7fd ffb5 	bl	8000fdc <send_bluetooth_message>
        send_bluetooth_message("Dynamic thresholds will be used for wall detection\r\n");
 8003072:	4818      	ldr	r0, [pc, #96]	@ (80030d4 <calibrate_sensors+0x868>)
 8003074:	f7fd ffb2 	bl	8000fdc <send_bluetooth_message>
 8003078:	e005      	b.n	8003086 <calibrate_sensors+0x81a>
    } else {
        send_bluetooth_message("⚠️ SENSOR CALIBRATION COMPLETE - Some issues detected\r\n");
 800307a:	4817      	ldr	r0, [pc, #92]	@ (80030d8 <calibrate_sensors+0x86c>)
 800307c:	f7fd ffae 	bl	8000fdc <send_bluetooth_message>
        send_bluetooth_message("Robot will continue with degraded sensor performance\r\n");
 8003080:	4816      	ldr	r0, [pc, #88]	@ (80030dc <calibrate_sensors+0x870>)
 8003082:	f7fd ffab 	bl	8000fdc <send_bluetooth_message>
    }

    send_bluetooth_message("=====================================\r\n");
 8003086:	4816      	ldr	r0, [pc, #88]	@ (80030e0 <calibrate_sensors+0x874>)
 8003088:	f7fd ffa8 	bl	8000fdc <send_bluetooth_message>
}
 800308c:	3794      	adds	r7, #148	@ 0x94
 800308e:	46bd      	mov	sp, r7
 8003090:	bd90      	pop	{r4, r7, pc}
 8003092:	bf00      	nop
 8003094:	cccccccd 	.word	0xcccccccd
 8003098:	2000148c 	.word	0x2000148c
 800309c:	40533333 	.word	0x40533333
 80030a0:	45800000 	.word	0x45800000
 80030a4:	0800c624 	.word	0x0800c624
 80030a8:	0800c644 	.word	0x0800c644
 80030ac:	0800c2b0 	.word	0x0800c2b0
 80030b0:	0800c668 	.word	0x0800c668
 80030b4:	43480000 	.word	0x43480000
 80030b8:	0800c694 	.word	0x0800c694
 80030bc:	0800c6bc 	.word	0x0800c6bc
 80030c0:	0800c6ec 	.word	0x0800c6ec
 80030c4:	0800c700 	.word	0x0800c700
 80030c8:	0800c728 	.word	0x0800c728
 80030cc:	0800c74c 	.word	0x0800c74c
 80030d0:	0800c764 	.word	0x0800c764
 80030d4:	0800c79c 	.word	0x0800c79c
 80030d8:	0800c7d4 	.word	0x0800c7d4
 80030dc:	0800c810 	.word	0x0800c810
 80030e0:	0800c848 	.word	0x0800c848

080030e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_MspInit+0x4c>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003130 <HAL_MspInit+0x4c>)
 80030f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003130 <HAL_MspInit+0x4c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_MspInit+0x4c>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <HAL_MspInit+0x4c>)
 8003110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003114:	6413      	str	r3, [r2, #64]	@ 0x40
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_MspInit+0x4c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a17      	ldr	r2, [pc, #92]	@ (80031b0 <HAL_ADC_MspInit+0x7c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d127      	bne.n	80031a6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_ADC_MspInit+0x80>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315e:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <HAL_ADC_MspInit+0x80>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003164:	6453      	str	r3, [r2, #68]	@ 0x44
 8003166:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <HAL_ADC_MspInit+0x80>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <HAL_ADC_MspInit+0x80>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	4a0e      	ldr	r2, [pc, #56]	@ (80031b4 <HAL_ADC_MspInit+0x80>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6313      	str	r3, [r2, #48]	@ 0x30
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <HAL_ADC_MspInit+0x80>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 800318e:	233d      	movs	r3, #61	@ 0x3d
 8003190:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003192:	2303      	movs	r3, #3
 8003194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4805      	ldr	r0, [pc, #20]	@ (80031b8 <HAL_ADC_MspInit+0x84>)
 80031a2:	f001 f97b 	bl	800449c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	@ 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40012000 	.word	0x40012000
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020000 	.word	0x40020000

080031bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	@ 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <HAL_SPI_MspInit+0x84>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d12c      	bne.n	8003238 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <HAL_SPI_MspInit+0x88>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_SPI_MspInit+0x88>)
 80031e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_SPI_MspInit+0x88>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <HAL_SPI_MspInit+0x88>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	4a10      	ldr	r2, [pc, #64]	@ (8003244 <HAL_SPI_MspInit+0x88>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	6313      	str	r3, [r2, #48]	@ 0x30
 800320a:	4b0e      	ldr	r3, [pc, #56]	@ (8003244 <HAL_SPI_MspInit+0x88>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 8003216:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800321a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003228:	2305      	movs	r3, #5
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	4619      	mov	r1, r3
 8003232:	4805      	ldr	r0, [pc, #20]	@ (8003248 <HAL_SPI_MspInit+0x8c>)
 8003234:	f001 f932 	bl	800449c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003238:	bf00      	nop
 800323a:	3728      	adds	r7, #40	@ 0x28
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40003800 	.word	0x40003800
 8003244:	40023800 	.word	0x40023800
 8003248:	40020400 	.word	0x40020400

0800324c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_TIM_Base_MspInit+0x70>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d116      	bne.n	800328c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b17      	ldr	r3, [pc, #92]	@ (80032c0 <HAL_TIM_Base_MspInit+0x74>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	4a16      	ldr	r2, [pc, #88]	@ (80032c0 <HAL_TIM_Base_MspInit+0x74>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6453      	str	r3, [r2, #68]	@ 0x44
 800326e:	4b14      	ldr	r3, [pc, #80]	@ (80032c0 <HAL_TIM_Base_MspInit+0x74>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	2107      	movs	r1, #7
 800327e:	2019      	movs	r0, #25
 8003280:	f001 f843 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003284:	2019      	movs	r0, #25
 8003286:	f001 f85c 	bl	8004342 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800328a:	e012      	b.n	80032b2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0c      	ldr	r2, [pc, #48]	@ (80032c4 <HAL_TIM_Base_MspInit+0x78>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d10d      	bne.n	80032b2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_TIM_Base_MspInit+0x74>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	4a08      	ldr	r2, [pc, #32]	@ (80032c0 <HAL_TIM_Base_MspInit+0x74>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a6:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_TIM_Base_MspInit+0x74>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40010000 	.word	0x40010000
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40000400 	.word	0x40000400

080032c8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	@ 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e8:	d14b      	bne.n	8003382 <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
 80032ee:	4b3f      	ldr	r3, [pc, #252]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	4a3e      	ldr	r2, [pc, #248]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032fa:	4b3c      	ldr	r3, [pc, #240]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	4a37      	ldr	r2, [pc, #220]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6313      	str	r3, [r2, #48]	@ 0x30
 8003316:	4b35      	ldr	r3, [pc, #212]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	4a30      	ldr	r2, [pc, #192]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	6313      	str	r3, [r2, #48]	@ 0x30
 8003332:	4b2e      	ldr	r3, [pc, #184]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 800333e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003350:	2301      	movs	r3, #1
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4825      	ldr	r0, [pc, #148]	@ (80033f0 <HAL_TIM_Encoder_MspInit+0x128>)
 800335c:	f001 f89e 	bl	800449c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8003360:	2308      	movs	r3, #8
 8003362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003370:	2301      	movs	r3, #1
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	4619      	mov	r1, r3
 800337a:	481e      	ldr	r0, [pc, #120]	@ (80033f4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800337c:	f001 f88e 	bl	800449c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003380:	e030      	b.n	80033e4 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a1c      	ldr	r2, [pc, #112]	@ (80033f8 <HAL_TIM_Encoder_MspInit+0x130>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d12b      	bne.n	80033e4 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6413      	str	r3, [r2, #64]	@ 0x40
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b0:	4a0e      	ldr	r2, [pc, #56]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 80033b2:	f043 0302 	orr.w	r3, r3, #2
 80033b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b8:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <HAL_TIM_Encoder_MspInit+0x124>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 80033c4:	23c0      	movs	r3, #192	@ 0xc0
 80033c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033d4:	2302      	movs	r3, #2
 80033d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d8:	f107 031c 	add.w	r3, r7, #28
 80033dc:	4619      	mov	r1, r3
 80033de:	4805      	ldr	r0, [pc, #20]	@ (80033f4 <HAL_TIM_Encoder_MspInit+0x12c>)
 80033e0:	f001 f85c 	bl	800449c <HAL_GPIO_Init>
}
 80033e4:	bf00      	nop
 80033e6:	3730      	adds	r7, #48	@ 0x30
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020000 	.word	0x40020000
 80033f4:	40020400 	.word	0x40020400
 80033f8:	40000800 	.word	0x40000800

080033fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	@ 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a33      	ldr	r2, [pc, #204]	@ (80034e8 <HAL_TIM_MspPostInit+0xec>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d11f      	bne.n	800345e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	4b32      	ldr	r3, [pc, #200]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	4a31      	ldr	r2, [pc, #196]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 8003428:	f043 0301 	orr.w	r3, r3, #1
 800342c:	6313      	str	r3, [r2, #48]	@ 0x30
 800342e:	4b2f      	ldr	r3, [pc, #188]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 800343a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003448:	2300      	movs	r3, #0
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4826      	ldr	r0, [pc, #152]	@ (80034f0 <HAL_TIM_MspPostInit+0xf4>)
 8003458:	f001 f820 	bl	800449c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800345c:	e040      	b.n	80034e0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a24      	ldr	r2, [pc, #144]	@ (80034f4 <HAL_TIM_MspPostInit+0xf8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d13b      	bne.n	80034e0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6313      	str	r3, [r2, #48]	@ 0x30
 8003478:	4b1c      	ldr	r3, [pc, #112]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003484:	2300      	movs	r3, #0
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	4b18      	ldr	r3, [pc, #96]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	4a17      	ldr	r2, [pc, #92]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 800348e:	f043 0302 	orr.w	r3, r3, #2
 8003492:	6313      	str	r3, [r2, #48]	@ 0x30
 8003494:	4b15      	ldr	r3, [pc, #84]	@ (80034ec <HAL_TIM_MspPostInit+0xf0>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 80034a0:	23c0      	movs	r3, #192	@ 0xc0
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034b0:	2302      	movs	r3, #2
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4619      	mov	r1, r3
 80034ba:	480d      	ldr	r0, [pc, #52]	@ (80034f0 <HAL_TIM_MspPostInit+0xf4>)
 80034bc:	f000 ffee 	bl	800449c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 80034c0:	2303      	movs	r3, #3
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034d0:	2302      	movs	r3, #2
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	4807      	ldr	r0, [pc, #28]	@ (80034f8 <HAL_TIM_MspPostInit+0xfc>)
 80034dc:	f000 ffde 	bl	800449c <HAL_GPIO_Init>
}
 80034e0:	bf00      	nop
 80034e2:	3728      	adds	r7, #40	@ 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40020400 	.word	0x40020400

080034fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	@ 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1d      	ldr	r2, [pc, #116]	@ (8003590 <HAL_UART_MspInit+0x94>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d134      	bne.n	8003588 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <HAL_UART_MspInit+0x98>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	4a1b      	ldr	r2, [pc, #108]	@ (8003594 <HAL_UART_MspInit+0x98>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	6453      	str	r3, [r2, #68]	@ 0x44
 800352e:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <HAL_UART_MspInit+0x98>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <HAL_UART_MspInit+0x98>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <HAL_UART_MspInit+0x98>)
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6313      	str	r3, [r2, #48]	@ 0x30
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_UART_MspInit+0x98>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 8003556:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800355a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003568:	2308      	movs	r3, #8
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4619      	mov	r1, r3
 8003572:	4809      	ldr	r0, [pc, #36]	@ (8003598 <HAL_UART_MspInit+0x9c>)
 8003574:	f000 ff92 	bl	800449c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2106      	movs	r1, #6
 800357c:	2047      	movs	r0, #71	@ 0x47
 800357e:	f000 fec4 	bl	800430a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003582:	2047      	movs	r0, #71	@ 0x47
 8003584:	f000 fedd 	bl	8004342 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 8003588:	bf00      	nop
 800358a:	3728      	adds	r7, #40	@ 0x28
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40011400 	.word	0x40011400
 8003594:	40023800 	.word	0x40023800
 8003598:	40020000 	.word	0x40020000

0800359c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <NMI_Handler+0x4>

080035a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <HardFault_Handler+0x4>

080035ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b0:	bf00      	nop
 80035b2:	e7fd      	b.n	80035b0 <MemManage_Handler+0x4>

080035b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <BusFault_Handler+0x4>

080035bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <UsageFault_Handler+0x4>

080035c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d2:	b480      	push	{r7}
 80035d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f2:	f000 f979 	bl	80038e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}

080035fa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 80035fe:	2002      	movs	r0, #2
 8003600:	f001 f904 	bl	800480c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}

08003608 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800360c:	4802      	ldr	r0, [pc, #8]	@ (8003618 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800360e:	f002 fe2f 	bl	8006270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200002c4 	.word	0x200002c4

0800361c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8003620:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003624:	f001 f8f2 	bl	800480c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}

0800362c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003630:	4802      	ldr	r0, [pc, #8]	@ (800363c <USART6_IRQHandler+0x10>)
 8003632:	f003 fd4b 	bl	80070cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200003e4 	.word	0x200003e4

08003640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return 1;
 8003644:	2301      	movs	r3, #1
}
 8003646:	4618      	mov	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <_kill>:

int _kill(int pid, int sig)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800365a:	f005 fa5d 	bl	8008b18 <__errno>
 800365e:	4603      	mov	r3, r0
 8003660:	2216      	movs	r2, #22
 8003662:	601a      	str	r2, [r3, #0]
  return -1;
 8003664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_exit>:

void _exit (int status)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003678:	f04f 31ff 	mov.w	r1, #4294967295
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ffe7 	bl	8003650 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <_exit+0x12>

08003686 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b086      	sub	sp, #24
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e00a      	b.n	80036ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003698:	f3af 8000 	nop.w
 800369c:	4601      	mov	r1, r0
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	60ba      	str	r2, [r7, #8]
 80036a4:	b2ca      	uxtb	r2, r1
 80036a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	3301      	adds	r3, #1
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	dbf0      	blt.n	8003698 <_read+0x12>
  }

  return len;
 80036b6:	687b      	ldr	r3, [r7, #4]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e009      	b.n	80036e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	60ba      	str	r2, [r7, #8]
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	3301      	adds	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	dbf1      	blt.n	80036d2 <_write+0x12>
  }
  return len;
 80036ee:	687b      	ldr	r3, [r7, #4]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <_close>:

int _close(int file)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003720:	605a      	str	r2, [r3, #4]
  return 0;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_isatty>:

int _isatty(int file)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003738:	2301      	movs	r3, #1
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003768:	4a14      	ldr	r2, [pc, #80]	@ (80037bc <_sbrk+0x5c>)
 800376a:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <_sbrk+0x60>)
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003774:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <_sbrk+0x64>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800377c:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <_sbrk+0x64>)
 800377e:	4a12      	ldr	r2, [pc, #72]	@ (80037c8 <_sbrk+0x68>)
 8003780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <_sbrk+0x64>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	429a      	cmp	r2, r3
 800378e:	d207      	bcs.n	80037a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003790:	f005 f9c2 	bl	8008b18 <__errno>
 8003794:	4603      	mov	r3, r0
 8003796:	220c      	movs	r2, #12
 8003798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800379a:	f04f 33ff 	mov.w	r3, #4294967295
 800379e:	e009      	b.n	80037b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <_sbrk+0x64>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037a6:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	4a05      	ldr	r2, [pc, #20]	@ (80037c4 <_sbrk+0x64>)
 80037b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20020000 	.word	0x20020000
 80037c0:	00000400 	.word	0x00000400
 80037c4:	200014c0 	.word	0x200014c0
 80037c8:	20001618 	.word	0x20001618

080037cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <SystemInit+0x20>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d6:	4a05      	ldr	r2, [pc, #20]	@ (80037ec <SystemInit+0x20>)
 80037d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003828 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037f4:	f7ff ffea 	bl	80037cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037f8:	480c      	ldr	r0, [pc, #48]	@ (800382c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037fa:	490d      	ldr	r1, [pc, #52]	@ (8003830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003800:	e002      	b.n	8003808 <LoopCopyDataInit>

08003802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003806:	3304      	adds	r3, #4

08003808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800380a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800380c:	d3f9      	bcc.n	8003802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800380e:	4a0a      	ldr	r2, [pc, #40]	@ (8003838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003810:	4c0a      	ldr	r4, [pc, #40]	@ (800383c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003814:	e001      	b.n	800381a <LoopFillZerobss>

08003816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003818:	3204      	adds	r2, #4

0800381a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800381a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800381c:	d3fb      	bcc.n	8003816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800381e:	f005 f981 	bl	8008b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003822:	f7fd ffcb 	bl	80017bc <main>
  bx  lr    
 8003826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800382c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003830:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003834:	0800cc14 	.word	0x0800cc14
  ldr r2, =_sbss
 8003838:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800383c:	20001614 	.word	0x20001614

08003840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003840:	e7fe      	b.n	8003840 <ADC_IRQHandler>
	...

08003844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003848:	4b0e      	ldr	r3, [pc, #56]	@ (8003884 <HAL_Init+0x40>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0d      	ldr	r2, [pc, #52]	@ (8003884 <HAL_Init+0x40>)
 800384e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_Init+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <HAL_Init+0x40>)
 800385a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800385e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003860:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <HAL_Init+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a07      	ldr	r2, [pc, #28]	@ (8003884 <HAL_Init+0x40>)
 8003866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800386c:	2003      	movs	r0, #3
 800386e:	f000 fd41 	bl	80042f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003872:	200f      	movs	r0, #15
 8003874:	f000 f808 	bl	8003888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003878:	f7ff fc34 	bl	80030e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023c00 	.word	0x40023c00

08003888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003890:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_InitTick+0x54>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4b12      	ldr	r3, [pc, #72]	@ (80038e0 <HAL_InitTick+0x58>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	4619      	mov	r1, r3
 800389a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800389e:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fd59 	bl	800435e <HAL_SYSTICK_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e00e      	b.n	80038d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b0f      	cmp	r3, #15
 80038ba:	d80a      	bhi.n	80038d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038bc:	2200      	movs	r2, #0
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295
 80038c4:	f000 fd21 	bl	800430a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038c8:	4a06      	ldr	r2, [pc, #24]	@ (80038e4 <HAL_InitTick+0x5c>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2000000c 	.word	0x2000000c
 80038e0:	20000014 	.word	0x20000014
 80038e4:	20000010 	.word	0x20000010

080038e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <HAL_IncTick+0x20>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <HAL_IncTick+0x24>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4a04      	ldr	r2, [pc, #16]	@ (800390c <HAL_IncTick+0x24>)
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20000014 	.word	0x20000014
 800390c:	200014c4 	.word	0x200014c4

08003910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return uwTick;
 8003914:	4b03      	ldr	r3, [pc, #12]	@ (8003924 <HAL_GetTick+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
}
 8003918:	4618      	mov	r0, r3
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	200014c4 	.word	0x200014c4

08003928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003930:	f7ff ffee 	bl	8003910 <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d005      	beq.n	800394e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_Delay+0x44>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	461a      	mov	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800394e:	bf00      	nop
 8003950:	f7ff ffde 	bl	8003910 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d8f7      	bhi.n	8003950 <HAL_Delay+0x28>
  {
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000014 	.word	0x20000014

08003970 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e033      	b.n	80039ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fbd0 	bl	8003134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039b6:	f023 0302 	bic.w	r3, r3, #2
 80039ba:	f043 0202 	orr.w	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 faca 	bl	8003f5c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	f043 0201 	orr.w	r2, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80039de:	e001      	b.n	80039e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Start+0x1a>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e097      	b.n	8003b42 <HAL_ADC_Start+0x14a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d018      	beq.n	8003a5a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a38:	4b45      	ldr	r3, [pc, #276]	@ (8003b50 <HAL_ADC_Start+0x158>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a45      	ldr	r2, [pc, #276]	@ (8003b54 <HAL_ADC_Start+0x15c>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	0c9a      	lsrs	r2, r3, #18
 8003a44:	4613      	mov	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003a4c:	e002      	b.n	8003a54 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f9      	bne.n	8003a4e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d15f      	bne.n	8003b28 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	d106      	bne.n	8003ab6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aac:	f023 0206 	bic.w	r2, r3, #6
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ab4:	e002      	b.n	8003abc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac4:	4b24      	ldr	r3, [pc, #144]	@ (8003b58 <HAL_ADC_Start+0x160>)
 8003ac6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d129      	bne.n	8003b40 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e020      	b.n	8003b40 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <HAL_ADC_Start+0x164>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d11b      	bne.n	8003b40 <HAL_ADC_Start+0x148>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d114      	bne.n	8003b40 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b24:	609a      	str	r2, [r3, #8]
 8003b26:	e00b      	b.n	8003b40 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0210 	orr.w	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	2000000c 	.word	0x2000000c
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	40012000 	.word	0x40012000

08003b60 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_ADC_Stop+0x16>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e021      	b.n	8003bba <HAL_ADC_Stop+0x5a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d109      	bne.n	8003bb0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ba4:	f023 0301 	bic.w	r3, r3, #1
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be2:	d113      	bne.n	8003c0c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d10b      	bne.n	8003c0c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e063      	b.n	8003cd4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c0c:	f7ff fe80 	bl	8003910 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c12:	e021      	b.n	8003c58 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d01d      	beq.n	8003c58 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_ADC_PollForConversion+0x6c>
 8003c22:	f7ff fe75 	bl	8003910 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d212      	bcs.n	8003c58 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d00b      	beq.n	8003c58 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	f043 0204 	orr.w	r2, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e03d      	b.n	8003cd4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d1d6      	bne.n	8003c14 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f06f 0212 	mvn.w	r2, #18
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d123      	bne.n	8003cd2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11f      	bne.n	8003cd2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d111      	bne.n	8003cd2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e113      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x244>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b09      	cmp	r3, #9
 8003d22:	d925      	bls.n	8003d70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68d9      	ldr	r1, [r3, #12]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	3b1e      	subs	r3, #30
 8003d3a:	2207      	movs	r2, #7
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43da      	mvns	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	400a      	ands	r2, r1
 8003d48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68d9      	ldr	r1, [r3, #12]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4403      	add	r3, r0
 8003d62:	3b1e      	subs	r3, #30
 8003d64:	409a      	lsls	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	e022      	b.n	8003db6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6919      	ldr	r1, [r3, #16]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	2207      	movs	r2, #7
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	400a      	ands	r2, r1
 8003d92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6919      	ldr	r1, [r3, #16]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	4618      	mov	r0, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	4403      	add	r3, r0
 8003dac:	409a      	lsls	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d824      	bhi.n	8003e08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	3b05      	subs	r3, #5
 8003dd0:	221f      	movs	r2, #31
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	400a      	ands	r2, r1
 8003dde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	4618      	mov	r0, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	3b05      	subs	r3, #5
 8003dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e06:	e04c      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d824      	bhi.n	8003e5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	3b23      	subs	r3, #35	@ 0x23
 8003e22:	221f      	movs	r2, #31
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	43da      	mvns	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	400a      	ands	r2, r1
 8003e30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	3b23      	subs	r3, #35	@ 0x23
 8003e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e58:	e023      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	3b41      	subs	r3, #65	@ 0x41
 8003e6c:	221f      	movs	r2, #31
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	400a      	ands	r2, r1
 8003e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	3b41      	subs	r3, #65	@ 0x41
 8003e96:	fa00 f203 	lsl.w	r2, r0, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ea2:	4b29      	ldr	r3, [pc, #164]	@ (8003f48 <HAL_ADC_ConfigChannel+0x250>)
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a28      	ldr	r2, [pc, #160]	@ (8003f4c <HAL_ADC_ConfigChannel+0x254>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10f      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x1d8>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b12      	cmp	r3, #18
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_ADC_ConfigChannel+0x254>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12b      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x23a>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <HAL_ADC_ConfigChannel+0x258>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <HAL_ADC_ConfigChannel+0x1f4>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b11      	cmp	r3, #17
 8003eea:	d122      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a11      	ldr	r2, [pc, #68]	@ (8003f50 <HAL_ADC_ConfigChannel+0x258>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d111      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f0e:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <HAL_ADC_ConfigChannel+0x25c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a11      	ldr	r2, [pc, #68]	@ (8003f58 <HAL_ADC_ConfigChannel+0x260>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	0c9a      	lsrs	r2, r3, #18
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f24:	e002      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f9      	bne.n	8003f26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40012300 	.word	0x40012300
 8003f4c:	40012000 	.word	0x40012000
 8003f50:	10000012 	.word	0x10000012
 8003f54:	2000000c 	.word	0x2000000c
 8003f58:	431bde83 	.word	0x431bde83

08003f5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f64:	4b79      	ldr	r3, [pc, #484]	@ (800414c <ADC_Init+0x1f0>)
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6859      	ldr	r1, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6859      	ldr	r1, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6899      	ldr	r1, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fee:	4a58      	ldr	r2, [pc, #352]	@ (8004150 <ADC_Init+0x1f4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004002:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004024:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e00f      	b.n	800405a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004058:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0202 	bic.w	r2, r2, #2
 8004068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6899      	ldr	r1, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	7e1b      	ldrb	r3, [r3, #24]
 8004074:	005a      	lsls	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004096:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80040a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	3b01      	subs	r3, #1
 80040b4:	035a      	lsls	r2, r3, #13
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e007      	b.n	80040d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80040de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	051a      	lsls	r2, r3, #20
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004104:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004112:	025a      	lsls	r2, r3, #9
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800412a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	029a      	lsls	r2, r3, #10
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40012300 	.word	0x40012300
 8004150:	0f000001 	.word	0x0f000001

08004154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004164:	4b0c      	ldr	r3, [pc, #48]	@ (8004198 <__NVIC_SetPriorityGrouping+0x44>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004170:	4013      	ands	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800417c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004180:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004186:	4a04      	ldr	r2, [pc, #16]	@ (8004198 <__NVIC_SetPriorityGrouping+0x44>)
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	60d3      	str	r3, [r2, #12]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a0:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <__NVIC_GetPriorityGrouping+0x18>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	0a1b      	lsrs	r3, r3, #8
 80041a6:	f003 0307 	and.w	r3, r3, #7
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	db0b      	blt.n	80041e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	f003 021f 	and.w	r2, r3, #31
 80041d0:	4907      	ldr	r1, [pc, #28]	@ (80041f0 <__NVIC_EnableIRQ+0x38>)
 80041d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2001      	movs	r0, #1
 80041da:	fa00 f202 	lsl.w	r2, r0, r2
 80041de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	490c      	ldr	r1, [pc, #48]	@ (8004240 <__NVIC_SetPriority+0x4c>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800421c:	e00a      	b.n	8004234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4908      	ldr	r1, [pc, #32]	@ (8004244 <__NVIC_SetPriority+0x50>)
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3b04      	subs	r3, #4
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	440b      	add	r3, r1
 8004232:	761a      	strb	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr
 8004240:	e000e100 	.word	0xe000e100
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	@ 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf28      	it	cs
 8004266:	2304      	movcs	r3, #4
 8004268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	2b06      	cmp	r3, #6
 8004270:	d902      	bls.n	8004278 <NVIC_EncodePriority+0x30>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3b03      	subs	r3, #3
 8004276:	e000      	b.n	800427a <NVIC_EncodePriority+0x32>
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	f04f 31ff 	mov.w	r1, #4294967295
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	4313      	orrs	r3, r2
         );
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	@ 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042c0:	d301      	bcc.n	80042c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00f      	b.n	80042e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c6:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <SysTick_Config+0x40>)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ce:	210f      	movs	r1, #15
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	f7ff ff8e 	bl	80041f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d8:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <SysTick_Config+0x40>)
 80042da:	2200      	movs	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042de:	4b04      	ldr	r3, [pc, #16]	@ (80042f0 <SysTick_Config+0x40>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	e000e010 	.word	0xe000e010

080042f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff29 	bl	8004154 <__NVIC_SetPriorityGrouping>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800431c:	f7ff ff3e 	bl	800419c <__NVIC_GetPriorityGrouping>
 8004320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	6978      	ldr	r0, [r7, #20]
 8004328:	f7ff ff8e 	bl	8004248 <NVIC_EncodePriority>
 800432c:	4602      	mov	r2, r0
 800432e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff5d 	bl	80041f4 <__NVIC_SetPriority>
}
 800433a:	bf00      	nop
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	4603      	mov	r3, r0
 800434a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff31 	bl	80041b8 <__NVIC_EnableIRQ>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff ffa2 	bl	80042b0 <SysTick_Config>
 800436c:	4603      	mov	r3, r0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004384:	f7ff fac4 	bl	8003910 <HAL_GetTick>
 8004388:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d008      	beq.n	80043a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2280      	movs	r2, #128	@ 0x80
 800439a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e052      	b.n	800444e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0216 	bic.w	r2, r2, #22
 80043b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d103      	bne.n	80043d8 <HAL_DMA_Abort+0x62>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d007      	beq.n	80043e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0208 	bic.w	r2, r2, #8
 80043e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043f8:	e013      	b.n	8004422 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043fa:	f7ff fa89 	bl	8003910 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b05      	cmp	r3, #5
 8004406:	d90c      	bls.n	8004422 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2203      	movs	r2, #3
 8004412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e015      	b.n	800444e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e4      	bne.n	80043fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	223f      	movs	r2, #63	@ 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d004      	beq.n	8004474 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2280      	movs	r2, #128	@ 0x80
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e00c      	b.n	800448e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2205      	movs	r2, #5
 8004478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	e159      	b.n	800476c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044b8:	2201      	movs	r2, #1
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4013      	ands	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	f040 8148 	bne.w	8004766 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d005      	beq.n	80044ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d130      	bne.n	8004550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	2203      	movs	r2, #3
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004524:	2201      	movs	r2, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 0201 	and.w	r2, r3, #1
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0303 	and.w	r3, r3, #3
 8004558:	2b03      	cmp	r3, #3
 800455a:	d017      	beq.n	800458c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d123      	bne.n	80045e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	08da      	lsrs	r2, r3, #3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3208      	adds	r2, #8
 80045a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	220f      	movs	r2, #15
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	08da      	lsrs	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3208      	adds	r2, #8
 80045da:	69b9      	ldr	r1, [r7, #24]
 80045dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2203      	movs	r2, #3
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4013      	ands	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0203 	and.w	r2, r3, #3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	fa02 f303 	lsl.w	r3, r2, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a2 	beq.w	8004766 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	4b57      	ldr	r3, [pc, #348]	@ (8004784 <HAL_GPIO_Init+0x2e8>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	4a56      	ldr	r2, [pc, #344]	@ (8004784 <HAL_GPIO_Init+0x2e8>)
 800462c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004630:	6453      	str	r3, [r2, #68]	@ 0x44
 8004632:	4b54      	ldr	r3, [pc, #336]	@ (8004784 <HAL_GPIO_Init+0x2e8>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800463e:	4a52      	ldr	r2, [pc, #328]	@ (8004788 <HAL_GPIO_Init+0x2ec>)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	3302      	adds	r3, #2
 8004646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800464a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0303 	and.w	r3, r3, #3
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	220f      	movs	r2, #15
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a49      	ldr	r2, [pc, #292]	@ (800478c <HAL_GPIO_Init+0x2f0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d019      	beq.n	800469e <HAL_GPIO_Init+0x202>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a48      	ldr	r2, [pc, #288]	@ (8004790 <HAL_GPIO_Init+0x2f4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_GPIO_Init+0x1fe>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a47      	ldr	r2, [pc, #284]	@ (8004794 <HAL_GPIO_Init+0x2f8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00d      	beq.n	8004696 <HAL_GPIO_Init+0x1fa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a46      	ldr	r2, [pc, #280]	@ (8004798 <HAL_GPIO_Init+0x2fc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <HAL_GPIO_Init+0x1f6>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a45      	ldr	r2, [pc, #276]	@ (800479c <HAL_GPIO_Init+0x300>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d101      	bne.n	800468e <HAL_GPIO_Init+0x1f2>
 800468a:	2304      	movs	r3, #4
 800468c:	e008      	b.n	80046a0 <HAL_GPIO_Init+0x204>
 800468e:	2307      	movs	r3, #7
 8004690:	e006      	b.n	80046a0 <HAL_GPIO_Init+0x204>
 8004692:	2303      	movs	r3, #3
 8004694:	e004      	b.n	80046a0 <HAL_GPIO_Init+0x204>
 8004696:	2302      	movs	r3, #2
 8004698:	e002      	b.n	80046a0 <HAL_GPIO_Init+0x204>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_GPIO_Init+0x204>
 800469e:	2300      	movs	r3, #0
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	f002 0203 	and.w	r2, r2, #3
 80046a6:	0092      	lsls	r2, r2, #2
 80046a8:	4093      	lsls	r3, r2
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046b0:	4935      	ldr	r1, [pc, #212]	@ (8004788 <HAL_GPIO_Init+0x2ec>)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	3302      	adds	r3, #2
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046be:	4b38      	ldr	r3, [pc, #224]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046e2:	4a2f      	ldr	r2, [pc, #188]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046e8:	4b2d      	ldr	r3, [pc, #180]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800470c:	4a24      	ldr	r2, [pc, #144]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004712:	4b23      	ldr	r3, [pc, #140]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004736:	4a1a      	ldr	r2, [pc, #104]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800473c:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004760:	4a0f      	ldr	r2, [pc, #60]	@ (80047a0 <HAL_GPIO_Init+0x304>)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	2b0f      	cmp	r3, #15
 8004770:	f67f aea2 	bls.w	80044b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3724      	adds	r7, #36	@ 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	40013800 	.word	0x40013800
 800478c:	40020000 	.word	0x40020000
 8004790:	40020400 	.word	0x40020400
 8004794:	40020800 	.word	0x40020800
 8004798:	40020c00 	.word	0x40020c00
 800479c:	40021000 	.word	0x40021000
 80047a0:	40013c00 	.word	0x40013c00

080047a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]
 80047b0:	4613      	mov	r3, r2
 80047b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b4:	787b      	ldrb	r3, [r7, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c0:	e003      	b.n	80047ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047c2:	887b      	ldrh	r3, [r7, #2]
 80047c4:	041a      	lsls	r2, r3, #16
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	619a      	str	r2, [r3, #24]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b085      	sub	sp, #20
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
 80047de:	460b      	mov	r3, r1
 80047e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047e8:	887a      	ldrh	r2, [r7, #2]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4013      	ands	r3, r2
 80047ee:	041a      	lsls	r2, r3, #16
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	43d9      	mvns	r1, r3
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	400b      	ands	r3, r1
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	619a      	str	r2, [r3, #24]
}
 80047fe:	bf00      	nop
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
	...

0800480c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004822:	4a05      	ldr	r2, [pc, #20]	@ (8004838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd fc50 	bl	80020d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004830:	bf00      	nop
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40013c00 	.word	0x40013c00

0800483c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e267      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d075      	beq.n	8004946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800485a:	4b88      	ldr	r3, [pc, #544]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00c      	beq.n	8004880 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b85      	ldr	r3, [pc, #532]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800486e:	2b08      	cmp	r3, #8
 8004870:	d112      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4b82      	ldr	r3, [pc, #520]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800487e:	d10b      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	4b7e      	ldr	r3, [pc, #504]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d05b      	beq.n	8004944 <HAL_RCC_OscConfig+0x108>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d157      	bne.n	8004944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e242      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x74>
 80048a2:	4b76      	ldr	r3, [pc, #472]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e01d      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x98>
 80048ba:	4b70      	ldr	r3, [pc, #448]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6f      	ldr	r2, [pc, #444]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a6c      	ldr	r2, [pc, #432]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048d4:	4b69      	ldr	r3, [pc, #420]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a68      	ldr	r2, [pc, #416]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4b66      	ldr	r3, [pc, #408]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a65      	ldr	r2, [pc, #404]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7ff f80c 	bl	8003910 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fc:	f7ff f808 	bl	8003910 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	@ 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e207      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0xc0>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe fff8 	bl	8003910 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004924:	f7fe fff4 	bl	8003910 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	@ 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1f3      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	4b51      	ldr	r3, [pc, #324]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0xe8>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d063      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004952:	4b4a      	ldr	r3, [pc, #296]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b47      	ldr	r3, [pc, #284]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004966:	2b08      	cmp	r3, #8
 8004968:	d11c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496a:	4b44      	ldr	r3, [pc, #272]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	4b41      	ldr	r3, [pc, #260]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d001      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e1c7      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4937      	ldr	r1, [pc, #220]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	e03a      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ac:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fe ffad 	bl	8003910 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fe ffa9 	bl	8003910 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e1a8      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4925      	ldr	r1, [pc, #148]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
 80049ec:	e015      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b24      	ldr	r3, [pc, #144]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fe ff8c 	bl	8003910 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fe ff88 	bl	8003910 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e187      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d036      	beq.n	8004a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe ff6c 	bl	8003910 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7fe ff68 	bl	8003910 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e167      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x200>
 8004a5a:	e01b      	b.n	8004a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fe ff55 	bl	8003910 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	e00e      	b.n	8004a88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fe ff51 	bl	8003910 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d907      	bls.n	8004a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e150      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	42470000 	.word	0x42470000
 8004a84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ea      	bne.n	8004a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa6:	4b81      	ldr	r3, [pc, #516]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	4a7c      	ldr	r2, [pc, #496]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b77      	ldr	r3, [pc, #476]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b74      	ldr	r3, [pc, #464]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a73      	ldr	r2, [pc, #460]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fe ff11 	bl	8003910 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fe ff0d 	bl	8003910 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e10c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x2ea>
 8004b18:	4b64      	ldr	r3, [pc, #400]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1c:	4a63      	ldr	r2, [pc, #396]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b24:	e01c      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x30c>
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	4a5e      	ldr	r2, [pc, #376]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b48:	4b58      	ldr	r3, [pc, #352]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	4a57      	ldr	r2, [pc, #348]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b54:	4b55      	ldr	r3, [pc, #340]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	4a54      	ldr	r2, [pc, #336]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b5a:	f023 0304 	bic.w	r3, r3, #4
 8004b5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fe fed2 	bl	8003910 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fe fece 	bl	8003910 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0cb      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b86:	4b49      	ldr	r3, [pc, #292]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ee      	beq.n	8004b70 <HAL_RCC_OscConfig+0x334>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fe febc 	bl	8003910 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fe feb8 	bl	8003910 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0b5      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	4a38      	ldr	r2, [pc, #224]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a1 	beq.w	8004d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bda:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d05c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d141      	bne.n	8004c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b31      	ldr	r3, [pc, #196]	@ (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fe fe8c 	bl	8003910 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fe fe88 	bl	8003910 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e087      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	491b      	ldr	r1, [pc, #108]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fe fe61 	bl	8003910 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fe fe5d 	bl	8003910 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e05c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x416>
 8004c70:	e054      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fe fe4a 	bl	8003910 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fe fe46 	bl	8003910 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e045      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x444>
 8004c9e:	e03d      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e038      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <HAL_RCC_OscConfig+0x4ec>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d121      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	3b01      	subs	r3, #1
 8004d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0cc      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b68      	ldr	r3, [pc, #416]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d90c      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b65      	ldr	r3, [pc, #404]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b63      	ldr	r3, [pc, #396]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b8      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d80:	4b59      	ldr	r3, [pc, #356]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a58      	ldr	r2, [pc, #352]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d98:	4b53      	ldr	r3, [pc, #332]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da4:	4b50      	ldr	r3, [pc, #320]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	494d      	ldr	r1, [pc, #308]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d044      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d119      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e06f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e067      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4934      	ldr	r1, [pc, #208]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fe fd78 	bl	8003910 <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fe fd74 	bl	8003910 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e04f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 020c 	and.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1eb      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d20c      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e032      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e80:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4916      	ldr	r1, [pc, #88]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	490e      	ldr	r1, [pc, #56]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004eb2:	f000 f821 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	490a      	ldr	r1, [pc, #40]	@ (8004eec <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4a09      	ldr	r2, [pc, #36]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ece:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fcd8 	bl	8003888 <HAL_InitTick>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023c00 	.word	0x40023c00
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800c878 	.word	0x0800c878
 8004ef0:	2000000c 	.word	0x2000000c
 8004ef4:	20000010 	.word	0x20000010

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004efc:	b090      	sub	sp, #64	@ 0x40
 8004efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f10:	4b59      	ldr	r3, [pc, #356]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d00d      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x40>
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	f200 80a1 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x34>
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f2a:	e09b      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b53      	ldr	r3, [pc, #332]	@ (800507c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f30:	e09b      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f32:	4b53      	ldr	r3, [pc, #332]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f36:	e098      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f38:	4b4f      	ldr	r3, [pc, #316]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f42:	4b4d      	ldr	r3, [pc, #308]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d028      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	2200      	movs	r2, #0
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f60:	2100      	movs	r1, #0
 8004f62:	4b47      	ldr	r3, [pc, #284]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f64:	fb03 f201 	mul.w	r2, r3, r1
 8004f68:	2300      	movs	r3, #0
 8004f6a:	fb00 f303 	mul.w	r3, r0, r3
 8004f6e:	4413      	add	r3, r2
 8004f70:	4a43      	ldr	r2, [pc, #268]	@ (8005080 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f72:	fba0 1202 	umull	r1, r2, r0, r2
 8004f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f78:	460a      	mov	r2, r1
 8004f7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f7e:	4413      	add	r3, r2
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f84:	2200      	movs	r2, #0
 8004f86:	61bb      	str	r3, [r7, #24]
 8004f88:	61fa      	str	r2, [r7, #28]
 8004f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f92:	f7fb fe11 	bl	8000bb8 <__aeabi_uldivmod>
 8004f96:	4602      	mov	r2, r0
 8004f98:	460b      	mov	r3, r1
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f9e:	e053      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa0:	4b35      	ldr	r3, [pc, #212]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	099b      	lsrs	r3, r3, #6
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	617a      	str	r2, [r7, #20]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fb2:	f04f 0b00 	mov.w	fp, #0
 8004fb6:	4652      	mov	r2, sl
 8004fb8:	465b      	mov	r3, fp
 8004fba:	f04f 0000 	mov.w	r0, #0
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	0159      	lsls	r1, r3, #5
 8004fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc8:	0150      	lsls	r0, r2, #5
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	ebb2 080a 	subs.w	r8, r2, sl
 8004fd2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fe2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fe6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fea:	ebb2 0408 	subs.w	r4, r2, r8
 8004fee:	eb63 0509 	sbc.w	r5, r3, r9
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	00eb      	lsls	r3, r5, #3
 8004ffc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005000:	00e2      	lsls	r2, r4, #3
 8005002:	4614      	mov	r4, r2
 8005004:	461d      	mov	r5, r3
 8005006:	eb14 030a 	adds.w	r3, r4, sl
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	eb45 030b 	adc.w	r3, r5, fp
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800501e:	4629      	mov	r1, r5
 8005020:	028b      	lsls	r3, r1, #10
 8005022:	4621      	mov	r1, r4
 8005024:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005028:	4621      	mov	r1, r4
 800502a:	028a      	lsls	r2, r1, #10
 800502c:	4610      	mov	r0, r2
 800502e:	4619      	mov	r1, r3
 8005030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005032:	2200      	movs	r2, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	60fa      	str	r2, [r7, #12]
 8005038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800503c:	f7fb fdbc 	bl	8000bb8 <__aeabi_uldivmod>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4613      	mov	r3, r2
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x180>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	3301      	adds	r3, #1
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005058:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <HAL_RCC_GetSysClockFreq+0x184>)
 8005066:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800506c:	4618      	mov	r0, r3
 800506e:	3740      	adds	r7, #64	@ 0x40
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	017d7840 	.word	0x017d7840

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b03      	ldr	r3, [pc, #12]	@ (8005098 <HAL_RCC_GetHCLKFreq+0x14>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	2000000c 	.word	0x2000000c

0800509c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050a0:	f7ff fff0 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	0a9b      	lsrs	r3, r3, #10
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	4903      	ldr	r1, [pc, #12]	@ (80050c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050b2:	5ccb      	ldrb	r3, [r1, r3]
 80050b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40023800 	.word	0x40023800
 80050c0:	0800c888 	.word	0x0800c888

080050c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050c8:	f7ff ffdc 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0b5b      	lsrs	r3, r3, #13
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	@ (80050e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	0800c888 	.word	0x0800c888

080050ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07b      	b.n	80051f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800510e:	d009      	beq.n	8005124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	61da      	str	r2, [r3, #28]
 8005116:	e005      	b.n	8005124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d106      	bne.n	8005144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7fe f83c 	bl	80031bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2202      	movs	r2, #2
 8005148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800515a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a8:	ea42 0103 	orr.w	r1, r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	f003 0104 	and.w	r1, r3, #4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0210 	and.w	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520e:	f7fe fb7f 	bl	8003910 <HAL_GetTick>
 8005212:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d001      	beq.n	8005228 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	e12a      	b.n	800547e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_SPI_Transmit+0x36>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e122      	b.n	800547e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_SPI_Transmit+0x48>
 8005242:	2302      	movs	r3, #2
 8005244:	e11b      	b.n	800547e <HAL_SPI_Transmit+0x280>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2203      	movs	r2, #3
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	88fa      	ldrh	r2, [r7, #6]
 8005266:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005294:	d10f      	bne.n	80052b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c0:	2b40      	cmp	r3, #64	@ 0x40
 80052c2:	d007      	beq.n	80052d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052dc:	d152      	bne.n	8005384 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_SPI_Transmit+0xee>
 80052e6:	8b7b      	ldrh	r3, [r7, #26]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d145      	bne.n	8005378 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fc:	1c9a      	adds	r2, r3, #2
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005310:	e032      	b.n	8005378 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d112      	bne.n	8005346 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	881a      	ldrh	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	1c9a      	adds	r2, r3, #2
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800533a:	b29b      	uxth	r3, r3
 800533c:	3b01      	subs	r3, #1
 800533e:	b29a      	uxth	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005344:	e018      	b.n	8005378 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005346:	f7fe fae3 	bl	8003910 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d803      	bhi.n	800535e <HAL_SPI_Transmit+0x160>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d102      	bne.n	8005364 <HAL_SPI_Transmit+0x166>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e082      	b.n	800547e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1c7      	bne.n	8005312 <HAL_SPI_Transmit+0x114>
 8005382:	e053      	b.n	800542c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_SPI_Transmit+0x194>
 800538c:	8b7b      	ldrh	r3, [r7, #26]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d147      	bne.n	8005422 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053b8:	e033      	b.n	8005422 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d113      	bne.n	80053f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053ee:	e018      	b.n	8005422 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f0:	f7fe fa8e 	bl	8003910 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d803      	bhi.n	8005408 <HAL_SPI_Transmit+0x20a>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d102      	bne.n	800540e <HAL_SPI_Transmit+0x210>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e02d      	b.n	800547e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1c6      	bne.n	80053ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 fbd9 	bl	8005be8 <SPI_EndRxTxTransaction>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af02      	add	r7, sp, #8
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	4613      	mov	r3, r2
 8005494:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d001      	beq.n	80054a6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80054a2:	2302      	movs	r3, #2
 80054a4:	e104      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <HAL_SPI_Receive+0x2c>
 80054ac:	88fb      	ldrh	r3, [r7, #6]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0fc      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054be:	d112      	bne.n	80054e6 <HAL_SPI_Receive+0x60>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10e      	bne.n	80054e6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2204      	movs	r2, #4
 80054cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054d0:	88fa      	ldrh	r2, [r7, #6]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4613      	mov	r3, r2
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f8eb 	bl	80056b8 <HAL_SPI_TransmitReceive>
 80054e2:	4603      	mov	r3, r0
 80054e4:	e0e4      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e6:	f7fe fa13 	bl	8003910 <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_SPI_Receive+0x74>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0da      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2204      	movs	r2, #4
 8005506:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	88fa      	ldrh	r2, [r7, #6]
 800551a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005548:	d10f      	bne.n	800556a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005574:	2b40      	cmp	r3, #64	@ 0x40
 8005576:	d007      	beq.n	8005588 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005586:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d170      	bne.n	8005672 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005590:	e035      	b.n	80055fe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d115      	bne.n	80055cc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f103 020c 	add.w	r2, r3, #12
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055ca:	e018      	b.n	80055fe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055cc:	f7fe f9a0 	bl	8003910 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d803      	bhi.n	80055e4 <HAL_SPI_Receive+0x15e>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Receive+0x164>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e058      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1c4      	bne.n	8005592 <HAL_SPI_Receive+0x10c>
 8005608:	e038      	b.n	800567c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b01      	cmp	r3, #1
 8005616:	d113      	bne.n	8005640 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005622:	b292      	uxth	r2, r2
 8005624:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800563e:	e018      	b.n	8005672 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005640:	f7fe f966 	bl	8003910 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d803      	bhi.n	8005658 <HAL_SPI_Receive+0x1d2>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	d102      	bne.n	800565e <HAL_SPI_Receive+0x1d8>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d109      	bne.n	8005672 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e01e      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1c6      	bne.n	800560a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa4b 	bl	8005b1c <SPI_EndRxTransaction>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2220      	movs	r2, #32
 8005690:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80056ae:	2300      	movs	r3, #0
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056c6:	2301      	movs	r3, #1
 80056c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ca:	f7fe f921 	bl	8003910 <HAL_GetTick>
 80056ce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056d6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056e2:	7ffb      	ldrb	r3, [r7, #31]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d00c      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x4a>
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056ee:	d106      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d102      	bne.n	80056fe <HAL_SPI_TransmitReceive+0x46>
 80056f8:	7ffb      	ldrb	r3, [r7, #31]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d001      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056fe:	2302      	movs	r3, #2
 8005700:	e17f      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x5c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d002      	beq.n	8005714 <HAL_SPI_TransmitReceive+0x5c>
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e174      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_SPI_TransmitReceive+0x6e>
 8005722:	2302      	movs	r3, #2
 8005724:	e16d      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b04      	cmp	r3, #4
 8005738:	d003      	beq.n	8005742 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2205      	movs	r2, #5
 800573e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	887a      	ldrh	r2, [r7, #2]
 8005752:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	887a      	ldrh	r2, [r7, #2]
 800576a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b40      	cmp	r3, #64	@ 0x40
 8005784:	d007      	beq.n	8005796 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005794:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800579e:	d17e      	bne.n	800589e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_TransmitReceive+0xf6>
 80057a8:	8afb      	ldrh	r3, [r7, #22]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d16c      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057d2:	e059      	b.n	8005888 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d11b      	bne.n	800581a <HAL_SPI_TransmitReceive+0x162>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <HAL_SPI_TransmitReceive+0x162>
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d113      	bne.n	800581a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	881a      	ldrh	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	1c9a      	adds	r2, r3, #2
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d119      	bne.n	800585c <HAL_SPI_TransmitReceive+0x1a4>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d014      	beq.n	800585c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583c:	b292      	uxth	r2, r2
 800583e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800585c:	f7fe f858 	bl	8003910 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005868:	429a      	cmp	r2, r3
 800586a:	d80d      	bhi.n	8005888 <HAL_SPI_TransmitReceive+0x1d0>
 800586c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005872:	d009      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0bc      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1a0      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x11c>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d19b      	bne.n	80057d4 <HAL_SPI_TransmitReceive+0x11c>
 800589c:	e082      	b.n	80059a4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x1f4>
 80058a6:	8afb      	ldrh	r3, [r7, #22]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d171      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d2:	e05d      	b.n	8005990 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d11c      	bne.n	800591c <HAL_SPI_TransmitReceive+0x264>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <HAL_SPI_TransmitReceive+0x264>
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d114      	bne.n	800591c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d119      	bne.n	800595e <HAL_SPI_TransmitReceive+0x2a6>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d014      	beq.n	800595e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800595a:	2301      	movs	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800595e:	f7fd ffd7 	bl	8003910 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800596a:	429a      	cmp	r2, r3
 800596c:	d803      	bhi.n	8005976 <HAL_SPI_TransmitReceive+0x2be>
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d102      	bne.n	800597c <HAL_SPI_TransmitReceive+0x2c4>
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e038      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d19c      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x21c>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d197      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a4:	6a3a      	ldr	r2, [r7, #32]
 80059a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f91d 	bl	8005be8 <SPI_EndRxTxTransaction>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d008      	beq.n	80059c6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e01d      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ce:	2300      	movs	r3, #0
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	613b      	str	r3, [r7, #16]
 80059e2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
  }
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3728      	adds	r7, #40	@ 0x28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a1c:	f7fd ff78 	bl	8003910 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4413      	add	r3, r2
 8005a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a2c:	f7fd ff70 	bl	8003910 <HAL_GetTick>
 8005a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a32:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	015b      	lsls	r3, r3, #5
 8005a38:	0d1b      	lsrs	r3, r3, #20
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	fb02 f303 	mul.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a42:	e055      	b.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d051      	beq.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a4c:	f7fd ff60 	bl	8003910 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d902      	bls.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d13d      	bne.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a7a:	d111      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a84:	d004      	beq.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a8e:	d107      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa8:	d10f      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e018      	b.n	8005b10 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e002      	b.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	3b01      	subs	r3, #1
 8005aee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	461a      	mov	r2, r3
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d19a      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3720      	adds	r7, #32
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	2000000c 	.word	0x2000000c

08005b1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b30:	d111      	bne.n	8005b56 <SPI_EndRxTransaction+0x3a>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3a:	d004      	beq.n	8005b46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b44:	d107      	bne.n	8005b56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b5e:	d12a      	bne.n	8005bb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b68:	d012      	beq.n	8005b90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	@ 0x80
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f7ff ff49 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d02d      	beq.n	8005bdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e026      	b.n	8005bde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f7ff ff36 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01a      	beq.n	8005bdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005baa:	f043 0220 	orr.w	r2, r3, #32
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e013      	b.n	8005bde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff ff23 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd0:	f043 0220 	orr.w	r2, r3, #32
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e000      	b.n	8005bde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	2102      	movs	r1, #2
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff04 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e032      	b.n	8005c80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <SPI_EndRxTxTransaction+0xa0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005c8c <SPI_EndRxTxTransaction+0xa4>)
 8005c20:	fba2 2303 	umull	r2, r3, r2, r3
 8005c24:	0d5b      	lsrs	r3, r3, #21
 8005c26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c38:	d112      	bne.n	8005c60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2180      	movs	r1, #128	@ 0x80
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f7ff fee1 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d016      	beq.n	8005c7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e00f      	b.n	8005c80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c76:	2b80      	cmp	r3, #128	@ 0x80
 8005c78:	d0f2      	beq.n	8005c60 <SPI_EndRxTxTransaction+0x78>
 8005c7a:	e000      	b.n	8005c7e <SPI_EndRxTxTransaction+0x96>
        break;
 8005c7c:	bf00      	nop
  }

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	2000000c 	.word	0x2000000c
 8005c8c:	165e9f81 	.word	0x165e9f81

08005c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e041      	b.n	8005d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d106      	bne.n	8005cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fd fac8 	bl	800324c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f000 fd7a 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e041      	b.n	8005dc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f839 	bl	8005dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	f000 fd2b 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3708      	adds	r7, #8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d109      	bne.n	8005e04 <HAL_TIM_PWM_Start+0x24>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	bf14      	ite	ne
 8005dfc:	2301      	movne	r3, #1
 8005dfe:	2300      	moveq	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	e022      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b04      	cmp	r3, #4
 8005e08:	d109      	bne.n	8005e1e <HAL_TIM_PWM_Start+0x3e>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e015      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d109      	bne.n	8005e38 <HAL_TIM_PWM_Start+0x58>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	bf14      	ite	ne
 8005e30:	2301      	movne	r3, #1
 8005e32:	2300      	moveq	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e008      	b.n	8005e4a <HAL_TIM_PWM_Start+0x6a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	bf14      	ite	ne
 8005e44:	2301      	movne	r3, #1
 8005e46:	2300      	moveq	r3, #0
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e068      	b.n	8005f24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x82>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e60:	e013      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0x92>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e70:	e00b      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d104      	bne.n	8005e82 <HAL_TIM_PWM_Start+0xa2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e80:	e003      	b.n	8005e8a <HAL_TIM_PWM_Start+0xaa>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 ff44 	bl	8006d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	@ (8005f2c <HAL_TIM_PWM_Start+0x14c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d107      	bne.n	8005eb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f2c <HAL_TIM_PWM_Start+0x14c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d018      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec4:	d013      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a19      	ldr	r2, [pc, #100]	@ (8005f30 <HAL_TIM_PWM_Start+0x150>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d00e      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a17      	ldr	r2, [pc, #92]	@ (8005f34 <HAL_TIM_PWM_Start+0x154>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d009      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a16      	ldr	r2, [pc, #88]	@ (8005f38 <HAL_TIM_PWM_Start+0x158>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIM_PWM_Start+0x10e>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a14      	ldr	r2, [pc, #80]	@ (8005f3c <HAL_TIM_PWM_Start+0x15c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d111      	bne.n	8005f12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b06      	cmp	r3, #6
 8005efe:	d010      	beq.n	8005f22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f042 0201 	orr.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	e007      	b.n	8005f22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f042 0201 	orr.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40010000 	.word	0x40010000
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40000c00 	.word	0x40000c00
 8005f3c:	40014000 	.word	0x40014000

08005f40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fee4 	bl	8006d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a29      	ldr	r2, [pc, #164]	@ (8006004 <HAL_TIM_PWM_Stop+0xc4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d117      	bne.n	8005f92 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10f      	bne.n	8005f92 <HAL_TIM_PWM_Stop+0x52>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a1a      	ldr	r2, [r3, #32]
 8005f78:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_PWM_Stop+0x52>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6a1a      	ldr	r2, [r3, #32]
 8005f98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10f      	bne.n	8005fc2 <HAL_TIM_PWM_Stop+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	f240 4344 	movw	r3, #1092	@ 0x444
 8005fac:	4013      	ands	r3, r2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d107      	bne.n	8005fc2 <HAL_TIM_PWM_Stop+0x82>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Stop+0x92>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fd0:	e013      	b.n	8005ffa <HAL_TIM_PWM_Stop+0xba>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Stop+0xa2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe0:	e00b      	b.n	8005ffa <HAL_TIM_PWM_Stop+0xba>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Stop+0xb2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff0:	e003      	b.n	8005ffa <HAL_TIM_PWM_Stop+0xba>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	40010000 	.word	0x40010000

08006008 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e097      	b.n	800614c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fd f949 	bl	80032c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2202      	movs	r2, #2
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3304      	adds	r3, #4
 800605a:	4619      	mov	r1, r3
 800605c:	4610      	mov	r0, r2
 800605e:	f000 fbb3 	bl	80067c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800608a:	f023 0303 	bic.w	r3, r3, #3
 800608e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	4313      	orrs	r3, r2
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060a8:	f023 030c 	bic.w	r3, r3, #12
 80060ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	4313      	orrs	r3, r2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	011a      	lsls	r2, r3, #4
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	031b      	lsls	r3, r3, #12
 80060d8:	4313      	orrs	r3, r2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4313      	orrs	r3, r2
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3718      	adds	r7, #24
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006164:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800616c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006174:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800617c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d110      	bne.n	80061a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d102      	bne.n	8006190 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800618a:	7b7b      	ldrb	r3, [r7, #13]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d001      	beq.n	8006194 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e069      	b.n	8006268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a4:	e031      	b.n	800620a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d110      	bne.n	80061ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d102      	bne.n	80061b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061b2:	7b3b      	ldrb	r3, [r7, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e055      	b.n	8006268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061cc:	e01d      	b.n	800620a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d108      	bne.n	80061e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d105      	bne.n	80061e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061da:	7b7b      	ldrb	r3, [r7, #13]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061e0:	7b3b      	ldrb	r3, [r7, #12]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d001      	beq.n	80061ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e03e      	b.n	8006268 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2202      	movs	r2, #2
 80061f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_TIM_Encoder_Start+0xc4>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b04      	cmp	r3, #4
 8006214:	d008      	beq.n	8006228 <HAL_TIM_Encoder_Start+0xd4>
 8006216:	e00f      	b.n	8006238 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f000 fd7d 	bl	8006d20 <TIM_CCxChannelCmd>
      break;
 8006226:	e016      	b.n	8006256 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	2104      	movs	r1, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fd75 	bl	8006d20 <TIM_CCxChannelCmd>
      break;
 8006236:	e00e      	b.n	8006256 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2201      	movs	r2, #1
 800623e:	2100      	movs	r1, #0
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fd6d 	bl	8006d20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	2104      	movs	r1, #4
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fd66 	bl	8006d20 <TIM_CCxChannelCmd>
      break;
 8006254:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d020      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01b      	beq.n	80062d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f06f 0202 	mvn.w	r2, #2
 80062a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fa65 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 80062c0:	e005      	b.n	80062ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa57 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 fa68 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d020      	beq.n	8006320 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01b      	beq.n	8006320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0204 	mvn.w	r2, #4
 80062f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2202      	movs	r2, #2
 80062f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa3f 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 800630c:	e005      	b.n	800631a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa31 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fa42 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d020      	beq.n	800636c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01b      	beq.n	800636c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0208 	mvn.w	r2, #8
 800633c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2204      	movs	r2, #4
 8006342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa19 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa0b 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa1c 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f003 0310 	and.w	r3, r3, #16
 8006372:	2b00      	cmp	r3, #0
 8006374:	d020      	beq.n	80063b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d01b      	beq.n	80063b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0210 	mvn.w	r2, #16
 8006388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2208      	movs	r2, #8
 800638e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9f3 	bl	800678a <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9e5 	bl	8006776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9f6 	bl	800679e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00c      	beq.n	80063dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0201 	mvn.w	r2, #1
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f9c3 	bl	8006762 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00c      	beq.n	8006400 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd80 	bl	8006f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d007      	beq.n	8006424 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800641c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f9c7 	bl	80067b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f06f 0220 	mvn.w	r2, #32
 8006440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fd52 	bl	8006eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800646a:	2302      	movs	r3, #2
 800646c:	e0ae      	b.n	80065cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b0c      	cmp	r3, #12
 800647a:	f200 809f 	bhi.w	80065bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800647e:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064b9 	.word	0x080064b9
 8006488:	080065bd 	.word	0x080065bd
 800648c:	080065bd 	.word	0x080065bd
 8006490:	080065bd 	.word	0x080065bd
 8006494:	080064f9 	.word	0x080064f9
 8006498:	080065bd 	.word	0x080065bd
 800649c:	080065bd 	.word	0x080065bd
 80064a0:	080065bd 	.word	0x080065bd
 80064a4:	0800653b 	.word	0x0800653b
 80064a8:	080065bd 	.word	0x080065bd
 80064ac:	080065bd 	.word	0x080065bd
 80064b0:	080065bd 	.word	0x080065bd
 80064b4:	0800657b 	.word	0x0800657b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa08 	bl	80068d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0208 	orr.w	r2, r2, #8
 80064d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0204 	bic.w	r2, r2, #4
 80064e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6999      	ldr	r1, [r3, #24]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	619a      	str	r2, [r3, #24]
      break;
 80064f6:	e064      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fa4e 	bl	80069a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699a      	ldr	r2, [r3, #24]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6999      	ldr	r1, [r3, #24]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	021a      	lsls	r2, r3, #8
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	619a      	str	r2, [r3, #24]
      break;
 8006538:	e043      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fa99 	bl	8006a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0208 	orr.w	r2, r2, #8
 8006554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0204 	bic.w	r2, r2, #4
 8006564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69d9      	ldr	r1, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	430a      	orrs	r2, r1
 8006576:	61da      	str	r2, [r3, #28]
      break;
 8006578:	e023      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	4618      	mov	r0, r3
 8006582:	f000 fae3 	bl	8006b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69da      	ldr	r2, [r3, #28]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69d9      	ldr	r1, [r3, #28]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	021a      	lsls	r2, r3, #8
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	61da      	str	r2, [r3, #28]
      break;
 80065ba:	e002      	b.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]
      break;
 80065c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIM_ConfigClockSource+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e0b4      	b.n	800675a <HAL_TIM_ConfigClockSource+0x186>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800660e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006616:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006628:	d03e      	beq.n	80066a8 <HAL_TIM_ConfigClockSource+0xd4>
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800662e:	f200 8087 	bhi.w	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006636:	f000 8086 	beq.w	8006746 <HAL_TIM_ConfigClockSource+0x172>
 800663a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663e:	d87f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b70      	cmp	r3, #112	@ 0x70
 8006642:	d01a      	beq.n	800667a <HAL_TIM_ConfigClockSource+0xa6>
 8006644:	2b70      	cmp	r3, #112	@ 0x70
 8006646:	d87b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b60      	cmp	r3, #96	@ 0x60
 800664a:	d050      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x11a>
 800664c:	2b60      	cmp	r3, #96	@ 0x60
 800664e:	d877      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b50      	cmp	r3, #80	@ 0x50
 8006652:	d03c      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0xfa>
 8006654:	2b50      	cmp	r3, #80	@ 0x50
 8006656:	d873      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b40      	cmp	r3, #64	@ 0x40
 800665a:	d058      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x13a>
 800665c:	2b40      	cmp	r3, #64	@ 0x40
 800665e:	d86f      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b30      	cmp	r3, #48	@ 0x30
 8006662:	d064      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006664:	2b30      	cmp	r3, #48	@ 0x30
 8006666:	d86b      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b20      	cmp	r3, #32
 800666a:	d060      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 800666c:	2b20      	cmp	r3, #32
 800666e:	d867      	bhi.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d05c      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b10      	cmp	r3, #16
 8006676:	d05a      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x15a>
 8006678:	e062      	b.n	8006740 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800668a:	f000 fb29 	bl	8006ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800669c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	609a      	str	r2, [r3, #8]
      break;
 80066a6:	e04f      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066b8:	f000 fb12 	bl	8006ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ca:	609a      	str	r2, [r3, #8]
      break;
 80066cc:	e03c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fa86 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2150      	movs	r1, #80	@ 0x50
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fadf 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 80066ec:	e02c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 faa5 	bl	8006c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2160      	movs	r1, #96	@ 0x60
 8006706:	4618      	mov	r0, r3
 8006708:	f000 facf 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800670c:	e01c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671a:	461a      	mov	r2, r3
 800671c:	f000 fa66 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2140      	movs	r1, #64	@ 0x40
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fabf 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800672c:	e00c      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fab6 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800673e:	e003      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
      break;
 8006744:	e000      	b.n	8006748 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006746:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a37      	ldr	r2, [pc, #220]	@ (80068b8 <TIM_Base_SetConfig+0xf0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a34      	ldr	r2, [pc, #208]	@ (80068bc <TIM_Base_SetConfig+0xf4>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a33      	ldr	r2, [pc, #204]	@ (80068c0 <TIM_Base_SetConfig+0xf8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0x38>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a32      	ldr	r2, [pc, #200]	@ (80068c4 <TIM_Base_SetConfig+0xfc>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d108      	bne.n	8006812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a28      	ldr	r2, [pc, #160]	@ (80068b8 <TIM_Base_SetConfig+0xf0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d01b      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006820:	d017      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a25      	ldr	r2, [pc, #148]	@ (80068bc <TIM_Base_SetConfig+0xf4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a24      	ldr	r2, [pc, #144]	@ (80068c0 <TIM_Base_SetConfig+0xf8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00f      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a23      	ldr	r2, [pc, #140]	@ (80068c4 <TIM_Base_SetConfig+0xfc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00b      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a22      	ldr	r2, [pc, #136]	@ (80068c8 <TIM_Base_SetConfig+0x100>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d007      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a21      	ldr	r2, [pc, #132]	@ (80068cc <TIM_Base_SetConfig+0x104>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d003      	beq.n	8006852 <TIM_Base_SetConfig+0x8a>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a20      	ldr	r2, [pc, #128]	@ (80068d0 <TIM_Base_SetConfig+0x108>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d108      	bne.n	8006864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a0c      	ldr	r2, [pc, #48]	@ (80068b8 <TIM_Base_SetConfig+0xf0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d103      	bne.n	8006892 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f043 0204 	orr.w	r2, r3, #4
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]
}
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40000400 	.word	0x40000400
 80068c0:	40000800 	.word	0x40000800
 80068c4:	40000c00 	.word	0x40000c00
 80068c8:	40014000 	.word	0x40014000
 80068cc:	40014400 	.word	0x40014400
 80068d0:	40014800 	.word	0x40014800

080068d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	f023 0201 	bic.w	r2, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f023 0302 	bic.w	r3, r3, #2
 800691c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1c      	ldr	r2, [pc, #112]	@ (800699c <TIM_OC1_SetConfig+0xc8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10c      	bne.n	800694a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0308 	bic.w	r3, r3, #8
 8006936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a13      	ldr	r2, [pc, #76]	@ (800699c <TIM_OC1_SetConfig+0xc8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d111      	bne.n	8006976 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	621a      	str	r2, [r3, #32]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40010000 	.word	0x40010000

080069a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f023 0210 	bic.w	r2, r3, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0320 	bic.w	r3, r3, #32
 80069ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006a74 <TIM_OC2_SetConfig+0xd4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10d      	bne.n	8006a1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a15      	ldr	r2, [pc, #84]	@ (8006a74 <TIM_OC2_SetConfig+0xd4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d113      	bne.n	8006a4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010000 	.word	0x40010000

08006a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0303 	bic.w	r3, r3, #3
 8006aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b48 <TIM_OC3_SetConfig+0xd0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10d      	bne.n	8006af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a14      	ldr	r2, [pc, #80]	@ (8006b48 <TIM_OC3_SetConfig+0xd0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d113      	bne.n	8006b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40010000 	.word	0x40010000

08006b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	021b      	lsls	r3, r3, #8
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	031b      	lsls	r3, r3, #12
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	@ (8006be8 <TIM_OC4_SetConfig+0x9c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d109      	bne.n	8006bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	019b      	lsls	r3, r3, #6
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f023 0210 	bic.w	r2, r3, #16
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f043 0307 	orr.w	r3, r3, #7
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	021a      	lsls	r2, r3, #8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	2201      	movs	r2, #1
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	401a      	ands	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1a      	ldr	r2, [r3, #32]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e050      	b.n	8006e26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8006e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d018      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd0:	d013      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a18      	ldr	r2, [pc, #96]	@ (8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a16      	ldr	r2, [pc, #88]	@ (8006e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d009      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a15      	ldr	r2, [pc, #84]	@ (8006e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d004      	beq.n	8006dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a13      	ldr	r2, [pc, #76]	@ (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10c      	bne.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40000c00 	.word	0x40000c00
 8006e44:	40014000 	.word	0x40014000

08006e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e03d      	b.n	8006ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e042      	b.n	8006fac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fc fade 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2224      	movs	r2, #36	@ 0x24
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68da      	ldr	r2, [r3, #12]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fd7f 	bl	8007a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	@ 0x28
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d175      	bne.n	80070c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d002      	beq.n	8006fe0 <HAL_UART_Transmit+0x2c>
 8006fda:	88fb      	ldrh	r3, [r7, #6]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e06e      	b.n	80070c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2221      	movs	r2, #33	@ 0x21
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ff2:	f7fc fc8d 	bl	8003910 <HAL_GetTick>
 8006ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800700c:	d108      	bne.n	8007020 <HAL_UART_Transmit+0x6c>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	e003      	b.n	8007028 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007028:	e02e      	b.n	8007088 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2200      	movs	r2, #0
 8007032:	2180      	movs	r1, #128	@ 0x80
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 fb1d 	bl	8007674 <UART_WaitOnFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d005      	beq.n	800704c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e03a      	b.n	80070c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10b      	bne.n	800706a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007060:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	3302      	adds	r3, #2
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	e007      	b.n	800707a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	3301      	adds	r3, #1
 8007078:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800707e:	b29b      	uxth	r3, r3
 8007080:	3b01      	subs	r3, #1
 8007082:	b29a      	uxth	r2, r3
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1cb      	bne.n	800702a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	2140      	movs	r1, #64	@ 0x40
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fae9 	bl	8007674 <UART_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e006      	b.n	80070c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2220      	movs	r2, #32
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	e000      	b.n	80070c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070c0:	2302      	movs	r3, #2
  }
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3720      	adds	r7, #32
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b0ba      	sub	sp, #232	@ 0xe8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800710a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <HAL_UART_IRQHandler+0x66>
 800711e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fbd7 	bl	80078de <UART_Receive_IT>
      return;
 8007130:	e273      	b.n	800761a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80de 	beq.w	80072f8 <HAL_UART_IRQHandler+0x22c>
 800713c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800714c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80d1 	beq.w	80072f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00b      	beq.n	800717a <HAL_UART_IRQHandler+0xae>
 8007162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d005      	beq.n	800717a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007172:	f043 0201 	orr.w	r2, r3, #1
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800717e:	f003 0304 	and.w	r3, r3, #4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <HAL_UART_IRQHandler+0xd2>
 8007186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d005      	beq.n	800719e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007196:	f043 0202 	orr.w	r2, r3, #2
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <HAL_UART_IRQHandler+0xf6>
 80071aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ba:	f043 0204 	orr.w	r2, r3, #4
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d011      	beq.n	80071f2 <HAL_UART_IRQHandler+0x126>
 80071ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d105      	bne.n	80071e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ea:	f043 0208 	orr.w	r2, r3, #8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 820a 	beq.w	8007610 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <HAL_UART_IRQHandler+0x14e>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fb62 	bl	80078de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b40      	cmp	r3, #64	@ 0x40
 8007226:	bf0c      	ite	eq
 8007228:	2301      	moveq	r3, #1
 800722a:	2300      	movne	r3, #0
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d103      	bne.n	8007246 <HAL_UART_IRQHandler+0x17a>
 800723e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d04f      	beq.n	80072e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa6d 	bl	8007726 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007256:	2b40      	cmp	r3, #64	@ 0x40
 8007258:	d141      	bne.n	80072de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007270:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3314      	adds	r3, #20
 8007282:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007286:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800728a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007292:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800729e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1d9      	bne.n	800725a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d013      	beq.n	80072d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072b2:	4a8a      	ldr	r2, [pc, #552]	@ (80074dc <HAL_UART_IRQHandler+0x410>)
 80072b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fd f8cb 	bl	8004456 <HAL_DMA_Abort_IT>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d4:	e00e      	b.n	80072f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9b6 	bl	8007648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072dc:	e00a      	b.n	80072f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f9b2 	bl	8007648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e4:	e006      	b.n	80072f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f9ae 	bl	8007648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80072f2:	e18d      	b.n	8007610 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	bf00      	nop
    return;
 80072f6:	e18b      	b.n	8007610 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	f040 8167 	bne.w	80075d0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8160 	beq.w	80075d0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8159 	beq.w	80075d0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60bb      	str	r3, [r7, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733e:	2b40      	cmp	r3, #64	@ 0x40
 8007340:	f040 80ce 	bne.w	80074e0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007350:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 80a9 	beq.w	80074ac <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800735e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007362:	429a      	cmp	r2, r3
 8007364:	f080 80a2 	bcs.w	80074ac <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800736e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800737a:	f000 8088 	beq.w	800748e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007394:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800739c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1d9      	bne.n	800737e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3314      	adds	r3, #20
 80073d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3314      	adds	r3, #20
 80073ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073fa:	e841 2300 	strex	r3, r2, [r1]
 80073fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1e1      	bne.n	80073ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3314      	adds	r3, #20
 800740c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007418:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800741c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3314      	adds	r3, #20
 8007426:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800742a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800742c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007430:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e3      	bne.n	8007406 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	330c      	adds	r3, #12
 8007452:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800745c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800745e:	f023 0310 	bic.w	r3, r3, #16
 8007462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	330c      	adds	r3, #12
 800746c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007470:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007472:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007474:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007476:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007478:	e841 2300 	strex	r3, r2, [r1]
 800747c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800747e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e3      	bne.n	800744c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007488:	4618      	mov	r0, r3
 800748a:	f7fc ff74 	bl	8004376 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f8d9 	bl	800765c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80074aa:	e0b3      	b.n	8007614 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80074b4:	429a      	cmp	r2, r3
 80074b6:	f040 80ad 	bne.w	8007614 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c4:	f040 80a6 	bne.w	8007614 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8c1 	bl	800765c <HAL_UARTEx_RxEventCallback>
      return;
 80074da:	e09b      	b.n	8007614 <HAL_UART_IRQHandler+0x548>
 80074dc:	080077ed 	.word	0x080077ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 808e 	beq.w	8007618 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80074fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 8089 	beq.w	8007618 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	330c      	adds	r3, #12
 800750c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800751c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	330c      	adds	r3, #12
 8007526:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800752a:	647a      	str	r2, [r7, #68]	@ 0x44
 800752c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e3      	bne.n	8007506 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3314      	adds	r3, #20
 8007544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	623b      	str	r3, [r7, #32]
   return(result);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007562:	633a      	str	r2, [r7, #48]	@ 0x30
 8007564:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e3      	bne.n	800753e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	330c      	adds	r3, #12
 800758a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	60fb      	str	r3, [r7, #12]
   return(result);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f023 0310 	bic.w	r3, r3, #16
 800759a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	330c      	adds	r3, #12
 80075a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075a8:	61fa      	str	r2, [r7, #28]
 80075aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	69b9      	ldr	r1, [r7, #24]
 80075ae:	69fa      	ldr	r2, [r7, #28]
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	617b      	str	r3, [r7, #20]
   return(result);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e3      	bne.n	8007584 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f847 	bl	800765c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ce:	e023      	b.n	8007618 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <HAL_UART_IRQHandler+0x524>
 80075dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f910 	bl	800780e <UART_Transmit_IT>
    return;
 80075ee:	e014      	b.n	800761a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <HAL_UART_IRQHandler+0x54e>
 80075fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d008      	beq.n	800761a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f950 	bl	80078ae <UART_EndTransmit_IT>
    return;
 800760e:	e004      	b.n	800761a <HAL_UART_IRQHandler+0x54e>
    return;
 8007610:	bf00      	nop
 8007612:	e002      	b.n	800761a <HAL_UART_IRQHandler+0x54e>
      return;
 8007614:	bf00      	nop
 8007616:	e000      	b.n	800761a <HAL_UART_IRQHandler+0x54e>
      return;
 8007618:	bf00      	nop
  }
}
 800761a:	37e8      	adds	r7, #232	@ 0xe8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	4613      	mov	r3, r2
 8007682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007684:	e03b      	b.n	80076fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d037      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768e:	f7fc f93f 	bl	8003910 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	6a3a      	ldr	r2, [r7, #32]
 800769a:	429a      	cmp	r2, r3
 800769c:	d302      	bcc.n	80076a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e03a      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f003 0304 	and.w	r3, r3, #4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d023      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b80      	cmp	r3, #128	@ 0x80
 80076ba:	d020      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	d01d      	beq.n	80076fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d116      	bne.n	80076fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f81d 	bl	8007726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2208      	movs	r2, #8
 80076f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e00f      	b.n	800771e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	4013      	ands	r3, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	429a      	cmp	r2, r3
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	461a      	mov	r2, r3
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	429a      	cmp	r2, r3
 800771a:	d0b4      	beq.n	8007686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	3718      	adds	r7, #24
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007726:	b480      	push	{r7}
 8007728:	b095      	sub	sp, #84	@ 0x54
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800774e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800775c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3314      	adds	r3, #20
 8007768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	e853 3f00 	ldrex	r3, [r3]
 8007770:	61fb      	str	r3, [r7, #28]
   return(result);
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	f023 0301 	bic.w	r3, r3, #1
 8007778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3314      	adds	r3, #20
 8007780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800778a:	e841 2300 	strex	r3, r2, [r1]
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1e5      	bne.n	8007762 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800779a:	2b01      	cmp	r3, #1
 800779c:	d119      	bne.n	80077d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f023 0310 	bic.w	r3, r3, #16
 80077b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077be:	61ba      	str	r2, [r7, #24]
 80077c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6979      	ldr	r1, [r7, #20]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	613b      	str	r3, [r7, #16]
   return(result);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e5      	bne.n	800779e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80077e0:	bf00      	nop
 80077e2:	3754      	adds	r7, #84	@ 0x54
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f7ff ff21 	bl	8007648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007806:	bf00      	nop
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b21      	cmp	r3, #33	@ 0x21
 8007820:	d13e      	bne.n	80078a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800782a:	d114      	bne.n	8007856 <UART_Transmit_IT+0x48>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d110      	bne.n	8007856 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007848:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	621a      	str	r2, [r3, #32]
 8007854:	e008      	b.n	8007868 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	1c59      	adds	r1, r3, #1
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	6211      	str	r1, [r2, #32]
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29b      	uxth	r3, r3
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4619      	mov	r1, r3
 8007876:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10f      	bne.n	800789c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800788a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800789a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3714      	adds	r7, #20
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2220      	movs	r2, #32
 80078ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fea6 	bl	8007620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b08c      	sub	sp, #48	@ 0x30
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b22      	cmp	r3, #34	@ 0x22
 80078f8:	f040 80aa 	bne.w	8007a50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007904:	d115      	bne.n	8007932 <UART_Receive_IT+0x54>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d111      	bne.n	8007932 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007912:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	b29b      	uxth	r3, r3
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	b29a      	uxth	r2, r3
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	1c9a      	adds	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007930:	e024      	b.n	800797c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007940:	d007      	beq.n	8007952 <UART_Receive_IT+0x74>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <UART_Receive_IT+0x82>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	b2da      	uxtb	r2, r3
 800795a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	e008      	b.n	8007972 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796c:	b2da      	uxtb	r2, r3
 800796e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007970:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007980:	b29b      	uxth	r3, r3
 8007982:	3b01      	subs	r3, #1
 8007984:	b29b      	uxth	r3, r3
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	4619      	mov	r1, r3
 800798a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800798c:	2b00      	cmp	r3, #0
 800798e:	d15d      	bne.n	8007a4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0220 	bic.w	r2, r2, #32
 800799e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 0201 	bic.w	r2, r2, #1
 80079be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d135      	bne.n	8007a42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	613b      	str	r3, [r7, #16]
   return(result);
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f023 0310 	bic.w	r3, r3, #16
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	330c      	adds	r3, #12
 80079fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079fc:	623a      	str	r2, [r7, #32]
 80079fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a00:	69f9      	ldr	r1, [r7, #28]
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	e841 2300 	strex	r3, r2, [r1]
 8007a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d1e5      	bne.n	80079dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0310 	and.w	r3, r3, #16
 8007a1a:	2b10      	cmp	r3, #16
 8007a1c:	d10a      	bne.n	8007a34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff fe0e 	bl	800765c <HAL_UARTEx_RxEventCallback>
 8007a40:	e002      	b.n	8007a48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff fdf6 	bl	8007634 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e002      	b.n	8007a52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e000      	b.n	8007a52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007a50:	2302      	movs	r3, #2
  }
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3730      	adds	r7, #48	@ 0x30
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a60:	b0c0      	sub	sp, #256	@ 0x100
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a78:	68d9      	ldr	r1, [r3, #12]
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	ea40 0301 	orr.w	r3, r0, r1
 8007a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ab4:	f021 010c 	bic.w	r1, r1, #12
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad6:	6999      	ldr	r1, [r3, #24]
 8007ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	ea40 0301 	orr.w	r3, r0, r1
 8007ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b8f      	ldr	r3, [pc, #572]	@ (8007d28 <UART_SetConfig+0x2cc>)
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d005      	beq.n	8007afc <UART_SetConfig+0xa0>
 8007af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	4b8d      	ldr	r3, [pc, #564]	@ (8007d2c <UART_SetConfig+0x2d0>)
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d104      	bne.n	8007b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007afc:	f7fd fae2 	bl	80050c4 <HAL_RCC_GetPCLK2Freq>
 8007b00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b04:	e003      	b.n	8007b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b06:	f7fd fac9 	bl	800509c <HAL_RCC_GetPCLK1Freq>
 8007b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b18:	f040 810c 	bne.w	8007d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b20:	2200      	movs	r2, #0
 8007b22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	1891      	adds	r1, r2, r2
 8007b34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b36:	415b      	adcs	r3, r3
 8007b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b3e:	4621      	mov	r1, r4
 8007b40:	eb12 0801 	adds.w	r8, r2, r1
 8007b44:	4629      	mov	r1, r5
 8007b46:	eb43 0901 	adc.w	r9, r3, r1
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b5e:	4690      	mov	r8, r2
 8007b60:	4699      	mov	r9, r3
 8007b62:	4623      	mov	r3, r4
 8007b64:	eb18 0303 	adds.w	r3, r8, r3
 8007b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b6c:	462b      	mov	r3, r5
 8007b6e:	eb49 0303 	adc.w	r3, r9, r3
 8007b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	18db      	adds	r3, r3, r3
 8007b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b90:	4613      	mov	r3, r2
 8007b92:	eb42 0303 	adc.w	r3, r2, r3
 8007b96:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ba0:	f7f9 f80a 	bl	8000bb8 <__aeabi_uldivmod>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4b61      	ldr	r3, [pc, #388]	@ (8007d30 <UART_SetConfig+0x2d4>)
 8007baa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	011c      	lsls	r4, r3, #4
 8007bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007bc4:	4642      	mov	r2, r8
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	1891      	adds	r1, r2, r2
 8007bca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007bcc:	415b      	adcs	r3, r3
 8007bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bda:	4649      	mov	r1, r9
 8007bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bf4:	4692      	mov	sl, r2
 8007bf6:	469b      	mov	fp, r3
 8007bf8:	4643      	mov	r3, r8
 8007bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8007bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c02:	464b      	mov	r3, r9
 8007c04:	eb4b 0303 	adc.w	r3, fp, r3
 8007c08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c20:	460b      	mov	r3, r1
 8007c22:	18db      	adds	r3, r3, r3
 8007c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c26:	4613      	mov	r3, r2
 8007c28:	eb42 0303 	adc.w	r3, r2, r3
 8007c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c36:	f7f8 ffbf 	bl	8000bb8 <__aeabi_uldivmod>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4b3b      	ldr	r3, [pc, #236]	@ (8007d30 <UART_SetConfig+0x2d4>)
 8007c42:	fba3 2301 	umull	r2, r3, r3, r1
 8007c46:	095b      	lsrs	r3, r3, #5
 8007c48:	2264      	movs	r2, #100	@ 0x64
 8007c4a:	fb02 f303 	mul.w	r3, r2, r3
 8007c4e:	1acb      	subs	r3, r1, r3
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c56:	4b36      	ldr	r3, [pc, #216]	@ (8007d30 <UART_SetConfig+0x2d4>)
 8007c58:	fba3 2302 	umull	r2, r3, r3, r2
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	005b      	lsls	r3, r3, #1
 8007c60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c64:	441c      	add	r4, r3
 8007c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	1891      	adds	r1, r2, r2
 8007c7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c80:	415b      	adcs	r3, r3
 8007c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c88:	4641      	mov	r1, r8
 8007c8a:	1851      	adds	r1, r2, r1
 8007c8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c8e:	4649      	mov	r1, r9
 8007c90:	414b      	adcs	r3, r1
 8007c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c94:	f04f 0200 	mov.w	r2, #0
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007ca0:	4659      	mov	r1, fp
 8007ca2:	00cb      	lsls	r3, r1, #3
 8007ca4:	4651      	mov	r1, sl
 8007ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007caa:	4651      	mov	r1, sl
 8007cac:	00ca      	lsls	r2, r1, #3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	189b      	adds	r3, r3, r2
 8007cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	460a      	mov	r2, r1
 8007cc0:	eb42 0303 	adc.w	r3, r2, r3
 8007cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cdc:	460b      	mov	r3, r1
 8007cde:	18db      	adds	r3, r3, r3
 8007ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007cf2:	f7f8 ff61 	bl	8000bb8 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8007d30 <UART_SetConfig+0x2d4>)
 8007cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8007d00:	095b      	lsrs	r3, r3, #5
 8007d02:	2164      	movs	r1, #100	@ 0x64
 8007d04:	fb01 f303 	mul.w	r3, r1, r3
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	3332      	adds	r3, #50	@ 0x32
 8007d0e:	4a08      	ldr	r2, [pc, #32]	@ (8007d30 <UART_SetConfig+0x2d4>)
 8007d10:	fba2 2303 	umull	r2, r3, r2, r3
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	f003 0207 	and.w	r2, r3, #7
 8007d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4422      	add	r2, r4
 8007d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d24:	e106      	b.n	8007f34 <UART_SetConfig+0x4d8>
 8007d26:	bf00      	nop
 8007d28:	40011000 	.word	0x40011000
 8007d2c:	40011400 	.word	0x40011400
 8007d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d46:	4642      	mov	r2, r8
 8007d48:	464b      	mov	r3, r9
 8007d4a:	1891      	adds	r1, r2, r2
 8007d4c:	6239      	str	r1, [r7, #32]
 8007d4e:	415b      	adcs	r3, r3
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d56:	4641      	mov	r1, r8
 8007d58:	1854      	adds	r4, r2, r1
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	eb43 0501 	adc.w	r5, r3, r1
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	00eb      	lsls	r3, r5, #3
 8007d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d6e:	00e2      	lsls	r2, r4, #3
 8007d70:	4614      	mov	r4, r2
 8007d72:	461d      	mov	r5, r3
 8007d74:	4643      	mov	r3, r8
 8007d76:	18e3      	adds	r3, r4, r3
 8007d78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d7c:	464b      	mov	r3, r9
 8007d7e:	eb45 0303 	adc.w	r3, r5, r3
 8007d82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d96:	f04f 0200 	mov.w	r2, #0
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007da2:	4629      	mov	r1, r5
 8007da4:	008b      	lsls	r3, r1, #2
 8007da6:	4621      	mov	r1, r4
 8007da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dac:	4621      	mov	r1, r4
 8007dae:	008a      	lsls	r2, r1, #2
 8007db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007db4:	f7f8 ff00 	bl	8000bb8 <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4b60      	ldr	r3, [pc, #384]	@ (8007f40 <UART_SetConfig+0x4e4>)
 8007dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8007dc2:	095b      	lsrs	r3, r3, #5
 8007dc4:	011c      	lsls	r4, r3, #4
 8007dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007dd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	1891      	adds	r1, r2, r2
 8007dde:	61b9      	str	r1, [r7, #24]
 8007de0:	415b      	adcs	r3, r3
 8007de2:	61fb      	str	r3, [r7, #28]
 8007de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007de8:	4641      	mov	r1, r8
 8007dea:	1851      	adds	r1, r2, r1
 8007dec:	6139      	str	r1, [r7, #16]
 8007dee:	4649      	mov	r1, r9
 8007df0:	414b      	adcs	r3, r1
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e00:	4659      	mov	r1, fp
 8007e02:	00cb      	lsls	r3, r1, #3
 8007e04:	4651      	mov	r1, sl
 8007e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e0a:	4651      	mov	r1, sl
 8007e0c:	00ca      	lsls	r2, r1, #3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	4642      	mov	r2, r8
 8007e16:	189b      	adds	r3, r3, r2
 8007e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e1c:	464b      	mov	r3, r9
 8007e1e:	460a      	mov	r2, r1
 8007e20:	eb42 0303 	adc.w	r3, r2, r3
 8007e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e34:	f04f 0200 	mov.w	r2, #0
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e40:	4649      	mov	r1, r9
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	4641      	mov	r1, r8
 8007e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	008a      	lsls	r2, r1, #2
 8007e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e52:	f7f8 feb1 	bl	8000bb8 <__aeabi_uldivmod>
 8007e56:	4602      	mov	r2, r0
 8007e58:	460b      	mov	r3, r1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	4b38      	ldr	r3, [pc, #224]	@ (8007f40 <UART_SetConfig+0x4e4>)
 8007e5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	2264      	movs	r2, #100	@ 0x64
 8007e66:	fb02 f303 	mul.w	r3, r2, r3
 8007e6a:	1acb      	subs	r3, r1, r3
 8007e6c:	011b      	lsls	r3, r3, #4
 8007e6e:	3332      	adds	r3, #50	@ 0x32
 8007e70:	4a33      	ldr	r2, [pc, #204]	@ (8007f40 <UART_SetConfig+0x4e4>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	095b      	lsrs	r3, r3, #5
 8007e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e7c:	441c      	add	r4, r3
 8007e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e82:	2200      	movs	r2, #0
 8007e84:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e86:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	1891      	adds	r1, r2, r2
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	415b      	adcs	r3, r3
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e9c:	4641      	mov	r1, r8
 8007e9e:	1851      	adds	r1, r2, r1
 8007ea0:	6039      	str	r1, [r7, #0]
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	414b      	adcs	r3, r1
 8007ea6:	607b      	str	r3, [r7, #4]
 8007ea8:	f04f 0200 	mov.w	r2, #0
 8007eac:	f04f 0300 	mov.w	r3, #0
 8007eb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	00cb      	lsls	r3, r1, #3
 8007eb8:	4651      	mov	r1, sl
 8007eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ebe:	4651      	mov	r1, sl
 8007ec0:	00ca      	lsls	r2, r1, #3
 8007ec2:	4610      	mov	r0, r2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4642      	mov	r2, r8
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ece:	464b      	mov	r3, r9
 8007ed0:	460a      	mov	r2, r1
 8007ed2:	eb42 0303 	adc.w	r3, r2, r3
 8007ed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ee2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	f04f 0300 	mov.w	r3, #0
 8007eec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	008b      	lsls	r3, r1, #2
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007efa:	4641      	mov	r1, r8
 8007efc:	008a      	lsls	r2, r1, #2
 8007efe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f02:	f7f8 fe59 	bl	8000bb8 <__aeabi_uldivmod>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f40 <UART_SetConfig+0x4e4>)
 8007f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f10:	095b      	lsrs	r3, r3, #5
 8007f12:	2164      	movs	r1, #100	@ 0x64
 8007f14:	fb01 f303 	mul.w	r3, r1, r3
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	3332      	adds	r3, #50	@ 0x32
 8007f1e:	4a08      	ldr	r2, [pc, #32]	@ (8007f40 <UART_SetConfig+0x4e4>)
 8007f20:	fba2 2303 	umull	r2, r3, r2, r3
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	f003 020f 	and.w	r2, r3, #15
 8007f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4422      	add	r2, r4
 8007f32:	609a      	str	r2, [r3, #8]
}
 8007f34:	bf00      	nop
 8007f36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f40:	51eb851f 	.word	0x51eb851f

08007f44 <__cvt>:
 8007f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	ec57 6b10 	vmov	r6, r7, d0
 8007f4c:	2f00      	cmp	r7, #0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4619      	mov	r1, r3
 8007f52:	463b      	mov	r3, r7
 8007f54:	bfbb      	ittet	lt
 8007f56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f5a:	461f      	movlt	r7, r3
 8007f5c:	2300      	movge	r3, #0
 8007f5e:	232d      	movlt	r3, #45	@ 0x2d
 8007f60:	700b      	strb	r3, [r1, #0]
 8007f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f68:	4691      	mov	r9, r2
 8007f6a:	f023 0820 	bic.w	r8, r3, #32
 8007f6e:	bfbc      	itt	lt
 8007f70:	4632      	movlt	r2, r6
 8007f72:	4616      	movlt	r6, r2
 8007f74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f78:	d005      	beq.n	8007f86 <__cvt+0x42>
 8007f7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f7e:	d100      	bne.n	8007f82 <__cvt+0x3e>
 8007f80:	3401      	adds	r4, #1
 8007f82:	2102      	movs	r1, #2
 8007f84:	e000      	b.n	8007f88 <__cvt+0x44>
 8007f86:	2103      	movs	r1, #3
 8007f88:	ab03      	add	r3, sp, #12
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	ab02      	add	r3, sp, #8
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	ec47 6b10 	vmov	d0, r6, r7
 8007f94:	4653      	mov	r3, sl
 8007f96:	4622      	mov	r2, r4
 8007f98:	f000 fe76 	bl	8008c88 <_dtoa_r>
 8007f9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	d119      	bne.n	8007fd8 <__cvt+0x94>
 8007fa4:	f019 0f01 	tst.w	r9, #1
 8007fa8:	d00e      	beq.n	8007fc8 <__cvt+0x84>
 8007faa:	eb00 0904 	add.w	r9, r0, r4
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	f7f8 fd8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fba:	b108      	cbz	r0, 8007fc0 <__cvt+0x7c>
 8007fbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fc0:	2230      	movs	r2, #48	@ 0x30
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	454b      	cmp	r3, r9
 8007fc6:	d31e      	bcc.n	8008006 <__cvt+0xc2>
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fcc:	1b5b      	subs	r3, r3, r5
 8007fce:	4628      	mov	r0, r5
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	b004      	add	sp, #16
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fdc:	eb00 0904 	add.w	r9, r0, r4
 8007fe0:	d1e5      	bne.n	8007fae <__cvt+0x6a>
 8007fe2:	7803      	ldrb	r3, [r0, #0]
 8007fe4:	2b30      	cmp	r3, #48	@ 0x30
 8007fe6:	d10a      	bne.n	8007ffe <__cvt+0xba>
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2300      	movs	r3, #0
 8007fec:	4630      	mov	r0, r6
 8007fee:	4639      	mov	r1, r7
 8007ff0:	f7f8 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ff4:	b918      	cbnz	r0, 8007ffe <__cvt+0xba>
 8007ff6:	f1c4 0401 	rsb	r4, r4, #1
 8007ffa:	f8ca 4000 	str.w	r4, [sl]
 8007ffe:	f8da 3000 	ldr.w	r3, [sl]
 8008002:	4499      	add	r9, r3
 8008004:	e7d3      	b.n	8007fae <__cvt+0x6a>
 8008006:	1c59      	adds	r1, r3, #1
 8008008:	9103      	str	r1, [sp, #12]
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	e7d9      	b.n	8007fc2 <__cvt+0x7e>

0800800e <__exponent>:
 800800e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008010:	2900      	cmp	r1, #0
 8008012:	bfba      	itte	lt
 8008014:	4249      	neglt	r1, r1
 8008016:	232d      	movlt	r3, #45	@ 0x2d
 8008018:	232b      	movge	r3, #43	@ 0x2b
 800801a:	2909      	cmp	r1, #9
 800801c:	7002      	strb	r2, [r0, #0]
 800801e:	7043      	strb	r3, [r0, #1]
 8008020:	dd29      	ble.n	8008076 <__exponent+0x68>
 8008022:	f10d 0307 	add.w	r3, sp, #7
 8008026:	461d      	mov	r5, r3
 8008028:	270a      	movs	r7, #10
 800802a:	461a      	mov	r2, r3
 800802c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008030:	fb07 1416 	mls	r4, r7, r6, r1
 8008034:	3430      	adds	r4, #48	@ 0x30
 8008036:	f802 4c01 	strb.w	r4, [r2, #-1]
 800803a:	460c      	mov	r4, r1
 800803c:	2c63      	cmp	r4, #99	@ 0x63
 800803e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008042:	4631      	mov	r1, r6
 8008044:	dcf1      	bgt.n	800802a <__exponent+0x1c>
 8008046:	3130      	adds	r1, #48	@ 0x30
 8008048:	1e94      	subs	r4, r2, #2
 800804a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800804e:	1c41      	adds	r1, r0, #1
 8008050:	4623      	mov	r3, r4
 8008052:	42ab      	cmp	r3, r5
 8008054:	d30a      	bcc.n	800806c <__exponent+0x5e>
 8008056:	f10d 0309 	add.w	r3, sp, #9
 800805a:	1a9b      	subs	r3, r3, r2
 800805c:	42ac      	cmp	r4, r5
 800805e:	bf88      	it	hi
 8008060:	2300      	movhi	r3, #0
 8008062:	3302      	adds	r3, #2
 8008064:	4403      	add	r3, r0
 8008066:	1a18      	subs	r0, r3, r0
 8008068:	b003      	add	sp, #12
 800806a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800806c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008070:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008074:	e7ed      	b.n	8008052 <__exponent+0x44>
 8008076:	2330      	movs	r3, #48	@ 0x30
 8008078:	3130      	adds	r1, #48	@ 0x30
 800807a:	7083      	strb	r3, [r0, #2]
 800807c:	70c1      	strb	r1, [r0, #3]
 800807e:	1d03      	adds	r3, r0, #4
 8008080:	e7f1      	b.n	8008066 <__exponent+0x58>
	...

08008084 <_printf_float>:
 8008084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008088:	b08d      	sub	sp, #52	@ 0x34
 800808a:	460c      	mov	r4, r1
 800808c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008090:	4616      	mov	r6, r2
 8008092:	461f      	mov	r7, r3
 8008094:	4605      	mov	r5, r0
 8008096:	f000 fcf5 	bl	8008a84 <_localeconv_r>
 800809a:	6803      	ldr	r3, [r0, #0]
 800809c:	9304      	str	r3, [sp, #16]
 800809e:	4618      	mov	r0, r3
 80080a0:	f7f8 f8ee 	bl	8000280 <strlen>
 80080a4:	2300      	movs	r3, #0
 80080a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080a8:	f8d8 3000 	ldr.w	r3, [r8]
 80080ac:	9005      	str	r0, [sp, #20]
 80080ae:	3307      	adds	r3, #7
 80080b0:	f023 0307 	bic.w	r3, r3, #7
 80080b4:	f103 0208 	add.w	r2, r3, #8
 80080b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080bc:	f8d4 b000 	ldr.w	fp, [r4]
 80080c0:	f8c8 2000 	str.w	r2, [r8]
 80080c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080cc:	9307      	str	r3, [sp, #28]
 80080ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80080d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080da:	4b9c      	ldr	r3, [pc, #624]	@ (800834c <_printf_float+0x2c8>)
 80080dc:	f04f 32ff 	mov.w	r2, #4294967295
 80080e0:	f7f8 fd2c 	bl	8000b3c <__aeabi_dcmpun>
 80080e4:	bb70      	cbnz	r0, 8008144 <_printf_float+0xc0>
 80080e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ea:	4b98      	ldr	r3, [pc, #608]	@ (800834c <_printf_float+0x2c8>)
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	f7f8 fd06 	bl	8000b00 <__aeabi_dcmple>
 80080f4:	bb30      	cbnz	r0, 8008144 <_printf_float+0xc0>
 80080f6:	2200      	movs	r2, #0
 80080f8:	2300      	movs	r3, #0
 80080fa:	4640      	mov	r0, r8
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 fcf5 	bl	8000aec <__aeabi_dcmplt>
 8008102:	b110      	cbz	r0, 800810a <_printf_float+0x86>
 8008104:	232d      	movs	r3, #45	@ 0x2d
 8008106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800810a:	4a91      	ldr	r2, [pc, #580]	@ (8008350 <_printf_float+0x2cc>)
 800810c:	4b91      	ldr	r3, [pc, #580]	@ (8008354 <_printf_float+0x2d0>)
 800810e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008112:	bf8c      	ite	hi
 8008114:	4690      	movhi	r8, r2
 8008116:	4698      	movls	r8, r3
 8008118:	2303      	movs	r3, #3
 800811a:	6123      	str	r3, [r4, #16]
 800811c:	f02b 0304 	bic.w	r3, fp, #4
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	9700      	str	r7, [sp, #0]
 8008128:	4633      	mov	r3, r6
 800812a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800812c:	4621      	mov	r1, r4
 800812e:	4628      	mov	r0, r5
 8008130:	f000 f9d2 	bl	80084d8 <_printf_common>
 8008134:	3001      	adds	r0, #1
 8008136:	f040 808d 	bne.w	8008254 <_printf_float+0x1d0>
 800813a:	f04f 30ff 	mov.w	r0, #4294967295
 800813e:	b00d      	add	sp, #52	@ 0x34
 8008140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fcf6 	bl	8000b3c <__aeabi_dcmpun>
 8008150:	b140      	cbz	r0, 8008164 <_printf_float+0xe0>
 8008152:	464b      	mov	r3, r9
 8008154:	2b00      	cmp	r3, #0
 8008156:	bfbc      	itt	lt
 8008158:	232d      	movlt	r3, #45	@ 0x2d
 800815a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800815e:	4a7e      	ldr	r2, [pc, #504]	@ (8008358 <_printf_float+0x2d4>)
 8008160:	4b7e      	ldr	r3, [pc, #504]	@ (800835c <_printf_float+0x2d8>)
 8008162:	e7d4      	b.n	800810e <_printf_float+0x8a>
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800816a:	9206      	str	r2, [sp, #24]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	d13b      	bne.n	80081e8 <_printf_float+0x164>
 8008170:	2306      	movs	r3, #6
 8008172:	6063      	str	r3, [r4, #4]
 8008174:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008178:	2300      	movs	r3, #0
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008180:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008184:	ab09      	add	r3, sp, #36	@ 0x24
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	6861      	ldr	r1, [r4, #4]
 800818a:	ec49 8b10 	vmov	d0, r8, r9
 800818e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008192:	4628      	mov	r0, r5
 8008194:	f7ff fed6 	bl	8007f44 <__cvt>
 8008198:	9b06      	ldr	r3, [sp, #24]
 800819a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800819c:	2b47      	cmp	r3, #71	@ 0x47
 800819e:	4680      	mov	r8, r0
 80081a0:	d129      	bne.n	80081f6 <_printf_float+0x172>
 80081a2:	1cc8      	adds	r0, r1, #3
 80081a4:	db02      	blt.n	80081ac <_printf_float+0x128>
 80081a6:	6863      	ldr	r3, [r4, #4]
 80081a8:	4299      	cmp	r1, r3
 80081aa:	dd41      	ble.n	8008230 <_printf_float+0x1ac>
 80081ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80081b0:	fa5f fa8a 	uxtb.w	sl, sl
 80081b4:	3901      	subs	r1, #1
 80081b6:	4652      	mov	r2, sl
 80081b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80081bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80081be:	f7ff ff26 	bl	800800e <__exponent>
 80081c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081c4:	1813      	adds	r3, r2, r0
 80081c6:	2a01      	cmp	r2, #1
 80081c8:	4681      	mov	r9, r0
 80081ca:	6123      	str	r3, [r4, #16]
 80081cc:	dc02      	bgt.n	80081d4 <_printf_float+0x150>
 80081ce:	6822      	ldr	r2, [r4, #0]
 80081d0:	07d2      	lsls	r2, r2, #31
 80081d2:	d501      	bpl.n	80081d8 <_printf_float+0x154>
 80081d4:	3301      	adds	r3, #1
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0a2      	beq.n	8008126 <_printf_float+0xa2>
 80081e0:	232d      	movs	r3, #45	@ 0x2d
 80081e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081e6:	e79e      	b.n	8008126 <_printf_float+0xa2>
 80081e8:	9a06      	ldr	r2, [sp, #24]
 80081ea:	2a47      	cmp	r2, #71	@ 0x47
 80081ec:	d1c2      	bne.n	8008174 <_printf_float+0xf0>
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1c0      	bne.n	8008174 <_printf_float+0xf0>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7bd      	b.n	8008172 <_printf_float+0xee>
 80081f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081fa:	d9db      	bls.n	80081b4 <_printf_float+0x130>
 80081fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008200:	d118      	bne.n	8008234 <_printf_float+0x1b0>
 8008202:	2900      	cmp	r1, #0
 8008204:	6863      	ldr	r3, [r4, #4]
 8008206:	dd0b      	ble.n	8008220 <_printf_float+0x19c>
 8008208:	6121      	str	r1, [r4, #16]
 800820a:	b913      	cbnz	r3, 8008212 <_printf_float+0x18e>
 800820c:	6822      	ldr	r2, [r4, #0]
 800820e:	07d0      	lsls	r0, r2, #31
 8008210:	d502      	bpl.n	8008218 <_printf_float+0x194>
 8008212:	3301      	adds	r3, #1
 8008214:	440b      	add	r3, r1
 8008216:	6123      	str	r3, [r4, #16]
 8008218:	65a1      	str	r1, [r4, #88]	@ 0x58
 800821a:	f04f 0900 	mov.w	r9, #0
 800821e:	e7db      	b.n	80081d8 <_printf_float+0x154>
 8008220:	b913      	cbnz	r3, 8008228 <_printf_float+0x1a4>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	07d2      	lsls	r2, r2, #31
 8008226:	d501      	bpl.n	800822c <_printf_float+0x1a8>
 8008228:	3302      	adds	r3, #2
 800822a:	e7f4      	b.n	8008216 <_printf_float+0x192>
 800822c:	2301      	movs	r3, #1
 800822e:	e7f2      	b.n	8008216 <_printf_float+0x192>
 8008230:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008236:	4299      	cmp	r1, r3
 8008238:	db05      	blt.n	8008246 <_printf_float+0x1c2>
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	6121      	str	r1, [r4, #16]
 800823e:	07d8      	lsls	r0, r3, #31
 8008240:	d5ea      	bpl.n	8008218 <_printf_float+0x194>
 8008242:	1c4b      	adds	r3, r1, #1
 8008244:	e7e7      	b.n	8008216 <_printf_float+0x192>
 8008246:	2900      	cmp	r1, #0
 8008248:	bfd4      	ite	le
 800824a:	f1c1 0202 	rsble	r2, r1, #2
 800824e:	2201      	movgt	r2, #1
 8008250:	4413      	add	r3, r2
 8008252:	e7e0      	b.n	8008216 <_printf_float+0x192>
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	055a      	lsls	r2, r3, #21
 8008258:	d407      	bmi.n	800826a <_printf_float+0x1e6>
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	4642      	mov	r2, r8
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	47b8      	blx	r7
 8008264:	3001      	adds	r0, #1
 8008266:	d12b      	bne.n	80082c0 <_printf_float+0x23c>
 8008268:	e767      	b.n	800813a <_printf_float+0xb6>
 800826a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800826e:	f240 80dd 	bls.w	800842c <_printf_float+0x3a8>
 8008272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008276:	2200      	movs	r2, #0
 8008278:	2300      	movs	r3, #0
 800827a:	f7f8 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800827e:	2800      	cmp	r0, #0
 8008280:	d033      	beq.n	80082ea <_printf_float+0x266>
 8008282:	4a37      	ldr	r2, [pc, #220]	@ (8008360 <_printf_float+0x2dc>)
 8008284:	2301      	movs	r3, #1
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	f43f af54 	beq.w	800813a <_printf_float+0xb6>
 8008292:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008296:	4543      	cmp	r3, r8
 8008298:	db02      	blt.n	80082a0 <_printf_float+0x21c>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	07d8      	lsls	r0, r3, #31
 800829e:	d50f      	bpl.n	80082c0 <_printf_float+0x23c>
 80082a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af45 	beq.w	800813a <_printf_float+0xb6>
 80082b0:	f04f 0900 	mov.w	r9, #0
 80082b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80082b8:	f104 0a1a 	add.w	sl, r4, #26
 80082bc:	45c8      	cmp	r8, r9
 80082be:	dc09      	bgt.n	80082d4 <_printf_float+0x250>
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	079b      	lsls	r3, r3, #30
 80082c4:	f100 8103 	bmi.w	80084ce <_printf_float+0x44a>
 80082c8:	68e0      	ldr	r0, [r4, #12]
 80082ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082cc:	4298      	cmp	r0, r3
 80082ce:	bfb8      	it	lt
 80082d0:	4618      	movlt	r0, r3
 80082d2:	e734      	b.n	800813e <_printf_float+0xba>
 80082d4:	2301      	movs	r3, #1
 80082d6:	4652      	mov	r2, sl
 80082d8:	4631      	mov	r1, r6
 80082da:	4628      	mov	r0, r5
 80082dc:	47b8      	blx	r7
 80082de:	3001      	adds	r0, #1
 80082e0:	f43f af2b 	beq.w	800813a <_printf_float+0xb6>
 80082e4:	f109 0901 	add.w	r9, r9, #1
 80082e8:	e7e8      	b.n	80082bc <_printf_float+0x238>
 80082ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	dc39      	bgt.n	8008364 <_printf_float+0x2e0>
 80082f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <_printf_float+0x2dc>)
 80082f2:	2301      	movs	r3, #1
 80082f4:	4631      	mov	r1, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f af1d 	beq.w	800813a <_printf_float+0xb6>
 8008300:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008304:	ea59 0303 	orrs.w	r3, r9, r3
 8008308:	d102      	bne.n	8008310 <_printf_float+0x28c>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	07d9      	lsls	r1, r3, #31
 800830e:	d5d7      	bpl.n	80082c0 <_printf_float+0x23c>
 8008310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008314:	4631      	mov	r1, r6
 8008316:	4628      	mov	r0, r5
 8008318:	47b8      	blx	r7
 800831a:	3001      	adds	r0, #1
 800831c:	f43f af0d 	beq.w	800813a <_printf_float+0xb6>
 8008320:	f04f 0a00 	mov.w	sl, #0
 8008324:	f104 0b1a 	add.w	fp, r4, #26
 8008328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832a:	425b      	negs	r3, r3
 800832c:	4553      	cmp	r3, sl
 800832e:	dc01      	bgt.n	8008334 <_printf_float+0x2b0>
 8008330:	464b      	mov	r3, r9
 8008332:	e793      	b.n	800825c <_printf_float+0x1d8>
 8008334:	2301      	movs	r3, #1
 8008336:	465a      	mov	r2, fp
 8008338:	4631      	mov	r1, r6
 800833a:	4628      	mov	r0, r5
 800833c:	47b8      	blx	r7
 800833e:	3001      	adds	r0, #1
 8008340:	f43f aefb 	beq.w	800813a <_printf_float+0xb6>
 8008344:	f10a 0a01 	add.w	sl, sl, #1
 8008348:	e7ee      	b.n	8008328 <_printf_float+0x2a4>
 800834a:	bf00      	nop
 800834c:	7fefffff 	.word	0x7fefffff
 8008350:	0800c894 	.word	0x0800c894
 8008354:	0800c890 	.word	0x0800c890
 8008358:	0800c89c 	.word	0x0800c89c
 800835c:	0800c898 	.word	0x0800c898
 8008360:	0800c8a0 	.word	0x0800c8a0
 8008364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008366:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800836a:	4553      	cmp	r3, sl
 800836c:	bfa8      	it	ge
 800836e:	4653      	movge	r3, sl
 8008370:	2b00      	cmp	r3, #0
 8008372:	4699      	mov	r9, r3
 8008374:	dc36      	bgt.n	80083e4 <_printf_float+0x360>
 8008376:	f04f 0b00 	mov.w	fp, #0
 800837a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800837e:	f104 021a 	add.w	r2, r4, #26
 8008382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008384:	9306      	str	r3, [sp, #24]
 8008386:	eba3 0309 	sub.w	r3, r3, r9
 800838a:	455b      	cmp	r3, fp
 800838c:	dc31      	bgt.n	80083f2 <_printf_float+0x36e>
 800838e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008390:	459a      	cmp	sl, r3
 8008392:	dc3a      	bgt.n	800840a <_printf_float+0x386>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	07da      	lsls	r2, r3, #31
 8008398:	d437      	bmi.n	800840a <_printf_float+0x386>
 800839a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800839c:	ebaa 0903 	sub.w	r9, sl, r3
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	ebaa 0303 	sub.w	r3, sl, r3
 80083a6:	4599      	cmp	r9, r3
 80083a8:	bfa8      	it	ge
 80083aa:	4699      	movge	r9, r3
 80083ac:	f1b9 0f00 	cmp.w	r9, #0
 80083b0:	dc33      	bgt.n	800841a <_printf_float+0x396>
 80083b2:	f04f 0800 	mov.w	r8, #0
 80083b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083ba:	f104 0b1a 	add.w	fp, r4, #26
 80083be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083c0:	ebaa 0303 	sub.w	r3, sl, r3
 80083c4:	eba3 0309 	sub.w	r3, r3, r9
 80083c8:	4543      	cmp	r3, r8
 80083ca:	f77f af79 	ble.w	80082c0 <_printf_float+0x23c>
 80083ce:	2301      	movs	r3, #1
 80083d0:	465a      	mov	r2, fp
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f aeae 	beq.w	800813a <_printf_float+0xb6>
 80083de:	f108 0801 	add.w	r8, r8, #1
 80083e2:	e7ec      	b.n	80083be <_printf_float+0x33a>
 80083e4:	4642      	mov	r2, r8
 80083e6:	4631      	mov	r1, r6
 80083e8:	4628      	mov	r0, r5
 80083ea:	47b8      	blx	r7
 80083ec:	3001      	adds	r0, #1
 80083ee:	d1c2      	bne.n	8008376 <_printf_float+0x2f2>
 80083f0:	e6a3      	b.n	800813a <_printf_float+0xb6>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	9206      	str	r2, [sp, #24]
 80083fa:	47b8      	blx	r7
 80083fc:	3001      	adds	r0, #1
 80083fe:	f43f ae9c 	beq.w	800813a <_printf_float+0xb6>
 8008402:	9a06      	ldr	r2, [sp, #24]
 8008404:	f10b 0b01 	add.w	fp, fp, #1
 8008408:	e7bb      	b.n	8008382 <_printf_float+0x2fe>
 800840a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	47b8      	blx	r7
 8008414:	3001      	adds	r0, #1
 8008416:	d1c0      	bne.n	800839a <_printf_float+0x316>
 8008418:	e68f      	b.n	800813a <_printf_float+0xb6>
 800841a:	9a06      	ldr	r2, [sp, #24]
 800841c:	464b      	mov	r3, r9
 800841e:	4442      	add	r2, r8
 8008420:	4631      	mov	r1, r6
 8008422:	4628      	mov	r0, r5
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	d1c3      	bne.n	80083b2 <_printf_float+0x32e>
 800842a:	e686      	b.n	800813a <_printf_float+0xb6>
 800842c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008430:	f1ba 0f01 	cmp.w	sl, #1
 8008434:	dc01      	bgt.n	800843a <_printf_float+0x3b6>
 8008436:	07db      	lsls	r3, r3, #31
 8008438:	d536      	bpl.n	80084a8 <_printf_float+0x424>
 800843a:	2301      	movs	r3, #1
 800843c:	4642      	mov	r2, r8
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	f43f ae78 	beq.w	800813a <_printf_float+0xb6>
 800844a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	f43f ae70 	beq.w	800813a <_printf_float+0xb6>
 800845a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800845e:	2200      	movs	r2, #0
 8008460:	2300      	movs	r3, #0
 8008462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008466:	f7f8 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800846a:	b9c0      	cbnz	r0, 800849e <_printf_float+0x41a>
 800846c:	4653      	mov	r3, sl
 800846e:	f108 0201 	add.w	r2, r8, #1
 8008472:	4631      	mov	r1, r6
 8008474:	4628      	mov	r0, r5
 8008476:	47b8      	blx	r7
 8008478:	3001      	adds	r0, #1
 800847a:	d10c      	bne.n	8008496 <_printf_float+0x412>
 800847c:	e65d      	b.n	800813a <_printf_float+0xb6>
 800847e:	2301      	movs	r3, #1
 8008480:	465a      	mov	r2, fp
 8008482:	4631      	mov	r1, r6
 8008484:	4628      	mov	r0, r5
 8008486:	47b8      	blx	r7
 8008488:	3001      	adds	r0, #1
 800848a:	f43f ae56 	beq.w	800813a <_printf_float+0xb6>
 800848e:	f108 0801 	add.w	r8, r8, #1
 8008492:	45d0      	cmp	r8, sl
 8008494:	dbf3      	blt.n	800847e <_printf_float+0x3fa>
 8008496:	464b      	mov	r3, r9
 8008498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800849c:	e6df      	b.n	800825e <_printf_float+0x1da>
 800849e:	f04f 0800 	mov.w	r8, #0
 80084a2:	f104 0b1a 	add.w	fp, r4, #26
 80084a6:	e7f4      	b.n	8008492 <_printf_float+0x40e>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4642      	mov	r2, r8
 80084ac:	e7e1      	b.n	8008472 <_printf_float+0x3ee>
 80084ae:	2301      	movs	r3, #1
 80084b0:	464a      	mov	r2, r9
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f ae3e 	beq.w	800813a <_printf_float+0xb6>
 80084be:	f108 0801 	add.w	r8, r8, #1
 80084c2:	68e3      	ldr	r3, [r4, #12]
 80084c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084c6:	1a5b      	subs	r3, r3, r1
 80084c8:	4543      	cmp	r3, r8
 80084ca:	dcf0      	bgt.n	80084ae <_printf_float+0x42a>
 80084cc:	e6fc      	b.n	80082c8 <_printf_float+0x244>
 80084ce:	f04f 0800 	mov.w	r8, #0
 80084d2:	f104 0919 	add.w	r9, r4, #25
 80084d6:	e7f4      	b.n	80084c2 <_printf_float+0x43e>

080084d8 <_printf_common>:
 80084d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	4616      	mov	r6, r2
 80084de:	4698      	mov	r8, r3
 80084e0:	688a      	ldr	r2, [r1, #8]
 80084e2:	690b      	ldr	r3, [r1, #16]
 80084e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084e8:	4293      	cmp	r3, r2
 80084ea:	bfb8      	it	lt
 80084ec:	4613      	movlt	r3, r2
 80084ee:	6033      	str	r3, [r6, #0]
 80084f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084f4:	4607      	mov	r7, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	b10a      	cbz	r2, 80084fe <_printf_common+0x26>
 80084fa:	3301      	adds	r3, #1
 80084fc:	6033      	str	r3, [r6, #0]
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	0699      	lsls	r1, r3, #26
 8008502:	bf42      	ittt	mi
 8008504:	6833      	ldrmi	r3, [r6, #0]
 8008506:	3302      	addmi	r3, #2
 8008508:	6033      	strmi	r3, [r6, #0]
 800850a:	6825      	ldr	r5, [r4, #0]
 800850c:	f015 0506 	ands.w	r5, r5, #6
 8008510:	d106      	bne.n	8008520 <_printf_common+0x48>
 8008512:	f104 0a19 	add.w	sl, r4, #25
 8008516:	68e3      	ldr	r3, [r4, #12]
 8008518:	6832      	ldr	r2, [r6, #0]
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	42ab      	cmp	r3, r5
 800851e:	dc26      	bgt.n	800856e <_printf_common+0x96>
 8008520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	3b00      	subs	r3, #0
 8008528:	bf18      	it	ne
 800852a:	2301      	movne	r3, #1
 800852c:	0692      	lsls	r2, r2, #26
 800852e:	d42b      	bmi.n	8008588 <_printf_common+0xb0>
 8008530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008534:	4641      	mov	r1, r8
 8008536:	4638      	mov	r0, r7
 8008538:	47c8      	blx	r9
 800853a:	3001      	adds	r0, #1
 800853c:	d01e      	beq.n	800857c <_printf_common+0xa4>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	6922      	ldr	r2, [r4, #16]
 8008542:	f003 0306 	and.w	r3, r3, #6
 8008546:	2b04      	cmp	r3, #4
 8008548:	bf02      	ittt	eq
 800854a:	68e5      	ldreq	r5, [r4, #12]
 800854c:	6833      	ldreq	r3, [r6, #0]
 800854e:	1aed      	subeq	r5, r5, r3
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	bf0c      	ite	eq
 8008554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008558:	2500      	movne	r5, #0
 800855a:	4293      	cmp	r3, r2
 800855c:	bfc4      	itt	gt
 800855e:	1a9b      	subgt	r3, r3, r2
 8008560:	18ed      	addgt	r5, r5, r3
 8008562:	2600      	movs	r6, #0
 8008564:	341a      	adds	r4, #26
 8008566:	42b5      	cmp	r5, r6
 8008568:	d11a      	bne.n	80085a0 <_printf_common+0xc8>
 800856a:	2000      	movs	r0, #0
 800856c:	e008      	b.n	8008580 <_printf_common+0xa8>
 800856e:	2301      	movs	r3, #1
 8008570:	4652      	mov	r2, sl
 8008572:	4641      	mov	r1, r8
 8008574:	4638      	mov	r0, r7
 8008576:	47c8      	blx	r9
 8008578:	3001      	adds	r0, #1
 800857a:	d103      	bne.n	8008584 <_printf_common+0xac>
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008584:	3501      	adds	r5, #1
 8008586:	e7c6      	b.n	8008516 <_printf_common+0x3e>
 8008588:	18e1      	adds	r1, r4, r3
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	2030      	movs	r0, #48	@ 0x30
 800858e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008592:	4422      	add	r2, r4
 8008594:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008598:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800859c:	3302      	adds	r3, #2
 800859e:	e7c7      	b.n	8008530 <_printf_common+0x58>
 80085a0:	2301      	movs	r3, #1
 80085a2:	4622      	mov	r2, r4
 80085a4:	4641      	mov	r1, r8
 80085a6:	4638      	mov	r0, r7
 80085a8:	47c8      	blx	r9
 80085aa:	3001      	adds	r0, #1
 80085ac:	d0e6      	beq.n	800857c <_printf_common+0xa4>
 80085ae:	3601      	adds	r6, #1
 80085b0:	e7d9      	b.n	8008566 <_printf_common+0x8e>
	...

080085b4 <_printf_i>:
 80085b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	7e0f      	ldrb	r7, [r1, #24]
 80085ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085bc:	2f78      	cmp	r7, #120	@ 0x78
 80085be:	4691      	mov	r9, r2
 80085c0:	4680      	mov	r8, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	469a      	mov	sl, r3
 80085c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085ca:	d807      	bhi.n	80085dc <_printf_i+0x28>
 80085cc:	2f62      	cmp	r7, #98	@ 0x62
 80085ce:	d80a      	bhi.n	80085e6 <_printf_i+0x32>
 80085d0:	2f00      	cmp	r7, #0
 80085d2:	f000 80d1 	beq.w	8008778 <_printf_i+0x1c4>
 80085d6:	2f58      	cmp	r7, #88	@ 0x58
 80085d8:	f000 80b8 	beq.w	800874c <_printf_i+0x198>
 80085dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085e4:	e03a      	b.n	800865c <_printf_i+0xa8>
 80085e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ea:	2b15      	cmp	r3, #21
 80085ec:	d8f6      	bhi.n	80085dc <_printf_i+0x28>
 80085ee:	a101      	add	r1, pc, #4	@ (adr r1, 80085f4 <_printf_i+0x40>)
 80085f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085f4:	0800864d 	.word	0x0800864d
 80085f8:	08008661 	.word	0x08008661
 80085fc:	080085dd 	.word	0x080085dd
 8008600:	080085dd 	.word	0x080085dd
 8008604:	080085dd 	.word	0x080085dd
 8008608:	080085dd 	.word	0x080085dd
 800860c:	08008661 	.word	0x08008661
 8008610:	080085dd 	.word	0x080085dd
 8008614:	080085dd 	.word	0x080085dd
 8008618:	080085dd 	.word	0x080085dd
 800861c:	080085dd 	.word	0x080085dd
 8008620:	0800875f 	.word	0x0800875f
 8008624:	0800868b 	.word	0x0800868b
 8008628:	08008719 	.word	0x08008719
 800862c:	080085dd 	.word	0x080085dd
 8008630:	080085dd 	.word	0x080085dd
 8008634:	08008781 	.word	0x08008781
 8008638:	080085dd 	.word	0x080085dd
 800863c:	0800868b 	.word	0x0800868b
 8008640:	080085dd 	.word	0x080085dd
 8008644:	080085dd 	.word	0x080085dd
 8008648:	08008721 	.word	0x08008721
 800864c:	6833      	ldr	r3, [r6, #0]
 800864e:	1d1a      	adds	r2, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	6032      	str	r2, [r6, #0]
 8008654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008658:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800865c:	2301      	movs	r3, #1
 800865e:	e09c      	b.n	800879a <_printf_i+0x1e6>
 8008660:	6833      	ldr	r3, [r6, #0]
 8008662:	6820      	ldr	r0, [r4, #0]
 8008664:	1d19      	adds	r1, r3, #4
 8008666:	6031      	str	r1, [r6, #0]
 8008668:	0606      	lsls	r6, r0, #24
 800866a:	d501      	bpl.n	8008670 <_printf_i+0xbc>
 800866c:	681d      	ldr	r5, [r3, #0]
 800866e:	e003      	b.n	8008678 <_printf_i+0xc4>
 8008670:	0645      	lsls	r5, r0, #25
 8008672:	d5fb      	bpl.n	800866c <_printf_i+0xb8>
 8008674:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008678:	2d00      	cmp	r5, #0
 800867a:	da03      	bge.n	8008684 <_printf_i+0xd0>
 800867c:	232d      	movs	r3, #45	@ 0x2d
 800867e:	426d      	negs	r5, r5
 8008680:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008684:	4858      	ldr	r0, [pc, #352]	@ (80087e8 <_printf_i+0x234>)
 8008686:	230a      	movs	r3, #10
 8008688:	e011      	b.n	80086ae <_printf_i+0xfa>
 800868a:	6821      	ldr	r1, [r4, #0]
 800868c:	6833      	ldr	r3, [r6, #0]
 800868e:	0608      	lsls	r0, r1, #24
 8008690:	f853 5b04 	ldr.w	r5, [r3], #4
 8008694:	d402      	bmi.n	800869c <_printf_i+0xe8>
 8008696:	0649      	lsls	r1, r1, #25
 8008698:	bf48      	it	mi
 800869a:	b2ad      	uxthmi	r5, r5
 800869c:	2f6f      	cmp	r7, #111	@ 0x6f
 800869e:	4852      	ldr	r0, [pc, #328]	@ (80087e8 <_printf_i+0x234>)
 80086a0:	6033      	str	r3, [r6, #0]
 80086a2:	bf14      	ite	ne
 80086a4:	230a      	movne	r3, #10
 80086a6:	2308      	moveq	r3, #8
 80086a8:	2100      	movs	r1, #0
 80086aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ae:	6866      	ldr	r6, [r4, #4]
 80086b0:	60a6      	str	r6, [r4, #8]
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	db05      	blt.n	80086c2 <_printf_i+0x10e>
 80086b6:	6821      	ldr	r1, [r4, #0]
 80086b8:	432e      	orrs	r6, r5
 80086ba:	f021 0104 	bic.w	r1, r1, #4
 80086be:	6021      	str	r1, [r4, #0]
 80086c0:	d04b      	beq.n	800875a <_printf_i+0x1a6>
 80086c2:	4616      	mov	r6, r2
 80086c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80086c8:	fb03 5711 	mls	r7, r3, r1, r5
 80086cc:	5dc7      	ldrb	r7, [r0, r7]
 80086ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086d2:	462f      	mov	r7, r5
 80086d4:	42bb      	cmp	r3, r7
 80086d6:	460d      	mov	r5, r1
 80086d8:	d9f4      	bls.n	80086c4 <_printf_i+0x110>
 80086da:	2b08      	cmp	r3, #8
 80086dc:	d10b      	bne.n	80086f6 <_printf_i+0x142>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	07df      	lsls	r7, r3, #31
 80086e2:	d508      	bpl.n	80086f6 <_printf_i+0x142>
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	6861      	ldr	r1, [r4, #4]
 80086e8:	4299      	cmp	r1, r3
 80086ea:	bfde      	ittt	le
 80086ec:	2330      	movle	r3, #48	@ 0x30
 80086ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086f6:	1b92      	subs	r2, r2, r6
 80086f8:	6122      	str	r2, [r4, #16]
 80086fa:	f8cd a000 	str.w	sl, [sp]
 80086fe:	464b      	mov	r3, r9
 8008700:	aa03      	add	r2, sp, #12
 8008702:	4621      	mov	r1, r4
 8008704:	4640      	mov	r0, r8
 8008706:	f7ff fee7 	bl	80084d8 <_printf_common>
 800870a:	3001      	adds	r0, #1
 800870c:	d14a      	bne.n	80087a4 <_printf_i+0x1f0>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	b004      	add	sp, #16
 8008714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	f043 0320 	orr.w	r3, r3, #32
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	4832      	ldr	r0, [pc, #200]	@ (80087ec <_printf_i+0x238>)
 8008722:	2778      	movs	r7, #120	@ 0x78
 8008724:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	6831      	ldr	r1, [r6, #0]
 800872c:	061f      	lsls	r7, r3, #24
 800872e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008732:	d402      	bmi.n	800873a <_printf_i+0x186>
 8008734:	065f      	lsls	r7, r3, #25
 8008736:	bf48      	it	mi
 8008738:	b2ad      	uxthmi	r5, r5
 800873a:	6031      	str	r1, [r6, #0]
 800873c:	07d9      	lsls	r1, r3, #31
 800873e:	bf44      	itt	mi
 8008740:	f043 0320 	orrmi.w	r3, r3, #32
 8008744:	6023      	strmi	r3, [r4, #0]
 8008746:	b11d      	cbz	r5, 8008750 <_printf_i+0x19c>
 8008748:	2310      	movs	r3, #16
 800874a:	e7ad      	b.n	80086a8 <_printf_i+0xf4>
 800874c:	4826      	ldr	r0, [pc, #152]	@ (80087e8 <_printf_i+0x234>)
 800874e:	e7e9      	b.n	8008724 <_printf_i+0x170>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	f023 0320 	bic.w	r3, r3, #32
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	e7f6      	b.n	8008748 <_printf_i+0x194>
 800875a:	4616      	mov	r6, r2
 800875c:	e7bd      	b.n	80086da <_printf_i+0x126>
 800875e:	6833      	ldr	r3, [r6, #0]
 8008760:	6825      	ldr	r5, [r4, #0]
 8008762:	6961      	ldr	r1, [r4, #20]
 8008764:	1d18      	adds	r0, r3, #4
 8008766:	6030      	str	r0, [r6, #0]
 8008768:	062e      	lsls	r6, r5, #24
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	d501      	bpl.n	8008772 <_printf_i+0x1be>
 800876e:	6019      	str	r1, [r3, #0]
 8008770:	e002      	b.n	8008778 <_printf_i+0x1c4>
 8008772:	0668      	lsls	r0, r5, #25
 8008774:	d5fb      	bpl.n	800876e <_printf_i+0x1ba>
 8008776:	8019      	strh	r1, [r3, #0]
 8008778:	2300      	movs	r3, #0
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	4616      	mov	r6, r2
 800877e:	e7bc      	b.n	80086fa <_printf_i+0x146>
 8008780:	6833      	ldr	r3, [r6, #0]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	6032      	str	r2, [r6, #0]
 8008786:	681e      	ldr	r6, [r3, #0]
 8008788:	6862      	ldr	r2, [r4, #4]
 800878a:	2100      	movs	r1, #0
 800878c:	4630      	mov	r0, r6
 800878e:	f7f7 fd27 	bl	80001e0 <memchr>
 8008792:	b108      	cbz	r0, 8008798 <_printf_i+0x1e4>
 8008794:	1b80      	subs	r0, r0, r6
 8008796:	6060      	str	r0, [r4, #4]
 8008798:	6863      	ldr	r3, [r4, #4]
 800879a:	6123      	str	r3, [r4, #16]
 800879c:	2300      	movs	r3, #0
 800879e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a2:	e7aa      	b.n	80086fa <_printf_i+0x146>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	4632      	mov	r2, r6
 80087a8:	4649      	mov	r1, r9
 80087aa:	4640      	mov	r0, r8
 80087ac:	47d0      	blx	sl
 80087ae:	3001      	adds	r0, #1
 80087b0:	d0ad      	beq.n	800870e <_printf_i+0x15a>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	079b      	lsls	r3, r3, #30
 80087b6:	d413      	bmi.n	80087e0 <_printf_i+0x22c>
 80087b8:	68e0      	ldr	r0, [r4, #12]
 80087ba:	9b03      	ldr	r3, [sp, #12]
 80087bc:	4298      	cmp	r0, r3
 80087be:	bfb8      	it	lt
 80087c0:	4618      	movlt	r0, r3
 80087c2:	e7a6      	b.n	8008712 <_printf_i+0x15e>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4632      	mov	r2, r6
 80087c8:	4649      	mov	r1, r9
 80087ca:	4640      	mov	r0, r8
 80087cc:	47d0      	blx	sl
 80087ce:	3001      	adds	r0, #1
 80087d0:	d09d      	beq.n	800870e <_printf_i+0x15a>
 80087d2:	3501      	adds	r5, #1
 80087d4:	68e3      	ldr	r3, [r4, #12]
 80087d6:	9903      	ldr	r1, [sp, #12]
 80087d8:	1a5b      	subs	r3, r3, r1
 80087da:	42ab      	cmp	r3, r5
 80087dc:	dcf2      	bgt.n	80087c4 <_printf_i+0x210>
 80087de:	e7eb      	b.n	80087b8 <_printf_i+0x204>
 80087e0:	2500      	movs	r5, #0
 80087e2:	f104 0619 	add.w	r6, r4, #25
 80087e6:	e7f5      	b.n	80087d4 <_printf_i+0x220>
 80087e8:	0800c8a2 	.word	0x0800c8a2
 80087ec:	0800c8b3 	.word	0x0800c8b3

080087f0 <std>:
 80087f0:	2300      	movs	r3, #0
 80087f2:	b510      	push	{r4, lr}
 80087f4:	4604      	mov	r4, r0
 80087f6:	e9c0 3300 	strd	r3, r3, [r0]
 80087fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087fe:	6083      	str	r3, [r0, #8]
 8008800:	8181      	strh	r1, [r0, #12]
 8008802:	6643      	str	r3, [r0, #100]	@ 0x64
 8008804:	81c2      	strh	r2, [r0, #14]
 8008806:	6183      	str	r3, [r0, #24]
 8008808:	4619      	mov	r1, r3
 800880a:	2208      	movs	r2, #8
 800880c:	305c      	adds	r0, #92	@ 0x5c
 800880e:	f000 f931 	bl	8008a74 <memset>
 8008812:	4b0d      	ldr	r3, [pc, #52]	@ (8008848 <std+0x58>)
 8008814:	6263      	str	r3, [r4, #36]	@ 0x24
 8008816:	4b0d      	ldr	r3, [pc, #52]	@ (800884c <std+0x5c>)
 8008818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800881a:	4b0d      	ldr	r3, [pc, #52]	@ (8008850 <std+0x60>)
 800881c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800881e:	4b0d      	ldr	r3, [pc, #52]	@ (8008854 <std+0x64>)
 8008820:	6323      	str	r3, [r4, #48]	@ 0x30
 8008822:	4b0d      	ldr	r3, [pc, #52]	@ (8008858 <std+0x68>)
 8008824:	6224      	str	r4, [r4, #32]
 8008826:	429c      	cmp	r4, r3
 8008828:	d006      	beq.n	8008838 <std+0x48>
 800882a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800882e:	4294      	cmp	r4, r2
 8008830:	d002      	beq.n	8008838 <std+0x48>
 8008832:	33d0      	adds	r3, #208	@ 0xd0
 8008834:	429c      	cmp	r4, r3
 8008836:	d105      	bne.n	8008844 <std+0x54>
 8008838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008840:	f000 b994 	b.w	8008b6c <__retarget_lock_init_recursive>
 8008844:	bd10      	pop	{r4, pc}
 8008846:	bf00      	nop
 8008848:	08008975 	.word	0x08008975
 800884c:	08008997 	.word	0x08008997
 8008850:	080089cf 	.word	0x080089cf
 8008854:	080089f3 	.word	0x080089f3
 8008858:	200014c8 	.word	0x200014c8

0800885c <stdio_exit_handler>:
 800885c:	4a02      	ldr	r2, [pc, #8]	@ (8008868 <stdio_exit_handler+0xc>)
 800885e:	4903      	ldr	r1, [pc, #12]	@ (800886c <stdio_exit_handler+0x10>)
 8008860:	4803      	ldr	r0, [pc, #12]	@ (8008870 <stdio_exit_handler+0x14>)
 8008862:	f000 b869 	b.w	8008938 <_fwalk_sglue>
 8008866:	bf00      	nop
 8008868:	20000018 	.word	0x20000018
 800886c:	0800a4d5 	.word	0x0800a4d5
 8008870:	20000028 	.word	0x20000028

08008874 <cleanup_stdio>:
 8008874:	6841      	ldr	r1, [r0, #4]
 8008876:	4b0c      	ldr	r3, [pc, #48]	@ (80088a8 <cleanup_stdio+0x34>)
 8008878:	4299      	cmp	r1, r3
 800887a:	b510      	push	{r4, lr}
 800887c:	4604      	mov	r4, r0
 800887e:	d001      	beq.n	8008884 <cleanup_stdio+0x10>
 8008880:	f001 fe28 	bl	800a4d4 <_fflush_r>
 8008884:	68a1      	ldr	r1, [r4, #8]
 8008886:	4b09      	ldr	r3, [pc, #36]	@ (80088ac <cleanup_stdio+0x38>)
 8008888:	4299      	cmp	r1, r3
 800888a:	d002      	beq.n	8008892 <cleanup_stdio+0x1e>
 800888c:	4620      	mov	r0, r4
 800888e:	f001 fe21 	bl	800a4d4 <_fflush_r>
 8008892:	68e1      	ldr	r1, [r4, #12]
 8008894:	4b06      	ldr	r3, [pc, #24]	@ (80088b0 <cleanup_stdio+0x3c>)
 8008896:	4299      	cmp	r1, r3
 8008898:	d004      	beq.n	80088a4 <cleanup_stdio+0x30>
 800889a:	4620      	mov	r0, r4
 800889c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a0:	f001 be18 	b.w	800a4d4 <_fflush_r>
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	bf00      	nop
 80088a8:	200014c8 	.word	0x200014c8
 80088ac:	20001530 	.word	0x20001530
 80088b0:	20001598 	.word	0x20001598

080088b4 <global_stdio_init.part.0>:
 80088b4:	b510      	push	{r4, lr}
 80088b6:	4b0b      	ldr	r3, [pc, #44]	@ (80088e4 <global_stdio_init.part.0+0x30>)
 80088b8:	4c0b      	ldr	r4, [pc, #44]	@ (80088e8 <global_stdio_init.part.0+0x34>)
 80088ba:	4a0c      	ldr	r2, [pc, #48]	@ (80088ec <global_stdio_init.part.0+0x38>)
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	4620      	mov	r0, r4
 80088c0:	2200      	movs	r2, #0
 80088c2:	2104      	movs	r1, #4
 80088c4:	f7ff ff94 	bl	80087f0 <std>
 80088c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088cc:	2201      	movs	r2, #1
 80088ce:	2109      	movs	r1, #9
 80088d0:	f7ff ff8e 	bl	80087f0 <std>
 80088d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088d8:	2202      	movs	r2, #2
 80088da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088de:	2112      	movs	r1, #18
 80088e0:	f7ff bf86 	b.w	80087f0 <std>
 80088e4:	20001600 	.word	0x20001600
 80088e8:	200014c8 	.word	0x200014c8
 80088ec:	0800885d 	.word	0x0800885d

080088f0 <__sfp_lock_acquire>:
 80088f0:	4801      	ldr	r0, [pc, #4]	@ (80088f8 <__sfp_lock_acquire+0x8>)
 80088f2:	f000 b93c 	b.w	8008b6e <__retarget_lock_acquire_recursive>
 80088f6:	bf00      	nop
 80088f8:	20001609 	.word	0x20001609

080088fc <__sfp_lock_release>:
 80088fc:	4801      	ldr	r0, [pc, #4]	@ (8008904 <__sfp_lock_release+0x8>)
 80088fe:	f000 b937 	b.w	8008b70 <__retarget_lock_release_recursive>
 8008902:	bf00      	nop
 8008904:	20001609 	.word	0x20001609

08008908 <__sinit>:
 8008908:	b510      	push	{r4, lr}
 800890a:	4604      	mov	r4, r0
 800890c:	f7ff fff0 	bl	80088f0 <__sfp_lock_acquire>
 8008910:	6a23      	ldr	r3, [r4, #32]
 8008912:	b11b      	cbz	r3, 800891c <__sinit+0x14>
 8008914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008918:	f7ff bff0 	b.w	80088fc <__sfp_lock_release>
 800891c:	4b04      	ldr	r3, [pc, #16]	@ (8008930 <__sinit+0x28>)
 800891e:	6223      	str	r3, [r4, #32]
 8008920:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <__sinit+0x2c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f5      	bne.n	8008914 <__sinit+0xc>
 8008928:	f7ff ffc4 	bl	80088b4 <global_stdio_init.part.0>
 800892c:	e7f2      	b.n	8008914 <__sinit+0xc>
 800892e:	bf00      	nop
 8008930:	08008875 	.word	0x08008875
 8008934:	20001600 	.word	0x20001600

08008938 <_fwalk_sglue>:
 8008938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800893c:	4607      	mov	r7, r0
 800893e:	4688      	mov	r8, r1
 8008940:	4614      	mov	r4, r2
 8008942:	2600      	movs	r6, #0
 8008944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008948:	f1b9 0901 	subs.w	r9, r9, #1
 800894c:	d505      	bpl.n	800895a <_fwalk_sglue+0x22>
 800894e:	6824      	ldr	r4, [r4, #0]
 8008950:	2c00      	cmp	r4, #0
 8008952:	d1f7      	bne.n	8008944 <_fwalk_sglue+0xc>
 8008954:	4630      	mov	r0, r6
 8008956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895a:	89ab      	ldrh	r3, [r5, #12]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d907      	bls.n	8008970 <_fwalk_sglue+0x38>
 8008960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008964:	3301      	adds	r3, #1
 8008966:	d003      	beq.n	8008970 <_fwalk_sglue+0x38>
 8008968:	4629      	mov	r1, r5
 800896a:	4638      	mov	r0, r7
 800896c:	47c0      	blx	r8
 800896e:	4306      	orrs	r6, r0
 8008970:	3568      	adds	r5, #104	@ 0x68
 8008972:	e7e9      	b.n	8008948 <_fwalk_sglue+0x10>

08008974 <__sread>:
 8008974:	b510      	push	{r4, lr}
 8008976:	460c      	mov	r4, r1
 8008978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897c:	f000 f8a8 	bl	8008ad0 <_read_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	bfab      	itete	ge
 8008984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008986:	89a3      	ldrhlt	r3, [r4, #12]
 8008988:	181b      	addge	r3, r3, r0
 800898a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800898e:	bfac      	ite	ge
 8008990:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008992:	81a3      	strhlt	r3, [r4, #12]
 8008994:	bd10      	pop	{r4, pc}

08008996 <__swrite>:
 8008996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800899a:	461f      	mov	r7, r3
 800899c:	898b      	ldrh	r3, [r1, #12]
 800899e:	05db      	lsls	r3, r3, #23
 80089a0:	4605      	mov	r5, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	4616      	mov	r6, r2
 80089a6:	d505      	bpl.n	80089b4 <__swrite+0x1e>
 80089a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ac:	2302      	movs	r3, #2
 80089ae:	2200      	movs	r2, #0
 80089b0:	f000 f87c 	bl	8008aac <_lseek_r>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	4632      	mov	r2, r6
 80089c2:	463b      	mov	r3, r7
 80089c4:	4628      	mov	r0, r5
 80089c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ca:	f000 b893 	b.w	8008af4 <_write_r>

080089ce <__sseek>:
 80089ce:	b510      	push	{r4, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d6:	f000 f869 	bl	8008aac <_lseek_r>
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	bf15      	itete	ne
 80089e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089ea:	81a3      	strheq	r3, [r4, #12]
 80089ec:	bf18      	it	ne
 80089ee:	81a3      	strhne	r3, [r4, #12]
 80089f0:	bd10      	pop	{r4, pc}

080089f2 <__sclose>:
 80089f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f6:	f000 b849 	b.w	8008a8c <_close_r>

080089fa <_vsniprintf_r>:
 80089fa:	b530      	push	{r4, r5, lr}
 80089fc:	4614      	mov	r4, r2
 80089fe:	2c00      	cmp	r4, #0
 8008a00:	b09b      	sub	sp, #108	@ 0x6c
 8008a02:	4605      	mov	r5, r0
 8008a04:	461a      	mov	r2, r3
 8008a06:	da05      	bge.n	8008a14 <_vsniprintf_r+0x1a>
 8008a08:	238b      	movs	r3, #139	@ 0x8b
 8008a0a:	6003      	str	r3, [r0, #0]
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	b01b      	add	sp, #108	@ 0x6c
 8008a12:	bd30      	pop	{r4, r5, pc}
 8008a14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a18:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008a1c:	f04f 0300 	mov.w	r3, #0
 8008a20:	9319      	str	r3, [sp, #100]	@ 0x64
 8008a22:	bf14      	ite	ne
 8008a24:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a28:	4623      	moveq	r3, r4
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a32:	9100      	str	r1, [sp, #0]
 8008a34:	9104      	str	r1, [sp, #16]
 8008a36:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008a3a:	4669      	mov	r1, sp
 8008a3c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8008a3e:	f001 fbc9 	bl	800a1d4 <_svfiprintf_r>
 8008a42:	1c43      	adds	r3, r0, #1
 8008a44:	bfbc      	itt	lt
 8008a46:	238b      	movlt	r3, #139	@ 0x8b
 8008a48:	602b      	strlt	r3, [r5, #0]
 8008a4a:	2c00      	cmp	r4, #0
 8008a4c:	d0e0      	beq.n	8008a10 <_vsniprintf_r+0x16>
 8008a4e:	9b00      	ldr	r3, [sp, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	e7dc      	b.n	8008a10 <_vsniprintf_r+0x16>
	...

08008a58 <vsniprintf>:
 8008a58:	b507      	push	{r0, r1, r2, lr}
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	460a      	mov	r2, r1
 8008a60:	4601      	mov	r1, r0
 8008a62:	4803      	ldr	r0, [pc, #12]	@ (8008a70 <vsniprintf+0x18>)
 8008a64:	6800      	ldr	r0, [r0, #0]
 8008a66:	f7ff ffc8 	bl	80089fa <_vsniprintf_r>
 8008a6a:	b003      	add	sp, #12
 8008a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a70:	20000024 	.word	0x20000024

08008a74 <memset>:
 8008a74:	4402      	add	r2, r0
 8008a76:	4603      	mov	r3, r0
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d100      	bne.n	8008a7e <memset+0xa>
 8008a7c:	4770      	bx	lr
 8008a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a82:	e7f9      	b.n	8008a78 <memset+0x4>

08008a84 <_localeconv_r>:
 8008a84:	4800      	ldr	r0, [pc, #0]	@ (8008a88 <_localeconv_r+0x4>)
 8008a86:	4770      	bx	lr
 8008a88:	20000164 	.word	0x20000164

08008a8c <_close_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4d06      	ldr	r5, [pc, #24]	@ (8008aa8 <_close_r+0x1c>)
 8008a90:	2300      	movs	r3, #0
 8008a92:	4604      	mov	r4, r0
 8008a94:	4608      	mov	r0, r1
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	f7fa fe2e 	bl	80036f8 <_close>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_close_r+0x1a>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_close_r+0x1a>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	20001604 	.word	0x20001604

08008aac <_lseek_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d07      	ldr	r5, [pc, #28]	@ (8008acc <_lseek_r+0x20>)
 8008ab0:	4604      	mov	r4, r0
 8008ab2:	4608      	mov	r0, r1
 8008ab4:	4611      	mov	r1, r2
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	602a      	str	r2, [r5, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f7fa fe43 	bl	8003746 <_lseek>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_lseek_r+0x1e>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_lseek_r+0x1e>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20001604 	.word	0x20001604

08008ad0 <_read_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d07      	ldr	r5, [pc, #28]	@ (8008af0 <_read_r+0x20>)
 8008ad4:	4604      	mov	r4, r0
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7fa fdd1 	bl	8003686 <_read>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_read_r+0x1e>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_read_r+0x1e>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20001604 	.word	0x20001604

08008af4 <_write_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	@ (8008b14 <_write_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7fa fddc 	bl	80036c0 <_write>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_write_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_write_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20001604 	.word	0x20001604

08008b18 <__errno>:
 8008b18:	4b01      	ldr	r3, [pc, #4]	@ (8008b20 <__errno+0x8>)
 8008b1a:	6818      	ldr	r0, [r3, #0]
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000024 	.word	0x20000024

08008b24 <__libc_init_array>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	4d0d      	ldr	r5, [pc, #52]	@ (8008b5c <__libc_init_array+0x38>)
 8008b28:	4c0d      	ldr	r4, [pc, #52]	@ (8008b60 <__libc_init_array+0x3c>)
 8008b2a:	1b64      	subs	r4, r4, r5
 8008b2c:	10a4      	asrs	r4, r4, #2
 8008b2e:	2600      	movs	r6, #0
 8008b30:	42a6      	cmp	r6, r4
 8008b32:	d109      	bne.n	8008b48 <__libc_init_array+0x24>
 8008b34:	4d0b      	ldr	r5, [pc, #44]	@ (8008b64 <__libc_init_array+0x40>)
 8008b36:	4c0c      	ldr	r4, [pc, #48]	@ (8008b68 <__libc_init_array+0x44>)
 8008b38:	f002 f86a 	bl	800ac10 <_init>
 8008b3c:	1b64      	subs	r4, r4, r5
 8008b3e:	10a4      	asrs	r4, r4, #2
 8008b40:	2600      	movs	r6, #0
 8008b42:	42a6      	cmp	r6, r4
 8008b44:	d105      	bne.n	8008b52 <__libc_init_array+0x2e>
 8008b46:	bd70      	pop	{r4, r5, r6, pc}
 8008b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4c:	4798      	blx	r3
 8008b4e:	3601      	adds	r6, #1
 8008b50:	e7ee      	b.n	8008b30 <__libc_init_array+0xc>
 8008b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b56:	4798      	blx	r3
 8008b58:	3601      	adds	r6, #1
 8008b5a:	e7f2      	b.n	8008b42 <__libc_init_array+0x1e>
 8008b5c:	0800cc0c 	.word	0x0800cc0c
 8008b60:	0800cc0c 	.word	0x0800cc0c
 8008b64:	0800cc0c 	.word	0x0800cc0c
 8008b68:	0800cc10 	.word	0x0800cc10

08008b6c <__retarget_lock_init_recursive>:
 8008b6c:	4770      	bx	lr

08008b6e <__retarget_lock_acquire_recursive>:
 8008b6e:	4770      	bx	lr

08008b70 <__retarget_lock_release_recursive>:
 8008b70:	4770      	bx	lr

08008b72 <quorem>:
 8008b72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b76:	6903      	ldr	r3, [r0, #16]
 8008b78:	690c      	ldr	r4, [r1, #16]
 8008b7a:	42a3      	cmp	r3, r4
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	db7e      	blt.n	8008c7e <quorem+0x10c>
 8008b80:	3c01      	subs	r4, #1
 8008b82:	f101 0814 	add.w	r8, r1, #20
 8008b86:	00a3      	lsls	r3, r4, #2
 8008b88:	f100 0514 	add.w	r5, r0, #20
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ba4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ba8:	d32e      	bcc.n	8008c08 <quorem+0x96>
 8008baa:	f04f 0a00 	mov.w	sl, #0
 8008bae:	46c4      	mov	ip, r8
 8008bb0:	46ae      	mov	lr, r5
 8008bb2:	46d3      	mov	fp, sl
 8008bb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008bb8:	b298      	uxth	r0, r3
 8008bba:	fb06 a000 	mla	r0, r6, r0, sl
 8008bbe:	0c02      	lsrs	r2, r0, #16
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	fb06 2303 	mla	r3, r6, r3, r2
 8008bc6:	f8de 2000 	ldr.w	r2, [lr]
 8008bca:	b280      	uxth	r0, r0
 8008bcc:	b292      	uxth	r2, r2
 8008bce:	1a12      	subs	r2, r2, r0
 8008bd0:	445a      	add	r2, fp
 8008bd2:	f8de 0000 	ldr.w	r0, [lr]
 8008bd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008be0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008be4:	b292      	uxth	r2, r2
 8008be6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008bea:	45e1      	cmp	r9, ip
 8008bec:	f84e 2b04 	str.w	r2, [lr], #4
 8008bf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008bf4:	d2de      	bcs.n	8008bb4 <quorem+0x42>
 8008bf6:	9b00      	ldr	r3, [sp, #0]
 8008bf8:	58eb      	ldr	r3, [r5, r3]
 8008bfa:	b92b      	cbnz	r3, 8008c08 <quorem+0x96>
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	3b04      	subs	r3, #4
 8008c00:	429d      	cmp	r5, r3
 8008c02:	461a      	mov	r2, r3
 8008c04:	d32f      	bcc.n	8008c66 <quorem+0xf4>
 8008c06:	613c      	str	r4, [r7, #16]
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f001 f97f 	bl	8009f0c <__mcmp>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	db25      	blt.n	8008c5e <quorem+0xec>
 8008c12:	4629      	mov	r1, r5
 8008c14:	2000      	movs	r0, #0
 8008c16:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c1a:	f8d1 c000 	ldr.w	ip, [r1]
 8008c1e:	fa1f fe82 	uxth.w	lr, r2
 8008c22:	fa1f f38c 	uxth.w	r3, ip
 8008c26:	eba3 030e 	sub.w	r3, r3, lr
 8008c2a:	4403      	add	r3, r0
 8008c2c:	0c12      	lsrs	r2, r2, #16
 8008c2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c3c:	45c1      	cmp	r9, r8
 8008c3e:	f841 3b04 	str.w	r3, [r1], #4
 8008c42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c46:	d2e6      	bcs.n	8008c16 <quorem+0xa4>
 8008c48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c50:	b922      	cbnz	r2, 8008c5c <quorem+0xea>
 8008c52:	3b04      	subs	r3, #4
 8008c54:	429d      	cmp	r5, r3
 8008c56:	461a      	mov	r2, r3
 8008c58:	d30b      	bcc.n	8008c72 <quorem+0x100>
 8008c5a:	613c      	str	r4, [r7, #16]
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	4630      	mov	r0, r6
 8008c60:	b003      	add	sp, #12
 8008c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c66:	6812      	ldr	r2, [r2, #0]
 8008c68:	3b04      	subs	r3, #4
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	d1cb      	bne.n	8008c06 <quorem+0x94>
 8008c6e:	3c01      	subs	r4, #1
 8008c70:	e7c6      	b.n	8008c00 <quorem+0x8e>
 8008c72:	6812      	ldr	r2, [r2, #0]
 8008c74:	3b04      	subs	r3, #4
 8008c76:	2a00      	cmp	r2, #0
 8008c78:	d1ef      	bne.n	8008c5a <quorem+0xe8>
 8008c7a:	3c01      	subs	r4, #1
 8008c7c:	e7ea      	b.n	8008c54 <quorem+0xe2>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	e7ee      	b.n	8008c60 <quorem+0xee>
 8008c82:	0000      	movs	r0, r0
 8008c84:	0000      	movs	r0, r0
	...

08008c88 <_dtoa_r>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	69c7      	ldr	r7, [r0, #28]
 8008c8e:	b097      	sub	sp, #92	@ 0x5c
 8008c90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008c94:	ec55 4b10 	vmov	r4, r5, d0
 8008c98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008c9a:	9107      	str	r1, [sp, #28]
 8008c9c:	4681      	mov	r9, r0
 8008c9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ca0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008ca2:	b97f      	cbnz	r7, 8008cc4 <_dtoa_r+0x3c>
 8008ca4:	2010      	movs	r0, #16
 8008ca6:	f000 fe09 	bl	80098bc <malloc>
 8008caa:	4602      	mov	r2, r0
 8008cac:	f8c9 001c 	str.w	r0, [r9, #28]
 8008cb0:	b920      	cbnz	r0, 8008cbc <_dtoa_r+0x34>
 8008cb2:	4ba9      	ldr	r3, [pc, #676]	@ (8008f58 <_dtoa_r+0x2d0>)
 8008cb4:	21ef      	movs	r1, #239	@ 0xef
 8008cb6:	48a9      	ldr	r0, [pc, #676]	@ (8008f5c <_dtoa_r+0x2d4>)
 8008cb8:	f001 fc6c 	bl	800a594 <__assert_func>
 8008cbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008cc0:	6007      	str	r7, [r0, #0]
 8008cc2:	60c7      	str	r7, [r0, #12]
 8008cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008cc8:	6819      	ldr	r1, [r3, #0]
 8008cca:	b159      	cbz	r1, 8008ce4 <_dtoa_r+0x5c>
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	604a      	str	r2, [r1, #4]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	4093      	lsls	r3, r2
 8008cd4:	608b      	str	r3, [r1, #8]
 8008cd6:	4648      	mov	r0, r9
 8008cd8:	f000 fee6 	bl	8009aa8 <_Bfree>
 8008cdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	1e2b      	subs	r3, r5, #0
 8008ce6:	bfb9      	ittee	lt
 8008ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008cec:	9305      	strlt	r3, [sp, #20]
 8008cee:	2300      	movge	r3, #0
 8008cf0:	6033      	strge	r3, [r6, #0]
 8008cf2:	9f05      	ldr	r7, [sp, #20]
 8008cf4:	4b9a      	ldr	r3, [pc, #616]	@ (8008f60 <_dtoa_r+0x2d8>)
 8008cf6:	bfbc      	itt	lt
 8008cf8:	2201      	movlt	r2, #1
 8008cfa:	6032      	strlt	r2, [r6, #0]
 8008cfc:	43bb      	bics	r3, r7
 8008cfe:	d112      	bne.n	8008d26 <_dtoa_r+0x9e>
 8008d00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d0c:	4323      	orrs	r3, r4
 8008d0e:	f000 855a 	beq.w	80097c6 <_dtoa_r+0xb3e>
 8008d12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008f74 <_dtoa_r+0x2ec>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 855c 	beq.w	80097d6 <_dtoa_r+0xb4e>
 8008d1e:	f10a 0303 	add.w	r3, sl, #3
 8008d22:	f000 bd56 	b.w	80097d2 <_dtoa_r+0xb4a>
 8008d26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	ec51 0b17 	vmov	r0, r1, d7
 8008d30:	2300      	movs	r3, #0
 8008d32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008d36:	f7f7 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d3a:	4680      	mov	r8, r0
 8008d3c:	b158      	cbz	r0, 8008d56 <_dtoa_r+0xce>
 8008d3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d40:	2301      	movs	r3, #1
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d46:	b113      	cbz	r3, 8008d4e <_dtoa_r+0xc6>
 8008d48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d4a:	4b86      	ldr	r3, [pc, #536]	@ (8008f64 <_dtoa_r+0x2dc>)
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008f78 <_dtoa_r+0x2f0>
 8008d52:	f000 bd40 	b.w	80097d6 <_dtoa_r+0xb4e>
 8008d56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008d5a:	aa14      	add	r2, sp, #80	@ 0x50
 8008d5c:	a915      	add	r1, sp, #84	@ 0x54
 8008d5e:	4648      	mov	r0, r9
 8008d60:	f001 f984 	bl	800a06c <__d2b>
 8008d64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008d68:	9002      	str	r0, [sp, #8]
 8008d6a:	2e00      	cmp	r6, #0
 8008d6c:	d078      	beq.n	8008e60 <_dtoa_r+0x1d8>
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008d80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008d84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008d88:	4619      	mov	r1, r3
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	4b76      	ldr	r3, [pc, #472]	@ (8008f68 <_dtoa_r+0x2e0>)
 8008d8e:	f7f7 fa83 	bl	8000298 <__aeabi_dsub>
 8008d92:	a36b      	add	r3, pc, #428	@ (adr r3, 8008f40 <_dtoa_r+0x2b8>)
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f7f7 fc36 	bl	8000608 <__aeabi_dmul>
 8008d9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008f48 <_dtoa_r+0x2c0>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f7f7 fa7b 	bl	800029c <__adddf3>
 8008da6:	4604      	mov	r4, r0
 8008da8:	4630      	mov	r0, r6
 8008daa:	460d      	mov	r5, r1
 8008dac:	f7f7 fbc2 	bl	8000534 <__aeabi_i2d>
 8008db0:	a367      	add	r3, pc, #412	@ (adr r3, 8008f50 <_dtoa_r+0x2c8>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 fc27 	bl	8000608 <__aeabi_dmul>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	f7f7 fa6b 	bl	800029c <__adddf3>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	f7f7 fecd 	bl	8000b68 <__aeabi_d2iz>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 fe88 	bl	8000aec <__aeabi_dcmplt>
 8008ddc:	b140      	cbz	r0, 8008df0 <_dtoa_r+0x168>
 8008dde:	4638      	mov	r0, r7
 8008de0:	f7f7 fba8 	bl	8000534 <__aeabi_i2d>
 8008de4:	4622      	mov	r2, r4
 8008de6:	462b      	mov	r3, r5
 8008de8:	f7f7 fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dec:	b900      	cbnz	r0, 8008df0 <_dtoa_r+0x168>
 8008dee:	3f01      	subs	r7, #1
 8008df0:	2f16      	cmp	r7, #22
 8008df2:	d852      	bhi.n	8008e9a <_dtoa_r+0x212>
 8008df4:	4b5d      	ldr	r3, [pc, #372]	@ (8008f6c <_dtoa_r+0x2e4>)
 8008df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e02:	f7f7 fe73 	bl	8000aec <__aeabi_dcmplt>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	d049      	beq.n	8008e9e <_dtoa_r+0x216>
 8008e0a:	3f01      	subs	r7, #1
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e12:	1b9b      	subs	r3, r3, r6
 8008e14:	1e5a      	subs	r2, r3, #1
 8008e16:	bf45      	ittet	mi
 8008e18:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e1c:	9300      	strmi	r3, [sp, #0]
 8008e1e:	2300      	movpl	r3, #0
 8008e20:	2300      	movmi	r3, #0
 8008e22:	9206      	str	r2, [sp, #24]
 8008e24:	bf54      	ite	pl
 8008e26:	9300      	strpl	r3, [sp, #0]
 8008e28:	9306      	strmi	r3, [sp, #24]
 8008e2a:	2f00      	cmp	r7, #0
 8008e2c:	db39      	blt.n	8008ea2 <_dtoa_r+0x21a>
 8008e2e:	9b06      	ldr	r3, [sp, #24]
 8008e30:	970d      	str	r7, [sp, #52]	@ 0x34
 8008e32:	443b      	add	r3, r7
 8008e34:	9306      	str	r3, [sp, #24]
 8008e36:	2300      	movs	r3, #0
 8008e38:	9308      	str	r3, [sp, #32]
 8008e3a:	9b07      	ldr	r3, [sp, #28]
 8008e3c:	2b09      	cmp	r3, #9
 8008e3e:	d863      	bhi.n	8008f08 <_dtoa_r+0x280>
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	bfc4      	itt	gt
 8008e44:	3b04      	subgt	r3, #4
 8008e46:	9307      	strgt	r3, [sp, #28]
 8008e48:	9b07      	ldr	r3, [sp, #28]
 8008e4a:	f1a3 0302 	sub.w	r3, r3, #2
 8008e4e:	bfcc      	ite	gt
 8008e50:	2400      	movgt	r4, #0
 8008e52:	2401      	movle	r4, #1
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d863      	bhi.n	8008f20 <_dtoa_r+0x298>
 8008e58:	e8df f003 	tbb	[pc, r3]
 8008e5c:	2b375452 	.word	0x2b375452
 8008e60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008e64:	441e      	add	r6, r3
 8008e66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	bfc1      	itttt	gt
 8008e6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008e72:	409f      	lslgt	r7, r3
 8008e74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008e78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008e7c:	bfd6      	itet	le
 8008e7e:	f1c3 0320 	rsble	r3, r3, #32
 8008e82:	ea47 0003 	orrgt.w	r0, r7, r3
 8008e86:	fa04 f003 	lslle.w	r0, r4, r3
 8008e8a:	f7f7 fb43 	bl	8000514 <__aeabi_ui2d>
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008e94:	3e01      	subs	r6, #1
 8008e96:	9212      	str	r2, [sp, #72]	@ 0x48
 8008e98:	e776      	b.n	8008d88 <_dtoa_r+0x100>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e7b7      	b.n	8008e0e <_dtoa_r+0x186>
 8008e9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ea0:	e7b6      	b.n	8008e10 <_dtoa_r+0x188>
 8008ea2:	9b00      	ldr	r3, [sp, #0]
 8008ea4:	1bdb      	subs	r3, r3, r7
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	427b      	negs	r3, r7
 8008eaa:	9308      	str	r3, [sp, #32]
 8008eac:	2300      	movs	r3, #0
 8008eae:	930d      	str	r3, [sp, #52]	@ 0x34
 8008eb0:	e7c3      	b.n	8008e3a <_dtoa_r+0x1b2>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008eb8:	eb07 0b03 	add.w	fp, r7, r3
 8008ebc:	f10b 0301 	add.w	r3, fp, #1
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	9303      	str	r3, [sp, #12]
 8008ec4:	bfb8      	it	lt
 8008ec6:	2301      	movlt	r3, #1
 8008ec8:	e006      	b.n	8008ed8 <_dtoa_r+0x250>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	dd28      	ble.n	8008f26 <_dtoa_r+0x29e>
 8008ed4:	469b      	mov	fp, r3
 8008ed6:	9303      	str	r3, [sp, #12]
 8008ed8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008edc:	2100      	movs	r1, #0
 8008ede:	2204      	movs	r2, #4
 8008ee0:	f102 0514 	add.w	r5, r2, #20
 8008ee4:	429d      	cmp	r5, r3
 8008ee6:	d926      	bls.n	8008f36 <_dtoa_r+0x2ae>
 8008ee8:	6041      	str	r1, [r0, #4]
 8008eea:	4648      	mov	r0, r9
 8008eec:	f000 fd9c 	bl	8009a28 <_Balloc>
 8008ef0:	4682      	mov	sl, r0
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d142      	bne.n	8008f7c <_dtoa_r+0x2f4>
 8008ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8008f70 <_dtoa_r+0x2e8>)
 8008ef8:	4602      	mov	r2, r0
 8008efa:	f240 11af 	movw	r1, #431	@ 0x1af
 8008efe:	e6da      	b.n	8008cb6 <_dtoa_r+0x2e>
 8008f00:	2300      	movs	r3, #0
 8008f02:	e7e3      	b.n	8008ecc <_dtoa_r+0x244>
 8008f04:	2300      	movs	r3, #0
 8008f06:	e7d5      	b.n	8008eb4 <_dtoa_r+0x22c>
 8008f08:	2401      	movs	r4, #1
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	9307      	str	r3, [sp, #28]
 8008f0e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008f10:	f04f 3bff 	mov.w	fp, #4294967295
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f1a:	2312      	movs	r3, #18
 8008f1c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f1e:	e7db      	b.n	8008ed8 <_dtoa_r+0x250>
 8008f20:	2301      	movs	r3, #1
 8008f22:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f24:	e7f4      	b.n	8008f10 <_dtoa_r+0x288>
 8008f26:	f04f 0b01 	mov.w	fp, #1
 8008f2a:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f2e:	465b      	mov	r3, fp
 8008f30:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008f34:	e7d0      	b.n	8008ed8 <_dtoa_r+0x250>
 8008f36:	3101      	adds	r1, #1
 8008f38:	0052      	lsls	r2, r2, #1
 8008f3a:	e7d1      	b.n	8008ee0 <_dtoa_r+0x258>
 8008f3c:	f3af 8000 	nop.w
 8008f40:	636f4361 	.word	0x636f4361
 8008f44:	3fd287a7 	.word	0x3fd287a7
 8008f48:	8b60c8b3 	.word	0x8b60c8b3
 8008f4c:	3fc68a28 	.word	0x3fc68a28
 8008f50:	509f79fb 	.word	0x509f79fb
 8008f54:	3fd34413 	.word	0x3fd34413
 8008f58:	0800c8d1 	.word	0x0800c8d1
 8008f5c:	0800c8e8 	.word	0x0800c8e8
 8008f60:	7ff00000 	.word	0x7ff00000
 8008f64:	0800c8a1 	.word	0x0800c8a1
 8008f68:	3ff80000 	.word	0x3ff80000
 8008f6c:	0800ca38 	.word	0x0800ca38
 8008f70:	0800c940 	.word	0x0800c940
 8008f74:	0800c8cd 	.word	0x0800c8cd
 8008f78:	0800c8a0 	.word	0x0800c8a0
 8008f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008f80:	6018      	str	r0, [r3, #0]
 8008f82:	9b03      	ldr	r3, [sp, #12]
 8008f84:	2b0e      	cmp	r3, #14
 8008f86:	f200 80a1 	bhi.w	80090cc <_dtoa_r+0x444>
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	f000 809e 	beq.w	80090cc <_dtoa_r+0x444>
 8008f90:	2f00      	cmp	r7, #0
 8008f92:	dd33      	ble.n	8008ffc <_dtoa_r+0x374>
 8008f94:	4b9c      	ldr	r3, [pc, #624]	@ (8009208 <_dtoa_r+0x580>)
 8008f96:	f007 020f 	and.w	r2, r7, #15
 8008f9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f9e:	ed93 7b00 	vldr	d7, [r3]
 8008fa2:	05f8      	lsls	r0, r7, #23
 8008fa4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008fa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008fac:	d516      	bpl.n	8008fdc <_dtoa_r+0x354>
 8008fae:	4b97      	ldr	r3, [pc, #604]	@ (800920c <_dtoa_r+0x584>)
 8008fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fb8:	f7f7 fc50 	bl	800085c <__aeabi_ddiv>
 8008fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc0:	f004 040f 	and.w	r4, r4, #15
 8008fc4:	2603      	movs	r6, #3
 8008fc6:	4d91      	ldr	r5, [pc, #580]	@ (800920c <_dtoa_r+0x584>)
 8008fc8:	b954      	cbnz	r4, 8008fe0 <_dtoa_r+0x358>
 8008fca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fd2:	f7f7 fc43 	bl	800085c <__aeabi_ddiv>
 8008fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fda:	e028      	b.n	800902e <_dtoa_r+0x3a6>
 8008fdc:	2602      	movs	r6, #2
 8008fde:	e7f2      	b.n	8008fc6 <_dtoa_r+0x33e>
 8008fe0:	07e1      	lsls	r1, r4, #31
 8008fe2:	d508      	bpl.n	8008ff6 <_dtoa_r+0x36e>
 8008fe4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008fe8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008fec:	f7f7 fb0c 	bl	8000608 <__aeabi_dmul>
 8008ff0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ff4:	3601      	adds	r6, #1
 8008ff6:	1064      	asrs	r4, r4, #1
 8008ff8:	3508      	adds	r5, #8
 8008ffa:	e7e5      	b.n	8008fc8 <_dtoa_r+0x340>
 8008ffc:	f000 80af 	beq.w	800915e <_dtoa_r+0x4d6>
 8009000:	427c      	negs	r4, r7
 8009002:	4b81      	ldr	r3, [pc, #516]	@ (8009208 <_dtoa_r+0x580>)
 8009004:	4d81      	ldr	r5, [pc, #516]	@ (800920c <_dtoa_r+0x584>)
 8009006:	f004 020f 	and.w	r2, r4, #15
 800900a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009016:	f7f7 faf7 	bl	8000608 <__aeabi_dmul>
 800901a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800901e:	1124      	asrs	r4, r4, #4
 8009020:	2300      	movs	r3, #0
 8009022:	2602      	movs	r6, #2
 8009024:	2c00      	cmp	r4, #0
 8009026:	f040 808f 	bne.w	8009148 <_dtoa_r+0x4c0>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1d3      	bne.n	8008fd6 <_dtoa_r+0x34e>
 800902e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009030:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 8094 	beq.w	8009162 <_dtoa_r+0x4da>
 800903a:	4b75      	ldr	r3, [pc, #468]	@ (8009210 <_dtoa_r+0x588>)
 800903c:	2200      	movs	r2, #0
 800903e:	4620      	mov	r0, r4
 8009040:	4629      	mov	r1, r5
 8009042:	f7f7 fd53 	bl	8000aec <__aeabi_dcmplt>
 8009046:	2800      	cmp	r0, #0
 8009048:	f000 808b 	beq.w	8009162 <_dtoa_r+0x4da>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8087 	beq.w	8009162 <_dtoa_r+0x4da>
 8009054:	f1bb 0f00 	cmp.w	fp, #0
 8009058:	dd34      	ble.n	80090c4 <_dtoa_r+0x43c>
 800905a:	4620      	mov	r0, r4
 800905c:	4b6d      	ldr	r3, [pc, #436]	@ (8009214 <_dtoa_r+0x58c>)
 800905e:	2200      	movs	r2, #0
 8009060:	4629      	mov	r1, r5
 8009062:	f7f7 fad1 	bl	8000608 <__aeabi_dmul>
 8009066:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800906a:	f107 38ff 	add.w	r8, r7, #4294967295
 800906e:	3601      	adds	r6, #1
 8009070:	465c      	mov	r4, fp
 8009072:	4630      	mov	r0, r6
 8009074:	f7f7 fa5e 	bl	8000534 <__aeabi_i2d>
 8009078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800907c:	f7f7 fac4 	bl	8000608 <__aeabi_dmul>
 8009080:	4b65      	ldr	r3, [pc, #404]	@ (8009218 <_dtoa_r+0x590>)
 8009082:	2200      	movs	r2, #0
 8009084:	f7f7 f90a 	bl	800029c <__adddf3>
 8009088:	4605      	mov	r5, r0
 800908a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800908e:	2c00      	cmp	r4, #0
 8009090:	d16a      	bne.n	8009168 <_dtoa_r+0x4e0>
 8009092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009096:	4b61      	ldr	r3, [pc, #388]	@ (800921c <_dtoa_r+0x594>)
 8009098:	2200      	movs	r2, #0
 800909a:	f7f7 f8fd 	bl	8000298 <__aeabi_dsub>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090a6:	462a      	mov	r2, r5
 80090a8:	4633      	mov	r3, r6
 80090aa:	f7f7 fd3d 	bl	8000b28 <__aeabi_dcmpgt>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f040 8298 	bne.w	80095e4 <_dtoa_r+0x95c>
 80090b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090b8:	462a      	mov	r2, r5
 80090ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80090be:	f7f7 fd15 	bl	8000aec <__aeabi_dcmplt>
 80090c2:	bb38      	cbnz	r0, 8009114 <_dtoa_r+0x48c>
 80090c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80090c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80090cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f2c0 8157 	blt.w	8009382 <_dtoa_r+0x6fa>
 80090d4:	2f0e      	cmp	r7, #14
 80090d6:	f300 8154 	bgt.w	8009382 <_dtoa_r+0x6fa>
 80090da:	4b4b      	ldr	r3, [pc, #300]	@ (8009208 <_dtoa_r+0x580>)
 80090dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090e0:	ed93 7b00 	vldr	d7, [r3]
 80090e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	ed8d 7b00 	vstr	d7, [sp]
 80090ec:	f280 80e5 	bge.w	80092ba <_dtoa_r+0x632>
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f300 80e1 	bgt.w	80092ba <_dtoa_r+0x632>
 80090f8:	d10c      	bne.n	8009114 <_dtoa_r+0x48c>
 80090fa:	4b48      	ldr	r3, [pc, #288]	@ (800921c <_dtoa_r+0x594>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	ec51 0b17 	vmov	r0, r1, d7
 8009102:	f7f7 fa81 	bl	8000608 <__aeabi_dmul>
 8009106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800910a:	f7f7 fd03 	bl	8000b14 <__aeabi_dcmpge>
 800910e:	2800      	cmp	r0, #0
 8009110:	f000 8266 	beq.w	80095e0 <_dtoa_r+0x958>
 8009114:	2400      	movs	r4, #0
 8009116:	4625      	mov	r5, r4
 8009118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800911a:	4656      	mov	r6, sl
 800911c:	ea6f 0803 	mvn.w	r8, r3
 8009120:	2700      	movs	r7, #0
 8009122:	4621      	mov	r1, r4
 8009124:	4648      	mov	r0, r9
 8009126:	f000 fcbf 	bl	8009aa8 <_Bfree>
 800912a:	2d00      	cmp	r5, #0
 800912c:	f000 80bd 	beq.w	80092aa <_dtoa_r+0x622>
 8009130:	b12f      	cbz	r7, 800913e <_dtoa_r+0x4b6>
 8009132:	42af      	cmp	r7, r5
 8009134:	d003      	beq.n	800913e <_dtoa_r+0x4b6>
 8009136:	4639      	mov	r1, r7
 8009138:	4648      	mov	r0, r9
 800913a:	f000 fcb5 	bl	8009aa8 <_Bfree>
 800913e:	4629      	mov	r1, r5
 8009140:	4648      	mov	r0, r9
 8009142:	f000 fcb1 	bl	8009aa8 <_Bfree>
 8009146:	e0b0      	b.n	80092aa <_dtoa_r+0x622>
 8009148:	07e2      	lsls	r2, r4, #31
 800914a:	d505      	bpl.n	8009158 <_dtoa_r+0x4d0>
 800914c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	3601      	adds	r6, #1
 8009156:	2301      	movs	r3, #1
 8009158:	1064      	asrs	r4, r4, #1
 800915a:	3508      	adds	r5, #8
 800915c:	e762      	b.n	8009024 <_dtoa_r+0x39c>
 800915e:	2602      	movs	r6, #2
 8009160:	e765      	b.n	800902e <_dtoa_r+0x3a6>
 8009162:	9c03      	ldr	r4, [sp, #12]
 8009164:	46b8      	mov	r8, r7
 8009166:	e784      	b.n	8009072 <_dtoa_r+0x3ea>
 8009168:	4b27      	ldr	r3, [pc, #156]	@ (8009208 <_dtoa_r+0x580>)
 800916a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800916c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009174:	4454      	add	r4, sl
 8009176:	2900      	cmp	r1, #0
 8009178:	d054      	beq.n	8009224 <_dtoa_r+0x59c>
 800917a:	4929      	ldr	r1, [pc, #164]	@ (8009220 <_dtoa_r+0x598>)
 800917c:	2000      	movs	r0, #0
 800917e:	f7f7 fb6d 	bl	800085c <__aeabi_ddiv>
 8009182:	4633      	mov	r3, r6
 8009184:	462a      	mov	r2, r5
 8009186:	f7f7 f887 	bl	8000298 <__aeabi_dsub>
 800918a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800918e:	4656      	mov	r6, sl
 8009190:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009194:	f7f7 fce8 	bl	8000b68 <__aeabi_d2iz>
 8009198:	4605      	mov	r5, r0
 800919a:	f7f7 f9cb 	bl	8000534 <__aeabi_i2d>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a6:	f7f7 f877 	bl	8000298 <__aeabi_dsub>
 80091aa:	3530      	adds	r5, #48	@ 0x30
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091b4:	f806 5b01 	strb.w	r5, [r6], #1
 80091b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80091bc:	f7f7 fc96 	bl	8000aec <__aeabi_dcmplt>
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d172      	bne.n	80092aa <_dtoa_r+0x622>
 80091c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091c8:	4911      	ldr	r1, [pc, #68]	@ (8009210 <_dtoa_r+0x588>)
 80091ca:	2000      	movs	r0, #0
 80091cc:	f7f7 f864 	bl	8000298 <__aeabi_dsub>
 80091d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80091d4:	f7f7 fc8a 	bl	8000aec <__aeabi_dcmplt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	f040 80b4 	bne.w	8009346 <_dtoa_r+0x6be>
 80091de:	42a6      	cmp	r6, r4
 80091e0:	f43f af70 	beq.w	80090c4 <_dtoa_r+0x43c>
 80091e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80091e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009214 <_dtoa_r+0x58c>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	f7f7 fa0c 	bl	8000608 <__aeabi_dmul>
 80091f0:	4b08      	ldr	r3, [pc, #32]	@ (8009214 <_dtoa_r+0x58c>)
 80091f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80091f6:	2200      	movs	r2, #0
 80091f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091fc:	f7f7 fa04 	bl	8000608 <__aeabi_dmul>
 8009200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009204:	e7c4      	b.n	8009190 <_dtoa_r+0x508>
 8009206:	bf00      	nop
 8009208:	0800ca38 	.word	0x0800ca38
 800920c:	0800ca10 	.word	0x0800ca10
 8009210:	3ff00000 	.word	0x3ff00000
 8009214:	40240000 	.word	0x40240000
 8009218:	401c0000 	.word	0x401c0000
 800921c:	40140000 	.word	0x40140000
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	f7f7 f9ee 	bl	8000608 <__aeabi_dmul>
 800922c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009230:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009232:	4656      	mov	r6, sl
 8009234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009238:	f7f7 fc96 	bl	8000b68 <__aeabi_d2iz>
 800923c:	4605      	mov	r5, r0
 800923e:	f7f7 f979 	bl	8000534 <__aeabi_i2d>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800924a:	f7f7 f825 	bl	8000298 <__aeabi_dsub>
 800924e:	3530      	adds	r5, #48	@ 0x30
 8009250:	f806 5b01 	strb.w	r5, [r6], #1
 8009254:	4602      	mov	r2, r0
 8009256:	460b      	mov	r3, r1
 8009258:	42a6      	cmp	r6, r4
 800925a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	d124      	bne.n	80092ae <_dtoa_r+0x626>
 8009264:	4baf      	ldr	r3, [pc, #700]	@ (8009524 <_dtoa_r+0x89c>)
 8009266:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800926a:	f7f7 f817 	bl	800029c <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009276:	f7f7 fc57 	bl	8000b28 <__aeabi_dcmpgt>
 800927a:	2800      	cmp	r0, #0
 800927c:	d163      	bne.n	8009346 <_dtoa_r+0x6be>
 800927e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009282:	49a8      	ldr	r1, [pc, #672]	@ (8009524 <_dtoa_r+0x89c>)
 8009284:	2000      	movs	r0, #0
 8009286:	f7f7 f807 	bl	8000298 <__aeabi_dsub>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009292:	f7f7 fc2b 	bl	8000aec <__aeabi_dcmplt>
 8009296:	2800      	cmp	r0, #0
 8009298:	f43f af14 	beq.w	80090c4 <_dtoa_r+0x43c>
 800929c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800929e:	1e73      	subs	r3, r6, #1
 80092a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092a6:	2b30      	cmp	r3, #48	@ 0x30
 80092a8:	d0f8      	beq.n	800929c <_dtoa_r+0x614>
 80092aa:	4647      	mov	r7, r8
 80092ac:	e03b      	b.n	8009326 <_dtoa_r+0x69e>
 80092ae:	4b9e      	ldr	r3, [pc, #632]	@ (8009528 <_dtoa_r+0x8a0>)
 80092b0:	f7f7 f9aa 	bl	8000608 <__aeabi_dmul>
 80092b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092b8:	e7bc      	b.n	8009234 <_dtoa_r+0x5ac>
 80092ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80092be:	4656      	mov	r6, sl
 80092c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092c4:	4620      	mov	r0, r4
 80092c6:	4629      	mov	r1, r5
 80092c8:	f7f7 fac8 	bl	800085c <__aeabi_ddiv>
 80092cc:	f7f7 fc4c 	bl	8000b68 <__aeabi_d2iz>
 80092d0:	4680      	mov	r8, r0
 80092d2:	f7f7 f92f 	bl	8000534 <__aeabi_i2d>
 80092d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092da:	f7f7 f995 	bl	8000608 <__aeabi_dmul>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4620      	mov	r0, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80092ea:	f7f6 ffd5 	bl	8000298 <__aeabi_dsub>
 80092ee:	f806 4b01 	strb.w	r4, [r6], #1
 80092f2:	9d03      	ldr	r5, [sp, #12]
 80092f4:	eba6 040a 	sub.w	r4, r6, sl
 80092f8:	42a5      	cmp	r5, r4
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	d133      	bne.n	8009368 <_dtoa_r+0x6e0>
 8009300:	f7f6 ffcc 	bl	800029c <__adddf3>
 8009304:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009308:	4604      	mov	r4, r0
 800930a:	460d      	mov	r5, r1
 800930c:	f7f7 fc0c 	bl	8000b28 <__aeabi_dcmpgt>
 8009310:	b9c0      	cbnz	r0, 8009344 <_dtoa_r+0x6bc>
 8009312:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f7 fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800931e:	b110      	cbz	r0, 8009326 <_dtoa_r+0x69e>
 8009320:	f018 0f01 	tst.w	r8, #1
 8009324:	d10e      	bne.n	8009344 <_dtoa_r+0x6bc>
 8009326:	9902      	ldr	r1, [sp, #8]
 8009328:	4648      	mov	r0, r9
 800932a:	f000 fbbd 	bl	8009aa8 <_Bfree>
 800932e:	2300      	movs	r3, #0
 8009330:	7033      	strb	r3, [r6, #0]
 8009332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009334:	3701      	adds	r7, #1
 8009336:	601f      	str	r7, [r3, #0]
 8009338:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 824b 	beq.w	80097d6 <_dtoa_r+0xb4e>
 8009340:	601e      	str	r6, [r3, #0]
 8009342:	e248      	b.n	80097d6 <_dtoa_r+0xb4e>
 8009344:	46b8      	mov	r8, r7
 8009346:	4633      	mov	r3, r6
 8009348:	461e      	mov	r6, r3
 800934a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800934e:	2a39      	cmp	r2, #57	@ 0x39
 8009350:	d106      	bne.n	8009360 <_dtoa_r+0x6d8>
 8009352:	459a      	cmp	sl, r3
 8009354:	d1f8      	bne.n	8009348 <_dtoa_r+0x6c0>
 8009356:	2230      	movs	r2, #48	@ 0x30
 8009358:	f108 0801 	add.w	r8, r8, #1
 800935c:	f88a 2000 	strb.w	r2, [sl]
 8009360:	781a      	ldrb	r2, [r3, #0]
 8009362:	3201      	adds	r2, #1
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	e7a0      	b.n	80092aa <_dtoa_r+0x622>
 8009368:	4b6f      	ldr	r3, [pc, #444]	@ (8009528 <_dtoa_r+0x8a0>)
 800936a:	2200      	movs	r2, #0
 800936c:	f7f7 f94c 	bl	8000608 <__aeabi_dmul>
 8009370:	2200      	movs	r2, #0
 8009372:	2300      	movs	r3, #0
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	f7f7 fbae 	bl	8000ad8 <__aeabi_dcmpeq>
 800937c:	2800      	cmp	r0, #0
 800937e:	d09f      	beq.n	80092c0 <_dtoa_r+0x638>
 8009380:	e7d1      	b.n	8009326 <_dtoa_r+0x69e>
 8009382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009384:	2a00      	cmp	r2, #0
 8009386:	f000 80ea 	beq.w	800955e <_dtoa_r+0x8d6>
 800938a:	9a07      	ldr	r2, [sp, #28]
 800938c:	2a01      	cmp	r2, #1
 800938e:	f300 80cd 	bgt.w	800952c <_dtoa_r+0x8a4>
 8009392:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009394:	2a00      	cmp	r2, #0
 8009396:	f000 80c1 	beq.w	800951c <_dtoa_r+0x894>
 800939a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800939e:	9c08      	ldr	r4, [sp, #32]
 80093a0:	9e00      	ldr	r6, [sp, #0]
 80093a2:	9a00      	ldr	r2, [sp, #0]
 80093a4:	441a      	add	r2, r3
 80093a6:	9200      	str	r2, [sp, #0]
 80093a8:	9a06      	ldr	r2, [sp, #24]
 80093aa:	2101      	movs	r1, #1
 80093ac:	441a      	add	r2, r3
 80093ae:	4648      	mov	r0, r9
 80093b0:	9206      	str	r2, [sp, #24]
 80093b2:	f000 fc2d 	bl	8009c10 <__i2b>
 80093b6:	4605      	mov	r5, r0
 80093b8:	b166      	cbz	r6, 80093d4 <_dtoa_r+0x74c>
 80093ba:	9b06      	ldr	r3, [sp, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd09      	ble.n	80093d4 <_dtoa_r+0x74c>
 80093c0:	42b3      	cmp	r3, r6
 80093c2:	9a00      	ldr	r2, [sp, #0]
 80093c4:	bfa8      	it	ge
 80093c6:	4633      	movge	r3, r6
 80093c8:	1ad2      	subs	r2, r2, r3
 80093ca:	9200      	str	r2, [sp, #0]
 80093cc:	9a06      	ldr	r2, [sp, #24]
 80093ce:	1af6      	subs	r6, r6, r3
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	9306      	str	r3, [sp, #24]
 80093d4:	9b08      	ldr	r3, [sp, #32]
 80093d6:	b30b      	cbz	r3, 800941c <_dtoa_r+0x794>
 80093d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 80c6 	beq.w	800956c <_dtoa_r+0x8e4>
 80093e0:	2c00      	cmp	r4, #0
 80093e2:	f000 80c0 	beq.w	8009566 <_dtoa_r+0x8de>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4622      	mov	r2, r4
 80093ea:	4648      	mov	r0, r9
 80093ec:	f000 fcc8 	bl	8009d80 <__pow5mult>
 80093f0:	9a02      	ldr	r2, [sp, #8]
 80093f2:	4601      	mov	r1, r0
 80093f4:	4605      	mov	r5, r0
 80093f6:	4648      	mov	r0, r9
 80093f8:	f000 fc20 	bl	8009c3c <__multiply>
 80093fc:	9902      	ldr	r1, [sp, #8]
 80093fe:	4680      	mov	r8, r0
 8009400:	4648      	mov	r0, r9
 8009402:	f000 fb51 	bl	8009aa8 <_Bfree>
 8009406:	9b08      	ldr	r3, [sp, #32]
 8009408:	1b1b      	subs	r3, r3, r4
 800940a:	9308      	str	r3, [sp, #32]
 800940c:	f000 80b1 	beq.w	8009572 <_dtoa_r+0x8ea>
 8009410:	9a08      	ldr	r2, [sp, #32]
 8009412:	4641      	mov	r1, r8
 8009414:	4648      	mov	r0, r9
 8009416:	f000 fcb3 	bl	8009d80 <__pow5mult>
 800941a:	9002      	str	r0, [sp, #8]
 800941c:	2101      	movs	r1, #1
 800941e:	4648      	mov	r0, r9
 8009420:	f000 fbf6 	bl	8009c10 <__i2b>
 8009424:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009426:	4604      	mov	r4, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 81d8 	beq.w	80097de <_dtoa_r+0xb56>
 800942e:	461a      	mov	r2, r3
 8009430:	4601      	mov	r1, r0
 8009432:	4648      	mov	r0, r9
 8009434:	f000 fca4 	bl	8009d80 <__pow5mult>
 8009438:	9b07      	ldr	r3, [sp, #28]
 800943a:	2b01      	cmp	r3, #1
 800943c:	4604      	mov	r4, r0
 800943e:	f300 809f 	bgt.w	8009580 <_dtoa_r+0x8f8>
 8009442:	9b04      	ldr	r3, [sp, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f040 8097 	bne.w	8009578 <_dtoa_r+0x8f0>
 800944a:	9b05      	ldr	r3, [sp, #20]
 800944c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009450:	2b00      	cmp	r3, #0
 8009452:	f040 8093 	bne.w	800957c <_dtoa_r+0x8f4>
 8009456:	9b05      	ldr	r3, [sp, #20]
 8009458:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800945c:	0d1b      	lsrs	r3, r3, #20
 800945e:	051b      	lsls	r3, r3, #20
 8009460:	b133      	cbz	r3, 8009470 <_dtoa_r+0x7e8>
 8009462:	9b00      	ldr	r3, [sp, #0]
 8009464:	3301      	adds	r3, #1
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	9b06      	ldr	r3, [sp, #24]
 800946a:	3301      	adds	r3, #1
 800946c:	9306      	str	r3, [sp, #24]
 800946e:	2301      	movs	r3, #1
 8009470:	9308      	str	r3, [sp, #32]
 8009472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 81b8 	beq.w	80097ea <_dtoa_r+0xb62>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009480:	6918      	ldr	r0, [r3, #16]
 8009482:	f000 fb79 	bl	8009b78 <__hi0bits>
 8009486:	f1c0 0020 	rsb	r0, r0, #32
 800948a:	9b06      	ldr	r3, [sp, #24]
 800948c:	4418      	add	r0, r3
 800948e:	f010 001f 	ands.w	r0, r0, #31
 8009492:	f000 8082 	beq.w	800959a <_dtoa_r+0x912>
 8009496:	f1c0 0320 	rsb	r3, r0, #32
 800949a:	2b04      	cmp	r3, #4
 800949c:	dd73      	ble.n	8009586 <_dtoa_r+0x8fe>
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	f1c0 001c 	rsb	r0, r0, #28
 80094a4:	4403      	add	r3, r0
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	9b06      	ldr	r3, [sp, #24]
 80094aa:	4403      	add	r3, r0
 80094ac:	4406      	add	r6, r0
 80094ae:	9306      	str	r3, [sp, #24]
 80094b0:	9b00      	ldr	r3, [sp, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dd05      	ble.n	80094c2 <_dtoa_r+0x83a>
 80094b6:	9902      	ldr	r1, [sp, #8]
 80094b8:	461a      	mov	r2, r3
 80094ba:	4648      	mov	r0, r9
 80094bc:	f000 fcba 	bl	8009e34 <__lshift>
 80094c0:	9002      	str	r0, [sp, #8]
 80094c2:	9b06      	ldr	r3, [sp, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	dd05      	ble.n	80094d4 <_dtoa_r+0x84c>
 80094c8:	4621      	mov	r1, r4
 80094ca:	461a      	mov	r2, r3
 80094cc:	4648      	mov	r0, r9
 80094ce:	f000 fcb1 	bl	8009e34 <__lshift>
 80094d2:	4604      	mov	r4, r0
 80094d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d061      	beq.n	800959e <_dtoa_r+0x916>
 80094da:	9802      	ldr	r0, [sp, #8]
 80094dc:	4621      	mov	r1, r4
 80094de:	f000 fd15 	bl	8009f0c <__mcmp>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	da5b      	bge.n	800959e <_dtoa_r+0x916>
 80094e6:	2300      	movs	r3, #0
 80094e8:	9902      	ldr	r1, [sp, #8]
 80094ea:	220a      	movs	r2, #10
 80094ec:	4648      	mov	r0, r9
 80094ee:	f000 fafd 	bl	8009aec <__multadd>
 80094f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f4:	9002      	str	r0, [sp, #8]
 80094f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 8177 	beq.w	80097ee <_dtoa_r+0xb66>
 8009500:	4629      	mov	r1, r5
 8009502:	2300      	movs	r3, #0
 8009504:	220a      	movs	r2, #10
 8009506:	4648      	mov	r0, r9
 8009508:	f000 faf0 	bl	8009aec <__multadd>
 800950c:	f1bb 0f00 	cmp.w	fp, #0
 8009510:	4605      	mov	r5, r0
 8009512:	dc6f      	bgt.n	80095f4 <_dtoa_r+0x96c>
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	2b02      	cmp	r3, #2
 8009518:	dc49      	bgt.n	80095ae <_dtoa_r+0x926>
 800951a:	e06b      	b.n	80095f4 <_dtoa_r+0x96c>
 800951c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800951e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009522:	e73c      	b.n	800939e <_dtoa_r+0x716>
 8009524:	3fe00000 	.word	0x3fe00000
 8009528:	40240000 	.word	0x40240000
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	1e5c      	subs	r4, r3, #1
 8009530:	9b08      	ldr	r3, [sp, #32]
 8009532:	42a3      	cmp	r3, r4
 8009534:	db09      	blt.n	800954a <_dtoa_r+0x8c2>
 8009536:	1b1c      	subs	r4, r3, r4
 8009538:	9b03      	ldr	r3, [sp, #12]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f6bf af30 	bge.w	80093a0 <_dtoa_r+0x718>
 8009540:	9b00      	ldr	r3, [sp, #0]
 8009542:	9a03      	ldr	r2, [sp, #12]
 8009544:	1a9e      	subs	r6, r3, r2
 8009546:	2300      	movs	r3, #0
 8009548:	e72b      	b.n	80093a2 <_dtoa_r+0x71a>
 800954a:	9b08      	ldr	r3, [sp, #32]
 800954c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800954e:	9408      	str	r4, [sp, #32]
 8009550:	1ae3      	subs	r3, r4, r3
 8009552:	441a      	add	r2, r3
 8009554:	9e00      	ldr	r6, [sp, #0]
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	920d      	str	r2, [sp, #52]	@ 0x34
 800955a:	2400      	movs	r4, #0
 800955c:	e721      	b.n	80093a2 <_dtoa_r+0x71a>
 800955e:	9c08      	ldr	r4, [sp, #32]
 8009560:	9e00      	ldr	r6, [sp, #0]
 8009562:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009564:	e728      	b.n	80093b8 <_dtoa_r+0x730>
 8009566:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800956a:	e751      	b.n	8009410 <_dtoa_r+0x788>
 800956c:	9a08      	ldr	r2, [sp, #32]
 800956e:	9902      	ldr	r1, [sp, #8]
 8009570:	e750      	b.n	8009414 <_dtoa_r+0x78c>
 8009572:	f8cd 8008 	str.w	r8, [sp, #8]
 8009576:	e751      	b.n	800941c <_dtoa_r+0x794>
 8009578:	2300      	movs	r3, #0
 800957a:	e779      	b.n	8009470 <_dtoa_r+0x7e8>
 800957c:	9b04      	ldr	r3, [sp, #16]
 800957e:	e777      	b.n	8009470 <_dtoa_r+0x7e8>
 8009580:	2300      	movs	r3, #0
 8009582:	9308      	str	r3, [sp, #32]
 8009584:	e779      	b.n	800947a <_dtoa_r+0x7f2>
 8009586:	d093      	beq.n	80094b0 <_dtoa_r+0x828>
 8009588:	9a00      	ldr	r2, [sp, #0]
 800958a:	331c      	adds	r3, #28
 800958c:	441a      	add	r2, r3
 800958e:	9200      	str	r2, [sp, #0]
 8009590:	9a06      	ldr	r2, [sp, #24]
 8009592:	441a      	add	r2, r3
 8009594:	441e      	add	r6, r3
 8009596:	9206      	str	r2, [sp, #24]
 8009598:	e78a      	b.n	80094b0 <_dtoa_r+0x828>
 800959a:	4603      	mov	r3, r0
 800959c:	e7f4      	b.n	8009588 <_dtoa_r+0x900>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	46b8      	mov	r8, r7
 80095a4:	dc20      	bgt.n	80095e8 <_dtoa_r+0x960>
 80095a6:	469b      	mov	fp, r3
 80095a8:	9b07      	ldr	r3, [sp, #28]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	dd1e      	ble.n	80095ec <_dtoa_r+0x964>
 80095ae:	f1bb 0f00 	cmp.w	fp, #0
 80095b2:	f47f adb1 	bne.w	8009118 <_dtoa_r+0x490>
 80095b6:	4621      	mov	r1, r4
 80095b8:	465b      	mov	r3, fp
 80095ba:	2205      	movs	r2, #5
 80095bc:	4648      	mov	r0, r9
 80095be:	f000 fa95 	bl	8009aec <__multadd>
 80095c2:	4601      	mov	r1, r0
 80095c4:	4604      	mov	r4, r0
 80095c6:	9802      	ldr	r0, [sp, #8]
 80095c8:	f000 fca0 	bl	8009f0c <__mcmp>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f77f ada3 	ble.w	8009118 <_dtoa_r+0x490>
 80095d2:	4656      	mov	r6, sl
 80095d4:	2331      	movs	r3, #49	@ 0x31
 80095d6:	f806 3b01 	strb.w	r3, [r6], #1
 80095da:	f108 0801 	add.w	r8, r8, #1
 80095de:	e59f      	b.n	8009120 <_dtoa_r+0x498>
 80095e0:	9c03      	ldr	r4, [sp, #12]
 80095e2:	46b8      	mov	r8, r7
 80095e4:	4625      	mov	r5, r4
 80095e6:	e7f4      	b.n	80095d2 <_dtoa_r+0x94a>
 80095e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80095ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f000 8101 	beq.w	80097f6 <_dtoa_r+0xb6e>
 80095f4:	2e00      	cmp	r6, #0
 80095f6:	dd05      	ble.n	8009604 <_dtoa_r+0x97c>
 80095f8:	4629      	mov	r1, r5
 80095fa:	4632      	mov	r2, r6
 80095fc:	4648      	mov	r0, r9
 80095fe:	f000 fc19 	bl	8009e34 <__lshift>
 8009602:	4605      	mov	r5, r0
 8009604:	9b08      	ldr	r3, [sp, #32]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d05c      	beq.n	80096c4 <_dtoa_r+0xa3c>
 800960a:	6869      	ldr	r1, [r5, #4]
 800960c:	4648      	mov	r0, r9
 800960e:	f000 fa0b 	bl	8009a28 <_Balloc>
 8009612:	4606      	mov	r6, r0
 8009614:	b928      	cbnz	r0, 8009622 <_dtoa_r+0x99a>
 8009616:	4b82      	ldr	r3, [pc, #520]	@ (8009820 <_dtoa_r+0xb98>)
 8009618:	4602      	mov	r2, r0
 800961a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800961e:	f7ff bb4a 	b.w	8008cb6 <_dtoa_r+0x2e>
 8009622:	692a      	ldr	r2, [r5, #16]
 8009624:	3202      	adds	r2, #2
 8009626:	0092      	lsls	r2, r2, #2
 8009628:	f105 010c 	add.w	r1, r5, #12
 800962c:	300c      	adds	r0, #12
 800962e:	f000 ffa3 	bl	800a578 <memcpy>
 8009632:	2201      	movs	r2, #1
 8009634:	4631      	mov	r1, r6
 8009636:	4648      	mov	r0, r9
 8009638:	f000 fbfc 	bl	8009e34 <__lshift>
 800963c:	f10a 0301 	add.w	r3, sl, #1
 8009640:	9300      	str	r3, [sp, #0]
 8009642:	eb0a 030b 	add.w	r3, sl, fp
 8009646:	9308      	str	r3, [sp, #32]
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	462f      	mov	r7, r5
 8009650:	9306      	str	r3, [sp, #24]
 8009652:	4605      	mov	r5, r0
 8009654:	9b00      	ldr	r3, [sp, #0]
 8009656:	9802      	ldr	r0, [sp, #8]
 8009658:	4621      	mov	r1, r4
 800965a:	f103 3bff 	add.w	fp, r3, #4294967295
 800965e:	f7ff fa88 	bl	8008b72 <quorem>
 8009662:	4603      	mov	r3, r0
 8009664:	3330      	adds	r3, #48	@ 0x30
 8009666:	9003      	str	r0, [sp, #12]
 8009668:	4639      	mov	r1, r7
 800966a:	9802      	ldr	r0, [sp, #8]
 800966c:	9309      	str	r3, [sp, #36]	@ 0x24
 800966e:	f000 fc4d 	bl	8009f0c <__mcmp>
 8009672:	462a      	mov	r2, r5
 8009674:	9004      	str	r0, [sp, #16]
 8009676:	4621      	mov	r1, r4
 8009678:	4648      	mov	r0, r9
 800967a:	f000 fc63 	bl	8009f44 <__mdiff>
 800967e:	68c2      	ldr	r2, [r0, #12]
 8009680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009682:	4606      	mov	r6, r0
 8009684:	bb02      	cbnz	r2, 80096c8 <_dtoa_r+0xa40>
 8009686:	4601      	mov	r1, r0
 8009688:	9802      	ldr	r0, [sp, #8]
 800968a:	f000 fc3f 	bl	8009f0c <__mcmp>
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	4602      	mov	r2, r0
 8009692:	4631      	mov	r1, r6
 8009694:	4648      	mov	r0, r9
 8009696:	920c      	str	r2, [sp, #48]	@ 0x30
 8009698:	9309      	str	r3, [sp, #36]	@ 0x24
 800969a:	f000 fa05 	bl	8009aa8 <_Bfree>
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80096a2:	9e00      	ldr	r6, [sp, #0]
 80096a4:	ea42 0103 	orr.w	r1, r2, r3
 80096a8:	9b06      	ldr	r3, [sp, #24]
 80096aa:	4319      	orrs	r1, r3
 80096ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ae:	d10d      	bne.n	80096cc <_dtoa_r+0xa44>
 80096b0:	2b39      	cmp	r3, #57	@ 0x39
 80096b2:	d027      	beq.n	8009704 <_dtoa_r+0xa7c>
 80096b4:	9a04      	ldr	r2, [sp, #16]
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	dd01      	ble.n	80096be <_dtoa_r+0xa36>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	3331      	adds	r3, #49	@ 0x31
 80096be:	f88b 3000 	strb.w	r3, [fp]
 80096c2:	e52e      	b.n	8009122 <_dtoa_r+0x49a>
 80096c4:	4628      	mov	r0, r5
 80096c6:	e7b9      	b.n	800963c <_dtoa_r+0x9b4>
 80096c8:	2201      	movs	r2, #1
 80096ca:	e7e2      	b.n	8009692 <_dtoa_r+0xa0a>
 80096cc:	9904      	ldr	r1, [sp, #16]
 80096ce:	2900      	cmp	r1, #0
 80096d0:	db04      	blt.n	80096dc <_dtoa_r+0xa54>
 80096d2:	9807      	ldr	r0, [sp, #28]
 80096d4:	4301      	orrs	r1, r0
 80096d6:	9806      	ldr	r0, [sp, #24]
 80096d8:	4301      	orrs	r1, r0
 80096da:	d120      	bne.n	800971e <_dtoa_r+0xa96>
 80096dc:	2a00      	cmp	r2, #0
 80096de:	ddee      	ble.n	80096be <_dtoa_r+0xa36>
 80096e0:	9902      	ldr	r1, [sp, #8]
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	2201      	movs	r2, #1
 80096e6:	4648      	mov	r0, r9
 80096e8:	f000 fba4 	bl	8009e34 <__lshift>
 80096ec:	4621      	mov	r1, r4
 80096ee:	9002      	str	r0, [sp, #8]
 80096f0:	f000 fc0c 	bl	8009f0c <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	9b00      	ldr	r3, [sp, #0]
 80096f8:	dc02      	bgt.n	8009700 <_dtoa_r+0xa78>
 80096fa:	d1e0      	bne.n	80096be <_dtoa_r+0xa36>
 80096fc:	07da      	lsls	r2, r3, #31
 80096fe:	d5de      	bpl.n	80096be <_dtoa_r+0xa36>
 8009700:	2b39      	cmp	r3, #57	@ 0x39
 8009702:	d1da      	bne.n	80096ba <_dtoa_r+0xa32>
 8009704:	2339      	movs	r3, #57	@ 0x39
 8009706:	f88b 3000 	strb.w	r3, [fp]
 800970a:	4633      	mov	r3, r6
 800970c:	461e      	mov	r6, r3
 800970e:	3b01      	subs	r3, #1
 8009710:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009714:	2a39      	cmp	r2, #57	@ 0x39
 8009716:	d04e      	beq.n	80097b6 <_dtoa_r+0xb2e>
 8009718:	3201      	adds	r2, #1
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e501      	b.n	8009122 <_dtoa_r+0x49a>
 800971e:	2a00      	cmp	r2, #0
 8009720:	dd03      	ble.n	800972a <_dtoa_r+0xaa2>
 8009722:	2b39      	cmp	r3, #57	@ 0x39
 8009724:	d0ee      	beq.n	8009704 <_dtoa_r+0xa7c>
 8009726:	3301      	adds	r3, #1
 8009728:	e7c9      	b.n	80096be <_dtoa_r+0xa36>
 800972a:	9a00      	ldr	r2, [sp, #0]
 800972c:	9908      	ldr	r1, [sp, #32]
 800972e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009732:	428a      	cmp	r2, r1
 8009734:	d028      	beq.n	8009788 <_dtoa_r+0xb00>
 8009736:	9902      	ldr	r1, [sp, #8]
 8009738:	2300      	movs	r3, #0
 800973a:	220a      	movs	r2, #10
 800973c:	4648      	mov	r0, r9
 800973e:	f000 f9d5 	bl	8009aec <__multadd>
 8009742:	42af      	cmp	r7, r5
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	f04f 020a 	mov.w	r2, #10
 800974e:	4639      	mov	r1, r7
 8009750:	4648      	mov	r0, r9
 8009752:	d107      	bne.n	8009764 <_dtoa_r+0xadc>
 8009754:	f000 f9ca 	bl	8009aec <__multadd>
 8009758:	4607      	mov	r7, r0
 800975a:	4605      	mov	r5, r0
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	3301      	adds	r3, #1
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	e777      	b.n	8009654 <_dtoa_r+0x9cc>
 8009764:	f000 f9c2 	bl	8009aec <__multadd>
 8009768:	4629      	mov	r1, r5
 800976a:	4607      	mov	r7, r0
 800976c:	2300      	movs	r3, #0
 800976e:	220a      	movs	r2, #10
 8009770:	4648      	mov	r0, r9
 8009772:	f000 f9bb 	bl	8009aec <__multadd>
 8009776:	4605      	mov	r5, r0
 8009778:	e7f0      	b.n	800975c <_dtoa_r+0xad4>
 800977a:	f1bb 0f00 	cmp.w	fp, #0
 800977e:	bfcc      	ite	gt
 8009780:	465e      	movgt	r6, fp
 8009782:	2601      	movle	r6, #1
 8009784:	4456      	add	r6, sl
 8009786:	2700      	movs	r7, #0
 8009788:	9902      	ldr	r1, [sp, #8]
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	2201      	movs	r2, #1
 800978e:	4648      	mov	r0, r9
 8009790:	f000 fb50 	bl	8009e34 <__lshift>
 8009794:	4621      	mov	r1, r4
 8009796:	9002      	str	r0, [sp, #8]
 8009798:	f000 fbb8 	bl	8009f0c <__mcmp>
 800979c:	2800      	cmp	r0, #0
 800979e:	dcb4      	bgt.n	800970a <_dtoa_r+0xa82>
 80097a0:	d102      	bne.n	80097a8 <_dtoa_r+0xb20>
 80097a2:	9b00      	ldr	r3, [sp, #0]
 80097a4:	07db      	lsls	r3, r3, #31
 80097a6:	d4b0      	bmi.n	800970a <_dtoa_r+0xa82>
 80097a8:	4633      	mov	r3, r6
 80097aa:	461e      	mov	r6, r3
 80097ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b0:	2a30      	cmp	r2, #48	@ 0x30
 80097b2:	d0fa      	beq.n	80097aa <_dtoa_r+0xb22>
 80097b4:	e4b5      	b.n	8009122 <_dtoa_r+0x49a>
 80097b6:	459a      	cmp	sl, r3
 80097b8:	d1a8      	bne.n	800970c <_dtoa_r+0xa84>
 80097ba:	2331      	movs	r3, #49	@ 0x31
 80097bc:	f108 0801 	add.w	r8, r8, #1
 80097c0:	f88a 3000 	strb.w	r3, [sl]
 80097c4:	e4ad      	b.n	8009122 <_dtoa_r+0x49a>
 80097c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009824 <_dtoa_r+0xb9c>
 80097cc:	b11b      	cbz	r3, 80097d6 <_dtoa_r+0xb4e>
 80097ce:	f10a 0308 	add.w	r3, sl, #8
 80097d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	4650      	mov	r0, sl
 80097d8:	b017      	add	sp, #92	@ 0x5c
 80097da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097de:	9b07      	ldr	r3, [sp, #28]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	f77f ae2e 	ble.w	8009442 <_dtoa_r+0x7ba>
 80097e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	2001      	movs	r0, #1
 80097ec:	e64d      	b.n	800948a <_dtoa_r+0x802>
 80097ee:	f1bb 0f00 	cmp.w	fp, #0
 80097f2:	f77f aed9 	ble.w	80095a8 <_dtoa_r+0x920>
 80097f6:	4656      	mov	r6, sl
 80097f8:	9802      	ldr	r0, [sp, #8]
 80097fa:	4621      	mov	r1, r4
 80097fc:	f7ff f9b9 	bl	8008b72 <quorem>
 8009800:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009804:	f806 3b01 	strb.w	r3, [r6], #1
 8009808:	eba6 020a 	sub.w	r2, r6, sl
 800980c:	4593      	cmp	fp, r2
 800980e:	ddb4      	ble.n	800977a <_dtoa_r+0xaf2>
 8009810:	9902      	ldr	r1, [sp, #8]
 8009812:	2300      	movs	r3, #0
 8009814:	220a      	movs	r2, #10
 8009816:	4648      	mov	r0, r9
 8009818:	f000 f968 	bl	8009aec <__multadd>
 800981c:	9002      	str	r0, [sp, #8]
 800981e:	e7eb      	b.n	80097f8 <_dtoa_r+0xb70>
 8009820:	0800c940 	.word	0x0800c940
 8009824:	0800c8c4 	.word	0x0800c8c4

08009828 <_free_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4605      	mov	r5, r0
 800982c:	2900      	cmp	r1, #0
 800982e:	d041      	beq.n	80098b4 <_free_r+0x8c>
 8009830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009834:	1f0c      	subs	r4, r1, #4
 8009836:	2b00      	cmp	r3, #0
 8009838:	bfb8      	it	lt
 800983a:	18e4      	addlt	r4, r4, r3
 800983c:	f000 f8e8 	bl	8009a10 <__malloc_lock>
 8009840:	4a1d      	ldr	r2, [pc, #116]	@ (80098b8 <_free_r+0x90>)
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	b933      	cbnz	r3, 8009854 <_free_r+0x2c>
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	6014      	str	r4, [r2, #0]
 800984a:	4628      	mov	r0, r5
 800984c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009850:	f000 b8e4 	b.w	8009a1c <__malloc_unlock>
 8009854:	42a3      	cmp	r3, r4
 8009856:	d908      	bls.n	800986a <_free_r+0x42>
 8009858:	6820      	ldr	r0, [r4, #0]
 800985a:	1821      	adds	r1, r4, r0
 800985c:	428b      	cmp	r3, r1
 800985e:	bf01      	itttt	eq
 8009860:	6819      	ldreq	r1, [r3, #0]
 8009862:	685b      	ldreq	r3, [r3, #4]
 8009864:	1809      	addeq	r1, r1, r0
 8009866:	6021      	streq	r1, [r4, #0]
 8009868:	e7ed      	b.n	8009846 <_free_r+0x1e>
 800986a:	461a      	mov	r2, r3
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	b10b      	cbz	r3, 8009874 <_free_r+0x4c>
 8009870:	42a3      	cmp	r3, r4
 8009872:	d9fa      	bls.n	800986a <_free_r+0x42>
 8009874:	6811      	ldr	r1, [r2, #0]
 8009876:	1850      	adds	r0, r2, r1
 8009878:	42a0      	cmp	r0, r4
 800987a:	d10b      	bne.n	8009894 <_free_r+0x6c>
 800987c:	6820      	ldr	r0, [r4, #0]
 800987e:	4401      	add	r1, r0
 8009880:	1850      	adds	r0, r2, r1
 8009882:	4283      	cmp	r3, r0
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	d1e0      	bne.n	800984a <_free_r+0x22>
 8009888:	6818      	ldr	r0, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	6053      	str	r3, [r2, #4]
 800988e:	4408      	add	r0, r1
 8009890:	6010      	str	r0, [r2, #0]
 8009892:	e7da      	b.n	800984a <_free_r+0x22>
 8009894:	d902      	bls.n	800989c <_free_r+0x74>
 8009896:	230c      	movs	r3, #12
 8009898:	602b      	str	r3, [r5, #0]
 800989a:	e7d6      	b.n	800984a <_free_r+0x22>
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	1821      	adds	r1, r4, r0
 80098a0:	428b      	cmp	r3, r1
 80098a2:	bf04      	itt	eq
 80098a4:	6819      	ldreq	r1, [r3, #0]
 80098a6:	685b      	ldreq	r3, [r3, #4]
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	bf04      	itt	eq
 80098ac:	1809      	addeq	r1, r1, r0
 80098ae:	6021      	streq	r1, [r4, #0]
 80098b0:	6054      	str	r4, [r2, #4]
 80098b2:	e7ca      	b.n	800984a <_free_r+0x22>
 80098b4:	bd38      	pop	{r3, r4, r5, pc}
 80098b6:	bf00      	nop
 80098b8:	20001610 	.word	0x20001610

080098bc <malloc>:
 80098bc:	4b02      	ldr	r3, [pc, #8]	@ (80098c8 <malloc+0xc>)
 80098be:	4601      	mov	r1, r0
 80098c0:	6818      	ldr	r0, [r3, #0]
 80098c2:	f000 b825 	b.w	8009910 <_malloc_r>
 80098c6:	bf00      	nop
 80098c8:	20000024 	.word	0x20000024

080098cc <sbrk_aligned>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	4e0f      	ldr	r6, [pc, #60]	@ (800990c <sbrk_aligned+0x40>)
 80098d0:	460c      	mov	r4, r1
 80098d2:	6831      	ldr	r1, [r6, #0]
 80098d4:	4605      	mov	r5, r0
 80098d6:	b911      	cbnz	r1, 80098de <sbrk_aligned+0x12>
 80098d8:	f000 fe3e 	bl	800a558 <_sbrk_r>
 80098dc:	6030      	str	r0, [r6, #0]
 80098de:	4621      	mov	r1, r4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f000 fe39 	bl	800a558 <_sbrk_r>
 80098e6:	1c43      	adds	r3, r0, #1
 80098e8:	d103      	bne.n	80098f2 <sbrk_aligned+0x26>
 80098ea:	f04f 34ff 	mov.w	r4, #4294967295
 80098ee:	4620      	mov	r0, r4
 80098f0:	bd70      	pop	{r4, r5, r6, pc}
 80098f2:	1cc4      	adds	r4, r0, #3
 80098f4:	f024 0403 	bic.w	r4, r4, #3
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	d0f8      	beq.n	80098ee <sbrk_aligned+0x22>
 80098fc:	1a21      	subs	r1, r4, r0
 80098fe:	4628      	mov	r0, r5
 8009900:	f000 fe2a 	bl	800a558 <_sbrk_r>
 8009904:	3001      	adds	r0, #1
 8009906:	d1f2      	bne.n	80098ee <sbrk_aligned+0x22>
 8009908:	e7ef      	b.n	80098ea <sbrk_aligned+0x1e>
 800990a:	bf00      	nop
 800990c:	2000160c 	.word	0x2000160c

08009910 <_malloc_r>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	1ccd      	adds	r5, r1, #3
 8009916:	f025 0503 	bic.w	r5, r5, #3
 800991a:	3508      	adds	r5, #8
 800991c:	2d0c      	cmp	r5, #12
 800991e:	bf38      	it	cc
 8009920:	250c      	movcc	r5, #12
 8009922:	2d00      	cmp	r5, #0
 8009924:	4606      	mov	r6, r0
 8009926:	db01      	blt.n	800992c <_malloc_r+0x1c>
 8009928:	42a9      	cmp	r1, r5
 800992a:	d904      	bls.n	8009936 <_malloc_r+0x26>
 800992c:	230c      	movs	r3, #12
 800992e:	6033      	str	r3, [r6, #0]
 8009930:	2000      	movs	r0, #0
 8009932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a0c <_malloc_r+0xfc>
 800993a:	f000 f869 	bl	8009a10 <__malloc_lock>
 800993e:	f8d8 3000 	ldr.w	r3, [r8]
 8009942:	461c      	mov	r4, r3
 8009944:	bb44      	cbnz	r4, 8009998 <_malloc_r+0x88>
 8009946:	4629      	mov	r1, r5
 8009948:	4630      	mov	r0, r6
 800994a:	f7ff ffbf 	bl	80098cc <sbrk_aligned>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	4604      	mov	r4, r0
 8009952:	d158      	bne.n	8009a06 <_malloc_r+0xf6>
 8009954:	f8d8 4000 	ldr.w	r4, [r8]
 8009958:	4627      	mov	r7, r4
 800995a:	2f00      	cmp	r7, #0
 800995c:	d143      	bne.n	80099e6 <_malloc_r+0xd6>
 800995e:	2c00      	cmp	r4, #0
 8009960:	d04b      	beq.n	80099fa <_malloc_r+0xea>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	4639      	mov	r1, r7
 8009966:	4630      	mov	r0, r6
 8009968:	eb04 0903 	add.w	r9, r4, r3
 800996c:	f000 fdf4 	bl	800a558 <_sbrk_r>
 8009970:	4581      	cmp	r9, r0
 8009972:	d142      	bne.n	80099fa <_malloc_r+0xea>
 8009974:	6821      	ldr	r1, [r4, #0]
 8009976:	1a6d      	subs	r5, r5, r1
 8009978:	4629      	mov	r1, r5
 800997a:	4630      	mov	r0, r6
 800997c:	f7ff ffa6 	bl	80098cc <sbrk_aligned>
 8009980:	3001      	adds	r0, #1
 8009982:	d03a      	beq.n	80099fa <_malloc_r+0xea>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	442b      	add	r3, r5
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	f8d8 3000 	ldr.w	r3, [r8]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	bb62      	cbnz	r2, 80099ec <_malloc_r+0xdc>
 8009992:	f8c8 7000 	str.w	r7, [r8]
 8009996:	e00f      	b.n	80099b8 <_malloc_r+0xa8>
 8009998:	6822      	ldr	r2, [r4, #0]
 800999a:	1b52      	subs	r2, r2, r5
 800999c:	d420      	bmi.n	80099e0 <_malloc_r+0xd0>
 800999e:	2a0b      	cmp	r2, #11
 80099a0:	d917      	bls.n	80099d2 <_malloc_r+0xc2>
 80099a2:	1961      	adds	r1, r4, r5
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	6025      	str	r5, [r4, #0]
 80099a8:	bf18      	it	ne
 80099aa:	6059      	strne	r1, [r3, #4]
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	bf08      	it	eq
 80099b0:	f8c8 1000 	streq.w	r1, [r8]
 80099b4:	5162      	str	r2, [r4, r5]
 80099b6:	604b      	str	r3, [r1, #4]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 f82f 	bl	8009a1c <__malloc_unlock>
 80099be:	f104 000b 	add.w	r0, r4, #11
 80099c2:	1d23      	adds	r3, r4, #4
 80099c4:	f020 0007 	bic.w	r0, r0, #7
 80099c8:	1ac2      	subs	r2, r0, r3
 80099ca:	bf1c      	itt	ne
 80099cc:	1a1b      	subne	r3, r3, r0
 80099ce:	50a3      	strne	r3, [r4, r2]
 80099d0:	e7af      	b.n	8009932 <_malloc_r+0x22>
 80099d2:	6862      	ldr	r2, [r4, #4]
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	bf0c      	ite	eq
 80099d8:	f8c8 2000 	streq.w	r2, [r8]
 80099dc:	605a      	strne	r2, [r3, #4]
 80099de:	e7eb      	b.n	80099b8 <_malloc_r+0xa8>
 80099e0:	4623      	mov	r3, r4
 80099e2:	6864      	ldr	r4, [r4, #4]
 80099e4:	e7ae      	b.n	8009944 <_malloc_r+0x34>
 80099e6:	463c      	mov	r4, r7
 80099e8:	687f      	ldr	r7, [r7, #4]
 80099ea:	e7b6      	b.n	800995a <_malloc_r+0x4a>
 80099ec:	461a      	mov	r2, r3
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	42a3      	cmp	r3, r4
 80099f2:	d1fb      	bne.n	80099ec <_malloc_r+0xdc>
 80099f4:	2300      	movs	r3, #0
 80099f6:	6053      	str	r3, [r2, #4]
 80099f8:	e7de      	b.n	80099b8 <_malloc_r+0xa8>
 80099fa:	230c      	movs	r3, #12
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 f80c 	bl	8009a1c <__malloc_unlock>
 8009a04:	e794      	b.n	8009930 <_malloc_r+0x20>
 8009a06:	6005      	str	r5, [r0, #0]
 8009a08:	e7d6      	b.n	80099b8 <_malloc_r+0xa8>
 8009a0a:	bf00      	nop
 8009a0c:	20001610 	.word	0x20001610

08009a10 <__malloc_lock>:
 8009a10:	4801      	ldr	r0, [pc, #4]	@ (8009a18 <__malloc_lock+0x8>)
 8009a12:	f7ff b8ac 	b.w	8008b6e <__retarget_lock_acquire_recursive>
 8009a16:	bf00      	nop
 8009a18:	20001608 	.word	0x20001608

08009a1c <__malloc_unlock>:
 8009a1c:	4801      	ldr	r0, [pc, #4]	@ (8009a24 <__malloc_unlock+0x8>)
 8009a1e:	f7ff b8a7 	b.w	8008b70 <__retarget_lock_release_recursive>
 8009a22:	bf00      	nop
 8009a24:	20001608 	.word	0x20001608

08009a28 <_Balloc>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	69c6      	ldr	r6, [r0, #28]
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	b976      	cbnz	r6, 8009a50 <_Balloc+0x28>
 8009a32:	2010      	movs	r0, #16
 8009a34:	f7ff ff42 	bl	80098bc <malloc>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	61e0      	str	r0, [r4, #28]
 8009a3c:	b920      	cbnz	r0, 8009a48 <_Balloc+0x20>
 8009a3e:	4b18      	ldr	r3, [pc, #96]	@ (8009aa0 <_Balloc+0x78>)
 8009a40:	4818      	ldr	r0, [pc, #96]	@ (8009aa4 <_Balloc+0x7c>)
 8009a42:	216b      	movs	r1, #107	@ 0x6b
 8009a44:	f000 fda6 	bl	800a594 <__assert_func>
 8009a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a4c:	6006      	str	r6, [r0, #0]
 8009a4e:	60c6      	str	r6, [r0, #12]
 8009a50:	69e6      	ldr	r6, [r4, #28]
 8009a52:	68f3      	ldr	r3, [r6, #12]
 8009a54:	b183      	cbz	r3, 8009a78 <_Balloc+0x50>
 8009a56:	69e3      	ldr	r3, [r4, #28]
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a5e:	b9b8      	cbnz	r0, 8009a90 <_Balloc+0x68>
 8009a60:	2101      	movs	r1, #1
 8009a62:	fa01 f605 	lsl.w	r6, r1, r5
 8009a66:	1d72      	adds	r2, r6, #5
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fdb0 	bl	800a5d0 <_calloc_r>
 8009a70:	b160      	cbz	r0, 8009a8c <_Balloc+0x64>
 8009a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a76:	e00e      	b.n	8009a96 <_Balloc+0x6e>
 8009a78:	2221      	movs	r2, #33	@ 0x21
 8009a7a:	2104      	movs	r1, #4
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fda7 	bl	800a5d0 <_calloc_r>
 8009a82:	69e3      	ldr	r3, [r4, #28]
 8009a84:	60f0      	str	r0, [r6, #12]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e4      	bne.n	8009a56 <_Balloc+0x2e>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	6802      	ldr	r2, [r0, #0]
 8009a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a96:	2300      	movs	r3, #0
 8009a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a9c:	e7f7      	b.n	8009a8e <_Balloc+0x66>
 8009a9e:	bf00      	nop
 8009aa0:	0800c8d1 	.word	0x0800c8d1
 8009aa4:	0800c951 	.word	0x0800c951

08009aa8 <_Bfree>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	69c6      	ldr	r6, [r0, #28]
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b976      	cbnz	r6, 8009ad0 <_Bfree+0x28>
 8009ab2:	2010      	movs	r0, #16
 8009ab4:	f7ff ff02 	bl	80098bc <malloc>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	61e8      	str	r0, [r5, #28]
 8009abc:	b920      	cbnz	r0, 8009ac8 <_Bfree+0x20>
 8009abe:	4b09      	ldr	r3, [pc, #36]	@ (8009ae4 <_Bfree+0x3c>)
 8009ac0:	4809      	ldr	r0, [pc, #36]	@ (8009ae8 <_Bfree+0x40>)
 8009ac2:	218f      	movs	r1, #143	@ 0x8f
 8009ac4:	f000 fd66 	bl	800a594 <__assert_func>
 8009ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009acc:	6006      	str	r6, [r0, #0]
 8009ace:	60c6      	str	r6, [r0, #12]
 8009ad0:	b13c      	cbz	r4, 8009ae2 <_Bfree+0x3a>
 8009ad2:	69eb      	ldr	r3, [r5, #28]
 8009ad4:	6862      	ldr	r2, [r4, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009adc:	6021      	str	r1, [r4, #0]
 8009ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	0800c8d1 	.word	0x0800c8d1
 8009ae8:	0800c951 	.word	0x0800c951

08009aec <__multadd>:
 8009aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af0:	690d      	ldr	r5, [r1, #16]
 8009af2:	4607      	mov	r7, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	461e      	mov	r6, r3
 8009af8:	f101 0c14 	add.w	ip, r1, #20
 8009afc:	2000      	movs	r0, #0
 8009afe:	f8dc 3000 	ldr.w	r3, [ip]
 8009b02:	b299      	uxth	r1, r3
 8009b04:	fb02 6101 	mla	r1, r2, r1, r6
 8009b08:	0c1e      	lsrs	r6, r3, #16
 8009b0a:	0c0b      	lsrs	r3, r1, #16
 8009b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8009b10:	b289      	uxth	r1, r1
 8009b12:	3001      	adds	r0, #1
 8009b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b18:	4285      	cmp	r5, r0
 8009b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b22:	dcec      	bgt.n	8009afe <__multadd+0x12>
 8009b24:	b30e      	cbz	r6, 8009b6a <__multadd+0x7e>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	dc19      	bgt.n	8009b60 <__multadd+0x74>
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	4638      	mov	r0, r7
 8009b30:	3101      	adds	r1, #1
 8009b32:	f7ff ff79 	bl	8009a28 <_Balloc>
 8009b36:	4680      	mov	r8, r0
 8009b38:	b928      	cbnz	r0, 8009b46 <__multadd+0x5a>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b70 <__multadd+0x84>)
 8009b3e:	480d      	ldr	r0, [pc, #52]	@ (8009b74 <__multadd+0x88>)
 8009b40:	21ba      	movs	r1, #186	@ 0xba
 8009b42:	f000 fd27 	bl	800a594 <__assert_func>
 8009b46:	6922      	ldr	r2, [r4, #16]
 8009b48:	3202      	adds	r2, #2
 8009b4a:	f104 010c 	add.w	r1, r4, #12
 8009b4e:	0092      	lsls	r2, r2, #2
 8009b50:	300c      	adds	r0, #12
 8009b52:	f000 fd11 	bl	800a578 <memcpy>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f7ff ffa5 	bl	8009aa8 <_Bfree>
 8009b5e:	4644      	mov	r4, r8
 8009b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b64:	3501      	adds	r5, #1
 8009b66:	615e      	str	r6, [r3, #20]
 8009b68:	6125      	str	r5, [r4, #16]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	0800c940 	.word	0x0800c940
 8009b74:	0800c951 	.word	0x0800c951

08009b78 <__hi0bits>:
 8009b78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	bf36      	itet	cc
 8009b80:	0403      	lslcc	r3, r0, #16
 8009b82:	2000      	movcs	r0, #0
 8009b84:	2010      	movcc	r0, #16
 8009b86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b8a:	bf3c      	itt	cc
 8009b8c:	021b      	lslcc	r3, r3, #8
 8009b8e:	3008      	addcc	r0, #8
 8009b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b94:	bf3c      	itt	cc
 8009b96:	011b      	lslcc	r3, r3, #4
 8009b98:	3004      	addcc	r0, #4
 8009b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b9e:	bf3c      	itt	cc
 8009ba0:	009b      	lslcc	r3, r3, #2
 8009ba2:	3002      	addcc	r0, #2
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	db05      	blt.n	8009bb4 <__hi0bits+0x3c>
 8009ba8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bac:	f100 0001 	add.w	r0, r0, #1
 8009bb0:	bf08      	it	eq
 8009bb2:	2020      	moveq	r0, #32
 8009bb4:	4770      	bx	lr

08009bb6 <__lo0bits>:
 8009bb6:	6803      	ldr	r3, [r0, #0]
 8009bb8:	4602      	mov	r2, r0
 8009bba:	f013 0007 	ands.w	r0, r3, #7
 8009bbe:	d00b      	beq.n	8009bd8 <__lo0bits+0x22>
 8009bc0:	07d9      	lsls	r1, r3, #31
 8009bc2:	d421      	bmi.n	8009c08 <__lo0bits+0x52>
 8009bc4:	0798      	lsls	r0, r3, #30
 8009bc6:	bf49      	itett	mi
 8009bc8:	085b      	lsrmi	r3, r3, #1
 8009bca:	089b      	lsrpl	r3, r3, #2
 8009bcc:	2001      	movmi	r0, #1
 8009bce:	6013      	strmi	r3, [r2, #0]
 8009bd0:	bf5c      	itt	pl
 8009bd2:	6013      	strpl	r3, [r2, #0]
 8009bd4:	2002      	movpl	r0, #2
 8009bd6:	4770      	bx	lr
 8009bd8:	b299      	uxth	r1, r3
 8009bda:	b909      	cbnz	r1, 8009be0 <__lo0bits+0x2a>
 8009bdc:	0c1b      	lsrs	r3, r3, #16
 8009bde:	2010      	movs	r0, #16
 8009be0:	b2d9      	uxtb	r1, r3
 8009be2:	b909      	cbnz	r1, 8009be8 <__lo0bits+0x32>
 8009be4:	3008      	adds	r0, #8
 8009be6:	0a1b      	lsrs	r3, r3, #8
 8009be8:	0719      	lsls	r1, r3, #28
 8009bea:	bf04      	itt	eq
 8009bec:	091b      	lsreq	r3, r3, #4
 8009bee:	3004      	addeq	r0, #4
 8009bf0:	0799      	lsls	r1, r3, #30
 8009bf2:	bf04      	itt	eq
 8009bf4:	089b      	lsreq	r3, r3, #2
 8009bf6:	3002      	addeq	r0, #2
 8009bf8:	07d9      	lsls	r1, r3, #31
 8009bfa:	d403      	bmi.n	8009c04 <__lo0bits+0x4e>
 8009bfc:	085b      	lsrs	r3, r3, #1
 8009bfe:	f100 0001 	add.w	r0, r0, #1
 8009c02:	d003      	beq.n	8009c0c <__lo0bits+0x56>
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	4770      	bx	lr
 8009c08:	2000      	movs	r0, #0
 8009c0a:	4770      	bx	lr
 8009c0c:	2020      	movs	r0, #32
 8009c0e:	4770      	bx	lr

08009c10 <__i2b>:
 8009c10:	b510      	push	{r4, lr}
 8009c12:	460c      	mov	r4, r1
 8009c14:	2101      	movs	r1, #1
 8009c16:	f7ff ff07 	bl	8009a28 <_Balloc>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	b928      	cbnz	r0, 8009c2a <__i2b+0x1a>
 8009c1e:	4b05      	ldr	r3, [pc, #20]	@ (8009c34 <__i2b+0x24>)
 8009c20:	4805      	ldr	r0, [pc, #20]	@ (8009c38 <__i2b+0x28>)
 8009c22:	f240 1145 	movw	r1, #325	@ 0x145
 8009c26:	f000 fcb5 	bl	800a594 <__assert_func>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	6144      	str	r4, [r0, #20]
 8009c2e:	6103      	str	r3, [r0, #16]
 8009c30:	bd10      	pop	{r4, pc}
 8009c32:	bf00      	nop
 8009c34:	0800c940 	.word	0x0800c940
 8009c38:	0800c951 	.word	0x0800c951

08009c3c <__multiply>:
 8009c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c40:	4617      	mov	r7, r2
 8009c42:	690a      	ldr	r2, [r1, #16]
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	bfa8      	it	ge
 8009c4a:	463b      	movge	r3, r7
 8009c4c:	4689      	mov	r9, r1
 8009c4e:	bfa4      	itt	ge
 8009c50:	460f      	movge	r7, r1
 8009c52:	4699      	movge	r9, r3
 8009c54:	693d      	ldr	r5, [r7, #16]
 8009c56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	eb05 060a 	add.w	r6, r5, sl
 8009c62:	42b3      	cmp	r3, r6
 8009c64:	b085      	sub	sp, #20
 8009c66:	bfb8      	it	lt
 8009c68:	3101      	addlt	r1, #1
 8009c6a:	f7ff fedd 	bl	8009a28 <_Balloc>
 8009c6e:	b930      	cbnz	r0, 8009c7e <__multiply+0x42>
 8009c70:	4602      	mov	r2, r0
 8009c72:	4b41      	ldr	r3, [pc, #260]	@ (8009d78 <__multiply+0x13c>)
 8009c74:	4841      	ldr	r0, [pc, #260]	@ (8009d7c <__multiply+0x140>)
 8009c76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c7a:	f000 fc8b 	bl	800a594 <__assert_func>
 8009c7e:	f100 0414 	add.w	r4, r0, #20
 8009c82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009c86:	4623      	mov	r3, r4
 8009c88:	2200      	movs	r2, #0
 8009c8a:	4573      	cmp	r3, lr
 8009c8c:	d320      	bcc.n	8009cd0 <__multiply+0x94>
 8009c8e:	f107 0814 	add.w	r8, r7, #20
 8009c92:	f109 0114 	add.w	r1, r9, #20
 8009c96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009c9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009c9e:	9302      	str	r3, [sp, #8]
 8009ca0:	1beb      	subs	r3, r5, r7
 8009ca2:	3b15      	subs	r3, #21
 8009ca4:	f023 0303 	bic.w	r3, r3, #3
 8009ca8:	3304      	adds	r3, #4
 8009caa:	3715      	adds	r7, #21
 8009cac:	42bd      	cmp	r5, r7
 8009cae:	bf38      	it	cc
 8009cb0:	2304      	movcc	r3, #4
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	9b02      	ldr	r3, [sp, #8]
 8009cb6:	9103      	str	r1, [sp, #12]
 8009cb8:	428b      	cmp	r3, r1
 8009cba:	d80c      	bhi.n	8009cd6 <__multiply+0x9a>
 8009cbc:	2e00      	cmp	r6, #0
 8009cbe:	dd03      	ble.n	8009cc8 <__multiply+0x8c>
 8009cc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d055      	beq.n	8009d74 <__multiply+0x138>
 8009cc8:	6106      	str	r6, [r0, #16]
 8009cca:	b005      	add	sp, #20
 8009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	f843 2b04 	str.w	r2, [r3], #4
 8009cd4:	e7d9      	b.n	8009c8a <__multiply+0x4e>
 8009cd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cda:	f1ba 0f00 	cmp.w	sl, #0
 8009cde:	d01f      	beq.n	8009d20 <__multiply+0xe4>
 8009ce0:	46c4      	mov	ip, r8
 8009ce2:	46a1      	mov	r9, r4
 8009ce4:	2700      	movs	r7, #0
 8009ce6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009cea:	f8d9 3000 	ldr.w	r3, [r9]
 8009cee:	fa1f fb82 	uxth.w	fp, r2
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009cf8:	443b      	add	r3, r7
 8009cfa:	f8d9 7000 	ldr.w	r7, [r9]
 8009cfe:	0c12      	lsrs	r2, r2, #16
 8009d00:	0c3f      	lsrs	r7, r7, #16
 8009d02:	fb0a 7202 	mla	r2, sl, r2, r7
 8009d06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d10:	4565      	cmp	r5, ip
 8009d12:	f849 3b04 	str.w	r3, [r9], #4
 8009d16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009d1a:	d8e4      	bhi.n	8009ce6 <__multiply+0xaa>
 8009d1c:	9b01      	ldr	r3, [sp, #4]
 8009d1e:	50e7      	str	r7, [r4, r3]
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d26:	3104      	adds	r1, #4
 8009d28:	f1b9 0f00 	cmp.w	r9, #0
 8009d2c:	d020      	beq.n	8009d70 <__multiply+0x134>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	4647      	mov	r7, r8
 8009d32:	46a4      	mov	ip, r4
 8009d34:	f04f 0a00 	mov.w	sl, #0
 8009d38:	f8b7 b000 	ldrh.w	fp, [r7]
 8009d3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009d40:	fb09 220b 	mla	r2, r9, fp, r2
 8009d44:	4452      	add	r2, sl
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d4c:	f84c 3b04 	str.w	r3, [ip], #4
 8009d50:	f857 3b04 	ldr.w	r3, [r7], #4
 8009d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d58:	f8bc 3000 	ldrh.w	r3, [ip]
 8009d5c:	fb09 330a 	mla	r3, r9, sl, r3
 8009d60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009d64:	42bd      	cmp	r5, r7
 8009d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d6a:	d8e5      	bhi.n	8009d38 <__multiply+0xfc>
 8009d6c:	9a01      	ldr	r2, [sp, #4]
 8009d6e:	50a3      	str	r3, [r4, r2]
 8009d70:	3404      	adds	r4, #4
 8009d72:	e79f      	b.n	8009cb4 <__multiply+0x78>
 8009d74:	3e01      	subs	r6, #1
 8009d76:	e7a1      	b.n	8009cbc <__multiply+0x80>
 8009d78:	0800c940 	.word	0x0800c940
 8009d7c:	0800c951 	.word	0x0800c951

08009d80 <__pow5mult>:
 8009d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d84:	4615      	mov	r5, r2
 8009d86:	f012 0203 	ands.w	r2, r2, #3
 8009d8a:	4607      	mov	r7, r0
 8009d8c:	460e      	mov	r6, r1
 8009d8e:	d007      	beq.n	8009da0 <__pow5mult+0x20>
 8009d90:	4c25      	ldr	r4, [pc, #148]	@ (8009e28 <__pow5mult+0xa8>)
 8009d92:	3a01      	subs	r2, #1
 8009d94:	2300      	movs	r3, #0
 8009d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d9a:	f7ff fea7 	bl	8009aec <__multadd>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	10ad      	asrs	r5, r5, #2
 8009da2:	d03d      	beq.n	8009e20 <__pow5mult+0xa0>
 8009da4:	69fc      	ldr	r4, [r7, #28]
 8009da6:	b97c      	cbnz	r4, 8009dc8 <__pow5mult+0x48>
 8009da8:	2010      	movs	r0, #16
 8009daa:	f7ff fd87 	bl	80098bc <malloc>
 8009dae:	4602      	mov	r2, r0
 8009db0:	61f8      	str	r0, [r7, #28]
 8009db2:	b928      	cbnz	r0, 8009dc0 <__pow5mult+0x40>
 8009db4:	4b1d      	ldr	r3, [pc, #116]	@ (8009e2c <__pow5mult+0xac>)
 8009db6:	481e      	ldr	r0, [pc, #120]	@ (8009e30 <__pow5mult+0xb0>)
 8009db8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009dbc:	f000 fbea 	bl	800a594 <__assert_func>
 8009dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dc4:	6004      	str	r4, [r0, #0]
 8009dc6:	60c4      	str	r4, [r0, #12]
 8009dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dd0:	b94c      	cbnz	r4, 8009de6 <__pow5mult+0x66>
 8009dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	f7ff ff1a 	bl	8009c10 <__i2b>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c8 0008 	str.w	r0, [r8, #8]
 8009de2:	4604      	mov	r4, r0
 8009de4:	6003      	str	r3, [r0, #0]
 8009de6:	f04f 0900 	mov.w	r9, #0
 8009dea:	07eb      	lsls	r3, r5, #31
 8009dec:	d50a      	bpl.n	8009e04 <__pow5mult+0x84>
 8009dee:	4631      	mov	r1, r6
 8009df0:	4622      	mov	r2, r4
 8009df2:	4638      	mov	r0, r7
 8009df4:	f7ff ff22 	bl	8009c3c <__multiply>
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4638      	mov	r0, r7
 8009dfe:	f7ff fe53 	bl	8009aa8 <_Bfree>
 8009e02:	4646      	mov	r6, r8
 8009e04:	106d      	asrs	r5, r5, #1
 8009e06:	d00b      	beq.n	8009e20 <__pow5mult+0xa0>
 8009e08:	6820      	ldr	r0, [r4, #0]
 8009e0a:	b938      	cbnz	r0, 8009e1c <__pow5mult+0x9c>
 8009e0c:	4622      	mov	r2, r4
 8009e0e:	4621      	mov	r1, r4
 8009e10:	4638      	mov	r0, r7
 8009e12:	f7ff ff13 	bl	8009c3c <__multiply>
 8009e16:	6020      	str	r0, [r4, #0]
 8009e18:	f8c0 9000 	str.w	r9, [r0]
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	e7e4      	b.n	8009dea <__pow5mult+0x6a>
 8009e20:	4630      	mov	r0, r6
 8009e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e26:	bf00      	nop
 8009e28:	0800ca04 	.word	0x0800ca04
 8009e2c:	0800c8d1 	.word	0x0800c8d1
 8009e30:	0800c951 	.word	0x0800c951

08009e34 <__lshift>:
 8009e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	460c      	mov	r4, r1
 8009e3a:	6849      	ldr	r1, [r1, #4]
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	4607      	mov	r7, r0
 8009e46:	4691      	mov	r9, r2
 8009e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e4c:	f108 0601 	add.w	r6, r8, #1
 8009e50:	42b3      	cmp	r3, r6
 8009e52:	db0b      	blt.n	8009e6c <__lshift+0x38>
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff fde7 	bl	8009a28 <_Balloc>
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	b948      	cbnz	r0, 8009e72 <__lshift+0x3e>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	4b28      	ldr	r3, [pc, #160]	@ (8009f04 <__lshift+0xd0>)
 8009e62:	4829      	ldr	r0, [pc, #164]	@ (8009f08 <__lshift+0xd4>)
 8009e64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e68:	f000 fb94 	bl	800a594 <__assert_func>
 8009e6c:	3101      	adds	r1, #1
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	e7ee      	b.n	8009e50 <__lshift+0x1c>
 8009e72:	2300      	movs	r3, #0
 8009e74:	f100 0114 	add.w	r1, r0, #20
 8009e78:	f100 0210 	add.w	r2, r0, #16
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	4553      	cmp	r3, sl
 8009e80:	db33      	blt.n	8009eea <__lshift+0xb6>
 8009e82:	6920      	ldr	r0, [r4, #16]
 8009e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e88:	f104 0314 	add.w	r3, r4, #20
 8009e8c:	f019 091f 	ands.w	r9, r9, #31
 8009e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e98:	d02b      	beq.n	8009ef2 <__lshift+0xbe>
 8009e9a:	f1c9 0e20 	rsb	lr, r9, #32
 8009e9e:	468a      	mov	sl, r1
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8009ea8:	4310      	orrs	r0, r2
 8009eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8009eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb2:	459c      	cmp	ip, r3
 8009eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009eb8:	d8f3      	bhi.n	8009ea2 <__lshift+0x6e>
 8009eba:	ebac 0304 	sub.w	r3, ip, r4
 8009ebe:	3b15      	subs	r3, #21
 8009ec0:	f023 0303 	bic.w	r3, r3, #3
 8009ec4:	3304      	adds	r3, #4
 8009ec6:	f104 0015 	add.w	r0, r4, #21
 8009eca:	4560      	cmp	r0, ip
 8009ecc:	bf88      	it	hi
 8009ece:	2304      	movhi	r3, #4
 8009ed0:	50ca      	str	r2, [r1, r3]
 8009ed2:	b10a      	cbz	r2, 8009ed8 <__lshift+0xa4>
 8009ed4:	f108 0602 	add.w	r6, r8, #2
 8009ed8:	3e01      	subs	r6, #1
 8009eda:	4638      	mov	r0, r7
 8009edc:	612e      	str	r6, [r5, #16]
 8009ede:	4621      	mov	r1, r4
 8009ee0:	f7ff fde2 	bl	8009aa8 <_Bfree>
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eee:	3301      	adds	r3, #1
 8009ef0:	e7c5      	b.n	8009e7e <__lshift+0x4a>
 8009ef2:	3904      	subs	r1, #4
 8009ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009efc:	459c      	cmp	ip, r3
 8009efe:	d8f9      	bhi.n	8009ef4 <__lshift+0xc0>
 8009f00:	e7ea      	b.n	8009ed8 <__lshift+0xa4>
 8009f02:	bf00      	nop
 8009f04:	0800c940 	.word	0x0800c940
 8009f08:	0800c951 	.word	0x0800c951

08009f0c <__mcmp>:
 8009f0c:	690a      	ldr	r2, [r1, #16]
 8009f0e:	4603      	mov	r3, r0
 8009f10:	6900      	ldr	r0, [r0, #16]
 8009f12:	1a80      	subs	r0, r0, r2
 8009f14:	b530      	push	{r4, r5, lr}
 8009f16:	d10e      	bne.n	8009f36 <__mcmp+0x2a>
 8009f18:	3314      	adds	r3, #20
 8009f1a:	3114      	adds	r1, #20
 8009f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f2c:	4295      	cmp	r5, r2
 8009f2e:	d003      	beq.n	8009f38 <__mcmp+0x2c>
 8009f30:	d205      	bcs.n	8009f3e <__mcmp+0x32>
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295
 8009f36:	bd30      	pop	{r4, r5, pc}
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	d3f3      	bcc.n	8009f24 <__mcmp+0x18>
 8009f3c:	e7fb      	b.n	8009f36 <__mcmp+0x2a>
 8009f3e:	2001      	movs	r0, #1
 8009f40:	e7f9      	b.n	8009f36 <__mcmp+0x2a>
	...

08009f44 <__mdiff>:
 8009f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	4689      	mov	r9, r1
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	4611      	mov	r1, r2
 8009f4e:	4648      	mov	r0, r9
 8009f50:	4614      	mov	r4, r2
 8009f52:	f7ff ffdb 	bl	8009f0c <__mcmp>
 8009f56:	1e05      	subs	r5, r0, #0
 8009f58:	d112      	bne.n	8009f80 <__mdiff+0x3c>
 8009f5a:	4629      	mov	r1, r5
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff fd63 	bl	8009a28 <_Balloc>
 8009f62:	4602      	mov	r2, r0
 8009f64:	b928      	cbnz	r0, 8009f72 <__mdiff+0x2e>
 8009f66:	4b3f      	ldr	r3, [pc, #252]	@ (800a064 <__mdiff+0x120>)
 8009f68:	f240 2137 	movw	r1, #567	@ 0x237
 8009f6c:	483e      	ldr	r0, [pc, #248]	@ (800a068 <__mdiff+0x124>)
 8009f6e:	f000 fb11 	bl	800a594 <__assert_func>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f78:	4610      	mov	r0, r2
 8009f7a:	b003      	add	sp, #12
 8009f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f80:	bfbc      	itt	lt
 8009f82:	464b      	movlt	r3, r9
 8009f84:	46a1      	movlt	r9, r4
 8009f86:	4630      	mov	r0, r6
 8009f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009f8c:	bfba      	itte	lt
 8009f8e:	461c      	movlt	r4, r3
 8009f90:	2501      	movlt	r5, #1
 8009f92:	2500      	movge	r5, #0
 8009f94:	f7ff fd48 	bl	8009a28 <_Balloc>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	b918      	cbnz	r0, 8009fa4 <__mdiff+0x60>
 8009f9c:	4b31      	ldr	r3, [pc, #196]	@ (800a064 <__mdiff+0x120>)
 8009f9e:	f240 2145 	movw	r1, #581	@ 0x245
 8009fa2:	e7e3      	b.n	8009f6c <__mdiff+0x28>
 8009fa4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fa8:	6926      	ldr	r6, [r4, #16]
 8009faa:	60c5      	str	r5, [r0, #12]
 8009fac:	f109 0310 	add.w	r3, r9, #16
 8009fb0:	f109 0514 	add.w	r5, r9, #20
 8009fb4:	f104 0e14 	add.w	lr, r4, #20
 8009fb8:	f100 0b14 	add.w	fp, r0, #20
 8009fbc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fc0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	46d9      	mov	r9, fp
 8009fc8:	f04f 0c00 	mov.w	ip, #0
 8009fcc:	9b01      	ldr	r3, [sp, #4]
 8009fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	fa1f f38a 	uxth.w	r3, sl
 8009fdc:	4619      	mov	r1, r3
 8009fde:	b283      	uxth	r3, r0
 8009fe0:	1acb      	subs	r3, r1, r3
 8009fe2:	0c00      	lsrs	r0, r0, #16
 8009fe4:	4463      	add	r3, ip
 8009fe6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009fea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009ff4:	4576      	cmp	r6, lr
 8009ff6:	f849 3b04 	str.w	r3, [r9], #4
 8009ffa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ffe:	d8e5      	bhi.n	8009fcc <__mdiff+0x88>
 800a000:	1b33      	subs	r3, r6, r4
 800a002:	3b15      	subs	r3, #21
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	3415      	adds	r4, #21
 800a00a:	3304      	adds	r3, #4
 800a00c:	42a6      	cmp	r6, r4
 800a00e:	bf38      	it	cc
 800a010:	2304      	movcc	r3, #4
 800a012:	441d      	add	r5, r3
 800a014:	445b      	add	r3, fp
 800a016:	461e      	mov	r6, r3
 800a018:	462c      	mov	r4, r5
 800a01a:	4544      	cmp	r4, r8
 800a01c:	d30e      	bcc.n	800a03c <__mdiff+0xf8>
 800a01e:	f108 0103 	add.w	r1, r8, #3
 800a022:	1b49      	subs	r1, r1, r5
 800a024:	f021 0103 	bic.w	r1, r1, #3
 800a028:	3d03      	subs	r5, #3
 800a02a:	45a8      	cmp	r8, r5
 800a02c:	bf38      	it	cc
 800a02e:	2100      	movcc	r1, #0
 800a030:	440b      	add	r3, r1
 800a032:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a036:	b191      	cbz	r1, 800a05e <__mdiff+0x11a>
 800a038:	6117      	str	r7, [r2, #16]
 800a03a:	e79d      	b.n	8009f78 <__mdiff+0x34>
 800a03c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a040:	46e6      	mov	lr, ip
 800a042:	0c08      	lsrs	r0, r1, #16
 800a044:	fa1c fc81 	uxtah	ip, ip, r1
 800a048:	4471      	add	r1, lr
 800a04a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a04e:	b289      	uxth	r1, r1
 800a050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a054:	f846 1b04 	str.w	r1, [r6], #4
 800a058:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a05c:	e7dd      	b.n	800a01a <__mdiff+0xd6>
 800a05e:	3f01      	subs	r7, #1
 800a060:	e7e7      	b.n	800a032 <__mdiff+0xee>
 800a062:	bf00      	nop
 800a064:	0800c940 	.word	0x0800c940
 800a068:	0800c951 	.word	0x0800c951

0800a06c <__d2b>:
 800a06c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a070:	460f      	mov	r7, r1
 800a072:	2101      	movs	r1, #1
 800a074:	ec59 8b10 	vmov	r8, r9, d0
 800a078:	4616      	mov	r6, r2
 800a07a:	f7ff fcd5 	bl	8009a28 <_Balloc>
 800a07e:	4604      	mov	r4, r0
 800a080:	b930      	cbnz	r0, 800a090 <__d2b+0x24>
 800a082:	4602      	mov	r2, r0
 800a084:	4b23      	ldr	r3, [pc, #140]	@ (800a114 <__d2b+0xa8>)
 800a086:	4824      	ldr	r0, [pc, #144]	@ (800a118 <__d2b+0xac>)
 800a088:	f240 310f 	movw	r1, #783	@ 0x30f
 800a08c:	f000 fa82 	bl	800a594 <__assert_func>
 800a090:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a098:	b10d      	cbz	r5, 800a09e <__d2b+0x32>
 800a09a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	f1b8 0300 	subs.w	r3, r8, #0
 800a0a4:	d023      	beq.n	800a0ee <__d2b+0x82>
 800a0a6:	4668      	mov	r0, sp
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	f7ff fd84 	bl	8009bb6 <__lo0bits>
 800a0ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0b2:	b1d0      	cbz	r0, 800a0ea <__d2b+0x7e>
 800a0b4:	f1c0 0320 	rsb	r3, r0, #32
 800a0b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0bc:	430b      	orrs	r3, r1
 800a0be:	40c2      	lsrs	r2, r0
 800a0c0:	6163      	str	r3, [r4, #20]
 800a0c2:	9201      	str	r2, [sp, #4]
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	61a3      	str	r3, [r4, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2201      	moveq	r2, #1
 800a0ce:	2202      	movne	r2, #2
 800a0d0:	6122      	str	r2, [r4, #16]
 800a0d2:	b1a5      	cbz	r5, 800a0fe <__d2b+0x92>
 800a0d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0d8:	4405      	add	r5, r0
 800a0da:	603d      	str	r5, [r7, #0]
 800a0dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0e0:	6030      	str	r0, [r6, #0]
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	b003      	add	sp, #12
 800a0e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	6161      	str	r1, [r4, #20]
 800a0ec:	e7ea      	b.n	800a0c4 <__d2b+0x58>
 800a0ee:	a801      	add	r0, sp, #4
 800a0f0:	f7ff fd61 	bl	8009bb6 <__lo0bits>
 800a0f4:	9b01      	ldr	r3, [sp, #4]
 800a0f6:	6163      	str	r3, [r4, #20]
 800a0f8:	3020      	adds	r0, #32
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	e7e8      	b.n	800a0d0 <__d2b+0x64>
 800a0fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a102:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a106:	6038      	str	r0, [r7, #0]
 800a108:	6918      	ldr	r0, [r3, #16]
 800a10a:	f7ff fd35 	bl	8009b78 <__hi0bits>
 800a10e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a112:	e7e5      	b.n	800a0e0 <__d2b+0x74>
 800a114:	0800c940 	.word	0x0800c940
 800a118:	0800c951 	.word	0x0800c951

0800a11c <__ssputs_r>:
 800a11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a120:	688e      	ldr	r6, [r1, #8]
 800a122:	461f      	mov	r7, r3
 800a124:	42be      	cmp	r6, r7
 800a126:	680b      	ldr	r3, [r1, #0]
 800a128:	4682      	mov	sl, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	4690      	mov	r8, r2
 800a12e:	d82d      	bhi.n	800a18c <__ssputs_r+0x70>
 800a130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a138:	d026      	beq.n	800a188 <__ssputs_r+0x6c>
 800a13a:	6965      	ldr	r5, [r4, #20]
 800a13c:	6909      	ldr	r1, [r1, #16]
 800a13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a142:	eba3 0901 	sub.w	r9, r3, r1
 800a146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a14a:	1c7b      	adds	r3, r7, #1
 800a14c:	444b      	add	r3, r9
 800a14e:	106d      	asrs	r5, r5, #1
 800a150:	429d      	cmp	r5, r3
 800a152:	bf38      	it	cc
 800a154:	461d      	movcc	r5, r3
 800a156:	0553      	lsls	r3, r2, #21
 800a158:	d527      	bpl.n	800a1aa <__ssputs_r+0x8e>
 800a15a:	4629      	mov	r1, r5
 800a15c:	f7ff fbd8 	bl	8009910 <_malloc_r>
 800a160:	4606      	mov	r6, r0
 800a162:	b360      	cbz	r0, 800a1be <__ssputs_r+0xa2>
 800a164:	6921      	ldr	r1, [r4, #16]
 800a166:	464a      	mov	r2, r9
 800a168:	f000 fa06 	bl	800a578 <memcpy>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	6126      	str	r6, [r4, #16]
 800a17a:	6165      	str	r5, [r4, #20]
 800a17c:	444e      	add	r6, r9
 800a17e:	eba5 0509 	sub.w	r5, r5, r9
 800a182:	6026      	str	r6, [r4, #0]
 800a184:	60a5      	str	r5, [r4, #8]
 800a186:	463e      	mov	r6, r7
 800a188:	42be      	cmp	r6, r7
 800a18a:	d900      	bls.n	800a18e <__ssputs_r+0x72>
 800a18c:	463e      	mov	r6, r7
 800a18e:	6820      	ldr	r0, [r4, #0]
 800a190:	4632      	mov	r2, r6
 800a192:	4641      	mov	r1, r8
 800a194:	f000 f9c6 	bl	800a524 <memmove>
 800a198:	68a3      	ldr	r3, [r4, #8]
 800a19a:	1b9b      	subs	r3, r3, r6
 800a19c:	60a3      	str	r3, [r4, #8]
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	4433      	add	r3, r6
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	2000      	movs	r0, #0
 800a1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1aa:	462a      	mov	r2, r5
 800a1ac:	f000 fa36 	bl	800a61c <_realloc_r>
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d1e0      	bne.n	800a178 <__ssputs_r+0x5c>
 800a1b6:	6921      	ldr	r1, [r4, #16]
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	f7ff fb35 	bl	8009828 <_free_r>
 800a1be:	230c      	movs	r3, #12
 800a1c0:	f8ca 3000 	str.w	r3, [sl]
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d0:	e7e9      	b.n	800a1a6 <__ssputs_r+0x8a>
	...

0800a1d4 <_svfiprintf_r>:
 800a1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d8:	4698      	mov	r8, r3
 800a1da:	898b      	ldrh	r3, [r1, #12]
 800a1dc:	061b      	lsls	r3, r3, #24
 800a1de:	b09d      	sub	sp, #116	@ 0x74
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	4614      	mov	r4, r2
 800a1e6:	d510      	bpl.n	800a20a <_svfiprintf_r+0x36>
 800a1e8:	690b      	ldr	r3, [r1, #16]
 800a1ea:	b973      	cbnz	r3, 800a20a <_svfiprintf_r+0x36>
 800a1ec:	2140      	movs	r1, #64	@ 0x40
 800a1ee:	f7ff fb8f 	bl	8009910 <_malloc_r>
 800a1f2:	6028      	str	r0, [r5, #0]
 800a1f4:	6128      	str	r0, [r5, #16]
 800a1f6:	b930      	cbnz	r0, 800a206 <_svfiprintf_r+0x32>
 800a1f8:	230c      	movs	r3, #12
 800a1fa:	603b      	str	r3, [r7, #0]
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	b01d      	add	sp, #116	@ 0x74
 800a202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a206:	2340      	movs	r3, #64	@ 0x40
 800a208:	616b      	str	r3, [r5, #20]
 800a20a:	2300      	movs	r3, #0
 800a20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a20e:	2320      	movs	r3, #32
 800a210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a214:	f8cd 800c 	str.w	r8, [sp, #12]
 800a218:	2330      	movs	r3, #48	@ 0x30
 800a21a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a3b8 <_svfiprintf_r+0x1e4>
 800a21e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a222:	f04f 0901 	mov.w	r9, #1
 800a226:	4623      	mov	r3, r4
 800a228:	469a      	mov	sl, r3
 800a22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a22e:	b10a      	cbz	r2, 800a234 <_svfiprintf_r+0x60>
 800a230:	2a25      	cmp	r2, #37	@ 0x25
 800a232:	d1f9      	bne.n	800a228 <_svfiprintf_r+0x54>
 800a234:	ebba 0b04 	subs.w	fp, sl, r4
 800a238:	d00b      	beq.n	800a252 <_svfiprintf_r+0x7e>
 800a23a:	465b      	mov	r3, fp
 800a23c:	4622      	mov	r2, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	4638      	mov	r0, r7
 800a242:	f7ff ff6b 	bl	800a11c <__ssputs_r>
 800a246:	3001      	adds	r0, #1
 800a248:	f000 80a7 	beq.w	800a39a <_svfiprintf_r+0x1c6>
 800a24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a24e:	445a      	add	r2, fp
 800a250:	9209      	str	r2, [sp, #36]	@ 0x24
 800a252:	f89a 3000 	ldrb.w	r3, [sl]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 809f 	beq.w	800a39a <_svfiprintf_r+0x1c6>
 800a25c:	2300      	movs	r3, #0
 800a25e:	f04f 32ff 	mov.w	r2, #4294967295
 800a262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a266:	f10a 0a01 	add.w	sl, sl, #1
 800a26a:	9304      	str	r3, [sp, #16]
 800a26c:	9307      	str	r3, [sp, #28]
 800a26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a272:	931a      	str	r3, [sp, #104]	@ 0x68
 800a274:	4654      	mov	r4, sl
 800a276:	2205      	movs	r2, #5
 800a278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a27c:	484e      	ldr	r0, [pc, #312]	@ (800a3b8 <_svfiprintf_r+0x1e4>)
 800a27e:	f7f5 ffaf 	bl	80001e0 <memchr>
 800a282:	9a04      	ldr	r2, [sp, #16]
 800a284:	b9d8      	cbnz	r0, 800a2be <_svfiprintf_r+0xea>
 800a286:	06d0      	lsls	r0, r2, #27
 800a288:	bf44      	itt	mi
 800a28a:	2320      	movmi	r3, #32
 800a28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a290:	0711      	lsls	r1, r2, #28
 800a292:	bf44      	itt	mi
 800a294:	232b      	movmi	r3, #43	@ 0x2b
 800a296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a29a:	f89a 3000 	ldrb.w	r3, [sl]
 800a29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a0:	d015      	beq.n	800a2ce <_svfiprintf_r+0xfa>
 800a2a2:	9a07      	ldr	r2, [sp, #28]
 800a2a4:	4654      	mov	r4, sl
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	f04f 0c0a 	mov.w	ip, #10
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2b2:	3b30      	subs	r3, #48	@ 0x30
 800a2b4:	2b09      	cmp	r3, #9
 800a2b6:	d94b      	bls.n	800a350 <_svfiprintf_r+0x17c>
 800a2b8:	b1b0      	cbz	r0, 800a2e8 <_svfiprintf_r+0x114>
 800a2ba:	9207      	str	r2, [sp, #28]
 800a2bc:	e014      	b.n	800a2e8 <_svfiprintf_r+0x114>
 800a2be:	eba0 0308 	sub.w	r3, r0, r8
 800a2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	46a2      	mov	sl, r4
 800a2cc:	e7d2      	b.n	800a274 <_svfiprintf_r+0xa0>
 800a2ce:	9b03      	ldr	r3, [sp, #12]
 800a2d0:	1d19      	adds	r1, r3, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	9103      	str	r1, [sp, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	bfbb      	ittet	lt
 800a2da:	425b      	neglt	r3, r3
 800a2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a2e0:	9307      	strge	r3, [sp, #28]
 800a2e2:	9307      	strlt	r3, [sp, #28]
 800a2e4:	bfb8      	it	lt
 800a2e6:	9204      	strlt	r2, [sp, #16]
 800a2e8:	7823      	ldrb	r3, [r4, #0]
 800a2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2ec:	d10a      	bne.n	800a304 <_svfiprintf_r+0x130>
 800a2ee:	7863      	ldrb	r3, [r4, #1]
 800a2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2f2:	d132      	bne.n	800a35a <_svfiprintf_r+0x186>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	1d1a      	adds	r2, r3, #4
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	9203      	str	r2, [sp, #12]
 800a2fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a300:	3402      	adds	r4, #2
 800a302:	9305      	str	r3, [sp, #20]
 800a304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a3c8 <_svfiprintf_r+0x1f4>
 800a308:	7821      	ldrb	r1, [r4, #0]
 800a30a:	2203      	movs	r2, #3
 800a30c:	4650      	mov	r0, sl
 800a30e:	f7f5 ff67 	bl	80001e0 <memchr>
 800a312:	b138      	cbz	r0, 800a324 <_svfiprintf_r+0x150>
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	eba0 000a 	sub.w	r0, r0, sl
 800a31a:	2240      	movs	r2, #64	@ 0x40
 800a31c:	4082      	lsls	r2, r0
 800a31e:	4313      	orrs	r3, r2
 800a320:	3401      	adds	r4, #1
 800a322:	9304      	str	r3, [sp, #16]
 800a324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a328:	4824      	ldr	r0, [pc, #144]	@ (800a3bc <_svfiprintf_r+0x1e8>)
 800a32a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a32e:	2206      	movs	r2, #6
 800a330:	f7f5 ff56 	bl	80001e0 <memchr>
 800a334:	2800      	cmp	r0, #0
 800a336:	d036      	beq.n	800a3a6 <_svfiprintf_r+0x1d2>
 800a338:	4b21      	ldr	r3, [pc, #132]	@ (800a3c0 <_svfiprintf_r+0x1ec>)
 800a33a:	bb1b      	cbnz	r3, 800a384 <_svfiprintf_r+0x1b0>
 800a33c:	9b03      	ldr	r3, [sp, #12]
 800a33e:	3307      	adds	r3, #7
 800a340:	f023 0307 	bic.w	r3, r3, #7
 800a344:	3308      	adds	r3, #8
 800a346:	9303      	str	r3, [sp, #12]
 800a348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a34a:	4433      	add	r3, r6
 800a34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a34e:	e76a      	b.n	800a226 <_svfiprintf_r+0x52>
 800a350:	fb0c 3202 	mla	r2, ip, r2, r3
 800a354:	460c      	mov	r4, r1
 800a356:	2001      	movs	r0, #1
 800a358:	e7a8      	b.n	800a2ac <_svfiprintf_r+0xd8>
 800a35a:	2300      	movs	r3, #0
 800a35c:	3401      	adds	r4, #1
 800a35e:	9305      	str	r3, [sp, #20]
 800a360:	4619      	mov	r1, r3
 800a362:	f04f 0c0a 	mov.w	ip, #10
 800a366:	4620      	mov	r0, r4
 800a368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a36c:	3a30      	subs	r2, #48	@ 0x30
 800a36e:	2a09      	cmp	r2, #9
 800a370:	d903      	bls.n	800a37a <_svfiprintf_r+0x1a6>
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0c6      	beq.n	800a304 <_svfiprintf_r+0x130>
 800a376:	9105      	str	r1, [sp, #20]
 800a378:	e7c4      	b.n	800a304 <_svfiprintf_r+0x130>
 800a37a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a37e:	4604      	mov	r4, r0
 800a380:	2301      	movs	r3, #1
 800a382:	e7f0      	b.n	800a366 <_svfiprintf_r+0x192>
 800a384:	ab03      	add	r3, sp, #12
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	462a      	mov	r2, r5
 800a38a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c4 <_svfiprintf_r+0x1f0>)
 800a38c:	a904      	add	r1, sp, #16
 800a38e:	4638      	mov	r0, r7
 800a390:	f7fd fe78 	bl	8008084 <_printf_float>
 800a394:	1c42      	adds	r2, r0, #1
 800a396:	4606      	mov	r6, r0
 800a398:	d1d6      	bne.n	800a348 <_svfiprintf_r+0x174>
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	065b      	lsls	r3, r3, #25
 800a39e:	f53f af2d 	bmi.w	800a1fc <_svfiprintf_r+0x28>
 800a3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3a4:	e72c      	b.n	800a200 <_svfiprintf_r+0x2c>
 800a3a6:	ab03      	add	r3, sp, #12
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	462a      	mov	r2, r5
 800a3ac:	4b05      	ldr	r3, [pc, #20]	@ (800a3c4 <_svfiprintf_r+0x1f0>)
 800a3ae:	a904      	add	r1, sp, #16
 800a3b0:	4638      	mov	r0, r7
 800a3b2:	f7fe f8ff 	bl	80085b4 <_printf_i>
 800a3b6:	e7ed      	b.n	800a394 <_svfiprintf_r+0x1c0>
 800a3b8:	0800c9aa 	.word	0x0800c9aa
 800a3bc:	0800c9b4 	.word	0x0800c9b4
 800a3c0:	08008085 	.word	0x08008085
 800a3c4:	0800a11d 	.word	0x0800a11d
 800a3c8:	0800c9b0 	.word	0x0800c9b0

0800a3cc <__sflush_r>:
 800a3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	0716      	lsls	r6, r2, #28
 800a3d6:	4605      	mov	r5, r0
 800a3d8:	460c      	mov	r4, r1
 800a3da:	d454      	bmi.n	800a486 <__sflush_r+0xba>
 800a3dc:	684b      	ldr	r3, [r1, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	dc02      	bgt.n	800a3e8 <__sflush_r+0x1c>
 800a3e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dd48      	ble.n	800a47a <__sflush_r+0xae>
 800a3e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3ea:	2e00      	cmp	r6, #0
 800a3ec:	d045      	beq.n	800a47a <__sflush_r+0xae>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3f4:	682f      	ldr	r7, [r5, #0]
 800a3f6:	6a21      	ldr	r1, [r4, #32]
 800a3f8:	602b      	str	r3, [r5, #0]
 800a3fa:	d030      	beq.n	800a45e <__sflush_r+0x92>
 800a3fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	0759      	lsls	r1, r3, #29
 800a402:	d505      	bpl.n	800a410 <__sflush_r+0x44>
 800a404:	6863      	ldr	r3, [r4, #4]
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a40a:	b10b      	cbz	r3, 800a410 <__sflush_r+0x44>
 800a40c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	2300      	movs	r3, #0
 800a412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a414:	6a21      	ldr	r1, [r4, #32]
 800a416:	4628      	mov	r0, r5
 800a418:	47b0      	blx	r6
 800a41a:	1c43      	adds	r3, r0, #1
 800a41c:	89a3      	ldrh	r3, [r4, #12]
 800a41e:	d106      	bne.n	800a42e <__sflush_r+0x62>
 800a420:	6829      	ldr	r1, [r5, #0]
 800a422:	291d      	cmp	r1, #29
 800a424:	d82b      	bhi.n	800a47e <__sflush_r+0xb2>
 800a426:	4a2a      	ldr	r2, [pc, #168]	@ (800a4d0 <__sflush_r+0x104>)
 800a428:	40ca      	lsrs	r2, r1
 800a42a:	07d6      	lsls	r6, r2, #31
 800a42c:	d527      	bpl.n	800a47e <__sflush_r+0xb2>
 800a42e:	2200      	movs	r2, #0
 800a430:	6062      	str	r2, [r4, #4]
 800a432:	04d9      	lsls	r1, r3, #19
 800a434:	6922      	ldr	r2, [r4, #16]
 800a436:	6022      	str	r2, [r4, #0]
 800a438:	d504      	bpl.n	800a444 <__sflush_r+0x78>
 800a43a:	1c42      	adds	r2, r0, #1
 800a43c:	d101      	bne.n	800a442 <__sflush_r+0x76>
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	b903      	cbnz	r3, 800a444 <__sflush_r+0x78>
 800a442:	6560      	str	r0, [r4, #84]	@ 0x54
 800a444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a446:	602f      	str	r7, [r5, #0]
 800a448:	b1b9      	cbz	r1, 800a47a <__sflush_r+0xae>
 800a44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a44e:	4299      	cmp	r1, r3
 800a450:	d002      	beq.n	800a458 <__sflush_r+0x8c>
 800a452:	4628      	mov	r0, r5
 800a454:	f7ff f9e8 	bl	8009828 <_free_r>
 800a458:	2300      	movs	r3, #0
 800a45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a45c:	e00d      	b.n	800a47a <__sflush_r+0xae>
 800a45e:	2301      	movs	r3, #1
 800a460:	4628      	mov	r0, r5
 800a462:	47b0      	blx	r6
 800a464:	4602      	mov	r2, r0
 800a466:	1c50      	adds	r0, r2, #1
 800a468:	d1c9      	bne.n	800a3fe <__sflush_r+0x32>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0c6      	beq.n	800a3fe <__sflush_r+0x32>
 800a470:	2b1d      	cmp	r3, #29
 800a472:	d001      	beq.n	800a478 <__sflush_r+0xac>
 800a474:	2b16      	cmp	r3, #22
 800a476:	d11e      	bne.n	800a4b6 <__sflush_r+0xea>
 800a478:	602f      	str	r7, [r5, #0]
 800a47a:	2000      	movs	r0, #0
 800a47c:	e022      	b.n	800a4c4 <__sflush_r+0xf8>
 800a47e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a482:	b21b      	sxth	r3, r3
 800a484:	e01b      	b.n	800a4be <__sflush_r+0xf2>
 800a486:	690f      	ldr	r7, [r1, #16]
 800a488:	2f00      	cmp	r7, #0
 800a48a:	d0f6      	beq.n	800a47a <__sflush_r+0xae>
 800a48c:	0793      	lsls	r3, r2, #30
 800a48e:	680e      	ldr	r6, [r1, #0]
 800a490:	bf08      	it	eq
 800a492:	694b      	ldreq	r3, [r1, #20]
 800a494:	600f      	str	r7, [r1, #0]
 800a496:	bf18      	it	ne
 800a498:	2300      	movne	r3, #0
 800a49a:	eba6 0807 	sub.w	r8, r6, r7
 800a49e:	608b      	str	r3, [r1, #8]
 800a4a0:	f1b8 0f00 	cmp.w	r8, #0
 800a4a4:	dde9      	ble.n	800a47a <__sflush_r+0xae>
 800a4a6:	6a21      	ldr	r1, [r4, #32]
 800a4a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4aa:	4643      	mov	r3, r8
 800a4ac:	463a      	mov	r2, r7
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	47b0      	blx	r6
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	dc08      	bgt.n	800a4c8 <__sflush_r+0xfc>
 800a4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4be:	81a3      	strh	r3, [r4, #12]
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c8:	4407      	add	r7, r0
 800a4ca:	eba8 0800 	sub.w	r8, r8, r0
 800a4ce:	e7e7      	b.n	800a4a0 <__sflush_r+0xd4>
 800a4d0:	20400001 	.word	0x20400001

0800a4d4 <_fflush_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	690b      	ldr	r3, [r1, #16]
 800a4d8:	4605      	mov	r5, r0
 800a4da:	460c      	mov	r4, r1
 800a4dc:	b913      	cbnz	r3, 800a4e4 <_fflush_r+0x10>
 800a4de:	2500      	movs	r5, #0
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	b118      	cbz	r0, 800a4ee <_fflush_r+0x1a>
 800a4e6:	6a03      	ldr	r3, [r0, #32]
 800a4e8:	b90b      	cbnz	r3, 800a4ee <_fflush_r+0x1a>
 800a4ea:	f7fe fa0d 	bl	8008908 <__sinit>
 800a4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0f3      	beq.n	800a4de <_fflush_r+0xa>
 800a4f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4f8:	07d0      	lsls	r0, r2, #31
 800a4fa:	d404      	bmi.n	800a506 <_fflush_r+0x32>
 800a4fc:	0599      	lsls	r1, r3, #22
 800a4fe:	d402      	bmi.n	800a506 <_fflush_r+0x32>
 800a500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a502:	f7fe fb34 	bl	8008b6e <__retarget_lock_acquire_recursive>
 800a506:	4628      	mov	r0, r5
 800a508:	4621      	mov	r1, r4
 800a50a:	f7ff ff5f 	bl	800a3cc <__sflush_r>
 800a50e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a510:	07da      	lsls	r2, r3, #31
 800a512:	4605      	mov	r5, r0
 800a514:	d4e4      	bmi.n	800a4e0 <_fflush_r+0xc>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	059b      	lsls	r3, r3, #22
 800a51a:	d4e1      	bmi.n	800a4e0 <_fflush_r+0xc>
 800a51c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a51e:	f7fe fb27 	bl	8008b70 <__retarget_lock_release_recursive>
 800a522:	e7dd      	b.n	800a4e0 <_fflush_r+0xc>

0800a524 <memmove>:
 800a524:	4288      	cmp	r0, r1
 800a526:	b510      	push	{r4, lr}
 800a528:	eb01 0402 	add.w	r4, r1, r2
 800a52c:	d902      	bls.n	800a534 <memmove+0x10>
 800a52e:	4284      	cmp	r4, r0
 800a530:	4623      	mov	r3, r4
 800a532:	d807      	bhi.n	800a544 <memmove+0x20>
 800a534:	1e43      	subs	r3, r0, #1
 800a536:	42a1      	cmp	r1, r4
 800a538:	d008      	beq.n	800a54c <memmove+0x28>
 800a53a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a53e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a542:	e7f8      	b.n	800a536 <memmove+0x12>
 800a544:	4402      	add	r2, r0
 800a546:	4601      	mov	r1, r0
 800a548:	428a      	cmp	r2, r1
 800a54a:	d100      	bne.n	800a54e <memmove+0x2a>
 800a54c:	bd10      	pop	{r4, pc}
 800a54e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a556:	e7f7      	b.n	800a548 <memmove+0x24>

0800a558 <_sbrk_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d06      	ldr	r5, [pc, #24]	@ (800a574 <_sbrk_r+0x1c>)
 800a55c:	2300      	movs	r3, #0
 800a55e:	4604      	mov	r4, r0
 800a560:	4608      	mov	r0, r1
 800a562:	602b      	str	r3, [r5, #0]
 800a564:	f7f9 f8fc 	bl	8003760 <_sbrk>
 800a568:	1c43      	adds	r3, r0, #1
 800a56a:	d102      	bne.n	800a572 <_sbrk_r+0x1a>
 800a56c:	682b      	ldr	r3, [r5, #0]
 800a56e:	b103      	cbz	r3, 800a572 <_sbrk_r+0x1a>
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	20001604 	.word	0x20001604

0800a578 <memcpy>:
 800a578:	440a      	add	r2, r1
 800a57a:	4291      	cmp	r1, r2
 800a57c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a580:	d100      	bne.n	800a584 <memcpy+0xc>
 800a582:	4770      	bx	lr
 800a584:	b510      	push	{r4, lr}
 800a586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a58a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a58e:	4291      	cmp	r1, r2
 800a590:	d1f9      	bne.n	800a586 <memcpy+0xe>
 800a592:	bd10      	pop	{r4, pc}

0800a594 <__assert_func>:
 800a594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a596:	4614      	mov	r4, r2
 800a598:	461a      	mov	r2, r3
 800a59a:	4b09      	ldr	r3, [pc, #36]	@ (800a5c0 <__assert_func+0x2c>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4605      	mov	r5, r0
 800a5a0:	68d8      	ldr	r0, [r3, #12]
 800a5a2:	b14c      	cbz	r4, 800a5b8 <__assert_func+0x24>
 800a5a4:	4b07      	ldr	r3, [pc, #28]	@ (800a5c4 <__assert_func+0x30>)
 800a5a6:	9100      	str	r1, [sp, #0]
 800a5a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5ac:	4906      	ldr	r1, [pc, #24]	@ (800a5c8 <__assert_func+0x34>)
 800a5ae:	462b      	mov	r3, r5
 800a5b0:	f000 f870 	bl	800a694 <fiprintf>
 800a5b4:	f000 f880 	bl	800a6b8 <abort>
 800a5b8:	4b04      	ldr	r3, [pc, #16]	@ (800a5cc <__assert_func+0x38>)
 800a5ba:	461c      	mov	r4, r3
 800a5bc:	e7f3      	b.n	800a5a6 <__assert_func+0x12>
 800a5be:	bf00      	nop
 800a5c0:	20000024 	.word	0x20000024
 800a5c4:	0800c9c5 	.word	0x0800c9c5
 800a5c8:	0800c9d2 	.word	0x0800c9d2
 800a5cc:	0800ca00 	.word	0x0800ca00

0800a5d0 <_calloc_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	fba1 5402 	umull	r5, r4, r1, r2
 800a5d6:	b934      	cbnz	r4, 800a5e6 <_calloc_r+0x16>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	f7ff f999 	bl	8009910 <_malloc_r>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	b928      	cbnz	r0, 800a5ee <_calloc_r+0x1e>
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	220c      	movs	r2, #12
 800a5e8:	6002      	str	r2, [r0, #0]
 800a5ea:	2600      	movs	r6, #0
 800a5ec:	e7f9      	b.n	800a5e2 <_calloc_r+0x12>
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	f7fe fa3f 	bl	8008a74 <memset>
 800a5f6:	e7f4      	b.n	800a5e2 <_calloc_r+0x12>

0800a5f8 <__ascii_mbtowc>:
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	b901      	cbnz	r1, 800a5fe <__ascii_mbtowc+0x6>
 800a5fc:	a901      	add	r1, sp, #4
 800a5fe:	b142      	cbz	r2, 800a612 <__ascii_mbtowc+0x1a>
 800a600:	b14b      	cbz	r3, 800a616 <__ascii_mbtowc+0x1e>
 800a602:	7813      	ldrb	r3, [r2, #0]
 800a604:	600b      	str	r3, [r1, #0]
 800a606:	7812      	ldrb	r2, [r2, #0]
 800a608:	1e10      	subs	r0, r2, #0
 800a60a:	bf18      	it	ne
 800a60c:	2001      	movne	r0, #1
 800a60e:	b002      	add	sp, #8
 800a610:	4770      	bx	lr
 800a612:	4610      	mov	r0, r2
 800a614:	e7fb      	b.n	800a60e <__ascii_mbtowc+0x16>
 800a616:	f06f 0001 	mvn.w	r0, #1
 800a61a:	e7f8      	b.n	800a60e <__ascii_mbtowc+0x16>

0800a61c <_realloc_r>:
 800a61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a620:	4607      	mov	r7, r0
 800a622:	4614      	mov	r4, r2
 800a624:	460d      	mov	r5, r1
 800a626:	b921      	cbnz	r1, 800a632 <_realloc_r+0x16>
 800a628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62c:	4611      	mov	r1, r2
 800a62e:	f7ff b96f 	b.w	8009910 <_malloc_r>
 800a632:	b92a      	cbnz	r2, 800a640 <_realloc_r+0x24>
 800a634:	f7ff f8f8 	bl	8009828 <_free_r>
 800a638:	4625      	mov	r5, r4
 800a63a:	4628      	mov	r0, r5
 800a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a640:	f000 f841 	bl	800a6c6 <_malloc_usable_size_r>
 800a644:	4284      	cmp	r4, r0
 800a646:	4606      	mov	r6, r0
 800a648:	d802      	bhi.n	800a650 <_realloc_r+0x34>
 800a64a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a64e:	d8f4      	bhi.n	800a63a <_realloc_r+0x1e>
 800a650:	4621      	mov	r1, r4
 800a652:	4638      	mov	r0, r7
 800a654:	f7ff f95c 	bl	8009910 <_malloc_r>
 800a658:	4680      	mov	r8, r0
 800a65a:	b908      	cbnz	r0, 800a660 <_realloc_r+0x44>
 800a65c:	4645      	mov	r5, r8
 800a65e:	e7ec      	b.n	800a63a <_realloc_r+0x1e>
 800a660:	42b4      	cmp	r4, r6
 800a662:	4622      	mov	r2, r4
 800a664:	4629      	mov	r1, r5
 800a666:	bf28      	it	cs
 800a668:	4632      	movcs	r2, r6
 800a66a:	f7ff ff85 	bl	800a578 <memcpy>
 800a66e:	4629      	mov	r1, r5
 800a670:	4638      	mov	r0, r7
 800a672:	f7ff f8d9 	bl	8009828 <_free_r>
 800a676:	e7f1      	b.n	800a65c <_realloc_r+0x40>

0800a678 <__ascii_wctomb>:
 800a678:	4603      	mov	r3, r0
 800a67a:	4608      	mov	r0, r1
 800a67c:	b141      	cbz	r1, 800a690 <__ascii_wctomb+0x18>
 800a67e:	2aff      	cmp	r2, #255	@ 0xff
 800a680:	d904      	bls.n	800a68c <__ascii_wctomb+0x14>
 800a682:	228a      	movs	r2, #138	@ 0x8a
 800a684:	601a      	str	r2, [r3, #0]
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	4770      	bx	lr
 800a68c:	700a      	strb	r2, [r1, #0]
 800a68e:	2001      	movs	r0, #1
 800a690:	4770      	bx	lr
	...

0800a694 <fiprintf>:
 800a694:	b40e      	push	{r1, r2, r3}
 800a696:	b503      	push	{r0, r1, lr}
 800a698:	4601      	mov	r1, r0
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	4805      	ldr	r0, [pc, #20]	@ (800a6b4 <fiprintf+0x20>)
 800a69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6a2:	6800      	ldr	r0, [r0, #0]
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	f000 f83f 	bl	800a728 <_vfiprintf_r>
 800a6aa:	b002      	add	sp, #8
 800a6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6b0:	b003      	add	sp, #12
 800a6b2:	4770      	bx	lr
 800a6b4:	20000024 	.word	0x20000024

0800a6b8 <abort>:
 800a6b8:	b508      	push	{r3, lr}
 800a6ba:	2006      	movs	r0, #6
 800a6bc:	f000 fa08 	bl	800aad0 <raise>
 800a6c0:	2001      	movs	r0, #1
 800a6c2:	f7f8 ffd5 	bl	8003670 <_exit>

0800a6c6 <_malloc_usable_size_r>:
 800a6c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ca:	1f18      	subs	r0, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bfbc      	itt	lt
 800a6d0:	580b      	ldrlt	r3, [r1, r0]
 800a6d2:	18c0      	addlt	r0, r0, r3
 800a6d4:	4770      	bx	lr

0800a6d6 <__sfputc_r>:
 800a6d6:	6893      	ldr	r3, [r2, #8]
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	b410      	push	{r4}
 800a6de:	6093      	str	r3, [r2, #8]
 800a6e0:	da08      	bge.n	800a6f4 <__sfputc_r+0x1e>
 800a6e2:	6994      	ldr	r4, [r2, #24]
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	db01      	blt.n	800a6ec <__sfputc_r+0x16>
 800a6e8:	290a      	cmp	r1, #10
 800a6ea:	d103      	bne.n	800a6f4 <__sfputc_r+0x1e>
 800a6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f0:	f000 b932 	b.w	800a958 <__swbuf_r>
 800a6f4:	6813      	ldr	r3, [r2, #0]
 800a6f6:	1c58      	adds	r0, r3, #1
 800a6f8:	6010      	str	r0, [r2, #0]
 800a6fa:	7019      	strb	r1, [r3, #0]
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <__sfputs_r>:
 800a704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a706:	4606      	mov	r6, r0
 800a708:	460f      	mov	r7, r1
 800a70a:	4614      	mov	r4, r2
 800a70c:	18d5      	adds	r5, r2, r3
 800a70e:	42ac      	cmp	r4, r5
 800a710:	d101      	bne.n	800a716 <__sfputs_r+0x12>
 800a712:	2000      	movs	r0, #0
 800a714:	e007      	b.n	800a726 <__sfputs_r+0x22>
 800a716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71a:	463a      	mov	r2, r7
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7ff ffda 	bl	800a6d6 <__sfputc_r>
 800a722:	1c43      	adds	r3, r0, #1
 800a724:	d1f3      	bne.n	800a70e <__sfputs_r+0xa>
 800a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a728 <_vfiprintf_r>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	460d      	mov	r5, r1
 800a72e:	b09d      	sub	sp, #116	@ 0x74
 800a730:	4614      	mov	r4, r2
 800a732:	4698      	mov	r8, r3
 800a734:	4606      	mov	r6, r0
 800a736:	b118      	cbz	r0, 800a740 <_vfiprintf_r+0x18>
 800a738:	6a03      	ldr	r3, [r0, #32]
 800a73a:	b90b      	cbnz	r3, 800a740 <_vfiprintf_r+0x18>
 800a73c:	f7fe f8e4 	bl	8008908 <__sinit>
 800a740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a742:	07d9      	lsls	r1, r3, #31
 800a744:	d405      	bmi.n	800a752 <_vfiprintf_r+0x2a>
 800a746:	89ab      	ldrh	r3, [r5, #12]
 800a748:	059a      	lsls	r2, r3, #22
 800a74a:	d402      	bmi.n	800a752 <_vfiprintf_r+0x2a>
 800a74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a74e:	f7fe fa0e 	bl	8008b6e <__retarget_lock_acquire_recursive>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	071b      	lsls	r3, r3, #28
 800a756:	d501      	bpl.n	800a75c <_vfiprintf_r+0x34>
 800a758:	692b      	ldr	r3, [r5, #16]
 800a75a:	b99b      	cbnz	r3, 800a784 <_vfiprintf_r+0x5c>
 800a75c:	4629      	mov	r1, r5
 800a75e:	4630      	mov	r0, r6
 800a760:	f000 f938 	bl	800a9d4 <__swsetup_r>
 800a764:	b170      	cbz	r0, 800a784 <_vfiprintf_r+0x5c>
 800a766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a768:	07dc      	lsls	r4, r3, #31
 800a76a:	d504      	bpl.n	800a776 <_vfiprintf_r+0x4e>
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	b01d      	add	sp, #116	@ 0x74
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	89ab      	ldrh	r3, [r5, #12]
 800a778:	0598      	lsls	r0, r3, #22
 800a77a:	d4f7      	bmi.n	800a76c <_vfiprintf_r+0x44>
 800a77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a77e:	f7fe f9f7 	bl	8008b70 <__retarget_lock_release_recursive>
 800a782:	e7f3      	b.n	800a76c <_vfiprintf_r+0x44>
 800a784:	2300      	movs	r3, #0
 800a786:	9309      	str	r3, [sp, #36]	@ 0x24
 800a788:	2320      	movs	r3, #32
 800a78a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a792:	2330      	movs	r3, #48	@ 0x30
 800a794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a944 <_vfiprintf_r+0x21c>
 800a798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a79c:	f04f 0901 	mov.w	r9, #1
 800a7a0:	4623      	mov	r3, r4
 800a7a2:	469a      	mov	sl, r3
 800a7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a8:	b10a      	cbz	r2, 800a7ae <_vfiprintf_r+0x86>
 800a7aa:	2a25      	cmp	r2, #37	@ 0x25
 800a7ac:	d1f9      	bne.n	800a7a2 <_vfiprintf_r+0x7a>
 800a7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b2:	d00b      	beq.n	800a7cc <_vfiprintf_r+0xa4>
 800a7b4:	465b      	mov	r3, fp
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ffa2 	bl	800a704 <__sfputs_r>
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f000 80a7 	beq.w	800a914 <_vfiprintf_r+0x1ec>
 800a7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7c8:	445a      	add	r2, fp
 800a7ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 809f 	beq.w	800a914 <_vfiprintf_r+0x1ec>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e0:	f10a 0a01 	add.w	sl, sl, #1
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	9307      	str	r3, [sp, #28]
 800a7e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7ee:	4654      	mov	r4, sl
 800a7f0:	2205      	movs	r2, #5
 800a7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f6:	4853      	ldr	r0, [pc, #332]	@ (800a944 <_vfiprintf_r+0x21c>)
 800a7f8:	f7f5 fcf2 	bl	80001e0 <memchr>
 800a7fc:	9a04      	ldr	r2, [sp, #16]
 800a7fe:	b9d8      	cbnz	r0, 800a838 <_vfiprintf_r+0x110>
 800a800:	06d1      	lsls	r1, r2, #27
 800a802:	bf44      	itt	mi
 800a804:	2320      	movmi	r3, #32
 800a806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a80a:	0713      	lsls	r3, r2, #28
 800a80c:	bf44      	itt	mi
 800a80e:	232b      	movmi	r3, #43	@ 0x2b
 800a810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a814:	f89a 3000 	ldrb.w	r3, [sl]
 800a818:	2b2a      	cmp	r3, #42	@ 0x2a
 800a81a:	d015      	beq.n	800a848 <_vfiprintf_r+0x120>
 800a81c:	9a07      	ldr	r2, [sp, #28]
 800a81e:	4654      	mov	r4, sl
 800a820:	2000      	movs	r0, #0
 800a822:	f04f 0c0a 	mov.w	ip, #10
 800a826:	4621      	mov	r1, r4
 800a828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a82c:	3b30      	subs	r3, #48	@ 0x30
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d94b      	bls.n	800a8ca <_vfiprintf_r+0x1a2>
 800a832:	b1b0      	cbz	r0, 800a862 <_vfiprintf_r+0x13a>
 800a834:	9207      	str	r2, [sp, #28]
 800a836:	e014      	b.n	800a862 <_vfiprintf_r+0x13a>
 800a838:	eba0 0308 	sub.w	r3, r0, r8
 800a83c:	fa09 f303 	lsl.w	r3, r9, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	46a2      	mov	sl, r4
 800a846:	e7d2      	b.n	800a7ee <_vfiprintf_r+0xc6>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	1d19      	adds	r1, r3, #4
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	9103      	str	r1, [sp, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	bfbb      	ittet	lt
 800a854:	425b      	neglt	r3, r3
 800a856:	f042 0202 	orrlt.w	r2, r2, #2
 800a85a:	9307      	strge	r3, [sp, #28]
 800a85c:	9307      	strlt	r3, [sp, #28]
 800a85e:	bfb8      	it	lt
 800a860:	9204      	strlt	r2, [sp, #16]
 800a862:	7823      	ldrb	r3, [r4, #0]
 800a864:	2b2e      	cmp	r3, #46	@ 0x2e
 800a866:	d10a      	bne.n	800a87e <_vfiprintf_r+0x156>
 800a868:	7863      	ldrb	r3, [r4, #1]
 800a86a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a86c:	d132      	bne.n	800a8d4 <_vfiprintf_r+0x1ac>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d1a      	adds	r2, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	9203      	str	r2, [sp, #12]
 800a876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a87a:	3402      	adds	r4, #2
 800a87c:	9305      	str	r3, [sp, #20]
 800a87e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a954 <_vfiprintf_r+0x22c>
 800a882:	7821      	ldrb	r1, [r4, #0]
 800a884:	2203      	movs	r2, #3
 800a886:	4650      	mov	r0, sl
 800a888:	f7f5 fcaa 	bl	80001e0 <memchr>
 800a88c:	b138      	cbz	r0, 800a89e <_vfiprintf_r+0x176>
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	eba0 000a 	sub.w	r0, r0, sl
 800a894:	2240      	movs	r2, #64	@ 0x40
 800a896:	4082      	lsls	r2, r0
 800a898:	4313      	orrs	r3, r2
 800a89a:	3401      	adds	r4, #1
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a2:	4829      	ldr	r0, [pc, #164]	@ (800a948 <_vfiprintf_r+0x220>)
 800a8a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8a8:	2206      	movs	r2, #6
 800a8aa:	f7f5 fc99 	bl	80001e0 <memchr>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d03f      	beq.n	800a932 <_vfiprintf_r+0x20a>
 800a8b2:	4b26      	ldr	r3, [pc, #152]	@ (800a94c <_vfiprintf_r+0x224>)
 800a8b4:	bb1b      	cbnz	r3, 800a8fe <_vfiprintf_r+0x1d6>
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	3307      	adds	r3, #7
 800a8ba:	f023 0307 	bic.w	r3, r3, #7
 800a8be:	3308      	adds	r3, #8
 800a8c0:	9303      	str	r3, [sp, #12]
 800a8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c4:	443b      	add	r3, r7
 800a8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c8:	e76a      	b.n	800a7a0 <_vfiprintf_r+0x78>
 800a8ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	e7a8      	b.n	800a826 <_vfiprintf_r+0xfe>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	3401      	adds	r4, #1
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f04f 0c0a 	mov.w	ip, #10
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e6:	3a30      	subs	r2, #48	@ 0x30
 800a8e8:	2a09      	cmp	r2, #9
 800a8ea:	d903      	bls.n	800a8f4 <_vfiprintf_r+0x1cc>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0c6      	beq.n	800a87e <_vfiprintf_r+0x156>
 800a8f0:	9105      	str	r1, [sp, #20]
 800a8f2:	e7c4      	b.n	800a87e <_vfiprintf_r+0x156>
 800a8f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7f0      	b.n	800a8e0 <_vfiprintf_r+0x1b8>
 800a8fe:	ab03      	add	r3, sp, #12
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	462a      	mov	r2, r5
 800a904:	4b12      	ldr	r3, [pc, #72]	@ (800a950 <_vfiprintf_r+0x228>)
 800a906:	a904      	add	r1, sp, #16
 800a908:	4630      	mov	r0, r6
 800a90a:	f7fd fbbb 	bl	8008084 <_printf_float>
 800a90e:	4607      	mov	r7, r0
 800a910:	1c78      	adds	r0, r7, #1
 800a912:	d1d6      	bne.n	800a8c2 <_vfiprintf_r+0x19a>
 800a914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a916:	07d9      	lsls	r1, r3, #31
 800a918:	d405      	bmi.n	800a926 <_vfiprintf_r+0x1fe>
 800a91a:	89ab      	ldrh	r3, [r5, #12]
 800a91c:	059a      	lsls	r2, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_vfiprintf_r+0x1fe>
 800a920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a922:	f7fe f925 	bl	8008b70 <__retarget_lock_release_recursive>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	065b      	lsls	r3, r3, #25
 800a92a:	f53f af1f 	bmi.w	800a76c <_vfiprintf_r+0x44>
 800a92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a930:	e71e      	b.n	800a770 <_vfiprintf_r+0x48>
 800a932:	ab03      	add	r3, sp, #12
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	462a      	mov	r2, r5
 800a938:	4b05      	ldr	r3, [pc, #20]	@ (800a950 <_vfiprintf_r+0x228>)
 800a93a:	a904      	add	r1, sp, #16
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7fd fe39 	bl	80085b4 <_printf_i>
 800a942:	e7e4      	b.n	800a90e <_vfiprintf_r+0x1e6>
 800a944:	0800c9aa 	.word	0x0800c9aa
 800a948:	0800c9b4 	.word	0x0800c9b4
 800a94c:	08008085 	.word	0x08008085
 800a950:	0800a705 	.word	0x0800a705
 800a954:	0800c9b0 	.word	0x0800c9b0

0800a958 <__swbuf_r>:
 800a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95a:	460e      	mov	r6, r1
 800a95c:	4614      	mov	r4, r2
 800a95e:	4605      	mov	r5, r0
 800a960:	b118      	cbz	r0, 800a96a <__swbuf_r+0x12>
 800a962:	6a03      	ldr	r3, [r0, #32]
 800a964:	b90b      	cbnz	r3, 800a96a <__swbuf_r+0x12>
 800a966:	f7fd ffcf 	bl	8008908 <__sinit>
 800a96a:	69a3      	ldr	r3, [r4, #24]
 800a96c:	60a3      	str	r3, [r4, #8]
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	071a      	lsls	r2, r3, #28
 800a972:	d501      	bpl.n	800a978 <__swbuf_r+0x20>
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	b943      	cbnz	r3, 800a98a <__swbuf_r+0x32>
 800a978:	4621      	mov	r1, r4
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 f82a 	bl	800a9d4 <__swsetup_r>
 800a980:	b118      	cbz	r0, 800a98a <__swbuf_r+0x32>
 800a982:	f04f 37ff 	mov.w	r7, #4294967295
 800a986:	4638      	mov	r0, r7
 800a988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	6922      	ldr	r2, [r4, #16]
 800a98e:	1a98      	subs	r0, r3, r2
 800a990:	6963      	ldr	r3, [r4, #20]
 800a992:	b2f6      	uxtb	r6, r6
 800a994:	4283      	cmp	r3, r0
 800a996:	4637      	mov	r7, r6
 800a998:	dc05      	bgt.n	800a9a6 <__swbuf_r+0x4e>
 800a99a:	4621      	mov	r1, r4
 800a99c:	4628      	mov	r0, r5
 800a99e:	f7ff fd99 	bl	800a4d4 <_fflush_r>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d1ed      	bne.n	800a982 <__swbuf_r+0x2a>
 800a9a6:	68a3      	ldr	r3, [r4, #8]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	60a3      	str	r3, [r4, #8]
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	1c5a      	adds	r2, r3, #1
 800a9b0:	6022      	str	r2, [r4, #0]
 800a9b2:	701e      	strb	r6, [r3, #0]
 800a9b4:	6962      	ldr	r2, [r4, #20]
 800a9b6:	1c43      	adds	r3, r0, #1
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d004      	beq.n	800a9c6 <__swbuf_r+0x6e>
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	07db      	lsls	r3, r3, #31
 800a9c0:	d5e1      	bpl.n	800a986 <__swbuf_r+0x2e>
 800a9c2:	2e0a      	cmp	r6, #10
 800a9c4:	d1df      	bne.n	800a986 <__swbuf_r+0x2e>
 800a9c6:	4621      	mov	r1, r4
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	f7ff fd83 	bl	800a4d4 <_fflush_r>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d0d9      	beq.n	800a986 <__swbuf_r+0x2e>
 800a9d2:	e7d6      	b.n	800a982 <__swbuf_r+0x2a>

0800a9d4 <__swsetup_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4b29      	ldr	r3, [pc, #164]	@ (800aa7c <__swsetup_r+0xa8>)
 800a9d8:	4605      	mov	r5, r0
 800a9da:	6818      	ldr	r0, [r3, #0]
 800a9dc:	460c      	mov	r4, r1
 800a9de:	b118      	cbz	r0, 800a9e8 <__swsetup_r+0x14>
 800a9e0:	6a03      	ldr	r3, [r0, #32]
 800a9e2:	b90b      	cbnz	r3, 800a9e8 <__swsetup_r+0x14>
 800a9e4:	f7fd ff90 	bl	8008908 <__sinit>
 800a9e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ec:	0719      	lsls	r1, r3, #28
 800a9ee:	d422      	bmi.n	800aa36 <__swsetup_r+0x62>
 800a9f0:	06da      	lsls	r2, r3, #27
 800a9f2:	d407      	bmi.n	800aa04 <__swsetup_r+0x30>
 800a9f4:	2209      	movs	r2, #9
 800a9f6:	602a      	str	r2, [r5, #0]
 800a9f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9fc:	81a3      	strh	r3, [r4, #12]
 800a9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800aa02:	e033      	b.n	800aa6c <__swsetup_r+0x98>
 800aa04:	0758      	lsls	r0, r3, #29
 800aa06:	d512      	bpl.n	800aa2e <__swsetup_r+0x5a>
 800aa08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa0a:	b141      	cbz	r1, 800aa1e <__swsetup_r+0x4a>
 800aa0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa10:	4299      	cmp	r1, r3
 800aa12:	d002      	beq.n	800aa1a <__swsetup_r+0x46>
 800aa14:	4628      	mov	r0, r5
 800aa16:	f7fe ff07 	bl	8009828 <_free_r>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	2300      	movs	r3, #0
 800aa28:	6063      	str	r3, [r4, #4]
 800aa2a:	6923      	ldr	r3, [r4, #16]
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	89a3      	ldrh	r3, [r4, #12]
 800aa30:	f043 0308 	orr.w	r3, r3, #8
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	6923      	ldr	r3, [r4, #16]
 800aa38:	b94b      	cbnz	r3, 800aa4e <__swsetup_r+0x7a>
 800aa3a:	89a3      	ldrh	r3, [r4, #12]
 800aa3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa44:	d003      	beq.n	800aa4e <__swsetup_r+0x7a>
 800aa46:	4621      	mov	r1, r4
 800aa48:	4628      	mov	r0, r5
 800aa4a:	f000 f883 	bl	800ab54 <__smakebuf_r>
 800aa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa52:	f013 0201 	ands.w	r2, r3, #1
 800aa56:	d00a      	beq.n	800aa6e <__swsetup_r+0x9a>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	60a2      	str	r2, [r4, #8]
 800aa5c:	6962      	ldr	r2, [r4, #20]
 800aa5e:	4252      	negs	r2, r2
 800aa60:	61a2      	str	r2, [r4, #24]
 800aa62:	6922      	ldr	r2, [r4, #16]
 800aa64:	b942      	cbnz	r2, 800aa78 <__swsetup_r+0xa4>
 800aa66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aa6a:	d1c5      	bne.n	800a9f8 <__swsetup_r+0x24>
 800aa6c:	bd38      	pop	{r3, r4, r5, pc}
 800aa6e:	0799      	lsls	r1, r3, #30
 800aa70:	bf58      	it	pl
 800aa72:	6962      	ldrpl	r2, [r4, #20]
 800aa74:	60a2      	str	r2, [r4, #8]
 800aa76:	e7f4      	b.n	800aa62 <__swsetup_r+0x8e>
 800aa78:	2000      	movs	r0, #0
 800aa7a:	e7f7      	b.n	800aa6c <__swsetup_r+0x98>
 800aa7c:	20000024 	.word	0x20000024

0800aa80 <_raise_r>:
 800aa80:	291f      	cmp	r1, #31
 800aa82:	b538      	push	{r3, r4, r5, lr}
 800aa84:	4605      	mov	r5, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	d904      	bls.n	800aa94 <_raise_r+0x14>
 800aa8a:	2316      	movs	r3, #22
 800aa8c:	6003      	str	r3, [r0, #0]
 800aa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aa96:	b112      	cbz	r2, 800aa9e <_raise_r+0x1e>
 800aa98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa9c:	b94b      	cbnz	r3, 800aab2 <_raise_r+0x32>
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 f830 	bl	800ab04 <_getpid_r>
 800aaa4:	4622      	mov	r2, r4
 800aaa6:	4601      	mov	r1, r0
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaae:	f000 b817 	b.w	800aae0 <_kill_r>
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d00a      	beq.n	800aacc <_raise_r+0x4c>
 800aab6:	1c59      	adds	r1, r3, #1
 800aab8:	d103      	bne.n	800aac2 <_raise_r+0x42>
 800aaba:	2316      	movs	r3, #22
 800aabc:	6003      	str	r3, [r0, #0]
 800aabe:	2001      	movs	r0, #1
 800aac0:	e7e7      	b.n	800aa92 <_raise_r+0x12>
 800aac2:	2100      	movs	r1, #0
 800aac4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aac8:	4620      	mov	r0, r4
 800aaca:	4798      	blx	r3
 800aacc:	2000      	movs	r0, #0
 800aace:	e7e0      	b.n	800aa92 <_raise_r+0x12>

0800aad0 <raise>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	@ (800aadc <raise+0xc>)
 800aad2:	4601      	mov	r1, r0
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	f7ff bfd3 	b.w	800aa80 <_raise_r>
 800aada:	bf00      	nop
 800aadc:	20000024 	.word	0x20000024

0800aae0 <_kill_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	@ (800ab00 <_kill_r+0x20>)
 800aae4:	2300      	movs	r3, #0
 800aae6:	4604      	mov	r4, r0
 800aae8:	4608      	mov	r0, r1
 800aaea:	4611      	mov	r1, r2
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	f7f8 fdaf 	bl	8003650 <_kill>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	d102      	bne.n	800aafc <_kill_r+0x1c>
 800aaf6:	682b      	ldr	r3, [r5, #0]
 800aaf8:	b103      	cbz	r3, 800aafc <_kill_r+0x1c>
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	bf00      	nop
 800ab00:	20001604 	.word	0x20001604

0800ab04 <_getpid_r>:
 800ab04:	f7f8 bd9c 	b.w	8003640 <_getpid>

0800ab08 <__swhatbuf_r>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab10:	2900      	cmp	r1, #0
 800ab12:	b096      	sub	sp, #88	@ 0x58
 800ab14:	4615      	mov	r5, r2
 800ab16:	461e      	mov	r6, r3
 800ab18:	da0d      	bge.n	800ab36 <__swhatbuf_r+0x2e>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab20:	f04f 0100 	mov.w	r1, #0
 800ab24:	bf14      	ite	ne
 800ab26:	2340      	movne	r3, #64	@ 0x40
 800ab28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	6031      	str	r1, [r6, #0]
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	b016      	add	sp, #88	@ 0x58
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
 800ab36:	466a      	mov	r2, sp
 800ab38:	f000 f848 	bl	800abcc <_fstat_r>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	dbec      	blt.n	800ab1a <__swhatbuf_r+0x12>
 800ab40:	9901      	ldr	r1, [sp, #4]
 800ab42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab4a:	4259      	negs	r1, r3
 800ab4c:	4159      	adcs	r1, r3
 800ab4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab52:	e7eb      	b.n	800ab2c <__swhatbuf_r+0x24>

0800ab54 <__smakebuf_r>:
 800ab54:	898b      	ldrh	r3, [r1, #12]
 800ab56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab58:	079d      	lsls	r5, r3, #30
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	d507      	bpl.n	800ab70 <__smakebuf_r+0x1c>
 800ab60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	6123      	str	r3, [r4, #16]
 800ab68:	2301      	movs	r3, #1
 800ab6a:	6163      	str	r3, [r4, #20]
 800ab6c:	b003      	add	sp, #12
 800ab6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab70:	ab01      	add	r3, sp, #4
 800ab72:	466a      	mov	r2, sp
 800ab74:	f7ff ffc8 	bl	800ab08 <__swhatbuf_r>
 800ab78:	9f00      	ldr	r7, [sp, #0]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f7fe fec6 	bl	8009910 <_malloc_r>
 800ab84:	b948      	cbnz	r0, 800ab9a <__smakebuf_r+0x46>
 800ab86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab8a:	059a      	lsls	r2, r3, #22
 800ab8c:	d4ee      	bmi.n	800ab6c <__smakebuf_r+0x18>
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	f043 0302 	orr.w	r3, r3, #2
 800ab96:	81a3      	strh	r3, [r4, #12]
 800ab98:	e7e2      	b.n	800ab60 <__smakebuf_r+0xc>
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	6020      	str	r0, [r4, #0]
 800ab9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	9b01      	ldr	r3, [sp, #4]
 800aba6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abaa:	b15b      	cbz	r3, 800abc4 <__smakebuf_r+0x70>
 800abac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abb0:	4630      	mov	r0, r6
 800abb2:	f000 f81d 	bl	800abf0 <_isatty_r>
 800abb6:	b128      	cbz	r0, 800abc4 <__smakebuf_r+0x70>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f023 0303 	bic.w	r3, r3, #3
 800abbe:	f043 0301 	orr.w	r3, r3, #1
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	431d      	orrs	r5, r3
 800abc8:	81a5      	strh	r5, [r4, #12]
 800abca:	e7cf      	b.n	800ab6c <__smakebuf_r+0x18>

0800abcc <_fstat_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4d07      	ldr	r5, [pc, #28]	@ (800abec <_fstat_r+0x20>)
 800abd0:	2300      	movs	r3, #0
 800abd2:	4604      	mov	r4, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	4611      	mov	r1, r2
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	f7f8 fd99 	bl	8003710 <_fstat>
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	d102      	bne.n	800abe8 <_fstat_r+0x1c>
 800abe2:	682b      	ldr	r3, [r5, #0]
 800abe4:	b103      	cbz	r3, 800abe8 <_fstat_r+0x1c>
 800abe6:	6023      	str	r3, [r4, #0]
 800abe8:	bd38      	pop	{r3, r4, r5, pc}
 800abea:	bf00      	nop
 800abec:	20001604 	.word	0x20001604

0800abf0 <_isatty_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d06      	ldr	r5, [pc, #24]	@ (800ac0c <_isatty_r+0x1c>)
 800abf4:	2300      	movs	r3, #0
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	602b      	str	r3, [r5, #0]
 800abfc:	f7f8 fd98 	bl	8003730 <_isatty>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d102      	bne.n	800ac0a <_isatty_r+0x1a>
 800ac04:	682b      	ldr	r3, [r5, #0]
 800ac06:	b103      	cbz	r3, 800ac0a <_isatty_r+0x1a>
 800ac08:	6023      	str	r3, [r4, #0]
 800ac0a:	bd38      	pop	{r3, r4, r5, pc}
 800ac0c:	20001604 	.word	0x20001604

0800ac10 <_init>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	bf00      	nop
 800ac14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac16:	bc08      	pop	{r3}
 800ac18:	469e      	mov	lr, r3
 800ac1a:	4770      	bx	lr

0800ac1c <_fini>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	bf00      	nop
 800ac20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac22:	bc08      	pop	{r3}
 800ac24:	469e      	mov	lr, r3
 800ac26:	4770      	bx	lr

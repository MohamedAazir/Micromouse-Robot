
Micromouse-Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e3c  0800d260  0800d260  0000e260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801009c  0801009c  000121e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801009c  0801009c  0001109c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100a4  080100a4  000121e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100a4  080100a4  000110a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080100a8  080100a8  000110a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080100ac  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000146c  200001e4  08010290  000121e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  08010290  00012650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001725d  00000000  00000000  00012214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bd3  00000000  00000000  00029471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  0002d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000107a  00000000  00000000  0002e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b11b  00000000  00000000  0002f56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6e5  00000000  00000000  0004a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a030e  00000000  00000000  00064d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006648  00000000  00000000  001050bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0010b704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d248 	.word	0x0800d248

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800d248 	.word	0x0800d248

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <play_tone>:

/**
 * @brief Play a tone of specific frequency and duration
 */
void play_tone(uint16_t frequency, uint16_t duration_ms)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) {
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <play_tone+0x24>
        speaker_off();
 8000efa:	f000 f837 	bl	8000f6c <speaker_off>
        HAL_Delay(duration_ms);
 8000efe:	88bb      	ldrh	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f005 f815 	bl	8005f30 <HAL_Delay>
        return;
 8000f06:	e02a      	b.n	8000f5e <play_tone+0x7a>
    }

    // Calculate period for desired frequency
    // Timer freq = 84MHz / (prescaler + 1) = 84MHz / 21 = 4MHz
    // Period = Timer_freq / desired_freq = 4000000 / frequency
    uint32_t period = 4000000 / frequency;
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	4a16      	ldr	r2, [pc, #88]	@ (8000f64 <play_tone+0x80>)
 8000f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f10:	60fb      	str	r3, [r7, #12]
    if (period > 65535) period = 65535; // Clamp to 16-bit
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f18:	d302      	bcc.n	8000f20 <play_tone+0x3c>
 8000f1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f1e:	60fb      	str	r3, [r7, #12]
    if (period < 20) period = 20;       // Minimum period
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b13      	cmp	r3, #19
 8000f24:	d801      	bhi.n	8000f2a <play_tone+0x46>
 8000f26:	2314      	movs	r3, #20
 8000f28:	60fb      	str	r3, [r7, #12]

    // Update timer period
    __HAL_TIM_SET_AUTORELOAD(&htim1, period - 1);
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <play_tone+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	3a01      	subs	r2, #1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <play_tone+0x84>)
 8000f3a:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, period / 2); // 50% duty cycle
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <play_tone+0x84>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	0852      	lsrs	r2, r2, #1
 8000f44:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Start PWM
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f46:	2108      	movs	r1, #8
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <play_tone+0x84>)
 8000f4a:	f007 fa65 	bl	8008418 <HAL_TIM_PWM_Start>

    // Play for specified duration
    HAL_Delay(duration_ms);
 8000f4e:	88bb      	ldrh	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 ffed 	bl	8005f30 <HAL_Delay>

    // Stop PWM
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <play_tone+0x84>)
 8000f5a:	f007 fb0d 	bl	8008578 <HAL_TIM_PWM_Stop>
}
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	003d0900 	.word	0x003d0900
 8000f68:	200002e4 	.word	0x200002e4

08000f6c <speaker_off>:

/**
 * @brief Turn off speaker
 */
void speaker_off(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f70:	2108      	movs	r1, #8
 8000f72:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <speaker_off+0x10>)
 8000f74:	f007 fb00 	bl	8008578 <HAL_TIM_PWM_Stop>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200002e4 	.word	0x200002e4

08000f80 <play_startup_tone>:

/**
 * @brief Play startup tone sequence
 */
void play_startup_tone(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    play_tone(523, 200);  // C5
 8000f84:	21c8      	movs	r1, #200	@ 0xc8
 8000f86:	f240 200b 	movw	r0, #523	@ 0x20b
 8000f8a:	f7ff ffab 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000f8e:	2132      	movs	r1, #50	@ 0x32
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ffa7 	bl	8000ee4 <play_tone>
    play_tone(659, 200);  // E5
 8000f96:	21c8      	movs	r1, #200	@ 0xc8
 8000f98:	f240 2093 	movw	r0, #659	@ 0x293
 8000f9c:	f7ff ffa2 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fa0:	2132      	movs	r1, #50	@ 0x32
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff ff9e 	bl	8000ee4 <play_tone>
    play_tone(784, 300);  // G5
 8000fa8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000fac:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fb0:	f7ff ff98 	bl	8000ee4 <play_tone>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <play_confirmation_tone>:

/**
 * @brief Play confirmation tone
 */
void play_confirmation_tone(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    play_tone(784, 150);  // G5
 8000fbc:	2196      	movs	r1, #150	@ 0x96
 8000fbe:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000fc2:	f7ff ff8f 	bl	8000ee4 <play_tone>
    play_tone(0, 50);     // Pause
 8000fc6:	2132      	movs	r1, #50	@ 0x32
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff ff8b 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000fce:	21c8      	movs	r1, #200	@ 0xc8
 8000fd0:	f240 4017 	movw	r0, #1047	@ 0x417
 8000fd4:	f7ff ff86 	bl	8000ee4 <play_tone>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <play_success_tone>:

/**
 * @brief Play success tone sequence
 */
void play_success_tone(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    play_tone(523, 100);  // C5
 8000fe0:	2164      	movs	r1, #100	@ 0x64
 8000fe2:	f240 200b 	movw	r0, #523	@ 0x20b
 8000fe6:	f7ff ff7d 	bl	8000ee4 <play_tone>
    play_tone(659, 100);  // E5
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f240 2093 	movw	r0, #659	@ 0x293
 8000ff0:	f7ff ff78 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 8000ff4:	2164      	movs	r1, #100	@ 0x64
 8000ff6:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8000ffa:	f7ff ff73 	bl	8000ee4 <play_tone>
    play_tone(1047, 200); // C6
 8000ffe:	21c8      	movs	r1, #200	@ 0xc8
 8001000:	f240 4017 	movw	r0, #1047	@ 0x417
 8001004:	f7ff ff6e 	bl	8000ee4 <play_tone>
    play_tone(0, 100);    // Pause
 8001008:	2164      	movs	r1, #100	@ 0x64
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ff6a 	bl	8000ee4 <play_tone>
    play_tone(1047, 100); // C6
 8001010:	2164      	movs	r1, #100	@ 0x64
 8001012:	f240 4017 	movw	r0, #1047	@ 0x417
 8001016:	f7ff ff65 	bl	8000ee4 <play_tone>
    play_tone(784, 100);  // G5
 800101a:	2164      	movs	r1, #100	@ 0x64
 800101c:	f44f 7044 	mov.w	r0, #784	@ 0x310
 8001020:	f7ff ff60 	bl	8000ee4 <play_tone>
    play_tone(1047, 300); // C6
 8001024:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001028:	f240 4017 	movw	r0, #1047	@ 0x417
 800102c:	f7ff ff5a 	bl	8000ee4 <play_tone>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <play_error_tone>:

/**
 * @brief Play error tone sequence
 */
void play_error_tone(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
    for (int i = 0; i < 3; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e00a      	b.n	8001056 <play_error_tone+0x22>
        play_tone(220, 200);  // A3
 8001040:	21c8      	movs	r1, #200	@ 0xc8
 8001042:	20dc      	movs	r0, #220	@ 0xdc
 8001044:	f7ff ff4e 	bl	8000ee4 <play_tone>
        play_tone(0, 100);    // Pause
 8001048:	2164      	movs	r1, #100	@ 0x64
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff ff4a 	bl	8000ee4 <play_tone>
    for (int i = 0; i < 3; i++) {
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	ddf1      	ble.n	8001040 <play_error_tone+0xc>
    }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <calculate_optimal_path_from_explored_areas>:

/**
 * @brief Calculate optimal path using ONLY explored areas (MMS algorithm)
 */
void calculate_optimal_path_from_explored_areas(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 800106e:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🔍 CALCULATING OPTIMAL PATH FROM EXPLORED AREAS...\r\n");
 8001070:	4863      	ldr	r0, [pc, #396]	@ (8001200 <calculate_optimal_path_from_explored_areas+0x198>)
 8001072:	f000 fc4d 	bl	8001910 <send_bluetooth_message>

    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 800107c:	e01d      	b.n	80010ba <calculate_optimal_path_from_explored_areas+0x52>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 8001084:	e010      	b.n	80010a8 <calculate_optimal_path_from_explored_areas+0x40>
            maze[x][y].distance = MAX_DISTANCE;
 8001086:	495f      	ldr	r1, [pc, #380]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001088:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 800108c:	011a      	lsls	r2, r3, #4
 800108e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 8001092:	4413      	add	r3, r2
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	440b      	add	r3, r1
 8001098:	f242 720f 	movw	r2, #9999	@ 0x270f
 800109c:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 800109e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010a2:	3301      	adds	r3, #1
 80010a4:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80010a8:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	ddea      	ble.n	8001086 <calculate_optimal_path_from_explored_areas+0x1e>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80010b0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010b4:	3301      	adds	r3, #1
 80010b6:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80010ba:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	dddd      	ble.n	800107e <calculate_optimal_path_from_explored_areas+0x16>
        }
    }

    // Set goal distances to 0 ONLY if they were visited
    bool goal_found = false;
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827

    if (maze[goal_x1][goal_y1].visited) {
 80010c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b4f      	ldr	r3, [pc, #316]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	494c      	ldr	r1, [pc, #304]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	440b      	add	r3, r1
 80010da:	3304      	adds	r3, #4
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <calculate_optimal_path_from_explored_areas+0xa6>
        maze[goal_x1][goal_y1].distance = 0;
 80010e2:	4b49      	ldr	r3, [pc, #292]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b49      	ldr	r3, [pc, #292]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4946      	ldr	r1, [pc, #280]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y1);
 80010fe:	4b42      	ldr	r3, [pc, #264]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a42      	ldr	r2, [pc, #264]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4841      	ldr	r0, [pc, #260]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 800110a:	f000 fc17 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y1].visited) {
 800110e:	4b41      	ldr	r3, [pc, #260]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b3e      	ldr	r3, [pc, #248]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	493b      	ldr	r1, [pc, #236]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	4413      	add	r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <calculate_optimal_path_from_explored_areas+0xec>
        maze[goal_x2][goal_y1].distance = 0;
 8001128:	4b3a      	ldr	r3, [pc, #232]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b37      	ldr	r3, [pc, #220]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4934      	ldr	r1, [pc, #208]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	4413      	add	r3, r2
 8001136:	011b      	lsls	r3, r3, #4
 8001138:	440b      	add	r3, r1
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
        goal_found = true;
 800113e:	2301      	movs	r3, #1
 8001140:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y1);
 8001144:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a30      	ldr	r2, [pc, #192]	@ (800120c <calculate_optimal_path_from_explored_areas+0x1a4>)
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4830      	ldr	r0, [pc, #192]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001150:	f000 fbf4 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x1][goal_y2].visited) {
 8001154:	4b2c      	ldr	r3, [pc, #176]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b2f      	ldr	r3, [pc, #188]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4929      	ldr	r1, [pc, #164]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	4413      	add	r3, r2
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d015      	beq.n	800119a <calculate_optimal_path_from_explored_areas+0x132>
        maze[goal_x1][goal_y2].distance = 0;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4923      	ldr	r1, [pc, #140]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	4413      	add	r3, r2
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	440b      	add	r3, r1
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
        goal_found = true;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x1, goal_y2);
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <calculate_optimal_path_from_explored_areas+0x1a0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 8001190:	6812      	ldr	r2, [r2, #0]
 8001192:	4619      	mov	r1, r3
 8001194:	481e      	ldr	r0, [pc, #120]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 8001196:	f000 fbd1 	bl	800193c <send_bluetooth_printf>
    }

    if (maze[goal_x2][goal_y2].visited) {
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4918      	ldr	r1, [pc, #96]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	440b      	add	r3, r1
 80011ac:	3304      	adds	r3, #4
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d015      	beq.n	80011e0 <calculate_optimal_path_from_explored_areas+0x178>
        maze[goal_x2][goal_y2].distance = 0;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4911      	ldr	r1, [pc, #68]	@ (8001204 <calculate_optimal_path_from_explored_areas+0x19c>)
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	440b      	add	r3, r1
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
        goal_found = true;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 3827 	strb.w	r3, [r7, #2087]	@ 0x827
        send_bluetooth_printf("Goal cell (%d,%d) visited\r\n", goal_x2, goal_y2);
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <calculate_optimal_path_from_explored_areas+0x1ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a10      	ldr	r2, [pc, #64]	@ (8001218 <calculate_optimal_path_from_explored_areas+0x1b0>)
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <calculate_optimal_path_from_explored_areas+0x1a8>)
 80011dc:	f000 fbae 	bl	800193c <send_bluetooth_printf>
    }

    if (!goal_found) {
 80011e0:	f897 3827 	ldrb.w	r3, [r7, #2087]	@ 0x827
 80011e4:	f083 0301 	eor.w	r3, r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d01a      	beq.n	8001224 <calculate_optimal_path_from_explored_areas+0x1bc>
        send_bluetooth_message("❌ ERROR: No goal cells were visited during exploration!\r\n");
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <calculate_optimal_path_from_explored_areas+0x1b4>)
 80011f0:	f000 fb8e 	bl	8001910 <send_bluetooth_message>
        theoretical_minimum = MAX_DISTANCE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <calculate_optimal_path_from_explored_areas+0x1b8>)
 80011f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e1ba      	b.n	8001574 <calculate_optimal_path_from_explored_areas+0x50c>
 80011fe:	bf00      	nop
 8001200:	0800d260 	.word	0x0800d260
 8001204:	2000044c 	.word	0x2000044c
 8001208:	0800fcfc 	.word	0x0800fcfc
 800120c:	0800fd00 	.word	0x0800fd00
 8001210:	0800d29c 	.word	0x0800d29c
 8001214:	0800fd04 	.word	0x0800fd04
 8001218:	0800fd08 	.word	0x0800fd08
 800121c:	0800d2b8 	.word	0x0800d2b8
 8001220:	2000149c 	.word	0x2000149c
        return;
    }

    // Queue implementation for flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Add visited goal cells to queue
    if (maze[goal_x1][goal_y1].visited && maze[goal_x1][goal_y1].distance == 0) {
 8001230:	4bb8      	ldr	r3, [pc, #736]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4bb8      	ldr	r3, [pc, #736]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	49b8      	ldr	r1, [pc, #736]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	4413      	add	r3, r2
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	440b      	add	r3, r1
 8001242:	3304      	adds	r3, #4
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d022      	beq.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
 800124a:	4bb2      	ldr	r3, [pc, #712]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4bb2      	ldr	r3, [pc, #712]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	49b2      	ldr	r1, [pc, #712]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	4413      	add	r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	440b      	add	r3, r1
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <calculate_optimal_path_from_explored_areas+0x228>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8001262:	4bac      	ldr	r3, [pc, #688]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800126a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800126e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001276:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001280:	4aa5      	ldr	r2, [pc, #660]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001282:	6811      	ldr	r1, [r2, #0]
 8001284:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001288:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800128c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y1].visited && maze[goal_x2][goal_y1].distance == 0) {
 8001290:	4ba3      	ldr	r3, [pc, #652]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4ba0      	ldr	r3, [pc, #640]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	49a0      	ldr	r1, [pc, #640]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800129a:	0112      	lsls	r2, r2, #4
 800129c:	4413      	add	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	440b      	add	r3, r1
 80012a2:	3304      	adds	r3, #4
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d022      	beq.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
 80012aa:	4b9d      	ldr	r3, [pc, #628]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b9a      	ldr	r3, [pc, #616]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	499a      	ldr	r1, [pc, #616]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80012b4:	0112      	lsls	r2, r2, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	440b      	add	r3, r1
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <calculate_optimal_path_from_explored_areas+0x288>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 80012c2:	4b97      	ldr	r3, [pc, #604]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 80012c4:	6819      	ldr	r1, [r3, #0]
 80012c6:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80012ca:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80012ce:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80012d6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80012da:	1c5a      	adds	r2, r3, #1
 80012dc:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80012e0:	4a8d      	ldr	r2, [pc, #564]	@ (8001518 <calculate_optimal_path_from_explored_areas+0x4b0>)
 80012e2:	6811      	ldr	r1, [r2, #0]
 80012e4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80012e8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80012ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x1][goal_y2].visited && maze[goal_x1][goal_y2].distance == 0) {
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4988      	ldr	r1, [pc, #544]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	440b      	add	r3, r1
 8001302:	3304      	adds	r3, #4
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d022      	beq.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
 800130a:	4b82      	ldr	r3, [pc, #520]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b85      	ldr	r3, [pc, #532]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4982      	ldr	r1, [pc, #520]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	4413      	add	r3, r2
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	440b      	add	r3, r1
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d116      	bne.n	8001350 <calculate_optimal_path_from_explored_areas+0x2e8>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 8001322:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <calculate_optimal_path_from_explored_areas+0x4ac>)
 8001324:	6819      	ldr	r1, [r3, #0]
 8001326:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800132a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800132e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001336:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 8001340:	4a78      	ldr	r2, [pc, #480]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8001348:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 800134c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (maze[goal_x2][goal_y2].visited && maze[goal_x2][goal_y2].distance == 0) {
 8001350:	4b73      	ldr	r3, [pc, #460]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4970      	ldr	r1, [pc, #448]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	4413      	add	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	440b      	add	r3, r1
 8001362:	3304      	adds	r3, #4
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d022      	beq.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
 800136a:	4b6d      	ldr	r3, [pc, #436]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	496a      	ldr	r1, [pc, #424]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	4413      	add	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	440b      	add	r3, r1
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d116      	bne.n	80013b0 <calculate_optimal_path_from_explored_areas+0x348>
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 8001382:	4b67      	ldr	r3, [pc, #412]	@ (8001520 <calculate_optimal_path_from_explored_areas+0x4b8>)
 8001384:	6819      	ldr	r1, [r3, #0]
 8001386:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800138a:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 800138e:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 8001392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001396:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80013a0:	4a60      	ldr	r2, [pc, #384]	@ (8001524 <calculate_optimal_path_from_explored_areas+0x4bc>)
 80013a2:	6811      	ldr	r1, [r2, #0]
 80013a4:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013a8:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818

    // Run flood fill ONLY through explored areas
    while (queue_head < queue_tail) {
 80013b6:	e0c7      	b.n	8001548 <calculate_optimal_path_from_explored_areas+0x4e0>
        int x = queue_x[queue_head];
 80013b8:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80013bc:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80013c0:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810
        int y = queue_y[queue_head++];
 80013cc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80013d6:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80013da:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c

        for (int dir = 0; dir < 4; dir++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 80013ec:	e0a7      	b.n	800153e <calculate_optimal_path_from_explored_areas+0x4d6>
            int nx = x + dx[dir];
 80013ee:	4a4e      	ldr	r2, [pc, #312]	@ (8001528 <calculate_optimal_path_from_explored_areas+0x4c0>)
 80013f0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80013fc:	4413      	add	r3, r2
 80013fe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
            int ny = y + dy[dir];
 8001402:	4a4a      	ldr	r2, [pc, #296]	@ (800152c <calculate_optimal_path_from_explored_areas+0x4c4>)
 8001404:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8001410:	4413      	add	r3, r2
 8001412:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

            // CRITICAL: Only process VISITED cells with no walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001416:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800141a:	2b00      	cmp	r3, #0
 800141c:	f2c0 808a 	blt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 8001420:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001424:	2b0f      	cmp	r3, #15
 8001426:	f300 8085 	bgt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 800142a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800142e:	2b00      	cmp	r3, #0
 8001430:	f2c0 8080 	blt.w	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
 8001434:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001438:	2b0f      	cmp	r3, #15
 800143a:	dc7b      	bgt.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                maze[nx][ny].visited &&  // Must be visited/explored
 800143c:	4937      	ldr	r1, [pc, #220]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800143e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8001442:	011a      	lsls	r2, r3, #4
 8001444:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8001448:	4413      	add	r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	3304      	adds	r3, #4
 8001450:	781b      	ldrb	r3, [r3, #0]
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d06e      	beq.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                !maze[x][y].walls[dir]) { // No wall between cells
 8001456:	4931      	ldr	r1, [pc, #196]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001458:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800145c:	011a      	lsls	r2, r3, #4
 800145e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001462:	4413      	add	r3, r2
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	18ca      	adds	r2, r1, r3
 8001468:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 800146c:	4413      	add	r3, r2
 800146e:	3305      	adds	r3, #5
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	f083 0301 	eor.w	r3, r3, #1
 8001476:	b2db      	uxtb	r3, r3
                maze[nx][ny].visited &&  // Must be visited/explored
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>

                int new_dist = maze[x][y].distance + 1;
 800147c:	4927      	ldr	r1, [pc, #156]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 800147e:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8001482:	011a      	lsls	r2, r3, #4
 8001484:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
                if (new_dist < maze[nx][ny].distance) {
 8001496:	4921      	ldr	r1, [pc, #132]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 8001498:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 800149c:	011a      	lsls	r2, r3, #4
 800149e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014a2:	4413      	add	r3, r2
 80014a4:	011b      	lsls	r3, r3, #4
 80014a6:	440b      	add	r3, r1
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014ae:	429a      	cmp	r2, r3
 80014b0:	da40      	bge.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                    maze[nx][ny].distance = new_dist;
 80014b2:	491a      	ldr	r1, [pc, #104]	@ (800151c <calculate_optimal_path_from_explored_areas+0x4b4>)
 80014b4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80014b8:	011a      	lsls	r2, r3, #4
 80014ba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80014be:	4413      	add	r3, r2
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	f8d7 2800 	ldr.w	r2, [r7, #2048]	@ 0x800
 80014c8:	601a      	str	r2, [r3, #0]
                    if (queue_tail < 255) {
 80014ca:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80014d0:	dc1c      	bgt.n	800150c <calculate_optimal_path_from_explored_areas+0x4a4>
                        queue_x[queue_tail] = nx;
 80014d2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80014d6:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 80014da:	f8d7 281c 	ldr.w	r2, [r7, #2076]	@ 0x81c
 80014de:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        queue_y[queue_tail++] = ny;
 80014e6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	f8c7 281c 	str.w	r2, [r7, #2076]	@ 0x81c
 80014f0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80014f4:	f5a2 6203 	sub.w	r2, r2, #2096	@ 0x830
 80014f8:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 80014fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        send_bluetooth_message("Queue overflow!\r\n");
                        break;
                    }
                    updates++;
 8001500:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8001504:	3301      	adds	r3, #1
 8001506:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 800150a:	e013      	b.n	8001534 <calculate_optimal_path_from_explored_areas+0x4cc>
                        send_bluetooth_message("Queue overflow!\r\n");
 800150c:	4808      	ldr	r0, [pc, #32]	@ (8001530 <calculate_optimal_path_from_explored_areas+0x4c8>)
 800150e:	f000 f9ff 	bl	8001910 <send_bluetooth_message>
                        break;
 8001512:	e019      	b.n	8001548 <calculate_optimal_path_from_explored_areas+0x4e0>
 8001514:	0800fcfc 	.word	0x0800fcfc
 8001518:	0800fd00 	.word	0x0800fd00
 800151c:	2000044c 	.word	0x2000044c
 8001520:	0800fd04 	.word	0x0800fd04
 8001524:	0800fd08 	.word	0x0800fd08
 8001528:	0800fcdc 	.word	0x0800fcdc
 800152c:	0800fcec 	.word	0x0800fcec
 8001530:	0800d2f4 	.word	0x0800d2f4
        for (int dir = 0; dir < 4; dir++) {
 8001534:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001538:	3301      	adds	r3, #1
 800153a:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 800153e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8001542:	2b03      	cmp	r3, #3
 8001544:	f77f af53 	ble.w	80013ee <calculate_optimal_path_from_explored_areas+0x386>
    while (queue_head < queue_tail) {
 8001548:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 800154c:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 8001550:	429a      	cmp	r2, r3
 8001552:	f6ff af31 	blt.w	80013b8 <calculate_optimal_path_from_explored_areas+0x350>
            }
        }
    }

    // Get theoretical minimum from explored path
    theoretical_minimum = maze[0][0].distance;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <calculate_optimal_path_from_explored_areas+0x514>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <calculate_optimal_path_from_explored_areas+0x518>)
 800155c:	6013      	str	r3, [r2, #0]

    send_bluetooth_printf("[PATH ANALYSIS] Optimal path through explored areas: %d steps\r\n", theoretical_minimum);
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <calculate_optimal_path_from_explored_areas+0x518>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4619      	mov	r1, r3
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <calculate_optimal_path_from_explored_areas+0x51c>)
 8001566:	f000 f9e9 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("[PATH ANALYSIS] Flood fill updates: %d\r\n", updates);
 800156a:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <calculate_optimal_path_from_explored_areas+0x520>)
 8001570:	f000 f9e4 	bl	800193c <send_bluetooth_printf>
}
 8001574:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000044c 	.word	0x2000044c
 8001580:	2000149c 	.word	0x2000149c
 8001584:	0800d308 	.word	0x0800d308
 8001588:	0800d348 	.word	0x0800d348

0800158c <analyze_championship_maze_performance>:

/**
 * @brief Comprehensive championship maze performance analysis (MMS style)
 */
void analyze_championship_maze_performance(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PERFORMANCE ANALYSIS ===\r\n");
 8001592:	4872      	ldr	r0, [pc, #456]	@ (800175c <analyze_championship_maze_performance+0x1d0>)
 8001594:	f000 f9bc 	bl	8001910 <send_bluetooth_message>

    // Calculate exploration efficiency
    int cells_visited = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
    int total_cells = MAZE_SIZE * MAZE_SIZE;
 800159c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a0:	60bb      	str	r3, [r7, #8]

    for (int x = 0; x < MAZE_SIZE; x++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e019      	b.n	80015dc <analyze_championship_maze_performance+0x50>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e010      	b.n	80015d0 <analyze_championship_maze_performance+0x44>
            if (maze[x][y].visited) {
 80015ae:	496c      	ldr	r1, [pc, #432]	@ (8001760 <analyze_championship_maze_performance+0x1d4>)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	011a      	lsls	r2, r3, #4
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	440b      	add	r3, r1
 80015bc:	3304      	adds	r3, #4
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d002      	beq.n	80015ca <analyze_championship_maze_performance+0x3e>
                cells_visited++;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3301      	adds	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3301      	adds	r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	ddeb      	ble.n	80015ae <analyze_championship_maze_performance+0x22>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3301      	adds	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	dde2      	ble.n	80015a8 <analyze_championship_maze_performance+0x1c>
            }
        }
    }

    float exploration_efficiency = (float)cells_visited / total_cells * 100.0f;
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fa:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001764 <analyze_championship_maze_performance+0x1d8>
 80015fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001602:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_message("📊 EXPLORATION METRICS:\r\n");
 8001606:	4858      	ldr	r0, [pc, #352]	@ (8001768 <analyze_championship_maze_performance+0x1dc>)
 8001608:	f000 f982 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf(" Exploration Efficiency: %.1f%%\r\n", exploration_efficiency);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7fe ffa3 	bl	8000558 <__aeabi_f2d>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4855      	ldr	r0, [pc, #340]	@ (800176c <analyze_championship_maze_performance+0x1e0>)
 8001618:	f000 f990 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf(" Cells Visited: %d/%d\r\n", cells_visited, total_cells);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	6979      	ldr	r1, [r7, #20]
 8001620:	4853      	ldr	r0, [pc, #332]	@ (8001770 <analyze_championship_maze_performance+0x1e4>)
 8001622:	f000 f98b 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf(" Total Exploration Steps: %d moves\r\n", exploration_steps);
 8001626:	4b53      	ldr	r3, [pc, #332]	@ (8001774 <analyze_championship_maze_performance+0x1e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	4852      	ldr	r0, [pc, #328]	@ (8001778 <analyze_championship_maze_performance+0x1ec>)
 800162e:	f000 f985 	bl	800193c <send_bluetooth_printf>

    send_bluetooth_message("\r\n🎯 OPTIMAL PATH ANALYSIS:\r\n");
 8001632:	4852      	ldr	r0, [pc, #328]	@ (800177c <analyze_championship_maze_performance+0x1f0>)
 8001634:	f000 f96c 	bl	8001910 <send_bluetooth_message>
    if (theoretical_minimum < MAX_DISTANCE) {
 8001638:	4b51      	ldr	r3, [pc, #324]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001640:	4293      	cmp	r3, r2
 8001642:	dc0c      	bgt.n	800165e <analyze_championship_maze_performance+0xd2>
        send_bluetooth_printf(" Best Path Through Explored Areas: %d steps\r\n", theoretical_minimum);
 8001644:	4b4e      	ldr	r3, [pc, #312]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	484e      	ldr	r0, [pc, #312]	@ (8001784 <analyze_championship_maze_performance+0x1f8>)
 800164c:	f000 f976 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_message(" Path Knowledge: ✅ COMPLETE for explored regions\r\n");
 8001650:	484d      	ldr	r0, [pc, #308]	@ (8001788 <analyze_championship_maze_performance+0x1fc>)
 8001652:	f000 f95d 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" Algorithm Efficiency: ✅ CHAMPIONSHIP LEVEL\r\n");
 8001656:	484d      	ldr	r0, [pc, #308]	@ (800178c <analyze_championship_maze_performance+0x200>)
 8001658:	f000 f95a 	bl	8001910 <send_bluetooth_message>
 800165c:	e005      	b.n	800166a <analyze_championship_maze_performance+0xde>
    } else {
        send_bluetooth_message(" ❌ No path found through explored areas!\r\n");
 800165e:	484c      	ldr	r0, [pc, #304]	@ (8001790 <analyze_championship_maze_performance+0x204>)
 8001660:	f000 f956 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" Check if center was reached and start is accessible\r\n");
 8001664:	484b      	ldr	r0, [pc, #300]	@ (8001794 <analyze_championship_maze_performance+0x208>)
 8001666:	f000 f953 	bl	8001910 <send_bluetooth_message>
    }

    // Performance rating based on exploration efficiency
    send_bluetooth_message("\r\n🏆 PERFORMANCE RATING:\r\n");
 800166a:	484b      	ldr	r0, [pc, #300]	@ (8001798 <analyze_championship_maze_performance+0x20c>)
 800166c:	f000 f950 	bl	8001910 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 8001670:	edd7 7a01 	vldr	s15, [r7, #4]
 8001674:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800179c <analyze_championship_maze_performance+0x210>
 8001678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d80c      	bhi.n	800169c <analyze_championship_maze_performance+0x110>
 8001682:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f242 720e 	movw	r2, #9998	@ 0x270e
 800168a:	4293      	cmp	r3, r2
 800168c:	dc06      	bgt.n	800169c <analyze_championship_maze_performance+0x110>
        send_bluetooth_message(" ⭐⭐⭐⭐⭐ CHAMPIONSHIP LEVEL\r\n");
 800168e:	4844      	ldr	r0, [pc, #272]	@ (80017a0 <analyze_championship_maze_performance+0x214>)
 8001690:	f000 f93e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥇 Efficient exploration with optimal path knowledge!\r\n");
 8001694:	4843      	ldr	r0, [pc, #268]	@ (80017a4 <analyze_championship_maze_performance+0x218>)
 8001696:	f000 f93b 	bl	8001910 <send_bluetooth_message>
 800169a:	e025      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 65.0f) {
 800169c:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80017a8 <analyze_championship_maze_performance+0x21c>
 80016a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d806      	bhi.n	80016bc <analyze_championship_maze_performance+0x130>
        send_bluetooth_message(" ⭐⭐⭐⭐ COMPETITION READY\r\n");
 80016ae:	483f      	ldr	r0, [pc, #252]	@ (80017ac <analyze_championship_maze_performance+0x220>)
 80016b0:	f000 f92e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥈 Good exploration efficiency with complete maze knowledge\r\n");
 80016b4:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <analyze_championship_maze_performance+0x224>)
 80016b6:	f000 f92b 	bl	8001910 <send_bluetooth_message>
 80016ba:	e015      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else if (exploration_efficiency <= 80.0f) {
 80016bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016c0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80017b4 <analyze_championship_maze_performance+0x228>
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d806      	bhi.n	80016dc <analyze_championship_maze_performance+0x150>
        send_bluetooth_message(" ⭐⭐⭐ GOOD PERFORMANCE\r\n");
 80016ce:	483a      	ldr	r0, [pc, #232]	@ (80017b8 <analyze_championship_maze_performance+0x22c>)
 80016d0:	f000 f91e 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🥉 Solid exploration, room for optimization\r\n");
 80016d4:	4839      	ldr	r0, [pc, #228]	@ (80017bc <analyze_championship_maze_performance+0x230>)
 80016d6:	f000 f91b 	bl	8001910 <send_bluetooth_message>
 80016da:	e005      	b.n	80016e8 <analyze_championship_maze_performance+0x15c>
    } else {
        send_bluetooth_message(" ⭐⭐ NEEDS OPTIMIZATION\r\n");
 80016dc:	4838      	ldr	r0, [pc, #224]	@ (80017c0 <analyze_championship_maze_performance+0x234>)
 80016de:	f000 f917 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Over-exploration detected, improve search termination\r\n");
 80016e2:	4838      	ldr	r0, [pc, #224]	@ (80017c4 <analyze_championship_maze_performance+0x238>)
 80016e4:	f000 f914 	bl	8001910 <send_bluetooth_message>
    }

    // Championship recommendations
    send_bluetooth_message("\r\n💡 CHAMPIONSHIP RECOMMENDATIONS:\r\n");
 80016e8:	4837      	ldr	r0, [pc, #220]	@ (80017c8 <analyze_championship_maze_performance+0x23c>)
 80016ea:	f000 f911 	bl	8001910 <send_bluetooth_message>
    if (exploration_efficiency <= 50.0f && theoretical_minimum < MAX_DISTANCE) {
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800179c <analyze_championship_maze_performance+0x210>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d80f      	bhi.n	8001720 <analyze_championship_maze_performance+0x194>
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <analyze_championship_maze_performance+0x1f4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f242 720e 	movw	r2, #9998	@ 0x270e
 8001708:	4293      	cmp	r3, r2
 800170a:	dc09      	bgt.n	8001720 <analyze_championship_maze_performance+0x194>
        send_bluetooth_message(" ✅ Excellent exploration efficiency! Championship ready!\r\n");
 800170c:	482f      	ldr	r0, [pc, #188]	@ (80017cc <analyze_championship_maze_performance+0x240>)
 800170e:	f000 f8ff 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Optimal path knowledge complete!\r\n");
 8001712:	482f      	ldr	r0, [pc, #188]	@ (80017d0 <analyze_championship_maze_performance+0x244>)
 8001714:	f000 f8fc 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🏆 Ready for IEEE Micromouse competition!\r\n");
 8001718:	482e      	ldr	r0, [pc, #184]	@ (80017d4 <analyze_championship_maze_performance+0x248>)
 800171a:	f000 f8f9 	bl	8001910 <send_bluetooth_message>
 800171e:	e015      	b.n	800174c <analyze_championship_maze_performance+0x1c0>
    } else if (exploration_efficiency > 75.0f) {
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80017d8 <analyze_championship_maze_performance+0x24c>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	dd06      	ble.n	8001740 <analyze_championship_maze_performance+0x1b4>
        send_bluetooth_message(" 🔄 Consider smarter search termination\r\n");
 8001732:	482a      	ldr	r0, [pc, #168]	@ (80017dc <analyze_championship_maze_performance+0x250>)
 8001734:	f000 f8ec 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" 🔄 Implement early stopping when center is fully explored\r\n");
 8001738:	4829      	ldr	r0, [pc, #164]	@ (80017e0 <analyze_championship_maze_performance+0x254>)
 800173a:	f000 f8e9 	bl	8001910 <send_bluetooth_message>
 800173e:	e005      	b.n	800174c <analyze_championship_maze_performance+0x1c0>
    } else {
        send_bluetooth_message(" ✅ Good balance of exploration and efficiency\r\n");
 8001740:	4828      	ldr	r0, [pc, #160]	@ (80017e4 <analyze_championship_maze_performance+0x258>)
 8001742:	f000 f8e5 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message(" ✅ Path knowledge is complete for explored areas\r\n");
 8001746:	4828      	ldr	r0, [pc, #160]	@ (80017e8 <analyze_championship_maze_performance+0x25c>)
 8001748:	f000 f8e2 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("========================================\r\n");
 800174c:	4827      	ldr	r0, [pc, #156]	@ (80017ec <analyze_championship_maze_performance+0x260>)
 800174e:	f000 f8df 	bl	8001910 <send_bluetooth_message>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	0800d374 	.word	0x0800d374
 8001760:	2000044c 	.word	0x2000044c
 8001764:	42c80000 	.word	0x42c80000
 8001768:	0800d3a4 	.word	0x0800d3a4
 800176c:	0800d3c0 	.word	0x0800d3c0
 8001770:	0800d3e4 	.word	0x0800d3e4
 8001774:	20001498 	.word	0x20001498
 8001778:	0800d3fc 	.word	0x0800d3fc
 800177c:	0800d424 	.word	0x0800d424
 8001780:	2000149c 	.word	0x2000149c
 8001784:	0800d444 	.word	0x0800d444
 8001788:	0800d474 	.word	0x0800d474
 800178c:	0800d4ac 	.word	0x0800d4ac
 8001790:	0800d4dc 	.word	0x0800d4dc
 8001794:	0800d50c 	.word	0x0800d50c
 8001798:	0800d544 	.word	0x0800d544
 800179c:	42480000 	.word	0x42480000
 80017a0:	0800d564 	.word	0x0800d564
 80017a4:	0800d58c 	.word	0x0800d58c
 80017a8:	42820000 	.word	0x42820000
 80017ac:	0800d5c8 	.word	0x0800d5c8
 80017b0:	0800d5ec 	.word	0x0800d5ec
 80017b4:	42a00000 	.word	0x42a00000
 80017b8:	0800d630 	.word	0x0800d630
 80017bc:	0800d650 	.word	0x0800d650
 80017c0:	0800d684 	.word	0x0800d684
 80017c4:	0800d6a4 	.word	0x0800d6a4
 80017c8:	0800d6e4 	.word	0x0800d6e4
 80017cc:	0800d70c 	.word	0x0800d70c
 80017d0:	0800d74c 	.word	0x0800d74c
 80017d4:	0800d774 	.word	0x0800d774
 80017d8:	42960000 	.word	0x42960000
 80017dc:	0800d7a4 	.word	0x0800d7a4
 80017e0:	0800d7d0 	.word	0x0800d7d0
 80017e4:	0800d810 	.word	0x0800d810
 80017e8:	0800d844 	.word	0x0800d844
 80017ec:	0800d87c 	.word	0x0800d87c

080017f0 <print_championship_distance_map>:

/**
 * @brief Print detailed distance map for EXPLORED areas only (MMS style)
 */
void print_championship_distance_map(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n📍 OPTIMAL DISTANCE MAP (explored areas only):\r\n");
 80017f6:	483a      	ldr	r0, [pc, #232]	@ (80018e0 <print_championship_distance_map+0xf0>)
 80017f8:	f000 f88a 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("   ");
 80017fc:	4839      	ldr	r0, [pc, #228]	@ (80018e4 <print_championship_distance_map+0xf4>)
 80017fe:	f000 f887 	bl	8001910 <send_bluetooth_message>

    // Print column headers
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e006      	b.n	8001816 <print_championship_distance_map+0x26>
        send_bluetooth_printf("%3d", x);
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4837      	ldr	r0, [pc, #220]	@ (80018e8 <print_championship_distance_map+0xf8>)
 800180c:	f000 f896 	bl	800193c <send_bluetooth_printf>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b0f      	cmp	r3, #15
 800181a:	ddf5      	ble.n	8001808 <print_championship_distance_map+0x18>
    }
    send_bluetooth_message("\r\n");
 800181c:	4833      	ldr	r0, [pc, #204]	@ (80018ec <print_championship_distance_map+0xfc>)
 800181e:	f000 f877 	bl	8001910 <send_bluetooth_message>

    // Print maze from top to bottom (MMS style)
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 8001822:	230f      	movs	r3, #15
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	e040      	b.n	80018aa <print_championship_distance_map+0xba>
        send_bluetooth_printf("%2d ", y);
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	4831      	ldr	r0, [pc, #196]	@ (80018f0 <print_championship_distance_map+0x100>)
 800182c:	f000 f886 	bl	800193c <send_bluetooth_printf>

        for (int x = 0; x < MAZE_SIZE; x++) {
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	e030      	b.n	8001898 <print_championship_distance_map+0xa8>
            if (!maze[x][y].visited) {
 8001836:	492f      	ldr	r1, [pc, #188]	@ (80018f4 <print_championship_distance_map+0x104>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	011a      	lsls	r2, r3, #4
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	440b      	add	r3, r1
 8001844:	3304      	adds	r3, #4
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <print_championship_distance_map+0x6a>
                send_bluetooth_message(" - "); // Not explored
 8001852:	4829      	ldr	r0, [pc, #164]	@ (80018f8 <print_championship_distance_map+0x108>)
 8001854:	f000 f85c 	bl	8001910 <send_bluetooth_message>
 8001858:	e01b      	b.n	8001892 <print_championship_distance_map+0xa2>
            } else if (maze[x][y].distance == MAX_DISTANCE) {
 800185a:	4926      	ldr	r1, [pc, #152]	@ (80018f4 <print_championship_distance_map+0x104>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	011a      	lsls	r2, r3, #4
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	440b      	add	r3, r1
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800186e:	4293      	cmp	r3, r2
 8001870:	d103      	bne.n	800187a <print_championship_distance_map+0x8a>
                send_bluetooth_message(" ∞ "); // Explored but unreachable
 8001872:	4822      	ldr	r0, [pc, #136]	@ (80018fc <print_championship_distance_map+0x10c>)
 8001874:	f000 f84c 	bl	8001910 <send_bluetooth_message>
 8001878:	e00b      	b.n	8001892 <print_championship_distance_map+0xa2>
            } else {
                send_bluetooth_printf("%3d", maze[x][y].distance);
 800187a:	491e      	ldr	r1, [pc, #120]	@ (80018f4 <print_championship_distance_map+0x104>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	011a      	lsls	r2, r3, #4
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4413      	add	r3, r2
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	440b      	add	r3, r1
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4816      	ldr	r0, [pc, #88]	@ (80018e8 <print_championship_distance_map+0xf8>)
 800188e:	f000 f855 	bl	800193c <send_bluetooth_printf>
        for (int x = 0; x < MAZE_SIZE; x++) {
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3301      	adds	r3, #1
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	ddcb      	ble.n	8001836 <print_championship_distance_map+0x46>
            }
        }
        send_bluetooth_message("\r\n");
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <print_championship_distance_map+0xfc>)
 80018a0:	f000 f836 	bl	8001910 <send_bluetooth_message>
    for (int y = MAZE_SIZE - 1; y >= 0; y--) {
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dabb      	bge.n	8001828 <print_championship_distance_map+0x38>
    }

    if (theoretical_minimum < MAX_DISTANCE) {
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <print_championship_distance_map+0x110>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f242 720e 	movw	r2, #9998	@ 0x270e
 80018b8:	4293      	cmp	r3, r2
 80018ba:	dc06      	bgt.n	80018ca <print_championship_distance_map+0xda>
        send_bluetooth_printf("\r\nOptimal path through explored areas: %d steps\r\n", theoretical_minimum);
 80018bc:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <print_championship_distance_map+0x110>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4810      	ldr	r0, [pc, #64]	@ (8001904 <print_championship_distance_map+0x114>)
 80018c4:	f000 f83a 	bl	800193c <send_bluetooth_printf>
 80018c8:	e002      	b.n	80018d0 <print_championship_distance_map+0xe0>
    } else {
        send_bluetooth_message("\r\n❌ No path found through explored areas\r\n");
 80018ca:	480f      	ldr	r0, [pc, #60]	@ (8001908 <print_championship_distance_map+0x118>)
 80018cc:	f000 f820 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("Legend: - = not explored, ∞ = explored but unreachable\r\n");
 80018d0:	480e      	ldr	r0, [pc, #56]	@ (800190c <print_championship_distance_map+0x11c>)
 80018d2:	f000 f81d 	bl	8001910 <send_bluetooth_message>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	0800d8a8 	.word	0x0800d8a8
 80018e4:	0800d8e0 	.word	0x0800d8e0
 80018e8:	0800d8e4 	.word	0x0800d8e4
 80018ec:	0800d8e8 	.word	0x0800d8e8
 80018f0:	0800d8ec 	.word	0x0800d8ec
 80018f4:	2000044c 	.word	0x2000044c
 80018f8:	0800d8f4 	.word	0x0800d8f4
 80018fc:	0800d8f8 	.word	0x0800d8f8
 8001900:	2000149c 	.word	0x2000149c
 8001904:	0800d900 	.word	0x0800d900
 8001908:	0800d934 	.word	0x0800d934
 800190c:	0800d964 	.word	0x0800d964

08001910 <send_bluetooth_message>:
#include <string.h>
/**
 * @brief Send message via Bluetooth
 */
void send_bluetooth_message(const char* message)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)message, strlen(message), 1000);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7fe fcb1 	bl	8000280 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	b29a      	uxth	r2, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <send_bluetooth_message+0x28>)
 800192a:	f007 fe5f 	bl	80095ec <HAL_UART_Transmit>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000404 	.word	0x20000404

0800193c <send_bluetooth_printf>:

/**
 * @brief Send formatted message via Bluetooth
 */
void send_bluetooth_printf(const char* format, ...)
{
 800193c:	b40f      	push	{r0, r1, r2, r3}
 800193e:	b580      	push	{r7, lr}
 8001940:	b0c2      	sub	sp, #264	@ 0x108
 8001942:	af00      	add	r7, sp, #0
    char buffer[256];
    va_list args;
    va_start(args, format);
 8001944:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800194c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001950:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800195a:	f107 0008 	add.w	r0, r7, #8
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001964:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001968:	f009 fb92 	bl	800b090 <vsniprintf>
    va_end(args);

    send_bluetooth_message(buffer);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ffcd 	bl	8001910 <send_bluetooth_message>
}
 8001976:	bf00      	nop
 8001978:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001982:	b004      	add	sp, #16
 8001984:	4770      	bx	lr
	...

08001988 <send_battery_status>:

/**
 * @brief Send battery status
 */
void send_battery_status(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af02      	add	r7, sp, #8
    // Convert ADC reading to voltage (assuming 3.3V reference)
    float voltage = (sensors.battery * 3.3f) / 4096.0f;
 800198e:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <send_battery_status+0x60>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80019ec <send_battery_status+0x64>
 800199e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80019f0 <send_battery_status+0x68>
 80019a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019aa:	edc7 7a01 	vstr	s15, [r7, #4]

    send_bluetooth_printf("Battery: %.2fV (ADC:%d)", voltage, sensors.battery);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	490b      	ldr	r1, [pc, #44]	@ (80019e8 <send_battery_status+0x60>)
 80019ba:	8809      	ldrh	r1, [r1, #0]
 80019bc:	9100      	str	r1, [sp, #0]
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <send_battery_status+0x6c>)
 80019c0:	f7ff ffbc 	bl	800193c <send_bluetooth_printf>

    if (sensors.battery < BATTERY_LOW_THRESHOLD) {
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <send_battery_status+0x60>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d803      	bhi.n	80019d8 <send_battery_status+0x50>
        send_bluetooth_message(" - LOW BATTERY WARNING!\r\n");
 80019d0:	4809      	ldr	r0, [pc, #36]	@ (80019f8 <send_battery_status+0x70>)
 80019d2:	f7ff ff9d 	bl	8001910 <send_bluetooth_message>
    } else {
        send_bluetooth_message(" - OK\r\n");
    }
}
 80019d6:	e002      	b.n	80019de <send_battery_status+0x56>
        send_bluetooth_message(" - OK\r\n");
 80019d8:	4808      	ldr	r0, [pc, #32]	@ (80019fc <send_battery_status+0x74>)
 80019da:	f7ff ff99 	bl	8001910 <send_bluetooth_message>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20001460 	.word	0x20001460
 80019ec:	40533333 	.word	0x40533333
 80019f0:	45800000 	.word	0x45800000
 80019f4:	0800dfc0 	.word	0x0800dfc0
 80019f8:	0800dfd8 	.word	0x0800dfd8
 80019fc:	0800dff4 	.word	0x0800dff4

08001a00 <send_championship_stats>:

/**
 * @brief Send championship statistics
 */
void send_championship_stats(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🏆 CHAMPIONSHIP STATISTICS 🏆\r\n");
 8001a04:	480b      	ldr	r0, [pc, #44]	@ (8001a34 <send_championship_stats+0x34>)
 8001a06:	f7ff ff83 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("Algorithm: Flood Fill + Championship Heuristics\r\n");
 8001a0a:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <send_championship_stats+0x38>)
 8001a0c:	f7ff ff96 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("MCU: STM32F411CEU6 @ 84MHz\r\n");
 8001a10:	480a      	ldr	r0, [pc, #40]	@ (8001a3c <send_championship_stats+0x3c>)
 8001a12:	f7ff ff93 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("Sensors: 4x TEFT4300 IR + MPU9250 Gyro\r\n");
 8001a16:	480a      	ldr	r0, [pc, #40]	@ (8001a40 <send_championship_stats+0x40>)
 8001a18:	f7ff ff90 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("Motors: DRV8833 H-Bridge with Encoders\r\n");
 8001a1c:	4809      	ldr	r0, [pc, #36]	@ (8001a44 <send_championship_stats+0x44>)
 8001a1e:	f7ff ff8d 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("International Standard: IEEE Micromouse Compliant\r\n");
 8001a22:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <send_championship_stats+0x48>)
 8001a24:	f7ff ff8a 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_message("====================================\r\n");
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <send_championship_stats+0x4c>)
 8001a2a:	f7ff ff71 	bl	8001910 <send_bluetooth_message>
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	0800dffc 	.word	0x0800dffc
 8001a38:	0800e024 	.word	0x0800e024
 8001a3c:	0800e058 	.word	0x0800e058
 8001a40:	0800e078 	.word	0x0800e078
 8001a44:	0800e0a4 	.word	0x0800e0a4
 8001a48:	0800e0d0 	.word	0x0800e0d0
 8001a4c:	0800e104 	.word	0x0800e104

08001a50 <clampf>:

// ===== USE EXISTING VELOCITY PROFILE STRUCT =====
static VelocityProfile forward_profile = {0};

// ===== UTILITY FUNCTIONS =====
static inline float clampf(float v, float lo, float hi) {
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a5e:	ed87 1a01 	vstr	s2, [r7, #4]
    return (v < lo) ? lo : (v > hi) ? hi : v;
 8001a62:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d501      	bpl.n	8001a78 <clampf+0x28>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	e00b      	b.n	8001a90 <clampf+0x40>
 8001a78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a88:	dd01      	ble.n	8001a8e <clampf+0x3e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	e000      	b.n	8001a90 <clampf+0x40>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	ee07 3a90 	vmov	s15, r3
}
 8001a94:	eeb0 0a67 	vmov.f32	s0, s15
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <reset_heading_pid>:

/**
 * @brief Reset heading PID state
 */
static void reset_heading_pid(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
    yaw_deg = 0.0f;
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <reset_heading_pid+0x28>)
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
    yaw_err_i = 0.0f;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <reset_heading_pid+0x2c>)
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
    yaw_err_prev = 0.0f;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <reset_heading_pid+0x30>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
    send_bluetooth_message("Heading PID reset\r\n");
 8001ac0:	4805      	ldr	r0, [pc, #20]	@ (8001ad8 <reset_heading_pid+0x34>)
 8001ac2:	f7ff ff25 	bl	8001910 <send_bluetooth_message>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000204 	.word	0x20000204
 8001ad0:	20000208 	.word	0x20000208
 8001ad4:	2000020c 	.word	0x2000020c
 8001ad8:	0800e12c 	.word	0x0800e12c

08001adc <scurve_profile_init_enhanced>:

/**
 * @brief Initialize S-curve profile using existing VelocityProfile struct
 */
static void scurve_profile_init_enhanced(VelocityProfile* profile, float distance,
                                        float max_vel, float max_accel, float max_jerk) {
 8001adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ae0:	b08a      	sub	sp, #40	@ 0x28
 8001ae2:	af04      	add	r7, sp, #16
 8001ae4:	6178      	str	r0, [r7, #20]
 8001ae6:	ed87 0a04 	vstr	s0, [r7, #16]
 8001aea:	edc7 0a03 	vstr	s1, [r7, #12]
 8001aee:	ed87 1a02 	vstr	s2, [r7, #8]
 8001af2:	edc7 1a01 	vstr	s3, [r7, #4]
    // Use existing velocity_profile_init as base
    velocity_profile_init(profile, distance, max_vel);
 8001af6:	edd7 0a03 	vldr	s1, [r7, #12]
 8001afa:	ed97 0a04 	vldr	s0, [r7, #16]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f004 f8ae 	bl	8005c60 <velocity_profile_init>

    // Override acceleration if different
    profile->max_acceleration = max_accel;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	605a      	str	r2, [r3, #4]

    // Note: max_jerk not used in current simple implementation
    // Could be added to VelocityProfile struct if needed for true S-curve

    send_bluetooth_printf("S-curve profile: dist=%.0f, vel=%.0f, accel=%.0f\r\n",
 8001b0a:	6938      	ldr	r0, [r7, #16]
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	4680      	mov	r8, r0
 8001b12:	4689      	mov	r9, r1
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7fe fd1f 	bl	8000558 <__aeabi_f2d>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	460d      	mov	r5, r1
 8001b1e:	68b8      	ldr	r0, [r7, #8]
 8001b20:	f7fe fd1a 	bl	8000558 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b2c:	e9cd 4500 	strd	r4, r5, [sp]
 8001b30:	4642      	mov	r2, r8
 8001b32:	464b      	mov	r3, r9
 8001b34:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <scurve_profile_init_enhanced+0x68>)
 8001b36:	f7ff ff01 	bl	800193c <send_bluetooth_printf>
                          distance, max_vel, max_accel);
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b44:	0800e140 	.word	0x0800e140

08001b48 <scurve_velocity_to_pwm>:

/**
 * @brief Convert velocity (mm/s) to PWM (0-1000)
 */
static uint16_t scurve_velocity_to_pwm(float velocity_mm_s) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Linear mapping: 0 mm/s = 0 PWM, 600 mm/s = 800 PWM
    float pwm_float = velocity_mm_s * (800.0f / 600.0f);
 8001b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b56:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001b94 <scurve_velocity_to_pwm+0x4c>
 8001b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5e:	edc7 7a03 	vstr	s15, [r7, #12]
    uint16_t pwm = (uint16_t)clampf(pwm_float, 0, PWM_MAX);
 8001b62:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8001b98 <scurve_velocity_to_pwm+0x50>
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b6e:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8001b9c <scurve_velocity_to_pwm+0x54>
 8001b72:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b76:	f7ff ff6b 	bl	8001a50 <clampf>
 8001b7a:	eef0 7a40 	vmov.f32	s15, s0
 8001b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b82:	ee17 3a90 	vmov	r3, s15
 8001b86:	817b      	strh	r3, [r7, #10]
    return pwm;
 8001b88:	897b      	ldrh	r3, [r7, #10]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	3faaaaab 	.word	0x3faaaaab
 8001b98:	000003e8 	.word	0x000003e8
 8001b9c:	00000000 	.word	0x00000000

08001ba0 <scurve_get_optimal_parameters>:

/**
 * @brief Get optimal S-curve parameters based on distance
 */
static void scurve_get_optimal_parameters(float distance, float* max_vel,
                                         float* max_accel, float* max_jerk) {
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001baa:	60b8      	str	r0, [r7, #8]
 8001bac:	6079      	str	r1, [r7, #4]
 8001bae:	603a      	str	r2, [r7, #0]
    // Adjust parameters based on distance for optimal performance
    if (distance < 90.0f) { // Half cell
 8001bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001c6c <scurve_get_optimal_parameters+0xcc>
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d514      	bpl.n	8001bec <scurve_get_optimal_parameters+0x4c>
        *max_vel *= 0.7f;   // Reduce speed for short distances
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001c70 <scurve_get_optimal_parameters+0xd0>
 8001bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
        *max_accel *= 0.8f; // Gentler acceleration for short moves
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edd3 7a00 	vldr	s15, [r3]
 8001bdc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001c74 <scurve_get_optimal_parameters+0xd4>
 8001be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	edc3 7a00 	vstr	s15, [r3]
    }

    // Jerk is not used in current simple trapezoidal profile
    // Could be implemented for true S-curve if needed
    (void)max_jerk; // Suppress unused parameter warning
}
 8001bea:	e038      	b.n	8001c5e <scurve_get_optimal_parameters+0xbe>
    } else if (distance > 360.0f) { // Multi-cell moves
 8001bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001c78 <scurve_get_optimal_parameters+0xd8>
 8001bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dc00      	bgt.n	8001c00 <scurve_get_optimal_parameters+0x60>
}
 8001bfe:	e02e      	b.n	8001c5e <scurve_get_optimal_parameters+0xbe>
        *max_vel *= 1.2f;   // Can go faster for longer distances
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001c7c <scurve_get_optimal_parameters+0xdc>
 8001c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	edc3 7a00 	vstr	s15, [r3]
        *max_accel *= 1.1f; // More aggressive acceleration
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001c80 <scurve_get_optimal_parameters+0xe0>
 8001c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	edc3 7a00 	vstr	s15, [r3]
        if (*max_vel > 800.0f) *max_vel = 800.0f;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001c84 <scurve_get_optimal_parameters+0xe4>
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	dd02      	ble.n	8001c42 <scurve_get_optimal_parameters+0xa2>
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <scurve_get_optimal_parameters+0xe8>)
 8001c40:	601a      	str	r2, [r3, #0]
        if (*max_accel > 2500.0f) *max_accel = 2500.0f;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001c8c <scurve_get_optimal_parameters+0xec>
 8001c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	dc00      	bgt.n	8001c58 <scurve_get_optimal_parameters+0xb8>
}
 8001c56:	e002      	b.n	8001c5e <scurve_get_optimal_parameters+0xbe>
        if (*max_accel > 2500.0f) *max_accel = 2500.0f;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <scurve_get_optimal_parameters+0xf0>)
 8001c5c:	601a      	str	r2, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	42b40000 	.word	0x42b40000
 8001c70:	3f333333 	.word	0x3f333333
 8001c74:	3f4ccccd 	.word	0x3f4ccccd
 8001c78:	43b40000 	.word	0x43b40000
 8001c7c:	3f99999a 	.word	0x3f99999a
 8001c80:	3f8ccccd 	.word	0x3f8ccccd
 8001c84:	44480000 	.word	0x44480000
 8001c88:	44480000 	.word	0x44480000
 8001c8c:	451c4000 	.word	0x451c4000
 8001c90:	451c4000 	.word	0x451c4000

08001c94 <move_forward_scurve>:

/**
 * @brief Enhanced S-curve forward movement with gyro stabilization
 */
void move_forward_scurve(float distance_mm, float speed_multiplier) {
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b0a2      	sub	sp, #136	@ 0x88
 8001c98:	af04      	add	r7, sp, #16
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c9e:	edc7 0a00 	vstr	s1, [r7]
    send_bluetooth_printf("🚀 S-curve forward: %.1f mm, speed=%.2fx\r\n",
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7fe fc58 	bl	8000558 <__aeabi_f2d>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	460d      	mov	r5, r1
 8001cac:	6838      	ldr	r0, [r7, #0]
 8001cae:	f7fe fc53 	bl	8000558 <__aeabi_f2d>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cba:	4622      	mov	r2, r4
 8001cbc:	462b      	mov	r3, r5
 8001cbe:	48bf      	ldr	r0, [pc, #764]	@ (8001fbc <move_forward_scurve+0x328>)
 8001cc0:	f7ff fe3c 	bl	800193c <send_bluetooth_printf>
                          distance_mm, speed_multiplier);

    // Check bounds before moving
    int new_x = robot.x + dx[robot.direction];
 8001cc4:	4bbe      	ldr	r3, [pc, #760]	@ (8001fc0 <move_forward_scurve+0x32c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4bbd      	ldr	r3, [pc, #756]	@ (8001fc0 <move_forward_scurve+0x32c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	49bd      	ldr	r1, [pc, #756]	@ (8001fc4 <move_forward_scurve+0x330>)
 8001cce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	663b      	str	r3, [r7, #96]	@ 0x60
    int new_y = robot.y + dy[robot.direction];
 8001cd6:	4bba      	ldr	r3, [pc, #744]	@ (8001fc0 <move_forward_scurve+0x32c>)
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	4bb9      	ldr	r3, [pc, #740]	@ (8001fc0 <move_forward_scurve+0x32c>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	49ba      	ldr	r1, [pc, #744]	@ (8001fc8 <move_forward_scurve+0x334>)
 8001ce0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8001ce8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	db08      	blt.n	8001d00 <move_forward_scurve+0x6c>
 8001cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	dc05      	bgt.n	8001d00 <move_forward_scurve+0x6c>
 8001cf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	db02      	blt.n	8001d00 <move_forward_scurve+0x6c>
 8001cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cfc:	2b0f      	cmp	r3, #15
 8001cfe:	dd03      	ble.n	8001d08 <move_forward_scurve+0x74>
        send_bluetooth_message("❌ Cannot move - out of bounds!\r\n");
 8001d00:	48b2      	ldr	r0, [pc, #712]	@ (8001fcc <move_forward_scurve+0x338>)
 8001d02:	f7ff fe05 	bl	8001910 <send_bluetooth_message>
 8001d06:	e1d6      	b.n	80020b6 <move_forward_scurve+0x422>
        return;
    }

    // Build S-curve profile for this distance
    float max_vel = SCURVE_DEFAULT_MAX_VELOCITY * speed_multiplier;
 8001d08:	edd7 7a00 	vldr	s15, [r7]
 8001d0c:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8001fd0 <move_forward_scurve+0x33c>
 8001d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d14:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel = SCURVE_DEFAULT_MAX_ACCELERATION;
 8001d18:	4bae      	ldr	r3, [pc, #696]	@ (8001fd4 <move_forward_scurve+0x340>)
 8001d1a:	613b      	str	r3, [r7, #16]
    float max_jerk = SCURVE_DEFAULT_MAX_JERK;
 8001d1c:	4bae      	ldr	r3, [pc, #696]	@ (8001fd8 <move_forward_scurve+0x344>)
 8001d1e:	60fb      	str	r3, [r7, #12]
    scurve_get_optimal_parameters(distance_mm, &max_vel, &max_accel, &max_jerk);
 8001d20:	f107 020c 	add.w	r2, r7, #12
 8001d24:	f107 0110 	add.w	r1, r7, #16
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d32:	f7ff ff35 	bl	8001ba0 <scurve_get_optimal_parameters>
    scurve_profile_init_enhanced(&forward_profile, distance_mm, max_vel, max_accel, max_jerk);
 8001d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d3e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d42:	eef0 1a66 	vmov.f32	s3, s13
 8001d46:	eeb0 1a47 	vmov.f32	s2, s14
 8001d4a:	eef0 0a67 	vmov.f32	s1, s15
 8001d4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d52:	48a2      	ldr	r0, [pc, #648]	@ (8001fdc <move_forward_scurve+0x348>)
 8001d54:	f7ff fec2 	bl	8001adc <scurve_profile_init_enhanced>

    // Encoder start positions (distance authority)
    int32_t start_left = get_left_encoder_total();
 8001d58:	f002 fb26 	bl	80043a8 <get_left_encoder_total>
 8001d5c:	65b8      	str	r0, [r7, #88]	@ 0x58
    int32_t start_right = get_right_encoder_total();
 8001d5e:	f002 fb2d 	bl	80043bc <get_right_encoder_total>
 8001d62:	6578      	str	r0, [r7, #84]	@ 0x54

    // Reset heading PID state
    reset_heading_pid();
 8001d64:	f7ff fe9e 	bl	8001aa4 <reset_heading_pid>

    const float dt = (float)MOVEMENT_UPDATE_PERIOD_MS / 1000.0f;
 8001d68:	4b9d      	ldr	r3, [pc, #628]	@ (8001fe0 <move_forward_scurve+0x34c>)
 8001d6a:	653b      	str	r3, [r7, #80]	@ 0x50

    // Low-pass filter for gyro
    float gyro_z_filt = 0.0f;
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	677b      	str	r3, [r7, #116]	@ 0x74
    const float alpha = 0.3f; // Smoothing factor (0-1, higher = less smoothing)
 8001d72:	4b9c      	ldr	r3, [pc, #624]	@ (8001fe4 <move_forward_scurve+0x350>)
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t loop_count = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t max_loops = (uint32_t)(5000 / MOVEMENT_UPDATE_PERIOD_MS); // 5 second timeout
 8001d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48

    while (!velocity_profile_is_complete(&forward_profile) && loop_count < max_loops) {
 8001d80:	e173      	b.n	800206a <move_forward_scurve+0x3d6>
        loop_count++;
 8001d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d84:	3301      	adds	r3, #1
 8001d86:	673b      	str	r3, [r7, #112]	@ 0x70

        // Update velocity profile using existing function
        velocity_profile_update(&forward_profile);
 8001d88:	4894      	ldr	r0, [pc, #592]	@ (8001fdc <move_forward_scurve+0x348>)
 8001d8a:	f003 ff9b 	bl	8005cc4 <velocity_profile_update>

        // Target feedforward speed from S-curve
        float v_target = velocity_profile_get_target_velocity(&forward_profile);
 8001d8e:	4893      	ldr	r0, [pc, #588]	@ (8001fdc <move_forward_scurve+0x348>)
 8001d90:	f004 f80c 	bl	8005dac <velocity_profile_get_target_velocity>
 8001d94:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
        uint16_t pwm_base = scurve_velocity_to_pwm(v_target);
 8001d98:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8001d9c:	f7ff fed4 	bl	8001b48 <scurve_velocity_to_pwm>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

        // Check distance stop (encoders are truth for distance)
        int32_t cur_left = get_left_encoder_total();
 8001da6:	f002 faff 	bl	80043a8 <get_left_encoder_total>
 8001daa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        int32_t cur_right = get_right_encoder_total();
 8001dac:	f002 fb06 	bl	80043bc <get_right_encoder_total>
 8001db0:	63b8      	str	r0, [r7, #56]	@ 0x38
        int32_t left_tr = cur_left - start_left;
 8001db2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001db4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34
        int32_t right_tr = cur_right - start_right;
 8001dba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
        int32_t avg_tr = (left_tr + right_tr) / 2;
 8001dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc6:	4413      	add	r3, r2
 8001dc8:	0fda      	lsrs	r2, r3, #31
 8001dca:	4413      	add	r3, r2
 8001dcc:	105b      	asrs	r3, r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        float d_mm = avg_tr * ENCODER_COUNTS_TO_MM;
 8001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd2:	ee07 3a90 	vmov	s15, r3
 8001dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dda:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001fe8 <move_forward_scurve+0x354>
 8001dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        if (d_mm >= distance_mm) {
 8001de6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001dea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	db08      	blt.n	8001e0a <move_forward_scurve+0x176>
            send_bluetooth_printf("✅ Distance reached: %.1f mm\r\n", d_mm);
 8001df8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001dfa:	f7fe fbad 	bl	8000558 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	487a      	ldr	r0, [pc, #488]	@ (8001fec <move_forward_scurve+0x358>)
 8001e04:	f7ff fd9a 	bl	800193c <send_bluetooth_printf>
            break;
 8001e08:	e13d      	b.n	8002086 <move_forward_scurve+0x3f2>
        }

        // Gyro-based heading PID (if available)
        float pid_out = 0.0f;
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c

        if (mpu9250_is_initialized()) {
 8001e10:	f000 fbf8 	bl	8002604 <mpu9250_is_initialized>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80a1 	beq.w	8001f5e <move_forward_scurve+0x2ca>
            // Read and filter gyro
            mpu9250_read_gyro();
 8001e1c:	f000 fbfe 	bl	800261c <mpu9250_read_gyro>
            float gyro_z_dps = mpu9250_get_gyro_z_compensated();
 8001e20:	f000 fbc2 	bl	80025a8 <mpu9250_get_gyro_z_compensated>
 8001e24:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

            // Low-pass filter to reduce noise
            gyro_z_filt = (1.0f - alpha) * gyro_z_filt + alpha * gyro_z_dps;
 8001e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e2c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e34:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001e40:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

            // Integrate to heading in degrees
            yaw_deg += gyro_z_filt * dt;
 8001e50:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001e54:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5c:	4b64      	ldr	r3, [pc, #400]	@ (8001ff0 <move_forward_scurve+0x35c>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	4b62      	ldr	r3, [pc, #392]	@ (8001ff0 <move_forward_scurve+0x35c>)
 8001e68:	edc3 7a00 	vstr	s15, [r3]

            // PID calculation (target heading = 0°)
            float yaw_err = -yaw_deg; // Negative because we want to counter the drift
 8001e6c:	4b60      	ldr	r3, [pc, #384]	@ (8001ff0 <move_forward_scurve+0x35c>)
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	eef1 7a67 	vneg.f32	s15, s15
 8001e76:	edc7 7a08 	vstr	s15, [r7, #32]
            yaw_err_i += yaw_err * dt;
 8001e7a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e7e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e86:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff4 <move_forward_scurve+0x360>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	4b58      	ldr	r3, [pc, #352]	@ (8001ff4 <move_forward_scurve+0x360>)
 8001e92:	edc3 7a00 	vstr	s15, [r3]
            yaw_err_i = clampf(yaw_err_i, -I_CLAMP, I_CLAMP); // Anti-windup
 8001e96:	4b57      	ldr	r3, [pc, #348]	@ (8001ff4 <move_forward_scurve+0x360>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001ff8 <move_forward_scurve+0x364>
 8001ea0:	eeb1 7a47 	vneg.f32	s14, s14
 8001ea4:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8001ff8 <move_forward_scurve+0x364>
 8001ea8:	eeb0 1a66 	vmov.f32	s2, s13
 8001eac:	eef0 0a47 	vmov.f32	s1, s14
 8001eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb4:	f7ff fdcc 	bl	8001a50 <clampf>
 8001eb8:	eef0 7a40 	vmov.f32	s15, s0
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff4 <move_forward_scurve+0x360>)
 8001ebe:	edc3 7a00 	vstr	s15, [r3]

            float yaw_err_d = (yaw_err - yaw_err_prev) / dt;
 8001ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ffc <move_forward_scurve+0x368>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ecc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ed0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed8:	edc7 7a07 	vstr	s15, [r7, #28]
            yaw_err_prev = yaw_err;
 8001edc:	4a47      	ldr	r2, [pc, #284]	@ (8001ffc <move_forward_scurve+0x368>)
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	6013      	str	r3, [r2, #0]

            pid_out = (Kp_yaw * yaw_err) + (Ki_yaw * yaw_err_i) + (Kd_yaw * yaw_err_d);
 8001ee2:	4b47      	ldr	r3, [pc, #284]	@ (8002000 <move_forward_scurve+0x36c>)
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	edd7 7a08 	vldr	s15, [r7, #32]
 8001eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ef0:	4b44      	ldr	r3, [pc, #272]	@ (8002004 <move_forward_scurve+0x370>)
 8001ef2:	edd3 6a00 	vldr	s13, [r3]
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <move_forward_scurve+0x360>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f04:	4b40      	ldr	r3, [pc, #256]	@ (8002008 <move_forward_scurve+0x374>)
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f16:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

            // Debug output every 40 loops (200ms at 200Hz) to avoid spam
            if (loop_count % 40 == 0) {
 8001f1a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <move_forward_scurve+0x378>)
 8001f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f22:	095a      	lsrs	r2, r3, #5
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1aca      	subs	r2, r1, r3
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	d115      	bne.n	8001f5e <move_forward_scurve+0x2ca>
                send_bluetooth_printf("Yaw: %.1f°, PID: %.1f, PWM: %d\r\n",
 8001f32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <move_forward_scurve+0x35c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb0e 	bl	8000558 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001f42:	f7fe fb09 	bl	8000558 <__aeabi_f2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8001f4e:	9102      	str	r1, [sp, #8]
 8001f50:	e9cd 2300 	strd	r2, r3, [sp]
 8001f54:	4622      	mov	r2, r4
 8001f56:	462b      	mov	r3, r5
 8001f58:	482d      	ldr	r0, [pc, #180]	@ (8002010 <move_forward_scurve+0x37c>)
 8001f5a:	f7ff fcef 	bl	800193c <send_bluetooth_printf>
                                      yaw_deg, pid_out, pwm_base);
            }
        }

        // Apply correction to motor speeds
        float correction = pid_out;
 8001f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f60:	61bb      	str	r3, [r7, #24]
        int32_t left_pwm = (int32_t)pwm_base - (int32_t)correction;  // Left slower to correct right drift
 8001f62:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f66:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6e:	ee17 2a90 	vmov	r2, s15
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	66bb      	str	r3, [r7, #104]	@ 0x68
        int32_t right_pwm = (int32_t)pwm_base + (int32_t)correction; // Right faster to correct right drift
 8001f76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001f7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f82:	ee17 2a90 	vmov	r2, s15
 8001f86:	4413      	add	r3, r2
 8001f88:	667b      	str	r3, [r7, #100]	@ 0x64

        // Apply constraints - ensure motors keep moving
        if (v_target > 1.0f) { // Only apply minimum when actually moving
 8001f8a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001f8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	dd3b      	ble.n	8002014 <move_forward_scurve+0x380>
            if (left_pwm < PWM_MIN_MOVE) left_pwm = PWM_MIN_MOVE;
 8001f9c:	2332      	movs	r3, #50	@ 0x32
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	da01      	bge.n	8001faa <move_forward_scurve+0x316>
 8001fa6:	2332      	movs	r3, #50	@ 0x32
 8001fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (right_pwm < PWM_MIN_MOVE) right_pwm = PWM_MIN_MOVE;
 8001faa:	2332      	movs	r3, #50	@ 0x32
 8001fac:	461a      	mov	r2, r3
 8001fae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	da33      	bge.n	800201c <move_forward_scurve+0x388>
 8001fb4:	2332      	movs	r3, #50	@ 0x32
 8001fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fb8:	e030      	b.n	800201c <move_forward_scurve+0x388>
 8001fba:	bf00      	nop
 8001fbc:	0800e174 	.word	0x0800e174
 8001fc0:	2000144c 	.word	0x2000144c
 8001fc4:	0800fcdc 	.word	0x0800fcdc
 8001fc8:	0800fcec 	.word	0x0800fcec
 8001fcc:	0800e1a4 	.word	0x0800e1a4
 8001fd0:	44160000 	.word	0x44160000
 8001fd4:	44fa0000 	.word	0x44fa0000
 8001fd8:	45fa0000 	.word	0x45fa0000
 8001fdc:	20000210 	.word	0x20000210
 8001fe0:	3ba3d70a 	.word	0x3ba3d70a
 8001fe4:	3e99999a 	.word	0x3e99999a
 8001fe8:	3e3851ec 	.word	0x3e3851ec
 8001fec:	0800e1c8 	.word	0x0800e1c8
 8001ff0:	20000204 	.word	0x20000204
 8001ff4:	20000208 	.word	0x20000208
 8001ff8:	42480000 	.word	0x42480000
 8001ffc:	2000020c 	.word	0x2000020c
 8002000:	20000000 	.word	0x20000000
 8002004:	20000200 	.word	0x20000200
 8002008:	20000004 	.word	0x20000004
 800200c:	cccccccd 	.word	0xcccccccd
 8002010:	0800e1e8 	.word	0x0800e1e8
        } else {
            left_pwm = 0;   // Stop when profile says stop
 8002014:	2300      	movs	r3, #0
 8002016:	66bb      	str	r3, [r7, #104]	@ 0x68
            right_pwm = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        // Apply maximum limits
        if (left_pwm > PWM_MAX) left_pwm = PWM_MAX;
 800201c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002020:	461a      	mov	r2, r3
 8002022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002024:	4293      	cmp	r3, r2
 8002026:	dd02      	ble.n	800202e <move_forward_scurve+0x39a>
 8002028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800202c:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (right_pwm > PWM_MAX) right_pwm = PWM_MAX;
 800202e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002032:	461a      	mov	r2, r3
 8002034:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002036:	4293      	cmp	r3, r2
 8002038:	dd02      	ble.n	8002040 <move_forward_scurve+0x3ac>
 800203a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800203e:	667b      	str	r3, [r7, #100]	@ 0x64

        // Command motors using existing motor_set function
        motor_set(TIM_CHANNEL_1, MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, true, (uint16_t)left_pwm);
 8002040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002042:	b29b      	uxth	r3, r3
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2301      	movs	r3, #1
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	491c      	ldr	r1, [pc, #112]	@ (80020bc <move_forward_scurve+0x428>)
 800204c:	2000      	movs	r0, #0
 800204e:	f002 fb0b 	bl	8004668 <motor_set>
        motor_set(TIM_CHANNEL_3, MOTOR_IN4_GPIO_Port, MOTOR_IN4_Pin, true, (uint16_t)right_pwm);
 8002052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002054:	b29b      	uxth	r3, r3
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2301      	movs	r3, #1
 800205a:	2202      	movs	r2, #2
 800205c:	4918      	ldr	r1, [pc, #96]	@ (80020c0 <move_forward_scurve+0x42c>)
 800205e:	2008      	movs	r0, #8
 8002060:	f002 fb02 	bl	8004668 <motor_set>

        HAL_Delay(MOVEMENT_UPDATE_PERIOD_MS);
 8002064:	2005      	movs	r0, #5
 8002066:	f003 ff63 	bl	8005f30 <HAL_Delay>
    while (!velocity_profile_is_complete(&forward_profile) && loop_count < max_loops) {
 800206a:	4816      	ldr	r0, [pc, #88]	@ (80020c4 <move_forward_scurve+0x430>)
 800206c:	f003 fead 	bl	8005dca <velocity_profile_is_complete>
 8002070:	4603      	mov	r3, r0
 8002072:	f083 0301 	eor.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d004      	beq.n	8002086 <move_forward_scurve+0x3f2>
 800207c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800207e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002080:	429a      	cmp	r2, r3
 8002082:	f4ff ae7e 	bcc.w	8001d82 <move_forward_scurve+0xee>
    }

    // Stop and settle
    stop_motors();
 8002086:	f002 fad5 	bl	8004634 <stop_motors>
    HAL_Delay(100); // Settling time
 800208a:	2064      	movs	r0, #100	@ 0x64
 800208c:	f003 ff50 	bl	8005f30 <HAL_Delay>

    // DON'T update robot position here - let the caller handle it
    // This maintains separation of concerns

    send_bluetooth_printf("✅ S-curve complete. Final yaw: %.2f°, loops: %lu\r\n",
 8002090:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <move_forward_scurve+0x434>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fa5f 	bl	8000558 <__aeabi_f2d>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80020a0:	9100      	str	r1, [sp, #0]
 80020a2:	480a      	ldr	r0, [pc, #40]	@ (80020cc <move_forward_scurve+0x438>)
 80020a4:	f7ff fc4a 	bl	800193c <send_bluetooth_printf>
                          yaw_deg, loop_count);

    if (loop_count >= max_loops) {
 80020a8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80020aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d302      	bcc.n	80020b6 <move_forward_scurve+0x422>
        send_bluetooth_message("⚠️ Movement timeout - check encoders/motors\r\n");
 80020b0:	4807      	ldr	r0, [pc, #28]	@ (80020d0 <move_forward_scurve+0x43c>)
 80020b2:	f7ff fc2d 	bl	8001910 <send_bluetooth_message>
    }
}
 80020b6:	3778      	adds	r7, #120	@ 0x78
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdb0      	pop	{r4, r5, r7, pc}
 80020bc:	40020000 	.word	0x40020000
 80020c0:	40020400 	.word	0x40020400
 80020c4:	20000210 	.word	0x20000210
 80020c8:	20000204 	.word	0x20000204
 80020cc:	0800e20c 	.word	0x0800e20c
 80020d0:	0800e244 	.word	0x0800e244

080020d4 <championship_move_forward_enhanced>:

/**
 * @brief Enhanced championship move forward using S-curve + gyro
 */
bool championship_move_forward_enhanced(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
    update_sensors();
 80020da:	f002 fbef 	bl	80048bc <update_sensors>

    // Check for wall before moving
    if (sensors.wall_front) {
 80020de:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <championship_move_forward_enhanced+0x90>)
 80020e0:	7a9b      	ldrb	r3, [r3, #10]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <championship_move_forward_enhanced+0x1c>
        send_bluetooth_message("Front wall detected, cannot move\r\n");
 80020e6:	4820      	ldr	r0, [pc, #128]	@ (8002168 <championship_move_forward_enhanced+0x94>)
 80020e8:	f7ff fc12 	bl	8001910 <send_bluetooth_message>
        return false;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e034      	b.n	800215a <championship_move_forward_enhanced+0x86>
    }

    // Check bounds
    int new_x = robot.x + dx[robot.direction];
 80020f0:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <championship_move_forward_enhanced+0x98>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <championship_move_forward_enhanced+0x98>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	491d      	ldr	r1, [pc, #116]	@ (8002170 <championship_move_forward_enhanced+0x9c>)
 80020fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020fe:	4413      	add	r3, r2
 8002100:	607b      	str	r3, [r7, #4]
    int new_y = robot.y + dy[robot.direction];
 8002102:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <championship_move_forward_enhanced+0x98>)
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4b19      	ldr	r3, [pc, #100]	@ (800216c <championship_move_forward_enhanced+0x98>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	491a      	ldr	r1, [pc, #104]	@ (8002174 <championship_move_forward_enhanced+0xa0>)
 800210c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002110:	4413      	add	r3, r2
 8002112:	603b      	str	r3, [r7, #0]
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	db08      	blt.n	800212c <championship_move_forward_enhanced+0x58>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b0f      	cmp	r3, #15
 800211e:	dc05      	bgt.n	800212c <championship_move_forward_enhanced+0x58>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db02      	blt.n	800212c <championship_move_forward_enhanced+0x58>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	dd04      	ble.n	8002136 <championship_move_forward_enhanced+0x62>
        send_bluetooth_message("Cannot move - would go out of bounds!\r\n");
 800212c:	4812      	ldr	r0, [pc, #72]	@ (8002178 <championship_move_forward_enhanced+0xa4>)
 800212e:	f7ff fbef 	bl	8001910 <send_bluetooth_message>
        return false;
 8002132:	2300      	movs	r3, #0
 8002134:	e011      	b.n	800215a <championship_move_forward_enhanced+0x86>
    }

    // Use S-curve movement for one cell
    move_forward_scurve(CELL_SIZE_MM, 1.0f);
 8002136:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800213a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800217c <championship_move_forward_enhanced+0xa8>
 800213e:	f7ff fda9 	bl	8001c94 <move_forward_scurve>

    // Update position after successful movement
    robot.x = new_x;
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <championship_move_forward_enhanced+0x98>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8002148:	4a08      	ldr	r2, [pc, #32]	@ (800216c <championship_move_forward_enhanced+0x98>)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6053      	str	r3, [r2, #4]
    robot.exploration_steps++;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <championship_move_forward_enhanced+0x98>)
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	3301      	adds	r3, #1
 8002154:	4a05      	ldr	r2, [pc, #20]	@ (800216c <championship_move_forward_enhanced+0x98>)
 8002156:	6113      	str	r3, [r2, #16]

    return true;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20001460 	.word	0x20001460
 8002168:	0800e278 	.word	0x0800e278
 800216c:	2000144c 	.word	0x2000144c
 8002170:	0800fcdc 	.word	0x0800fcdc
 8002174:	0800fcec 	.word	0x0800fcec
 8002178:	0800e29c 	.word	0x0800e29c
 800217c:	43340000 	.word	0x43340000

08002180 <set_heading_pid_gains>:

/**
 * @brief Set heading PID gains for tuning
 */
void set_heading_pid_gains(float kp, float ki, float kd) {
 8002180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002184:	b088      	sub	sp, #32
 8002186:	af04      	add	r7, sp, #16
 8002188:	ed87 0a03 	vstr	s0, [r7, #12]
 800218c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002190:	ed87 1a01 	vstr	s2, [r7, #4]
    Kp_yaw = kp;
 8002194:	4a13      	ldr	r2, [pc, #76]	@ (80021e4 <set_heading_pid_gains+0x64>)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6013      	str	r3, [r2, #0]
    Ki_yaw = ki;
 800219a:	4a13      	ldr	r2, [pc, #76]	@ (80021e8 <set_heading_pid_gains+0x68>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	6013      	str	r3, [r2, #0]
    Kd_yaw = kd;
 80021a0:	4a12      	ldr	r2, [pc, #72]	@ (80021ec <set_heading_pid_gains+0x6c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
    reset_heading_pid(); // Reset state when gains change
 80021a6:	f7ff fc7d 	bl	8001aa4 <reset_heading_pid>
    send_bluetooth_printf("Heading PID updated: Kp=%.2f, Ki=%.3f, Kd=%.2f\r\n", kp, ki, kd);
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7fe f9d4 	bl	8000558 <__aeabi_f2d>
 80021b0:	4680      	mov	r8, r0
 80021b2:	4689      	mov	r9, r1
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f7fe f9cf 	bl	8000558 <__aeabi_f2d>
 80021ba:	4604      	mov	r4, r0
 80021bc:	460d      	mov	r5, r1
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe f9ca 	bl	8000558 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021cc:	e9cd 4500 	strd	r4, r5, [sp]
 80021d0:	4642      	mov	r2, r8
 80021d2:	464b      	mov	r3, r9
 80021d4:	4806      	ldr	r0, [pc, #24]	@ (80021f0 <set_heading_pid_gains+0x70>)
 80021d6:	f7ff fbb1 	bl	800193c <send_bluetooth_printf>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000200 	.word	0x20000200
 80021ec:	20000004 	.word	0x20000004
 80021f0:	0800e2c4 	.word	0x0800e2c4

080021f4 <test_scurve_single_cell>:
}

/**
 * @brief Quick S-curve movement test (single cell)
 */
void test_scurve_single_cell(void) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🧪 QUICK S-CURVE TEST (180mm)\r\n");
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <test_scurve_single_cell+0x38>)
 80021fa:	f7ff fb89 	bl	8001910 <send_bluetooth_message>

    if (mpu9250_is_initialized()) {
 80021fe:	f000 fa01 	bl	8002604 <mpu9250_is_initialized>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <test_scurve_single_cell+0x1c>
        send_bluetooth_message("✅ Using gyro heading stabilization\r\n");
 8002208:	4809      	ldr	r0, [pc, #36]	@ (8002230 <test_scurve_single_cell+0x3c>)
 800220a:	f7ff fb81 	bl	8001910 <send_bluetooth_message>
 800220e:	e002      	b.n	8002216 <test_scurve_single_cell+0x22>
    } else {
        send_bluetooth_message("⚠️ No gyro - basic movement only\r\n");
 8002210:	4808      	ldr	r0, [pc, #32]	@ (8002234 <test_scurve_single_cell+0x40>)
 8002212:	f7ff fb7d 	bl	8001910 <send_bluetooth_message>
    }

    move_forward_scurve(CELL_SIZE_MM, 1.0f);
 8002216:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800221a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002238 <test_scurve_single_cell+0x44>
 800221e:	f7ff fd39 	bl	8001c94 <move_forward_scurve>
    send_bluetooth_message("✅ Single cell test complete!\r\n");
 8002222:	4806      	ldr	r0, [pc, #24]	@ (800223c <test_scurve_single_cell+0x48>)
 8002224:	f7ff fb74 	bl	8001910 <send_bluetooth_message>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	0800e4c8 	.word	0x0800e4c8
 8002230:	0800e4ec 	.word	0x0800e4ec
 8002234:	0800e514 	.word	0x0800e514
 8002238:	43340000 	.word	0x43340000
 800223c:	0800e53c 	.word	0x0800e53c

08002240 <mpu9250_read_register>:

/**
 * @brief Read register from MPU9250
 */
uint8_t mpu9250_read_register(uint8_t reg)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_data = reg | 0x80; // Set read bit
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002250:	b2db      	uxtb	r3, r3
 8002252:	737b      	strb	r3, [r7, #13]
    uint8_t rx_data = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	733b      	strb	r3, [r7, #12]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8002258:	2200      	movs	r2, #0
 800225a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800225e:	4817      	ldr	r0, [pc, #92]	@ (80022bc <mpu9250_read_register+0x7c>)
 8002260:	f004 fdbc 	bl	8006ddc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status1 = HAL_SPI_Transmit(&hspi2, &tx_data, 1, 100);
 8002264:	f107 010d 	add.w	r1, r7, #13
 8002268:	2364      	movs	r3, #100	@ 0x64
 800226a:	2201      	movs	r2, #1
 800226c:	4814      	ldr	r0, [pc, #80]	@ (80022c0 <mpu9250_read_register+0x80>)
 800226e:	f005 fae2 	bl	8007836 <HAL_SPI_Transmit>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status2 = HAL_SPI_Receive(&hspi2, &rx_data, 1, 100);
 8002276:	f107 010c 	add.w	r1, r7, #12
 800227a:	2364      	movs	r3, #100	@ 0x64
 800227c:	2201      	movs	r2, #1
 800227e:	4810      	ldr	r0, [pc, #64]	@ (80022c0 <mpu9250_read_register+0x80>)
 8002280:	f005 fc1d 	bl	8007abe <HAL_SPI_Receive>
 8002284:	4603      	mov	r3, r0
 8002286:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800228e:	480b      	ldr	r0, [pc, #44]	@ (80022bc <mpu9250_read_register+0x7c>)
 8002290:	f004 fda4 	bl	8006ddc <HAL_GPIO_WritePin>

    // Check for SPI errors
    if (status1 != HAL_OK || status2 != HAL_OK) {
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d102      	bne.n	80022a0 <mpu9250_read_register+0x60>
 800229a:	7bbb      	ldrb	r3, [r7, #14]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <mpu9250_read_register+0x70>
        send_bluetooth_message("⚠️ SPI error in register read\r\n");
 80022a0:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <mpu9250_read_register+0x84>)
 80022a2:	f7ff fb35 	bl	8001910 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 80022a6:	4b08      	ldr	r3, [pc, #32]	@ (80022c8 <mpu9250_read_register+0x88>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
        return 0xFF; // Invalid register value
 80022ac:	23ff      	movs	r3, #255	@ 0xff
 80022ae:	e000      	b.n	80022b2 <mpu9250_read_register+0x72>
    }

    return rx_data;
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40020400 	.word	0x40020400
 80022c0:	2000028c 	.word	0x2000028c
 80022c4:	0800e560 	.word	0x0800e560
 80022c8:	2000022c 	.word	0x2000022c

080022cc <mpu9250_write_register>:

/**
 * @brief Write register to MPU9250
 */
void mpu9250_write_register(uint8_t reg, uint8_t data)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	460a      	mov	r2, r1
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	4613      	mov	r3, r2
 80022da:	71bb      	strb	r3, [r7, #6]
    uint8_t tx_data[2] = {reg, data};
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	733b      	strb	r3, [r7, #12]
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022ea:	4811      	ldr	r0, [pc, #68]	@ (8002330 <mpu9250_write_register+0x64>)
 80022ec:	f004 fd76 	bl	8006ddc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef status = HAL_SPI_Transmit(&hspi2, tx_data, 2, 100);
 80022f0:	f107 010c 	add.w	r1, r7, #12
 80022f4:	2364      	movs	r3, #100	@ 0x64
 80022f6:	2202      	movs	r2, #2
 80022f8:	480e      	ldr	r0, [pc, #56]	@ (8002334 <mpu9250_write_register+0x68>)
 80022fa:	f005 fa9c 	bl	8007836 <HAL_SPI_Transmit>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002308:	4809      	ldr	r0, [pc, #36]	@ (8002330 <mpu9250_write_register+0x64>)
 800230a:	f004 fd67 	bl	8006ddc <HAL_GPIO_WritePin>

    if (status != HAL_OK) {
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <mpu9250_write_register+0x54>
        send_bluetooth_message("⚠️ SPI error in register write\r\n");
 8002314:	4808      	ldr	r0, [pc, #32]	@ (8002338 <mpu9250_write_register+0x6c>)
 8002316:	f7ff fafb 	bl	8001910 <send_bluetooth_message>
        mpu9250_initialized = false; // Mark gyro as failed
 800231a:	4b08      	ldr	r3, [pc, #32]	@ (800233c <mpu9250_write_register+0x70>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(1); // Small delay for register write
 8002320:	2001      	movs	r0, #1
 8002322:	f003 fe05 	bl	8005f30 <HAL_Delay>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40020400 	.word	0x40020400
 8002334:	2000028c 	.word	0x2000028c
 8002338:	0800e584 	.word	0x0800e584
 800233c:	2000022c 	.word	0x2000022c

08002340 <mpu9250_init>:


/**
 * @brief Corrected MPU9250 initialization with optimal settings
 */
bool mpu9250_init(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
    send_bluetooth_message("Initializing MPU9250 (robust sequence)...\r\n");
 8002346:	483c      	ldr	r0, [pc, #240]	@ (8002438 <mpu9250_init+0xf8>)
 8002348:	f7ff fae2 	bl	8001910 <send_bluetooth_message>
    HAL_Delay(200);
 800234c:	20c8      	movs	r0, #200	@ 0xc8
 800234e:	f003 fdef 	bl	8005f30 <HAL_Delay>

    // Reset device
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x80); // reset
 8002352:	2180      	movs	r1, #128	@ 0x80
 8002354:	206b      	movs	r0, #107	@ 0x6b
 8002356:	f7ff ffb9 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(250); // wait long after reset
 800235a:	20fa      	movs	r0, #250	@ 0xfa
 800235c:	f003 fde8 	bl	8005f30 <HAL_Delay>

    // Wake device (clear sleep)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x00);
 8002360:	2100      	movs	r1, #0
 8002362:	206b      	movs	r0, #107	@ 0x6b
 8002364:	f7ff ffb2 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(50);
 8002368:	2032      	movs	r0, #50	@ 0x32
 800236a:	f003 fde1 	bl	8005f30 <HAL_Delay>

    // Select PLL with X axis as clock source (more stable)
    mpu9250_write_register(MPU9250_PWR_MGMT_1, 0x01);
 800236e:	2101      	movs	r1, #1
 8002370:	206b      	movs	r0, #107	@ 0x6b
 8002372:	f7ff ffab 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(50);
 8002376:	2032      	movs	r0, #50	@ 0x32
 8002378:	f003 fdda 	bl	8005f30 <HAL_Delay>

    // Enable all axes
    mpu9250_write_register(MPU9250_PWR_MGMT_2, 0x00);
 800237c:	2100      	movs	r1, #0
 800237e:	206c      	movs	r0, #108	@ 0x6c
 8002380:	f7ff ffa4 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(10);
 8002384:	200a      	movs	r0, #10
 8002386:	f003 fdd3 	bl	8005f30 <HAL_Delay>

    // for disable I2C:
     uint8_t user_ctrl = mpu9250_read_register(MPU9250_USER_CTRL);
 800238a:	206a      	movs	r0, #106	@ 0x6a
 800238c:	f7ff ff58 	bl	8002240 <mpu9250_read_register>
 8002390:	4603      	mov	r3, r0
 8002392:	71fb      	strb	r3, [r7, #7]
     user_ctrl |= 0x10; // I2C_IF_DIS
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f043 0310 	orr.w	r3, r3, #16
 800239a:	71fb      	strb	r3, [r7, #7]
     mpu9250_write_register(MPU9250_USER_CTRL, user_ctrl);
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4619      	mov	r1, r3
 80023a0:	206a      	movs	r0, #106	@ 0x6a
 80023a2:	f7ff ff93 	bl	80022cc <mpu9250_write_register>
     HAL_Delay(10);
 80023a6:	200a      	movs	r0, #10
 80023a8:	f003 fdc2 	bl	8005f30 <HAL_Delay>

    // Sample rate: 1000/(1+div). For 200Hz use 4.
    mpu9250_write_register(MPU9250_SMPLRT_DIV, 0x04);
 80023ac:	2104      	movs	r1, #4
 80023ae:	2019      	movs	r0, #25
 80023b0:	f7ff ff8c 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(10);
 80023b4:	200a      	movs	r0, #10
 80023b6:	f003 fdbb 	bl	8005f30 <HAL_Delay>

    // CONFIG: DLPF (use value matching desired BW)
    mpu9250_write_register(MPU9250_CONFIG, 0x02);
 80023ba:	2102      	movs	r1, #2
 80023bc:	201a      	movs	r0, #26
 80023be:	f7ff ff85 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(10);
 80023c2:	200a      	movs	r0, #10
 80023c4:	f003 fdb4 	bl	8005f30 <HAL_Delay>

    // Gyro / Accel full scale
    mpu9250_write_register(MPU9250_GYRO_CONFIG, 0x08);  // ±500 dps
 80023c8:	2108      	movs	r1, #8
 80023ca:	201b      	movs	r0, #27
 80023cc:	f7ff ff7e 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(10);
 80023d0:	200a      	movs	r0, #10
 80023d2:	f003 fdad 	bl	8005f30 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG, 0x08); // ±4g
 80023d6:	2108      	movs	r1, #8
 80023d8:	201c      	movs	r0, #28
 80023da:	f7ff ff77 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(10);
 80023de:	200a      	movs	r0, #10
 80023e0:	f003 fda6 	bl	8005f30 <HAL_Delay>
    mpu9250_write_register(MPU9250_ACCEL_CONFIG_2, 0x02); // accel DLPF
 80023e4:	2102      	movs	r1, #2
 80023e6:	201d      	movs	r0, #29
 80023e8:	f7ff ff70 	bl	80022cc <mpu9250_write_register>
    HAL_Delay(10);
 80023ec:	200a      	movs	r0, #10
 80023ee:	f003 fd9f 	bl	8005f30 <HAL_Delay>

    uint8_t who = mpu9250_read_register(MPU9250_WHO_AM_I);
 80023f2:	2075      	movs	r0, #117	@ 0x75
 80023f4:	f7ff ff24 	bl	8002240 <mpu9250_read_register>
 80023f8:	4603      	mov	r3, r0
 80023fa:	71bb      	strb	r3, [r7, #6]
    send_bluetooth_printf("WHO_AM_I = 0x%02X\r\n", who);
 80023fc:	79bb      	ldrb	r3, [r7, #6]
 80023fe:	4619      	mov	r1, r3
 8002400:	480e      	ldr	r0, [pc, #56]	@ (800243c <mpu9250_init+0xfc>)
 8002402:	f7ff fa9b 	bl	800193c <send_bluetooth_printf>
    if (who != MPU9250_WHO_AM_I_RESPONSE) {
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	2b70      	cmp	r3, #112	@ 0x70
 800240a:	d009      	beq.n	8002420 <mpu9250_init+0xe0>
        send_bluetooth_printf("MPU9250 detection failed! Got 0x%02X\r\n", who);
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	4619      	mov	r1, r3
 8002410:	480b      	ldr	r0, [pc, #44]	@ (8002440 <mpu9250_init+0x100>)
 8002412:	f7ff fa93 	bl	800193c <send_bluetooth_printf>
        mpu9250_initialized=false;
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <mpu9250_init+0x104>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]
        return false;
 800241c:	2300      	movs	r3, #0
 800241e:	e006      	b.n	800242e <mpu9250_init+0xee>
    }

    send_bluetooth_message("MPU9250 init OK\r\n");
 8002420:	4809      	ldr	r0, [pc, #36]	@ (8002448 <mpu9250_init+0x108>)
 8002422:	f7ff fa75 	bl	8001910 <send_bluetooth_message>
    mpu9250_initialized=true;
 8002426:	4b07      	ldr	r3, [pc, #28]	@ (8002444 <mpu9250_init+0x104>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
    return true;
 800242c:	2301      	movs	r3, #1
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	0800e5ac 	.word	0x0800e5ac
 800243c:	0800e5d8 	.word	0x0800e5d8
 8002440:	0800e5ec 	.word	0x0800e5ec
 8002444:	2000022c 	.word	0x2000022c
 8002448:	0800e614 	.word	0x0800e614

0800244c <mpu9250_calibrate_bias>:


/**
 * @brief Calibrate gyro bias (call during startup when robot is stationary)
 */
void mpu9250_calibrate_bias(void) {
 800244c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002450:	b088      	sub	sp, #32
 8002452:	af04      	add	r7, sp, #16
    if (!mpu9250_initialized) {
 8002454:	4b4e      	ldr	r3, [pc, #312]	@ (8002590 <mpu9250_calibrate_bias+0x144>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <mpu9250_calibrate_bias+0x1e>
        send_bluetooth_message("Cannot calibrate - gyro not initialized\r\n");
 8002462:	484c      	ldr	r0, [pc, #304]	@ (8002594 <mpu9250_calibrate_bias+0x148>)
 8002464:	f7ff fa54 	bl	8001910 <send_bluetooth_message>
        return;
 8002468:	e08e      	b.n	8002588 <mpu9250_calibrate_bias+0x13c>
    }

    send_bluetooth_message("Calibrating gyro bias... Keep robot stationary!\r\n");
 800246a:	484b      	ldr	r0, [pc, #300]	@ (8002598 <mpu9250_calibrate_bias+0x14c>)
 800246c:	f7ff fa50 	bl	8001910 <send_bluetooth_message>

    enhanced_gyro.calibration_samples = 1000;
 8002470:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 8002472:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002476:	611a      	str	r2, [r3, #16]
    float sum_x = 0, sum_y = 0, sum_z = 0;
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 800248a:	2300      	movs	r3, #0
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	e02e      	b.n	80024ee <mpu9250_calibrate_bias+0xa2>
        mpu9250_read_gyro();
 8002490:	f000 f8c4 	bl	800261c <mpu9250_read_gyro>
        sum_x += gyro.gyro_x;
 8002494:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <mpu9250_calibrate_bias+0x154>)
 8002496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	edc7 7a03 	vstr	s15, [r7, #12]
        sum_y += gyro.gyro_y;
 80024ae:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <mpu9250_calibrate_bias+0x154>)
 80024b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80024c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c4:	edc7 7a02 	vstr	s15, [r7, #8]
        sum_z += gyro.gyro_z;
 80024c8:	4b35      	ldr	r3, [pc, #212]	@ (80025a0 <mpu9250_calibrate_bias+0x154>)
 80024ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024ce:	ee07 3a90 	vmov	s15, r3
 80024d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024de:	edc7 7a01 	vstr	s15, [r7, #4]
        HAL_Delay(3); // 333Hz sampling for stable bias
 80024e2:	2003      	movs	r0, #3
 80024e4:	f003 fd24 	bl	8005f30 <HAL_Delay>
    for(int i = 0; i < enhanced_gyro.calibration_samples; i++) {
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8cb      	bhi.n	8002490 <mpu9250_calibrate_bias+0x44>
    }

    enhanced_gyro.gyro_bias_x = sum_x / enhanced_gyro.calibration_samples;
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	ee07 3a90 	vmov	s15, r3
 8002500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002504:	edd7 6a03 	vldr	s13, [r7, #12]
 8002508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800250c:	4b23      	ldr	r3, [pc, #140]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 800250e:	edc3 7a00 	vstr	s15, [r3]
    enhanced_gyro.gyro_bias_y = sum_y / enhanced_gyro.calibration_samples;
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800251e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002526:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 8002528:	edc3 7a01 	vstr	s15, [r3, #4]
    enhanced_gyro.gyro_bias_z = sum_z / enhanced_gyro.calibration_samples;
 800252c:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002538:	edd7 6a01 	vldr	s13, [r7, #4]
 800253c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002540:	4b16      	ldr	r3, [pc, #88]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 8002542:	edc3 7a02 	vstr	s15, [r3, #8]
    enhanced_gyro.calibrated = true;
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 8002548:	2201      	movs	r2, #1
 800254a:	731a      	strb	r2, [r3, #12]

    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 800254e:	681b      	ldr	r3, [r3, #0]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f801 	bl	8000558 <__aeabi_f2d>
 8002556:	4680      	mov	r8, r0
 8002558:	4689      	mov	r9, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 800255c:	685b      	ldr	r3, [r3, #4]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fffa 	bl	8000558 <__aeabi_f2d>
 8002564:	4604      	mov	r4, r0
 8002566:	460d      	mov	r5, r1
                         enhanced_gyro.gyro_bias_x, enhanced_gyro.gyro_bias_y, enhanced_gyro.gyro_bias_z);
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <mpu9250_calibrate_bias+0x150>)
 800256a:	689b      	ldr	r3, [r3, #8]
    send_bluetooth_printf("Gyro bias calibrated: X:%.1f Y:%.1f Z:%.1f\r\n",
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fff3 	bl	8000558 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800257a:	e9cd 4500 	strd	r4, r5, [sp]
 800257e:	4642      	mov	r2, r8
 8002580:	464b      	mov	r3, r9
 8002582:	4808      	ldr	r0, [pc, #32]	@ (80025a4 <mpu9250_calibrate_bias+0x158>)
 8002584:	f7ff f9da 	bl	800193c <send_bluetooth_printf>
}
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002590:	2000022c 	.word	0x2000022c
 8002594:	0800e628 	.word	0x0800e628
 8002598:	0800e654 	.word	0x0800e654
 800259c:	20000230 	.word	0x20000230
 80025a0:	20001470 	.word	0x20001470
 80025a4:	0800e688 	.word	0x0800e688

080025a8 <mpu9250_get_gyro_z_compensated>:

/**
 * @brief Get bias-compensated gyro Z value in degrees per second
 */
float mpu9250_get_gyro_z_compensated(void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
    if (!enhanced_gyro.calibrated) {
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <mpu9250_get_gyro_z_compensated+0x50>)
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <mpu9250_get_gyro_z_compensated+0x1e>
        return mpu9250_get_gyro_z_dps(); // Fall back to uncompensated
 80025bc:	f000 f89e 	bl	80026fc <mpu9250_get_gyro_z_dps>
 80025c0:	eef0 7a40 	vmov.f32	s15, s0
 80025c4:	e013      	b.n	80025ee <mpu9250_get_gyro_z_compensated+0x46>
    }

    float raw_z_dps = (float)(gyro.gyro_z - enhanced_gyro.gyro_bias_z) / 65.5f;
 80025c6:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <mpu9250_get_gyro_z_compensated+0x54>)
 80025c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025cc:	ee07 3a90 	vmov	s15, r3
 80025d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <mpu9250_get_gyro_z_compensated+0x50>)
 80025d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80025da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025de:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8002600 <mpu9250_get_gyro_z_compensated+0x58>
 80025e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e6:	edc7 7a01 	vstr	s15, [r7, #4]
    return raw_z_dps;
 80025ea:	edd7 7a01 	vldr	s15, [r7, #4]
}
 80025ee:	eeb0 0a67 	vmov.f32	s0, s15
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000230 	.word	0x20000230
 80025fc:	20001470 	.word	0x20001470
 8002600:	42830000 	.word	0x42830000

08002604 <mpu9250_is_initialized>:

/**
 * @brief Check if MPU9250 is initialized - NEW FUNCTION
 */
bool mpu9250_is_initialized(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
    return mpu9250_initialized;
 8002608:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <mpu9250_is_initialized+0x14>)
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000022c 	.word	0x2000022c

0800261c <mpu9250_read_gyro>:

/**
 * @brief Read raw gyroscope data - FIXED with error checking
 */
void mpu9250_read_gyro(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
    if (!mpu9250_initialized) {
 8002622:	4b2f      	ldr	r3, [pc, #188]	@ (80026e0 <mpu9250_read_gyro+0xc4>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	f083 0301 	eor.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <mpu9250_read_gyro+0x1c>
        send_bluetooth_message("⚠️ MPU9250 not initialized - cannot read gyro\r\n");
 8002630:	482c      	ldr	r0, [pc, #176]	@ (80026e4 <mpu9250_read_gyro+0xc8>)
 8002632:	f7ff f96d 	bl	8001910 <send_bluetooth_message>
        return;
 8002636:	e050      	b.n	80026da <mpu9250_read_gyro+0xbe>
    }

    uint8_t raw_data[6];
    uint8_t reg = MPU9250_GYRO_XOUT_H | 0x80; // Set read bit
 8002638:	23c3      	movs	r3, #195	@ 0xc3
 800263a:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002642:	4829      	ldr	r0, [pc, #164]	@ (80026e8 <mpu9250_read_gyro+0xcc>)
 8002644:	f004 fbca 	bl	8006ddc <HAL_GPIO_WritePin>

    // FIXED: Check SPI transmission status
    HAL_StatusTypeDef spi_status = HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8002648:	1df9      	adds	r1, r7, #7
 800264a:	2364      	movs	r3, #100	@ 0x64
 800264c:	2201      	movs	r2, #1
 800264e:	4827      	ldr	r0, [pc, #156]	@ (80026ec <mpu9250_read_gyro+0xd0>)
 8002650:	f005 f8f1 	bl	8007836 <HAL_SPI_Transmit>
 8002654:	4603      	mov	r3, r0
 8002656:	73fb      	strb	r3, [r7, #15]
    if (spi_status != HAL_OK) {
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <mpu9250_read_gyro+0x56>
        HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 800265e:	2201      	movs	r2, #1
 8002660:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002664:	4820      	ldr	r0, [pc, #128]	@ (80026e8 <mpu9250_read_gyro+0xcc>)
 8002666:	f004 fbb9 	bl	8006ddc <HAL_GPIO_WritePin>
        send_bluetooth_message("SPI transmit error in gyro read\r\n");
 800266a:	4821      	ldr	r0, [pc, #132]	@ (80026f0 <mpu9250_read_gyro+0xd4>)
 800266c:	f7ff f950 	bl	8001910 <send_bluetooth_message>
        return;
 8002670:	e033      	b.n	80026da <mpu9250_read_gyro+0xbe>
    }

    spi_status = HAL_SPI_Receive(&hspi2, raw_data, 6, 100);
 8002672:	f107 0108 	add.w	r1, r7, #8
 8002676:	2364      	movs	r3, #100	@ 0x64
 8002678:	2206      	movs	r2, #6
 800267a:	481c      	ldr	r0, [pc, #112]	@ (80026ec <mpu9250_read_gyro+0xd0>)
 800267c:	f005 fa1f 	bl	8007abe <HAL_SPI_Receive>
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800268a:	4817      	ldr	r0, [pc, #92]	@ (80026e8 <mpu9250_read_gyro+0xcc>)
 800268c:	f004 fba6 	bl	8006ddc <HAL_GPIO_WritePin>

    if (spi_status != HAL_OK) {
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <mpu9250_read_gyro+0x82>
        send_bluetooth_message("SPI receive error in gyro read\r\n");
 8002696:	4817      	ldr	r0, [pc, #92]	@ (80026f4 <mpu9250_read_gyro+0xd8>)
 8002698:	f7ff f93a 	bl	8001910 <send_bluetooth_message>
        return;
 800269c:	e01d      	b.n	80026da <mpu9250_read_gyro+0xbe>
    }

    // Convert to signed 16-bit values
    gyro.gyro_x = (int16_t)((raw_data[0] << 8) | raw_data[1]);
 800269e:	7a3b      	ldrb	r3, [r7, #8]
 80026a0:	b21b      	sxth	r3, r3
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	b21a      	sxth	r2, r3
 80026a6:	7a7b      	ldrb	r3, [r7, #9]
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	4313      	orrs	r3, r2
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <mpu9250_read_gyro+0xdc>)
 80026b0:	801a      	strh	r2, [r3, #0]
    gyro.gyro_y = (int16_t)((raw_data[2] << 8) | raw_data[3]);
 80026b2:	7abb      	ldrb	r3, [r7, #10]
 80026b4:	b21b      	sxth	r3, r3
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	b21a      	sxth	r2, r3
 80026ba:	7afb      	ldrb	r3, [r7, #11]
 80026bc:	b21b      	sxth	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b21a      	sxth	r2, r3
 80026c2:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <mpu9250_read_gyro+0xdc>)
 80026c4:	805a      	strh	r2, [r3, #2]
    gyro.gyro_z = (int16_t)((raw_data[4] << 8) | raw_data[5]);
 80026c6:	7b3b      	ldrb	r3, [r7, #12]
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	7b7b      	ldrb	r3, [r7, #13]
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <mpu9250_read_gyro+0xdc>)
 80026d8:	809a      	strh	r2, [r3, #4]
}
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000022c 	.word	0x2000022c
 80026e4:	0800e6b8 	.word	0x0800e6b8
 80026e8:	40020400 	.word	0x40020400
 80026ec:	2000028c 	.word	0x2000028c
 80026f0:	0800e6ec 	.word	0x0800e6ec
 80026f4:	0800e710 	.word	0x0800e710
 80026f8:	20001470 	.word	0x20001470

080026fc <mpu9250_get_gyro_z_dps>:

/**
 * @brief Get gyro Z-axis in degrees per second
 */
float mpu9250_get_gyro_z_dps(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
    // ±500 dps range, 16-bit resolution
    // Sensitivity: 65.5 LSB/(dps)
    return (float)gyro.gyro_z / 65.5f;
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <mpu9250_get_gyro_z_dps+0x2c>)
 8002702:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800272c <mpu9250_get_gyro_z_dps+0x30>
 8002712:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002716:	eef0 7a66 	vmov.f32	s15, s13
}
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20001470 	.word	0x20001470
 800272c:	42830000 	.word	0x42830000

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002734:	f003 fb8a 	bl	8005e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002738:	f000 f992 	bl	8002a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800273c:	f000 fcc2 	bl	80030c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002740:	f000 f9f6 	bl	8002b30 <MX_ADC1_Init>
  MX_SPI2_Init();
 8002744:	f000 fa7e 	bl	8002c44 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002748:	f000 fab2 	bl	8002cb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800274c:	f000 fb50 	bl	8002df0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002750:	f000 fc3a 	bl	8002fc8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8002754:	f000 fc8c 	bl	8003070 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8002758:	f000 fb9e 	bl	8002e98 <MX_TIM3_Init>


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // PA6  (MOTOR_IN1)
 800275c:	2100      	movs	r1, #0
 800275e:	48a4      	ldr	r0, [pc, #656]	@ (80029f0 <main+0x2c0>)
 8002760:	f005 fe5a 	bl	8008418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // PA7  (MOTOR_IN2)
 8002764:	2104      	movs	r1, #4
 8002766:	48a2      	ldr	r0, [pc, #648]	@ (80029f0 <main+0x2c0>)
 8002768:	f005 fe56 	bl	8008418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);   // PB0  (MOTOR_IN3)
 800276c:	2108      	movs	r1, #8
 800276e:	48a0      	ldr	r0, [pc, #640]	@ (80029f0 <main+0x2c0>)
 8002770:	f005 fe52 	bl	8008418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);   // PB1  (MOTOR_IN4)
 8002774:	210c      	movs	r1, #12
 8002776:	489e      	ldr	r0, [pc, #632]	@ (80029f0 <main+0x2c0>)
 8002778:	f005 fe4e 	bl	8008418 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_SET); // wake DRV8833
 800277c:	2201      	movs	r2, #1
 800277e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002782:	489c      	ldr	r0, [pc, #624]	@ (80029f4 <main+0x2c4>)
 8002784:	f004 fb2a 	bl	8006ddc <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 2 */
  /* Initialize micromouse system */
  championship_micromouse_init();
 8002788:	f000 fdce 	bl	8003328 <championship_micromouse_init>
  verify_adc_gpio_configuration();
 800278c:	f000 fd7c 	bl	8003288 <verify_adc_gpio_configuration>
  adc_system_diagnostics();
 8002790:	f002 f9a2 	bl	8004ad8 <adc_system_diagnostics>

  // Check gyro initialization
  if (mpu9250_is_initialized()) {
 8002794:	f7ff ff36 	bl	8002604 <mpu9250_is_initialized>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d017      	beq.n	80027ce <main+0x9e>
	  send_bluetooth_message("Calibrating gyro for heading control...\r\n");
 800279e:	4896      	ldr	r0, [pc, #600]	@ (80029f8 <main+0x2c8>)
 80027a0:	f7ff f8b6 	bl	8001910 <send_bluetooth_message>
	  send_bluetooth_message("⚠️ KEEP ROBOT STATIONARY during calibration!\r\n");
 80027a4:	4895      	ldr	r0, [pc, #596]	@ (80029fc <main+0x2cc>)
 80027a6:	f7ff f8b3 	bl	8001910 <send_bluetooth_message>
	  HAL_Delay(2000);  // Give user time to see message
 80027aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80027ae:	f003 fbbf 	bl	8005f30 <HAL_Delay>
	  mpu9250_calibrate_bias();
 80027b2:	f7ff fe4b 	bl	800244c <mpu9250_calibrate_bias>
	  send_bluetooth_message("✅ Gyro calibration complete\r\n");
 80027b6:	4892      	ldr	r0, [pc, #584]	@ (8002a00 <main+0x2d0>)
 80027b8:	f7ff f8aa 	bl	8001910 <send_bluetooth_message>

	  // Set initial conservative PID gains
	  set_heading_pid_gains(1.0f, 0.0f, 0.1f);
 80027bc:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8002a04 <main+0x2d4>
 80027c0:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8002a08 <main+0x2d8>
 80027c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80027c8:	f7ff fcda 	bl	8002180 <set_heading_pid_gains>
 80027cc:	e002      	b.n	80027d4 <main+0xa4>
  } else {
	  send_bluetooth_message("⚠️ Gyro not available - using basic movement\r\n");
 80027ce:	488f      	ldr	r0, [pc, #572]	@ (8002a0c <main+0x2dc>)
 80027d0:	f7ff f89e 	bl	8001910 <send_bluetooth_message>
//  test_encoder_manual();
//  test_encoder_rotation();
//  left_test = get_left_encoder_total();
//  right_test = get_right_encoder_total();

  if (get_left_encoder_total() == 0 && get_right_encoder_total() == 0) {
 80027d4:	f001 fde8 	bl	80043a8 <get_left_encoder_total>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d107      	bne.n	80027ee <main+0xbe>
 80027de:	f001 fded 	bl	80043bc <get_right_encoder_total>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <main+0xbe>
      send_bluetooth_message("⚠️ WARNING: Encoders may not be working\r\n");
 80027e8:	4889      	ldr	r0, [pc, #548]	@ (8002a10 <main+0x2e0>)
 80027ea:	f7ff f891 	bl	8001910 <send_bluetooth_message>




  /* Play startup tone */
  play_startup_tone();
 80027ee:	f7fe fbc7 	bl	8000f80 <play_startup_tone>

  /* Status LEDs test */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_SET);
 80027f2:	2201      	movs	r2, #1
 80027f4:	2110      	movs	r1, #16
 80027f6:	4887      	ldr	r0, [pc, #540]	@ (8002a14 <main+0x2e4>)
 80027f8:	f004 faf0 	bl	8006ddc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_SET);
 80027fc:	2201      	movs	r2, #1
 80027fe:	2120      	movs	r1, #32
 8002800:	4884      	ldr	r0, [pc, #528]	@ (8002a14 <main+0x2e4>)
 8002802:	f004 faeb 	bl	8006ddc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8002806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800280a:	f003 fb91 	bl	8005f30 <HAL_Delay>
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 800280e:	2200      	movs	r2, #0
 8002810:	2110      	movs	r1, #16
 8002812:	4880      	ldr	r0, [pc, #512]	@ (8002a14 <main+0x2e4>)
 8002814:	f004 fae2 	bl	8006ddc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	2120      	movs	r1, #32
 800281c:	487d      	ldr	r0, [pc, #500]	@ (8002a14 <main+0x2e4>)
 800281e:	f004 fadd 	bl	8006ddc <HAL_GPIO_WritePin>

  /* Send startup message via Bluetooth */
  send_bluetooth_message("Championship Micromouse Ready!\r\n");
 8002822:	487d      	ldr	r0, [pc, #500]	@ (8002a18 <main+0x2e8>)
 8002824:	f7ff f874 	bl	8001910 <send_bluetooth_message>

  send_championship_stats();
 8002828:	f7ff f8ea 	bl	8001a00 <send_championship_stats>

  /* Wait for start button */
  send_bluetooth_message("Press button to start exploration...\r\n");
 800282c:	487b      	ldr	r0, [pc, #492]	@ (8002a1c <main+0x2ec>)
 800282e:	f7ff f86f 	bl	8001910 <send_bluetooth_message>
  while (!start_flag) {
 8002832:	e006      	b.n	8002842 <main+0x112>
      HAL_Delay(10);
 8002834:	200a      	movs	r0, #10
 8002836:	f003 fb7b 	bl	8005f30 <HAL_Delay>
      // Blink LED to show ready state
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 800283a:	2110      	movs	r1, #16
 800283c:	4875      	ldr	r0, [pc, #468]	@ (8002a14 <main+0x2e4>)
 800283e:	f004 fae6 	bl	8006e0e <HAL_GPIO_TogglePin>
  while (!start_flag) {
 8002842:	4b77      	ldr	r3, [pc, #476]	@ (8002a20 <main+0x2f0>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f3      	beq.n	8002834 <main+0x104>
  }

  /* Reset LEDs */
  HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	2110      	movs	r1, #16
 8002850:	4870      	ldr	r0, [pc, #448]	@ (8002a14 <main+0x2e4>)
 8002852:	f004 fac3 	bl	8006ddc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	2120      	movs	r1, #32
 800285a:	486e      	ldr	r0, [pc, #440]	@ (8002a14 <main+0x2e4>)
 800285c:	f004 fabe 	bl	8006ddc <HAL_GPIO_WritePin>

  /* Start exploration after delay */
  play_confirmation_tone();
 8002860:	f7fe fbaa 	bl	8000fb8 <play_confirmation_tone>
  HAL_Delay(2000);
 8002864:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002868:	f003 fb62 	bl	8005f30 <HAL_Delay>

  /* Main micromouse algorithm */
  send_bluetooth_message("Starting maze exploration...\r\n");
 800286c:	486d      	ldr	r0, [pc, #436]	@ (8002a24 <main+0x2f4>)
 800286e:	f7ff f84f 	bl	8001910 <send_bluetooth_message>

  /* Initialize movement system */
  start_encoders();
 8002872:	f001 fdad 	bl	80043d0 <start_encoders>
  calibrate_sensors();
 8002876:	f002 f9e5 	bl	8004c44 <calibrate_sensors>

  /* Execute championship exploration */
  championship_exploration_with_analysis();
 800287a:	f001 fad7 	bl	8003e2c <championship_exploration_with_analysis>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  update_sensors();
 800287e:	f002 f81d 	bl	80048bc <update_sensors>

	  if (button_pressed == 1) {
 8002882:	4b69      	ldr	r3, [pc, #420]	@ (8002a28 <main+0x2f8>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d114      	bne.n	80028b6 <main+0x186>
	          button_pressed = 0;
 800288c:	4b66      	ldr	r3, [pc, #408]	@ (8002a28 <main+0x2f8>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
	          // Left button - start speed run or new exploration
	          if (robot.center_reached && robot.returned_to_start) {
 8002892:	4b66      	ldr	r3, [pc, #408]	@ (8002a2c <main+0x2fc>)
 8002894:	7b1b      	ldrb	r3, [r3, #12]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <main+0x178>
 800289a:	4b64      	ldr	r3, [pc, #400]	@ (8002a2c <main+0x2fc>)
 800289c:	7b5b      	ldrb	r3, [r3, #13]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <main+0x178>
	              championship_speed_run();
 80028a2:	f001 fc41 	bl	8004128 <championship_speed_run>
 80028a6:	e006      	b.n	80028b6 <main+0x186>
	          } else {
	              send_bluetooth_message("Starting enhanced championship exploration...\r\n");
 80028a8:	4861      	ldr	r0, [pc, #388]	@ (8002a30 <main+0x300>)
 80028aa:	f7ff f831 	bl	8001910 <send_bluetooth_message>
	              reset_championship_micromouse();
 80028ae:	f001 fc0f 	bl	80040d0 <reset_championship_micromouse>
	              championship_exploration_with_analysis();
 80028b2:	f001 fabb 	bl	8003e2c <championship_exploration_with_analysis>
	          }
	      }

	  if (button_pressed == 2) {
 80028b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a28 <main+0x2f8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <main+0x1f2>
		  button_pressed = 0;
 80028c0:	4b59      	ldr	r3, [pc, #356]	@ (8002a28 <main+0x2f8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]

		  // Right button - test S-curve movement or reset system
		  static bool test_mode = false;

		  if (!robot.center_reached && !robot.returned_to_start) {
 80028c6:	4b59      	ldr	r3, [pc, #356]	@ (8002a2c <main+0x2fc>)
 80028c8:	7b1b      	ldrb	r3, [r3, #12]
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d021      	beq.n	8002918 <main+0x1e8>
 80028d4:	4b55      	ldr	r3, [pc, #340]	@ (8002a2c <main+0x2fc>)
 80028d6:	7b5b      	ldrb	r3, [r3, #13]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01a      	beq.n	8002918 <main+0x1e8>
			  // If not exploring, allow testing
			  test_mode = !test_mode;
 80028e2:	4b54      	ldr	r3, [pc, #336]	@ (8002a34 <main+0x304>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf14      	ite	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	2300      	moveq	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a34 <main+0x304>)
 80028fe:	701a      	strb	r2, [r3, #0]

			  if (test_mode) {
 8002900:	4b4c      	ldr	r3, [pc, #304]	@ (8002a34 <main+0x304>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <main+0x1e0>
				  send_bluetooth_message("🧪 S-curve test mode - press LEFT for single cell test\r\n");
 8002908:	484b      	ldr	r0, [pc, #300]	@ (8002a38 <main+0x308>)
 800290a:	f7ff f801 	bl	8001910 <send_bluetooth_message>
			  if (test_mode) {
 800290e:	e008      	b.n	8002922 <main+0x1f2>
			  } else {
				  send_bluetooth_message("Test mode OFF\r\n");
 8002910:	484a      	ldr	r0, [pc, #296]	@ (8002a3c <main+0x30c>)
 8002912:	f7fe fffd 	bl	8001910 <send_bluetooth_message>
			  if (test_mode) {
 8002916:	e004      	b.n	8002922 <main+0x1f2>
			  }
		  } else {
			  // Normal reset functionality
			  reset_championship_micromouse();
 8002918:	f001 fbda 	bl	80040d0 <reset_championship_micromouse>
			  send_bluetooth_message("Championship system reset\r\n");
 800291c:	4848      	ldr	r0, [pc, #288]	@ (8002a40 <main+0x310>)
 800291e:	f7fe fff7 	bl	8001910 <send_bluetooth_message>
		  }
	  }

	  // Add this for quick single-cell S-curve test
	  static uint32_t last_button_check = 0;
	  if (HAL_GetTick() - last_button_check > 100) { // Debounce
 8002922:	f003 faf9 	bl	8005f18 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	4b46      	ldr	r3, [pc, #280]	@ (8002a44 <main+0x314>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	@ 0x64
 8002930:	d937      	bls.n	80029a2 <main+0x272>
		  last_button_check = HAL_GetTick();
 8002932:	f003 faf1 	bl	8005f18 <HAL_GetTick>
 8002936:	4603      	mov	r3, r0
 8002938:	4a42      	ldr	r2, [pc, #264]	@ (8002a44 <main+0x314>)
 800293a:	6013      	str	r3, [r2, #0]

		  // Quick test: Both buttons pressed simultaneously for single cell test
		  if (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin) == GPIO_PIN_RESET &&
 800293c:	2102      	movs	r1, #2
 800293e:	4842      	ldr	r0, [pc, #264]	@ (8002a48 <main+0x318>)
 8002940:	f004 fa34 	bl	8006dac <HAL_GPIO_ReadPin>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d126      	bne.n	8002998 <main+0x268>
			  HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin) == GPIO_PIN_RESET) {
 800294a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800294e:	4831      	ldr	r0, [pc, #196]	@ (8002a14 <main+0x2e4>)
 8002950:	f004 fa2c 	bl	8006dac <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
		  if (HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin) == GPIO_PIN_RESET &&
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11e      	bne.n	8002998 <main+0x268>
			  static uint32_t both_pressed_time = 0;
			  if (both_pressed_time == 0) {
 800295a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a4c <main+0x31c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <main+0x23e>
				  both_pressed_time = HAL_GetTick();
 8002962:	f003 fad9 	bl	8005f18 <HAL_GetTick>
 8002966:	4603      	mov	r3, r0
 8002968:	4a38      	ldr	r2, [pc, #224]	@ (8002a4c <main+0x31c>)
 800296a:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin) == GPIO_PIN_RESET) {
 800296c:	e018      	b.n	80029a0 <main+0x270>
			  } else if (HAL_GetTick() - both_pressed_time > 1000) { // 1 second hold
 800296e:	f003 fad3 	bl	8005f18 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <main+0x31c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800297e:	d90f      	bls.n	80029a0 <main+0x270>
				  send_bluetooth_message("🧪 BOTH BUTTONS: Single cell S-curve test\r\n");
 8002980:	4833      	ldr	r0, [pc, #204]	@ (8002a50 <main+0x320>)
 8002982:	f7fe ffc5 	bl	8001910 <send_bluetooth_message>
				  test_scurve_single_cell();
 8002986:	f7ff fc35 	bl	80021f4 <test_scurve_single_cell>
				  both_pressed_time = 0;
 800298a:	4b30      	ldr	r3, [pc, #192]	@ (8002a4c <main+0x31c>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

				  // Reset button states
				  button_pressed = 0;
 8002990:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <main+0x2f8>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin) == GPIO_PIN_RESET) {
 8002996:	e003      	b.n	80029a0 <main+0x270>
			  }
		  } else {
			  // Reset if buttons released
			  static uint32_t both_pressed_time = 0;
			  both_pressed_time = 0;
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <main+0x324>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	e000      	b.n	80029a2 <main+0x272>
			  HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin) == GPIO_PIN_RESET) {
 80029a0:	bf00      	nop



	  // Send periodic status updates
	  static uint32_t last_status = 0;
	  if (HAL_GetTick() - last_status > 5000) {
 80029a2:	f003 fab9 	bl	8005f18 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a58 <main+0x328>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d906      	bls.n	80029c4 <main+0x294>
		  send_battery_status();
 80029b6:	f7fe ffe7 	bl	8001988 <send_battery_status>
		  last_status = HAL_GetTick();
 80029ba:	f003 faad 	bl	8005f18 <HAL_GetTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a25      	ldr	r2, [pc, #148]	@ (8002a58 <main+0x328>)
 80029c2:	6013      	str	r3, [r2, #0]
	  }

	  // Blink LED to show system is alive
	  static uint32_t last_blink = 0;
	  if (HAL_GetTick() - last_blink > 2000) {
 80029c4:	f003 faa8 	bl	8005f18 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b24      	ldr	r3, [pc, #144]	@ (8002a5c <main+0x32c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80029d4:	d908      	bls.n	80029e8 <main+0x2b8>
		  HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 80029d6:	2110      	movs	r1, #16
 80029d8:	480e      	ldr	r0, [pc, #56]	@ (8002a14 <main+0x2e4>)
 80029da:	f004 fa18 	bl	8006e0e <HAL_GPIO_TogglePin>
		  last_blink = HAL_GetTick();
 80029de:	f003 fa9b 	bl	8005f18 <HAL_GetTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <main+0x32c>)
 80029e6:	6013      	str	r3, [r2, #0]
	  }

	  HAL_Delay(100);
 80029e8:	2064      	movs	r0, #100	@ 0x64
 80029ea:	f003 faa1 	bl	8005f30 <HAL_Delay>
  {
 80029ee:	e746      	b.n	800287e <main+0x14e>
 80029f0:	20000374 	.word	0x20000374
 80029f4:	40020800 	.word	0x40020800
 80029f8:	0800e86c 	.word	0x0800e86c
 80029fc:	0800e898 	.word	0x0800e898
 8002a00:	0800e8cc 	.word	0x0800e8cc
 8002a04:	3dcccccd 	.word	0x3dcccccd
 8002a08:	00000000 	.word	0x00000000
 8002a0c:	0800e8ec 	.word	0x0800e8ec
 8002a10:	0800e920 	.word	0x0800e920
 8002a14:	40020400 	.word	0x40020400
 8002a18:	0800e950 	.word	0x0800e950
 8002a1c:	0800e974 	.word	0x0800e974
 8002a20:	20001495 	.word	0x20001495
 8002a24:	0800e99c 	.word	0x0800e99c
 8002a28:	20001494 	.word	0x20001494
 8002a2c:	2000144c 	.word	0x2000144c
 8002a30:	0800e9bc 	.word	0x0800e9bc
 8002a34:	200014a0 	.word	0x200014a0
 8002a38:	0800e9ec 	.word	0x0800e9ec
 8002a3c:	0800ea28 	.word	0x0800ea28
 8002a40:	0800ea38 	.word	0x0800ea38
 8002a44:	200014a4 	.word	0x200014a4
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	200014a8 	.word	0x200014a8
 8002a50:	0800ea54 	.word	0x0800ea54
 8002a54:	200014ac 	.word	0x200014ac
 8002a58:	200014b0 	.word	0x200014b0
 8002a5c:	200014b4 	.word	0x200014b4

08002a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b094      	sub	sp, #80	@ 0x50
 8002a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a66:	f107 0320 	add.w	r3, r7, #32
 8002a6a:	2230      	movs	r2, #48	@ 0x30
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f008 fb1c 	bl	800b0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <SystemClock_Config+0xc8>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a26      	ldr	r2, [pc, #152]	@ (8002b28 <SystemClock_Config+0xc8>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a94:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <SystemClock_Config+0xc8>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	4b21      	ldr	r3, [pc, #132]	@ (8002b2c <SystemClock_Config+0xcc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a20      	ldr	r2, [pc, #128]	@ (8002b2c <SystemClock_Config+0xcc>)
 8002aaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b2c <SystemClock_Config+0xcc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002ab8:	607b      	str	r3, [r7, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002abc:	2302      	movs	r3, #2
 8002abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002acc:	2300      	movs	r3, #0
 8002ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ad4:	23a8      	movs	r3, #168	@ 0xa8
 8002ad6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002adc:	2304      	movs	r3, #4
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 f9c5 	bl	8006e74 <HAL_RCC_OscConfig>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002af0:	f000 fc06 	bl	8003300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af4:	230f      	movs	r3, #15
 8002af6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af8:	2302      	movs	r3, #2
 8002afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fc27 	bl	8007364 <HAL_RCC_ClockConfig>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002b1c:	f000 fbf0 	bl	8003300 <Error_Handler>
  }
}
 8002b20:	bf00      	nop
 8002b22:	3750      	adds	r7, #80	@ 0x50
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000

08002b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b36:	463b      	mov	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b42:	4b3d      	ldr	r3, [pc, #244]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b44:	4a3d      	ldr	r2, [pc, #244]	@ (8002c3c <MX_ADC1_Init+0x10c>)
 8002b46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002b48:	4b3b      	ldr	r3, [pc, #236]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b50:	4b39      	ldr	r3, [pc, #228]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b56:	4b38      	ldr	r3, [pc, #224]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b5c:	4b36      	ldr	r3, [pc, #216]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b62:	4b35      	ldr	r3, [pc, #212]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b6a:	4b33      	ldr	r3, [pc, #204]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b70:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b72:	4a33      	ldr	r2, [pc, #204]	@ (8002c40 <MX_ADC1_Init+0x110>)
 8002b74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b76:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b7e:	2205      	movs	r2, #5
 8002b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b82:	4b2d      	ldr	r3, [pc, #180]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b90:	4829      	ldr	r0, [pc, #164]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002b92:	f003 f9f1 	bl	8005f78 <HAL_ADC_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002b9c:	f000 fbb0 	bl	8003300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bac:	463b      	mov	r3, r7
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4821      	ldr	r0, [pc, #132]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002bb2:	f003 fba5 	bl	8006300 <HAL_ADC_ConfigChannel>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002bbc:	f000 fba0 	bl	8003300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc8:	463b      	mov	r3, r7
 8002bca:	4619      	mov	r1, r3
 8002bcc:	481a      	ldr	r0, [pc, #104]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002bce:	f003 fb97 	bl	8006300 <HAL_ADC_ConfigChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002bd8:	f000 fb92 	bl	8003300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002be0:	2303      	movs	r3, #3
 8002be2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002be4:	463b      	mov	r3, r7
 8002be6:	4619      	mov	r1, r3
 8002be8:	4813      	ldr	r0, [pc, #76]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002bea:	f003 fb89 	bl	8006300 <HAL_ADC_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002bf4:	f000 fb84 	bl	8003300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c00:	463b      	mov	r3, r7
 8002c02:	4619      	mov	r1, r3
 8002c04:	480c      	ldr	r0, [pc, #48]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002c06:	f003 fb7b 	bl	8006300 <HAL_ADC_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002c10:	f000 fb76 	bl	8003300 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002c14:	2305      	movs	r3, #5
 8002c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002c18:	2305      	movs	r3, #5
 8002c1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	@ (8002c38 <MX_ADC1_Init+0x108>)
 8002c22:	f003 fb6d 	bl	8006300 <HAL_ADC_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002c2c:	f000 fb68 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	20000244 	.word	0x20000244
 8002c3c:	40012000 	.word	0x40012000
 8002c40:	0f000001 	.word	0x0f000001

08002c44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c48:	4b17      	ldr	r3, [pc, #92]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c4a:	4a18      	ldr	r2, [pc, #96]	@ (8002cac <MX_SPI2_Init+0x68>)
 8002c4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002c76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c78:	2230      	movs	r2, #48	@ 0x30
 8002c7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c82:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c88:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c90:	220a      	movs	r2, #10
 8002c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c94:	4804      	ldr	r0, [pc, #16]	@ (8002ca8 <MX_SPI2_Init+0x64>)
 8002c96:	f004 fd45 	bl	8007724 <HAL_SPI_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002ca0:	f000 fb2e 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	2000028c 	.word	0x2000028c
 8002cac:	40003800 	.word	0x40003800

08002cb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b096      	sub	sp, #88	@ 0x58
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cb6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	609a      	str	r2, [r3, #8]
 8002cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
 8002cdc:	611a      	str	r2, [r3, #16]
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f008 f9df 	bl	800b0ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cee:	4b3e      	ldr	r3, [pc, #248]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8002dec <MX_TIM1_Init+0x13c>)
 8002cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8002cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002cf6:	2214      	movs	r2, #20
 8002cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8002d00:	4b39      	ldr	r3, [pc, #228]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d02:	22c8      	movs	r2, #200	@ 0xc8
 8002d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d06:	4b38      	ldr	r3, [pc, #224]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d0c:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d12:	4b35      	ldr	r3, [pc, #212]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d14:	2280      	movs	r2, #128	@ 0x80
 8002d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d18:	4833      	ldr	r0, [pc, #204]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d1a:	f005 fad5 	bl	80082c8 <HAL_TIM_Base_Init>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002d24:	f000 faec 	bl	8003300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d32:	4619      	mov	r1, r3
 8002d34:	482c      	ldr	r0, [pc, #176]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d36:	f005 ff69 	bl	8008c0c <HAL_TIM_ConfigClockSource>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002d40:	f000 fade 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d44:	4828      	ldr	r0, [pc, #160]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d46:	f005 fb0e 	bl	8008366 <HAL_TIM_PWM_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002d50:	f000 fad6 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d60:	4619      	mov	r1, r3
 8002d62:	4821      	ldr	r0, [pc, #132]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d64:	f006 fb1e 	bl	80093a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002d6e:	f000 fac7 	bl	8003300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d72:	2360      	movs	r3, #96	@ 0x60
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8002d76:	2364      	movs	r3, #100	@ 0x64
 8002d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d92:	2208      	movs	r2, #8
 8002d94:	4619      	mov	r1, r3
 8002d96:	4814      	ldr	r0, [pc, #80]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002d98:	f005 fe76 	bl	8008a88 <HAL_TIM_PWM_ConfigChannel>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002da2:	f000 faad 	bl	8003300 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4807      	ldr	r0, [pc, #28]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002dca:	f006 fb59 	bl	8009480 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002dd4:	f000 fa94 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002dd8:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <MX_TIM1_Init+0x138>)
 8002dda:	f002 fd23 	bl	8005824 <HAL_TIM_MspPostInit>

}
 8002dde:	bf00      	nop
 8002de0:	3758      	adds	r7, #88	@ 0x58
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200002e4 	.word	0x200002e4
 8002dec:	40010000 	.word	0x40010000

08002df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	@ 0x30
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002df6:	f107 030c 	add.w	r3, r7, #12
 8002dfa:	2224      	movs	r2, #36	@ 0x24
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f008 f954 	bl	800b0ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e0c:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e30:	2280      	movs	r2, #128	@ 0x80
 8002e32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e34:	2303      	movs	r3, #3
 8002e36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	480d      	ldr	r0, [pc, #52]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e60:	f005 fbee 	bl	8008640 <HAL_TIM_Encoder_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002e6a:	f000 fa49 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4806      	ldr	r0, [pc, #24]	@ (8002e94 <MX_TIM2_Init+0xa4>)
 8002e7c:	f006 fa92 	bl	80093a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002e86:	f000 fa3b 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e8a:	bf00      	nop
 8002e8c:	3730      	adds	r7, #48	@ 0x30
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000032c 	.word	0x2000032c

08002e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08e      	sub	sp, #56	@ 0x38
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eac:	f107 0320 	add.w	r3, r7, #32
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	60da      	str	r2, [r3, #12]
 8002ec2:	611a      	str	r2, [r3, #16]
 8002ec4:	615a      	str	r2, [r3, #20]
 8002ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002eca:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc4 <MX_TIM3_Init+0x12c>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 8002ece:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002ed0:	2204      	movs	r2, #4
 8002ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 838;
 8002eda:	4b39      	ldr	r3, [pc, #228]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002edc:	f240 3246 	movw	r2, #838	@ 0x346
 8002ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ee8:	4b35      	ldr	r3, [pc, #212]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eee:	4834      	ldr	r0, [pc, #208]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002ef0:	f005 f9ea 	bl	80082c8 <HAL_TIM_Base_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002efa:	f000 fa01 	bl	8003300 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002efe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f08:	4619      	mov	r1, r3
 8002f0a:	482d      	ldr	r0, [pc, #180]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002f0c:	f005 fe7e 	bl	8008c0c <HAL_TIM_ConfigClockSource>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002f16:	f000 f9f3 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f1a:	4829      	ldr	r0, [pc, #164]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002f1c:	f005 fa23 	bl	8008366 <HAL_TIM_PWM_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f26:	f000 f9eb 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f32:	f107 0320 	add.w	r3, r7, #32
 8002f36:	4619      	mov	r1, r3
 8002f38:	4821      	ldr	r0, [pc, #132]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002f3a:	f006 fa33 	bl	80093a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f44:	f000 f9dc 	bl	8003300 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f48:	2360      	movs	r3, #96	@ 0x60
 8002f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4818      	ldr	r0, [pc, #96]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002f60:	f005 fd92 	bl	8008a88 <HAL_TIM_PWM_ConfigChannel>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f6a:	f000 f9c9 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	2204      	movs	r2, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4812      	ldr	r0, [pc, #72]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002f76:	f005 fd87 	bl	8008a88 <HAL_TIM_PWM_ConfigChannel>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002f80:	f000 f9be 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	2208      	movs	r2, #8
 8002f88:	4619      	mov	r1, r3
 8002f8a:	480d      	ldr	r0, [pc, #52]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002f8c:	f005 fd7c 	bl	8008a88 <HAL_TIM_PWM_ConfigChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002f96:	f000 f9b3 	bl	8003300 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f9a:	1d3b      	adds	r3, r7, #4
 8002f9c:	220c      	movs	r2, #12
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4807      	ldr	r0, [pc, #28]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002fa2:	f005 fd71 	bl	8008a88 <HAL_TIM_PWM_ConfigChannel>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8002fac:	f000 f9a8 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002fb0:	4803      	ldr	r0, [pc, #12]	@ (8002fc0 <MX_TIM3_Init+0x128>)
 8002fb2:	f002 fc37 	bl	8005824 <HAL_TIM_MspPostInit>

}
 8002fb6:	bf00      	nop
 8002fb8:	3738      	adds	r7, #56	@ 0x38
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000374 	.word	0x20000374
 8002fc4:	40000400 	.word	0x40000400

08002fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	@ 0x30
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	2224      	movs	r2, #36	@ 0x24
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f008 f868 	bl	800b0ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002fe4:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8002fe6:	4a21      	ldr	r2, [pc, #132]	@ (800306c <MX_TIM4_Init+0xa4>)
 8002fe8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002fea:	4b1f      	ldr	r3, [pc, #124]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8002ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ffc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8003000:	2200      	movs	r2, #0
 8003002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003004:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8003006:	2280      	movs	r2, #128	@ 0x80
 8003008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800300a:	2303      	movs	r3, #3
 800300c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003012:	2301      	movs	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003016:	2300      	movs	r3, #0
 8003018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003022:	2301      	movs	r3, #1
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003026:	2300      	movs	r3, #0
 8003028:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	4619      	mov	r1, r3
 8003034:	480c      	ldr	r0, [pc, #48]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8003036:	f005 fb03 	bl	8008640 <HAL_TIM_Encoder_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003040:	f000 f95e 	bl	8003300 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	4619      	mov	r1, r3
 8003050:	4805      	ldr	r0, [pc, #20]	@ (8003068 <MX_TIM4_Init+0xa0>)
 8003052:	f006 f9a7 	bl	80093a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800305c:	f000 f950 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003060:	bf00      	nop
 8003062:	3730      	adds	r7, #48	@ 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	200003bc 	.word	0x200003bc
 800306c:	40000800 	.word	0x40000800

08003070 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003074:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 8003076:	4a12      	ldr	r2, [pc, #72]	@ (80030c0 <MX_USART6_UART_Init+0x50>)
 8003078:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 800307c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003080:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003088:	4b0c      	ldr	r3, [pc, #48]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 8003096:	220c      	movs	r2, #12
 8003098:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800309a:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 800309c:	2200      	movs	r2, #0
 800309e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <MX_USART6_UART_Init+0x4c>)
 80030a8:	f006 fa50 	bl	800954c <HAL_UART_Init>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80030b2:	f000 f925 	bl	8003300 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000404 	.word	0x20000404
 80030c0:	40011400 	.word	0x40011400

080030c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	609a      	str	r2, [r3, #8]
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b4b      	ldr	r3, [pc, #300]	@ (800320c <MX_GPIO_Init+0x148>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a4a      	ldr	r2, [pc, #296]	@ (800320c <MX_GPIO_Init+0x148>)
 80030e4:	f043 0304 	orr.w	r3, r3, #4
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b48      	ldr	r3, [pc, #288]	@ (800320c <MX_GPIO_Init+0x148>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	4b44      	ldr	r3, [pc, #272]	@ (800320c <MX_GPIO_Init+0x148>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	4a43      	ldr	r2, [pc, #268]	@ (800320c <MX_GPIO_Init+0x148>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	@ 0x30
 8003106:	4b41      	ldr	r3, [pc, #260]	@ (800320c <MX_GPIO_Init+0x148>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <MX_GPIO_Init+0x148>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	4a3c      	ldr	r2, [pc, #240]	@ (800320c <MX_GPIO_Init+0x148>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6313      	str	r3, [r2, #48]	@ 0x30
 8003122:	4b3a      	ldr	r3, [pc, #232]	@ (800320c <MX_GPIO_Init+0x148>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_STBY_GPIO_Port, MOTOR_STBY_Pin, GPIO_PIN_RESET);
 800312e:	2200      	movs	r2, #0
 8003130:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003134:	4836      	ldr	r0, [pc, #216]	@ (8003210 <MX_GPIO_Init+0x14c>)
 8003136:	f003 fe51 	bl	8006ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 800313a:	2200      	movs	r2, #0
 800313c:	f241 3130 	movw	r1, #4912	@ 0x1330
 8003140:	4834      	ldr	r0, [pc, #208]	@ (8003214 <MX_GPIO_Init+0x150>)
 8003142:	f003 fe4b 	bl	8006ddc <HAL_GPIO_WritePin>
                          |EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800314c:	4832      	ldr	r0, [pc, #200]	@ (8003218 <MX_GPIO_Init+0x154>)
 800314e:	f003 fe45 	bl	8006ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MOTOR_STBY_Pin */
  GPIO_InitStruct.Pin = MOTOR_STBY_Pin;
 8003152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003158:	2301      	movs	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MOTOR_STBY_GPIO_Port, &GPIO_InitStruct);
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	4619      	mov	r1, r3
 800316a:	4829      	ldr	r0, [pc, #164]	@ (8003210 <MX_GPIO_Init+0x14c>)
 800316c:	f003 fc9a 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LEFT_Pin */
  GPIO_InitStruct.Pin = BTN_LEFT_Pin;
 8003170:	2302      	movs	r3, #2
 8003172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003174:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003178:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LEFT_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 030c 	add.w	r3, r7, #12
 8003182:	4619      	mov	r1, r3
 8003184:	4824      	ldr	r0, [pc, #144]	@ (8003218 <MX_GPIO_Init+0x154>)
 8003186:	f003 fc8d 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_RIGHT_Pin;
 800318a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800318e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003190:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	4619      	mov	r1, r3
 80031a0:	481c      	ldr	r0, [pc, #112]	@ (8003214 <MX_GPIO_Init+0x150>)
 80031a2:	f003 fc7f 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Chip_Select_Pin LED_LEFT_Pin LED_RIGHT_Pin EMIT_SIDE_RIGHT_Pin
                           EMIT_FRONT_RIGHT_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin|LED_LEFT_Pin|LED_RIGHT_Pin|EMIT_SIDE_RIGHT_Pin
 80031a6:	f241 3330 	movw	r3, #4912	@ 0x1330
 80031aa:	60fb      	str	r3, [r7, #12]
                          |EMIT_FRONT_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	4619      	mov	r1, r3
 80031be:	4815      	ldr	r0, [pc, #84]	@ (8003214 <MX_GPIO_Init+0x150>)
 80031c0:	f003 fc70 	bl	8006aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMIT_FRONT_LEFT_Pin EMIT_SIDE_LEFT_Pin */
  GPIO_InitStruct.Pin = EMIT_FRONT_LEFT_Pin|EMIT_SIDE_LEFT_Pin;
 80031c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	4619      	mov	r1, r3
 80031dc:	480e      	ldr	r0, [pc, #56]	@ (8003218 <MX_GPIO_Init+0x154>)
 80031de:	f003 fc61 	bl	8006aa4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2105      	movs	r1, #5
 80031e6:	2007      	movs	r0, #7
 80031e8:	f003 fb93 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80031ec:	2007      	movs	r0, #7
 80031ee:	f003 fbac 	bl	800694a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2105      	movs	r1, #5
 80031f6:	2028      	movs	r0, #40	@ 0x28
 80031f8:	f003 fb8b 	bl	8006912 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031fc:	2028      	movs	r0, #40	@ 0x28
 80031fe:	f003 fba4 	bl	800694a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003202:	bf00      	nop
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	40020800 	.word	0x40020800
 8003214:	40020400 	.word	0x40020400
 8003218:	40020000 	.word	0x40020000

0800321c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_press = 0;
    uint32_t current_time = HAL_GetTick();
 8003226:	f002 fe77 	bl	8005f18 <HAL_GetTick>
 800322a:	60f8      	str	r0, [r7, #12]

    // Debounce - ignore presses within 200ms
    if ((current_time - last_press) > 200) {
 800322c:	4b11      	ldr	r3, [pc, #68]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x58>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2bc8      	cmp	r3, #200	@ 0xc8
 8003236:	d919      	bls.n	800326c <HAL_GPIO_EXTI_Callback+0x50>
        if (GPIO_Pin == BTN_LEFT_Pin) {
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d109      	bne.n	8003252 <HAL_GPIO_EXTI_Callback+0x36>
            button_pressed = 1;
 800323e:	4b0e      	ldr	r3, [pc, #56]	@ (8003278 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
            start_flag = 1;  // Allow system to start
 8003244:	4b0d      	ldr	r3, [pc, #52]	@ (800327c <HAL_GPIO_EXTI_Callback+0x60>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Left button pressed\r\n");
 800324a:	480d      	ldr	r0, [pc, #52]	@ (8003280 <HAL_GPIO_EXTI_Callback+0x64>)
 800324c:	f7fe fb60 	bl	8001910 <send_bluetooth_message>
 8003250:	e009      	b.n	8003266 <HAL_GPIO_EXTI_Callback+0x4a>
        } else if (GPIO_Pin == BTN_RIGHT_Pin) {
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003258:	d105      	bne.n	8003266 <HAL_GPIO_EXTI_Callback+0x4a>
            button_pressed = 2;
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <HAL_GPIO_EXTI_Callback+0x5c>)
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
            send_bluetooth_message("Right button pressed\r\n");
 8003260:	4808      	ldr	r0, [pc, #32]	@ (8003284 <HAL_GPIO_EXTI_Callback+0x68>)
 8003262:	f7fe fb55 	bl	8001910 <send_bluetooth_message>
        }
        last_press = current_time;
 8003266:	4a03      	ldr	r2, [pc, #12]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x58>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6013      	str	r3, [r2, #0]
    }
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	200014b8 	.word	0x200014b8
 8003278:	20001494 	.word	0x20001494
 800327c:	20001495 	.word	0x20001495
 8003280:	0800ea84 	.word	0x0800ea84
 8003284:	0800ea9c 	.word	0x0800ea9c

08003288 <verify_adc_gpio_configuration>:

// Add this function to main.c after MX_GPIO_Init()
void verify_adc_gpio_configuration(void) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]

    // Ensure all ADC pins are in analog mode
    // PA0 (ADC_CHANNEL_0) - Battery
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800329c:	2301      	movs	r3, #1
 800329e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a0:	2303      	movs	r3, #3
 80032a2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4812      	ldr	r0, [pc, #72]	@ (80032f8 <verify_adc_gpio_configuration+0x70>)
 80032ae:	f003 fbf9 	bl	8006aa4 <HAL_GPIO_Init>

    // PA2 (ADC_CHANNEL_2) - Front Right
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032b2:	2304      	movs	r3, #4
 80032b4:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	480f      	ldr	r0, [pc, #60]	@ (80032f8 <verify_adc_gpio_configuration+0x70>)
 80032bc:	f003 fbf2 	bl	8006aa4 <HAL_GPIO_Init>

    // PA3 (ADC_CHANNEL_3) - Side Right
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032c0:	2308      	movs	r3, #8
 80032c2:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	480b      	ldr	r0, [pc, #44]	@ (80032f8 <verify_adc_gpio_configuration+0x70>)
 80032ca:	f003 fbeb 	bl	8006aa4 <HAL_GPIO_Init>

    // PA4 (ADC_CHANNEL_4) - Side Left
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032ce:	2310      	movs	r3, #16
 80032d0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	4619      	mov	r1, r3
 80032d6:	4808      	ldr	r0, [pc, #32]	@ (80032f8 <verify_adc_gpio_configuration+0x70>)
 80032d8:	f003 fbe4 	bl	8006aa4 <HAL_GPIO_Init>

    // PA5 (ADC_CHANNEL_5) - Front Left
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032dc:	2320      	movs	r3, #32
 80032de:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4804      	ldr	r0, [pc, #16]	@ (80032f8 <verify_adc_gpio_configuration+0x70>)
 80032e6:	f003 fbdd 	bl	8006aa4 <HAL_GPIO_Init>

    send_bluetooth_message("✅ ADC GPIO configuration verified\r\n");
 80032ea:	4804      	ldr	r0, [pc, #16]	@ (80032fc <verify_adc_gpio_configuration+0x74>)
 80032ec:	f7fe fb10 	bl	8001910 <send_bluetooth_message>
}
 80032f0:	bf00      	nop
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40020000 	.word	0x40020000
 80032fc:	0800eab4 	.word	0x0800eab4

08003300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003304:	b672      	cpsid	i
}
 8003306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 8003308:	2110      	movs	r1, #16
 800330a:	4806      	ldr	r0, [pc, #24]	@ (8003324 <Error_Handler+0x24>)
 800330c:	f003 fd7f 	bl	8006e0e <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin);
 8003310:	2120      	movs	r1, #32
 8003312:	4804      	ldr	r0, [pc, #16]	@ (8003324 <Error_Handler+0x24>)
 8003314:	f003 fd7b 	bl	8006e0e <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8003318:	2064      	movs	r0, #100	@ 0x64
 800331a:	f002 fe09 	bl	8005f30 <HAL_Delay>
      HAL_GPIO_TogglePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin);
 800331e:	bf00      	nop
 8003320:	e7f2      	b.n	8003308 <Error_Handler+0x8>
 8003322:	bf00      	nop
 8003324:	40020400 	.word	0x40020400

08003328 <championship_micromouse_init>:

/**
 * @brief Initialize championship micromouse system with MMS integration
 */
void championship_micromouse_init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
    // Initialize championship maze
    initialize_championship_maze();
 800332c:	f000 f842 	bl	80033b4 <initialize_championship_maze>

    // Initialize robot state
    robot.x = 0;
 8003330:	4b18      	ldr	r3, [pc, #96]	@ (8003394 <championship_micromouse_init+0x6c>)
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8003336:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <championship_micromouse_init+0x6c>)
 8003338:	2200      	movs	r2, #0
 800333a:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 800333c:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <championship_micromouse_init+0x6c>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 8003342:	4b14      	ldr	r3, [pc, #80]	@ (8003394 <championship_micromouse_init+0x6c>)
 8003344:	2200      	movs	r2, #0
 8003346:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <championship_micromouse_init+0x6c>)
 800334a:	2200      	movs	r2, #0
 800334c:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 800334e:	4b11      	ldr	r3, [pc, #68]	@ (8003394 <championship_micromouse_init+0x6c>)
 8003350:	2200      	movs	r2, #0
 8003352:	611a      	str	r2, [r3, #16]

    // Initialize sensors
    memset(&sensors, 0, sizeof(sensors));
 8003354:	220e      	movs	r2, #14
 8003356:	2100      	movs	r1, #0
 8003358:	480f      	ldr	r0, [pc, #60]	@ (8003398 <championship_micromouse_init+0x70>)
 800335a:	f007 fea7 	bl	800b0ac <memset>
    memset(&gyro, 0, sizeof(gyro));
 800335e:	2212      	movs	r2, #18
 8003360:	2100      	movs	r1, #0
 8003362:	480e      	ldr	r0, [pc, #56]	@ (800339c <championship_micromouse_init+0x74>)
 8003364:	f007 fea2 	bl	800b0ac <memset>
    memset(&encoders, 0, sizeof(encoders));
 8003368:	2210      	movs	r2, #16
 800336a:	2100      	movs	r1, #0
 800336c:	480c      	ldr	r0, [pc, #48]	@ (80033a0 <championship_micromouse_init+0x78>)
 800336e:	f007 fe9d 	bl	800b0ac <memset>

    // Initialize championship path analysis
    exploration_steps = 0;
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <championship_micromouse_init+0x7c>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <championship_micromouse_init+0x80>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]

    // Initialize gyroscope
    mpu9250_init();
 800337e:	f7fe ffdf 	bl	8002340 <mpu9250_init>

    send_bluetooth_message("Championship micromouse system initialized\r\n");
 8003382:	480a      	ldr	r0, [pc, #40]	@ (80033ac <championship_micromouse_init+0x84>)
 8003384:	f7fe fac4 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("Based on MMS championship algorithms\r\n");
 8003388:	4809      	ldr	r0, [pc, #36]	@ (80033b0 <championship_micromouse_init+0x88>)
 800338a:	f7fe fac1 	bl	8001910 <send_bluetooth_message>
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000144c 	.word	0x2000144c
 8003398:	20001460 	.word	0x20001460
 800339c:	20001470 	.word	0x20001470
 80033a0:	20001484 	.word	0x20001484
 80033a4:	20001498 	.word	0x20001498
 80033a8:	2000149c 	.word	0x2000149c
 80033ac:	0800eadc 	.word	0x0800eadc
 80033b0:	0800eb0c 	.word	0x0800eb0c

080033b4 <initialize_championship_maze>:

/**
 * @brief Initialize maze with championship settings (MMS style)
 */
void initialize_championship_maze(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
    // Initialize all cells
    for (int x = 0; x < MAZE_SIZE; x++) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e03e      	b.n	800343e <initialize_championship_maze+0x8a>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80033c0:	2300      	movs	r3, #0
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e035      	b.n	8003432 <initialize_championship_maze+0x7e>
            maze[x][y].distance = MAX_DISTANCE;
 80033c6:	4939      	ldr	r1, [pc, #228]	@ (80034ac <initialize_championship_maze+0xf8>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	011a      	lsls	r2, r3, #4
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4413      	add	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	440b      	add	r3, r1
 80033d4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80033d8:	601a      	str	r2, [r3, #0]
            maze[x][y].visited = false;
 80033da:	4934      	ldr	r1, [pc, #208]	@ (80034ac <initialize_championship_maze+0xf8>)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	011a      	lsls	r2, r3, #4
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4413      	add	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	440b      	add	r3, r1
 80033e8:	3304      	adds	r3, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
            maze[x][y].visit_count = 0;
 80033ee:	492f      	ldr	r1, [pc, #188]	@ (80034ac <initialize_championship_maze+0xf8>)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	011a      	lsls	r2, r3, #4
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4413      	add	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	440b      	add	r3, r1
 80033fc:	330c      	adds	r3, #12
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	e00e      	b.n	8003426 <initialize_championship_maze+0x72>
                maze[x][y].walls[i] = false;
 8003408:	4928      	ldr	r1, [pc, #160]	@ (80034ac <initialize_championship_maze+0xf8>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	011a      	lsls	r2, r3, #4
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4413      	add	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	18ca      	adds	r2, r1, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3305      	adds	r3, #5
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3301      	adds	r3, #1
 8003424:	607b      	str	r3, [r7, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b03      	cmp	r3, #3
 800342a:	dded      	ble.n	8003408 <initialize_championship_maze+0x54>
        for (int y = 0; y < MAZE_SIZE; y++) {
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b0f      	cmp	r3, #15
 8003436:	ddc6      	ble.n	80033c6 <initialize_championship_maze+0x12>
    for (int x = 0; x < MAZE_SIZE; x++) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b0f      	cmp	r3, #15
 8003442:	ddbd      	ble.n	80033c0 <initialize_championship_maze+0xc>
            }
        }
    }

    // Set boundary walls
    for (int i = 0; i < MAZE_SIZE; i++) {
 8003444:	2300      	movs	r3, #0
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	e01f      	b.n	800348a <initialize_championship_maze+0xd6>
        maze[i][0].walls[SOUTH] = true;           // South boundary
 800344a:	4a18      	ldr	r2, [pc, #96]	@ (80034ac <initialize_championship_maze+0xf8>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	4413      	add	r3, r2
 8003452:	3307      	adds	r3, #7
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
        maze[i][MAZE_SIZE-1].walls[NORTH] = true; // North boundary
 8003458:	4a14      	ldr	r2, [pc, #80]	@ (80034ac <initialize_championship_maze+0xf8>)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	4413      	add	r3, r2
 8003460:	33f5      	adds	r3, #245	@ 0xf5
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
        maze[0][i].walls[WEST] = true;            // West boundary
 8003466:	4a11      	ldr	r2, [pc, #68]	@ (80034ac <initialize_championship_maze+0xf8>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	4413      	add	r3, r2
 800346e:	3308      	adds	r3, #8
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
        maze[MAZE_SIZE-1][i].walls[EAST] = true;  // East boundary
 8003474:	4a0d      	ldr	r2, [pc, #52]	@ (80034ac <initialize_championship_maze+0xf8>)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4413      	add	r3, r2
 800347c:	f603 7306 	addw	r3, r3, #3846	@ 0xf06
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MAZE_SIZE; i++) {
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b0f      	cmp	r3, #15
 800348e:	dddc      	ble.n	800344a <initialize_championship_maze+0x96>
    }

    // Mark start position as visited
    maze[0][0].visited = true;
 8003490:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <initialize_championship_maze+0xf8>)
 8003492:	2201      	movs	r2, #1
 8003494:	711a      	strb	r2, [r3, #4]
    maze[0][0].visit_count = 1;
 8003496:	4b05      	ldr	r3, [pc, #20]	@ (80034ac <initialize_championship_maze+0xf8>)
 8003498:	2201      	movs	r2, #1
 800349a:	60da      	str	r2, [r3, #12]

    send_bluetooth_message("Championship maze initialized with boundary walls\r\n");
 800349c:	4804      	ldr	r0, [pc, #16]	@ (80034b0 <initialize_championship_maze+0xfc>)
 800349e:	f7fe fa37 	bl	8001910 <send_bluetooth_message>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	2000044c 	.word	0x2000044c
 80034b0:	0800eb34 	.word	0x0800eb34

080034b4 <championship_flood_fill>:
/**
 * @brief Championship flood fill from GOAL position (MMS algorithm)
 * This is the key difference - we flood from destination, not robot
 */
void championship_flood_fill(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	f5ad 6d03 	sub.w	sp, sp, #2096	@ 0x830
 80034ba:	af00      	add	r7, sp, #0
    // Reset all distances
    for (int x = 0; x < MAZE_SIZE; x++) {
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80034c2:	e01d      	b.n	8003500 <championship_flood_fill+0x4c>
        for (int y = 0; y < MAZE_SIZE; y++) {
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80034ca:	e010      	b.n	80034ee <championship_flood_fill+0x3a>
            maze[x][y].distance = MAX_DISTANCE;
 80034cc:	49c8      	ldr	r1, [pc, #800]	@ (80037f0 <championship_flood_fill+0x33c>)
 80034ce:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80034d2:	011a      	lsls	r2, r3, #4
 80034d4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80034d8:	4413      	add	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	440b      	add	r3, r1
 80034de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80034e2:	601a      	str	r2, [r3, #0]
        for (int y = 0; y < MAZE_SIZE; y++) {
 80034e4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80034e8:	3301      	adds	r3, #1
 80034ea:	f8c7 3828 	str.w	r3, [r7, #2088]	@ 0x828
 80034ee:	f8d7 3828 	ldr.w	r3, [r7, #2088]	@ 0x828
 80034f2:	2b0f      	cmp	r3, #15
 80034f4:	ddea      	ble.n	80034cc <championship_flood_fill+0x18>
    for (int x = 0; x < MAZE_SIZE; x++) {
 80034f6:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 80034fa:	3301      	adds	r3, #1
 80034fc:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8003500:	f8d7 382c 	ldr.w	r3, [r7, #2092]	@ 0x82c
 8003504:	2b0f      	cmp	r3, #15
 8003506:	dddd      	ble.n	80034c4 <championship_flood_fill+0x10>
        }
    }

    // Set goal distances to 0
    if (!robot.center_reached) {
 8003508:	4bba      	ldr	r3, [pc, #744]	@ (80037f4 <championship_flood_fill+0x340>)
 800350a:	7b1b      	ldrb	r3, [r3, #12]
 800350c:	f083 0301 	eor.w	r3, r3, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02c      	beq.n	8003570 <championship_flood_fill+0xbc>
        // Exploring to center - flood from center
        maze[goal_x1][goal_y1].distance = 0;
 8003516:	4bb8      	ldr	r3, [pc, #736]	@ (80037f8 <championship_flood_fill+0x344>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4bb8      	ldr	r3, [pc, #736]	@ (80037fc <championship_flood_fill+0x348>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	49b4      	ldr	r1, [pc, #720]	@ (80037f0 <championship_flood_fill+0x33c>)
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	4413      	add	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	440b      	add	r3, r1
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y1].distance = 0;
 800352c:	4bb4      	ldr	r3, [pc, #720]	@ (8003800 <championship_flood_fill+0x34c>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4bb2      	ldr	r3, [pc, #712]	@ (80037fc <championship_flood_fill+0x348>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	49ae      	ldr	r1, [pc, #696]	@ (80037f0 <championship_flood_fill+0x33c>)
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	4413      	add	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	440b      	add	r3, r1
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
        maze[goal_x1][goal_y2].distance = 0;
 8003542:	4bad      	ldr	r3, [pc, #692]	@ (80037f8 <championship_flood_fill+0x344>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4baf      	ldr	r3, [pc, #700]	@ (8003804 <championship_flood_fill+0x350>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	49a9      	ldr	r1, [pc, #676]	@ (80037f0 <championship_flood_fill+0x33c>)
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	4413      	add	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	440b      	add	r3, r1
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
        maze[goal_x2][goal_y2].distance = 0;
 8003558:	4ba9      	ldr	r3, [pc, #676]	@ (8003800 <championship_flood_fill+0x34c>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4ba9      	ldr	r3, [pc, #676]	@ (8003804 <championship_flood_fill+0x350>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	49a3      	ldr	r1, [pc, #652]	@ (80037f0 <championship_flood_fill+0x33c>)
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	4413      	add	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	440b      	add	r3, r1
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e002      	b.n	8003576 <championship_flood_fill+0xc2>
    } else {
        // Returning to start - flood from start
        maze[0][0].distance = 0;
 8003570:	4b9f      	ldr	r3, [pc, #636]	@ (80037f0 <championship_flood_fill+0x33c>)
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
    }

    // Queue implementation for BFS flood fill
    int queue_x[256], queue_y[256];
    int queue_head = 0, queue_tail = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 3820 	str.w	r3, [r7, #2080]	@ 0x820

    if (!robot.center_reached) {
 8003582:	4b9c      	ldr	r3, [pc, #624]	@ (80037f4 <championship_flood_fill+0x340>)
 8003584:	7b1b      	ldrb	r3, [r3, #12]
 8003586:	f083 0301 	eor.w	r3, r3, #1
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d05c      	beq.n	800364a <championship_flood_fill+0x196>
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y1;
 8003590:	4b99      	ldr	r3, [pc, #612]	@ (80037f8 <championship_flood_fill+0x344>)
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8003598:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800359c:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035a4:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80035ae:	4a93      	ldr	r2, [pc, #588]	@ (80037fc <championship_flood_fill+0x348>)
 80035b0:	6811      	ldr	r1, [r2, #0]
 80035b2:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80035b6:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 80035ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y1;
 80035be:	4b90      	ldr	r3, [pc, #576]	@ (8003800 <championship_flood_fill+0x34c>)
 80035c0:	6819      	ldr	r1, [r3, #0]
 80035c2:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80035c6:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80035ca:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80035ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035d2:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 80035dc:	4a87      	ldr	r2, [pc, #540]	@ (80037fc <championship_flood_fill+0x348>)
 80035de:	6811      	ldr	r1, [r2, #0]
 80035e0:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 80035e4:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 80035e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x1; queue_y[queue_tail++] = goal_y2;
 80035ec:	4b82      	ldr	r3, [pc, #520]	@ (80037f8 <championship_flood_fill+0x344>)
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 80035f4:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 80035f8:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 80035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003600:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 800360a:	4a7e      	ldr	r2, [pc, #504]	@ (8003804 <championship_flood_fill+0x350>)
 800360c:	6811      	ldr	r1, [r2, #0]
 800360e:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8003612:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8003616:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        queue_x[queue_tail] = goal_x2; queue_y[queue_tail++] = goal_y2;
 800361a:	4b79      	ldr	r3, [pc, #484]	@ (8003800 <championship_flood_fill+0x34c>)
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8003622:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8003626:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 800362a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800362e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8003638:	4a72      	ldr	r2, [pc, #456]	@ (8003804 <championship_flood_fill+0x350>)
 800363a:	6811      	ldr	r1, [r2, #0]
 800363c:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8003640:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 8003644:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8003648:	e014      	b.n	8003674 <championship_flood_fill+0x1c0>
    } else {
        queue_x[queue_tail] = 0; queue_y[queue_tail++] = 0;
 800364a:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800364e:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8003652:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8003656:	2100      	movs	r1, #0
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800365c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8003666:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 800366a:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 800366e:	2100      	movs	r1, #0
 8003670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    int updates = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c

    // Championship flood fill algorithm
    while (queue_head < queue_tail) {
 800367a:	e0a7      	b.n	80037cc <championship_flood_fill+0x318>
        int x = queue_x[queue_head];
 800367c:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 8003680:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 8003684:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 8003688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368c:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
        int y = queue_y[queue_head++];
 8003690:	f8d7 3824 	ldr.w	r3, [r7, #2084]	@ 0x824
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	f8c7 2824 	str.w	r2, [r7, #2084]	@ 0x824
 800369a:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 800369e:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	f8c7 3810 	str.w	r3, [r7, #2064]	@ 0x810

        // Check all four directions
        for (int dir = 0; dir < 4; dir++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 80036b0:	e087      	b.n	80037c2 <championship_flood_fill+0x30e>
            int nx = x + dx[dir];
 80036b2:	4a55      	ldr	r2, [pc, #340]	@ (8003808 <championship_flood_fill+0x354>)
 80036b4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80036b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036bc:	f8d7 2814 	ldr.w	r2, [r7, #2068]	@ 0x814
 80036c0:	4413      	add	r3, r2
 80036c2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
            int ny = y + dy[dir];
 80036c6:	4a51      	ldr	r2, [pc, #324]	@ (800380c <championship_flood_fill+0x358>)
 80036c8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80036cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d0:	f8d7 2810 	ldr.w	r2, [r7, #2064]	@ 0x810
 80036d4:	4413      	add	r3, r2
 80036d6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

            // Check bounds and walls
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80036da:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db6a      	blt.n	80037b8 <championship_flood_fill+0x304>
 80036e2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 80036e6:	2b0f      	cmp	r3, #15
 80036e8:	dc66      	bgt.n	80037b8 <championship_flood_fill+0x304>
 80036ea:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db62      	blt.n	80037b8 <championship_flood_fill+0x304>
 80036f2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80036f6:	2b0f      	cmp	r3, #15
 80036f8:	dc5e      	bgt.n	80037b8 <championship_flood_fill+0x304>
                !maze[x][y].walls[dir]) {
 80036fa:	493d      	ldr	r1, [pc, #244]	@ (80037f0 <championship_flood_fill+0x33c>)
 80036fc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8003700:	011a      	lsls	r2, r3, #4
 8003702:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 8003706:	4413      	add	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	18ca      	adds	r2, r1, r3
 800370c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 8003710:	4413      	add	r3, r2
 8003712:	3305      	adds	r3, #5
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	f083 0301 	eor.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 800371c:	2b00      	cmp	r3, #0
 800371e:	d04b      	beq.n	80037b8 <championship_flood_fill+0x304>

                int new_dist = maze[x][y].distance + 1;
 8003720:	4933      	ldr	r1, [pc, #204]	@ (80037f0 <championship_flood_fill+0x33c>)
 8003722:	f8d7 3814 	ldr.w	r3, [r7, #2068]	@ 0x814
 8003726:	011a      	lsls	r2, r3, #4
 8003728:	f8d7 3810 	ldr.w	r3, [r7, #2064]	@ 0x810
 800372c:	4413      	add	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	440b      	add	r3, r1
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3301      	adds	r3, #1
 8003736:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804

                // Update if we found a shorter path
                if (new_dist < maze[nx][ny].distance) {
 800373a:	492d      	ldr	r1, [pc, #180]	@ (80037f0 <championship_flood_fill+0x33c>)
 800373c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8003740:	011a      	lsls	r2, r3, #4
 8003742:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003746:	4413      	add	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	440b      	add	r3, r1
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8003752:	429a      	cmp	r2, r3
 8003754:	da30      	bge.n	80037b8 <championship_flood_fill+0x304>
                    maze[nx][ny].distance = new_dist;
 8003756:	4926      	ldr	r1, [pc, #152]	@ (80037f0 <championship_flood_fill+0x33c>)
 8003758:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 800375c:	011a      	lsls	r2, r3, #4
 800375e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003762:	4413      	add	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	440b      	add	r3, r1
 8003768:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 800376c:	601a      	str	r2, [r3, #0]
                    if (queue_tail < 255) {
 800376e:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 8003772:	2bfe      	cmp	r3, #254	@ 0xfe
 8003774:	dc1c      	bgt.n	80037b0 <championship_flood_fill+0x2fc>
                        queue_x[queue_tail] = nx;
 8003776:	f507 6303 	add.w	r3, r7, #2096	@ 0x830
 800377a:	f2a3 432c 	subw	r3, r3, #1068	@ 0x42c
 800377e:	f8d7 2820 	ldr.w	r2, [r7, #2080]	@ 0x820
 8003782:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8003786:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        queue_y[queue_tail++] = ny;
 800378a:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	f8c7 2820 	str.w	r2, [r7, #2080]	@ 0x820
 8003794:	f507 6203 	add.w	r2, r7, #2096	@ 0x830
 8003798:	f6a2 022c 	subw	r2, r2, #2092	@ 0x82c
 800379c:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80037a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    } else {
                        send_bluetooth_message("Queue overflow!\r\n");
                        break;
                    }
                    updates++;
 80037a4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	@ 0x81c
 80037a8:	3301      	adds	r3, #1
 80037aa:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 80037ae:	e003      	b.n	80037b8 <championship_flood_fill+0x304>
                        send_bluetooth_message("Queue overflow!\r\n");
 80037b0:	4817      	ldr	r0, [pc, #92]	@ (8003810 <championship_flood_fill+0x35c>)
 80037b2:	f7fe f8ad 	bl	8001910 <send_bluetooth_message>
                        break;
 80037b6:	e009      	b.n	80037cc <championship_flood_fill+0x318>
        for (int dir = 0; dir < 4; dir++) {
 80037b8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80037bc:	3301      	adds	r3, #1
 80037be:	f8c7 3818 	str.w	r3, [r7, #2072]	@ 0x818
 80037c2:	f8d7 3818 	ldr.w	r3, [r7, #2072]	@ 0x818
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	f77f af73 	ble.w	80036b2 <championship_flood_fill+0x1fe>
    while (queue_head < queue_tail) {
 80037cc:	f8d7 2824 	ldr.w	r2, [r7, #2084]	@ 0x824
 80037d0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	@ 0x820
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f6ff af51 	blt.w	800367c <championship_flood_fill+0x1c8>
            }
        }
    }

    // Debug output via Bluetooth
    send_bluetooth_printf("Championship flood fill: %d updates\r\n", updates);
 80037da:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 80037de:	480d      	ldr	r0, [pc, #52]	@ (8003814 <championship_flood_fill+0x360>)
 80037e0:	f7fe f8ac 	bl	800193c <send_bluetooth_printf>
}
 80037e4:	bf00      	nop
 80037e6:	f507 6703 	add.w	r7, r7, #2096	@ 0x830
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000044c 	.word	0x2000044c
 80037f4:	2000144c 	.word	0x2000144c
 80037f8:	0800fcfc 	.word	0x0800fcfc
 80037fc:	0800fd00 	.word	0x0800fd00
 8003800:	0800fd04 	.word	0x0800fd04
 8003804:	0800fd08 	.word	0x0800fd08
 8003808:	0800fcdc 	.word	0x0800fcdc
 800380c:	0800fcec 	.word	0x0800fcec
 8003810:	0800eb68 	.word	0x0800eb68
 8003814:	0800eb7c 	.word	0x0800eb7c

08003818 <get_championship_direction>:

/**
 * @brief Championship direction selection - NEVER gets stuck (MMS algorithm)
 */
int get_championship_direction(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b093      	sub	sp, #76	@ 0x4c
 800381c:	af00      	add	r7, sp, #0
    int best_dir = robot.direction; // Default to current direction
 800381e:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <get_championship_direction+0x228>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	647b      	str	r3, [r7, #68]	@ 0x44
    int min_distance = MAX_DISTANCE;
 8003824:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003828:	643b      	str	r3, [r7, #64]	@ 0x40
    int min_visits = 999;
 800382a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800382e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool found_unvisited = false;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Priority order: straight, right, left, back
    int priority_dirs[4];
    priority_dirs[0] = robot.direction;
 8003836:	4b82      	ldr	r3, [pc, #520]	@ (8003a40 <get_championship_direction+0x228>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	603b      	str	r3, [r7, #0]
    priority_dirs[1] = (robot.direction + 1) % 4;
 800383c:	4b80      	ldr	r3, [pc, #512]	@ (8003a40 <get_championship_direction+0x228>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	3301      	adds	r3, #1
 8003842:	425a      	negs	r2, r3
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	f002 0203 	and.w	r2, r2, #3
 800384c:	bf58      	it	pl
 800384e:	4253      	negpl	r3, r2
 8003850:	607b      	str	r3, [r7, #4]
    priority_dirs[2] = (robot.direction + 3) % 4;
 8003852:	4b7b      	ldr	r3, [pc, #492]	@ (8003a40 <get_championship_direction+0x228>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	3303      	adds	r3, #3
 8003858:	425a      	negs	r2, r3
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	f002 0203 	and.w	r2, r2, #3
 8003862:	bf58      	it	pl
 8003864:	4253      	negpl	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
    priority_dirs[3] = (robot.direction + 2) % 4;
 8003868:	4b75      	ldr	r3, [pc, #468]	@ (8003a40 <get_championship_direction+0x228>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	3302      	adds	r3, #2
 800386e:	425a      	negs	r2, r3
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	f002 0203 	and.w	r2, r2, #3
 8003878:	bf58      	it	pl
 800387a:	4253      	negpl	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

    // First pass: look for unvisited cells
    for (int p = 0; p < 4; p++) {
 800387e:	2300      	movs	r3, #0
 8003880:	637b      	str	r3, [r7, #52]	@ 0x34
 8003882:	e05b      	b.n	800393c <get_championship_direction+0x124>
        int dir = priority_dirs[p];
 8003884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	3348      	adds	r3, #72	@ 0x48
 800388a:	443b      	add	r3, r7
 800388c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003890:	61bb      	str	r3, [r7, #24]
        int nx = robot.x + dx[dir];
 8003892:	4b6b      	ldr	r3, [pc, #428]	@ (8003a40 <get_championship_direction+0x228>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	496b      	ldr	r1, [pc, #428]	@ (8003a44 <get_championship_direction+0x22c>)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800389e:	4413      	add	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
        int ny = robot.y + dy[dir];
 80038a2:	4b67      	ldr	r3, [pc, #412]	@ (8003a40 <get_championship_direction+0x228>)
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	4968      	ldr	r1, [pc, #416]	@ (8003a48 <get_championship_direction+0x230>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038ae:	4413      	add	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	db3e      	blt.n	8003936 <get_championship_direction+0x11e>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	dc3b      	bgt.n	8003936 <get_championship_direction+0x11e>
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	db38      	blt.n	8003936 <get_championship_direction+0x11e>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	dc35      	bgt.n	8003936 <get_championship_direction+0x11e>
            !maze[robot.x][robot.y].walls[dir]) {
 80038ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <get_championship_direction+0x228>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003a40 <get_championship_direction+0x228>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	495e      	ldr	r1, [pc, #376]	@ (8003a4c <get_championship_direction+0x234>)
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	4413      	add	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	18ca      	adds	r2, r1, r3
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	4413      	add	r3, r2
 80038e0:	3305      	adds	r3, #5
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f083 0301 	eor.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d023      	beq.n	8003936 <get_championship_direction+0x11e>

            // Prefer unvisited cells
            if (maze[nx][ny].visit_count == 0) {
 80038ee:	4957      	ldr	r1, [pc, #348]	@ (8003a4c <get_championship_direction+0x234>)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	011a      	lsls	r2, r3, #4
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	440b      	add	r3, r1
 80038fc:	330c      	adds	r3, #12
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <get_championship_direction+0x11e>
                found_unvisited = true;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
                if (maze[nx][ny].distance < min_distance) {
 800390a:	4950      	ldr	r1, [pc, #320]	@ (8003a4c <get_championship_direction+0x234>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	011a      	lsls	r2, r3, #4
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	4413      	add	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	440b      	add	r3, r1
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800391c:	429a      	cmp	r2, r3
 800391e:	dd0a      	ble.n	8003936 <get_championship_direction+0x11e>
                    min_distance = maze[nx][ny].distance;
 8003920:	494a      	ldr	r1, [pc, #296]	@ (8003a4c <get_championship_direction+0x234>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	011a      	lsls	r2, r3, #4
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	440b      	add	r3, r1
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	643b      	str	r3, [r7, #64]	@ 0x40
                    best_dir = dir;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	647b      	str	r3, [r7, #68]	@ 0x44
    for (int p = 0; p < 4; p++) {
 8003936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003938:	3301      	adds	r3, #1
 800393a:	637b      	str	r3, [r7, #52]	@ 0x34
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	2b03      	cmp	r3, #3
 8003940:	dda0      	ble.n	8003884 <get_championship_direction+0x6c>
            }
        }
    }

    // Second pass: if no unvisited, find least visited with lowest distance
    if (!found_unvisited) {
 8003942:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003946:	f083 0301 	eor.w	r3, r3, #1
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d06f      	beq.n	8003a30 <get_championship_direction+0x218>
        for (int p = 0; p < 4; p++) {
 8003950:	2300      	movs	r3, #0
 8003952:	633b      	str	r3, [r7, #48]	@ 0x30
 8003954:	e069      	b.n	8003a2a <get_championship_direction+0x212>
            int dir = priority_dirs[p];
 8003956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	3348      	adds	r3, #72	@ 0x48
 800395c:	443b      	add	r3, r7
 800395e:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003962:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int nx = robot.x + dx[dir];
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <get_championship_direction+0x228>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4936      	ldr	r1, [pc, #216]	@ (8003a44 <get_championship_direction+0x22c>)
 800396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003970:	4413      	add	r3, r2
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
            int ny = robot.y + dy[dir];
 8003974:	4b32      	ldr	r3, [pc, #200]	@ (8003a40 <get_championship_direction+0x228>)
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	4933      	ldr	r1, [pc, #204]	@ (8003a48 <get_championship_direction+0x230>)
 800397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003980:	4413      	add	r3, r2
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24

            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	db4c      	blt.n	8003a24 <get_championship_direction+0x20c>
 800398a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398c:	2b0f      	cmp	r3, #15
 800398e:	dc49      	bgt.n	8003a24 <get_championship_direction+0x20c>
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	2b00      	cmp	r3, #0
 8003994:	db46      	blt.n	8003a24 <get_championship_direction+0x20c>
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	2b0f      	cmp	r3, #15
 800399a:	dc43      	bgt.n	8003a24 <get_championship_direction+0x20c>
                !maze[robot.x][robot.y].walls[dir]) {
 800399c:	4b28      	ldr	r3, [pc, #160]	@ (8003a40 <get_championship_direction+0x228>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <get_championship_direction+0x228>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4929      	ldr	r1, [pc, #164]	@ (8003a4c <get_championship_direction+0x234>)
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	4413      	add	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	18ca      	adds	r2, r1, r3
 80039ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b0:	4413      	add	r3, r2
 80039b2:	3305      	adds	r3, #5
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
            if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d031      	beq.n	8003a24 <get_championship_direction+0x20c>

                int neighbor_dist = maze[nx][ny].distance;
 80039c0:	4922      	ldr	r1, [pc, #136]	@ (8003a4c <get_championship_direction+0x234>)
 80039c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c4:	011a      	lsls	r2, r3, #4
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	4413      	add	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	440b      	add	r3, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	623b      	str	r3, [r7, #32]
                int neighbor_visits = maze[nx][ny].visit_count;
 80039d2:	491e      	ldr	r1, [pc, #120]	@ (8003a4c <get_championship_direction+0x234>)
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	011a      	lsls	r2, r3, #4
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	4413      	add	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	440b      	add	r3, r1
 80039e0:	330c      	adds	r3, #12
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	61fb      	str	r3, [r7, #28]

                // Choose based on distance first, then visit count
                if (neighbor_dist < min_distance ||
 80039e6:	6a3a      	ldr	r2, [r7, #32]
 80039e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ea:	429a      	cmp	r2, r3
 80039ec:	db14      	blt.n	8003a18 <get_championship_direction+0x200>
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d103      	bne.n	80039fe <get_championship_direction+0x1e6>
                    (neighbor_dist == min_distance && neighbor_visits < min_visits) ||
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	db0c      	blt.n	8003a18 <get_championship_direction+0x200>
 80039fe:	6a3a      	ldr	r2, [r7, #32]
 8003a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d10e      	bne.n	8003a24 <get_championship_direction+0x20c>
                    (neighbor_dist == min_distance && neighbor_visits == min_visits && dir == robot.direction)) {
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d10a      	bne.n	8003a24 <get_championship_direction+0x20c>
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <get_championship_direction+0x228>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d105      	bne.n	8003a24 <get_championship_direction+0x20c>
                    min_distance = neighbor_dist;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	643b      	str	r3, [r7, #64]	@ 0x40
                    min_visits = neighbor_visits;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    best_dir = dir;
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	647b      	str	r3, [r7, #68]	@ 0x44
        for (int p = 0; p < 4; p++) {
 8003a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a26:	3301      	adds	r3, #1
 8003a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	dd92      	ble.n	8003956 <get_championship_direction+0x13e>
                }
            }
        }
    }

    return best_dir;
 8003a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	374c      	adds	r7, #76	@ 0x4c
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	2000144c 	.word	0x2000144c
 8003a44:	0800fcdc 	.word	0x0800fcdc
 8003a48:	0800fcec 	.word	0x0800fcec
 8003a4c:	2000044c 	.word	0x2000044c

08003a50 <championship_update_walls>:

/**
 * @brief Update walls based on sensor readings (MMS style)
 */
void championship_update_walls(void)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b08b      	sub	sp, #44	@ 0x2c
 8003a54:	af02      	add	r7, sp, #8
    // Update sensors first
    update_sensors();
 8003a56:	f000 ff31 	bl	80048bc <update_sensors>

    // Update walls based on current direction
    if (sensors.wall_front) {
 8003a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8003c84 <championship_update_walls+0x234>)
 8003a5c:	7a9b      	ldrb	r3, [r3, #10]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d041      	beq.n	8003ae6 <championship_update_walls+0x96>
        maze[robot.x][robot.y].walls[robot.direction] = true;
 8003a62:	4b89      	ldr	r3, [pc, #548]	@ (8003c88 <championship_update_walls+0x238>)
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	4b88      	ldr	r3, [pc, #544]	@ (8003c88 <championship_update_walls+0x238>)
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	4b87      	ldr	r3, [pc, #540]	@ (8003c88 <championship_update_walls+0x238>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4887      	ldr	r0, [pc, #540]	@ (8003c8c <championship_update_walls+0x23c>)
 8003a70:	0109      	lsls	r1, r1, #4
 8003a72:	440a      	add	r2, r1
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	4402      	add	r2, r0
 8003a78:	4413      	add	r3, r2
 8003a7a:	3305      	adds	r3, #5
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
        // Update opposite wall in neighbor cell
        int nx = robot.x + dx[robot.direction];
 8003a80:	4b81      	ldr	r3, [pc, #516]	@ (8003c88 <championship_update_walls+0x238>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4b80      	ldr	r3, [pc, #512]	@ (8003c88 <championship_update_walls+0x238>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4981      	ldr	r1, [pc, #516]	@ (8003c90 <championship_update_walls+0x240>)
 8003a8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a8e:	4413      	add	r3, r2
 8003a90:	61fb      	str	r3, [r7, #28]
        int ny = robot.y + dy[robot.direction];
 8003a92:	4b7d      	ldr	r3, [pc, #500]	@ (8003c88 <championship_update_walls+0x238>)
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4b7c      	ldr	r3, [pc, #496]	@ (8003c88 <championship_update_walls+0x238>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	497e      	ldr	r1, [pc, #504]	@ (8003c94 <championship_update_walls+0x244>)
 8003a9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db1d      	blt.n	8003ae6 <championship_update_walls+0x96>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b0f      	cmp	r3, #15
 8003aae:	dc1a      	bgt.n	8003ae6 <championship_update_walls+0x96>
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db17      	blt.n	8003ae6 <championship_update_walls+0x96>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	dc14      	bgt.n	8003ae6 <championship_update_walls+0x96>
            maze[nx][ny].walls[(robot.direction + 2) % 4] = true;
 8003abc:	4b72      	ldr	r3, [pc, #456]	@ (8003c88 <championship_update_walls+0x238>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	425a      	negs	r2, r3
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	f002 0203 	and.w	r2, r2, #3
 8003acc:	bf58      	it	pl
 8003ace:	4253      	negpl	r3, r2
 8003ad0:	486e      	ldr	r0, [pc, #440]	@ (8003c8c <championship_update_walls+0x23c>)
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	0111      	lsls	r1, r2, #4
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	440a      	add	r2, r1
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	4402      	add	r2, r0
 8003ade:	4413      	add	r3, r2
 8003ae0:	3305      	adds	r3, #5
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_left) {
 8003ae6:	4b67      	ldr	r3, [pc, #412]	@ (8003c84 <championship_update_walls+0x234>)
 8003ae8:	7adb      	ldrb	r3, [r3, #11]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d048      	beq.n	8003b80 <championship_update_walls+0x130>
        int left_dir = (robot.direction + 3) % 4;
 8003aee:	4b66      	ldr	r3, [pc, #408]	@ (8003c88 <championship_update_walls+0x238>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	3303      	adds	r3, #3
 8003af4:	425a      	negs	r2, r3
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	f002 0203 	and.w	r2, r2, #3
 8003afe:	bf58      	it	pl
 8003b00:	4253      	negpl	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
        maze[robot.x][robot.y].walls[left_dir] = true;
 8003b04:	4b60      	ldr	r3, [pc, #384]	@ (8003c88 <championship_update_walls+0x238>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b5f      	ldr	r3, [pc, #380]	@ (8003c88 <championship_update_walls+0x238>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	495f      	ldr	r1, [pc, #380]	@ (8003c8c <championship_update_walls+0x23c>)
 8003b0e:	0112      	lsls	r2, r2, #4
 8003b10:	4413      	add	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	18ca      	adds	r2, r1, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3305      	adds	r3, #5
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[left_dir];
 8003b20:	4b59      	ldr	r3, [pc, #356]	@ (8003c88 <championship_update_walls+0x238>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	495a      	ldr	r1, [pc, #360]	@ (8003c90 <championship_update_walls+0x240>)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        int ny = robot.y + dy[left_dir];
 8003b30:	4b55      	ldr	r3, [pc, #340]	@ (8003c88 <championship_update_walls+0x238>)
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	4957      	ldr	r1, [pc, #348]	@ (8003c94 <championship_update_walls+0x244>)
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db1c      	blt.n	8003b80 <championship_update_walls+0x130>
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	dc19      	bgt.n	8003b80 <championship_update_walls+0x130>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db16      	blt.n	8003b80 <championship_update_walls+0x130>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b0f      	cmp	r3, #15
 8003b56:	dc13      	bgt.n	8003b80 <championship_update_walls+0x130>
            maze[nx][ny].walls[(left_dir + 2) % 4] = true;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	425a      	negs	r2, r3
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	bf58      	it	pl
 8003b68:	4253      	negpl	r3, r2
 8003b6a:	4848      	ldr	r0, [pc, #288]	@ (8003c8c <championship_update_walls+0x23c>)
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	0111      	lsls	r1, r2, #4
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	440a      	add	r2, r1
 8003b74:	0112      	lsls	r2, r2, #4
 8003b76:	4402      	add	r2, r0
 8003b78:	4413      	add	r3, r2
 8003b7a:	3305      	adds	r3, #5
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
        }
    }

    if (sensors.wall_right) {
 8003b80:	4b40      	ldr	r3, [pc, #256]	@ (8003c84 <championship_update_walls+0x234>)
 8003b82:	7b1b      	ldrb	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d048      	beq.n	8003c1a <championship_update_walls+0x1ca>
        int right_dir = (robot.direction + 1) % 4;
 8003b88:	4b3f      	ldr	r3, [pc, #252]	@ (8003c88 <championship_update_walls+0x238>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	425a      	negs	r2, r3
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	f002 0203 	and.w	r2, r2, #3
 8003b98:	bf58      	it	pl
 8003b9a:	4253      	negpl	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]
        maze[robot.x][robot.y].walls[right_dir] = true;
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c88 <championship_update_walls+0x238>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b39      	ldr	r3, [pc, #228]	@ (8003c88 <championship_update_walls+0x238>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4939      	ldr	r1, [pc, #228]	@ (8003c8c <championship_update_walls+0x23c>)
 8003ba8:	0112      	lsls	r2, r2, #4
 8003baa:	4413      	add	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	18ca      	adds	r2, r1, r3
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3305      	adds	r3, #5
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
        int nx = robot.x + dx[right_dir];
 8003bba:	4b33      	ldr	r3, [pc, #204]	@ (8003c88 <championship_update_walls+0x238>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	4934      	ldr	r1, [pc, #208]	@ (8003c90 <championship_update_walls+0x240>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	607b      	str	r3, [r7, #4]
        int ny = robot.y + dy[right_dir];
 8003bca:	4b2f      	ldr	r3, [pc, #188]	@ (8003c88 <championship_update_walls+0x238>)
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4931      	ldr	r1, [pc, #196]	@ (8003c94 <championship_update_walls+0x244>)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	603b      	str	r3, [r7, #0]
        if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	db1c      	blt.n	8003c1a <championship_update_walls+0x1ca>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b0f      	cmp	r3, #15
 8003be4:	dc19      	bgt.n	8003c1a <championship_update_walls+0x1ca>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db16      	blt.n	8003c1a <championship_update_walls+0x1ca>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b0f      	cmp	r3, #15
 8003bf0:	dc13      	bgt.n	8003c1a <championship_update_walls+0x1ca>
            maze[nx][ny].walls[(right_dir + 2) % 4] = true;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	425a      	negs	r2, r3
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	f002 0203 	and.w	r2, r2, #3
 8003c00:	bf58      	it	pl
 8003c02:	4253      	negpl	r3, r2
 8003c04:	4821      	ldr	r0, [pc, #132]	@ (8003c8c <championship_update_walls+0x23c>)
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	0111      	lsls	r1, r2, #4
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	440a      	add	r2, r1
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	4402      	add	r2, r0
 8003c12:	4413      	add	r3, r2
 8003c14:	3305      	adds	r3, #5
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
        }
    }

    // Mark current cell as visited
    maze[robot.x][robot.y].visited = true;
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <championship_update_walls+0x238>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003c88 <championship_update_walls+0x238>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	491a      	ldr	r1, [pc, #104]	@ (8003c8c <championship_update_walls+0x23c>)
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	440b      	add	r3, r1
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
    maze[robot.x][robot.y].visit_count++;
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <championship_update_walls+0x238>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <championship_update_walls+0x238>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	4814      	ldr	r0, [pc, #80]	@ (8003c8c <championship_update_walls+0x23c>)
 8003c3c:	0111      	lsls	r1, r2, #4
 8003c3e:	4419      	add	r1, r3
 8003c40:	0109      	lsls	r1, r1, #4
 8003c42:	4401      	add	r1, r0
 8003c44:	310c      	adds	r1, #12
 8003c46:	6809      	ldr	r1, [r1, #0]
 8003c48:	3101      	adds	r1, #1
 8003c4a:	4810      	ldr	r0, [pc, #64]	@ (8003c8c <championship_update_walls+0x23c>)
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	4413      	add	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4403      	add	r3, r0
 8003c54:	330c      	adds	r3, #12
 8003c56:	6019      	str	r1, [r3, #0]

    // Debug output
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <championship_update_walls+0x238>)
 8003c5a:	6819      	ldr	r1, [r3, #0]
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <championship_update_walls+0x238>)
 8003c5e:	685a      	ldr	r2, [r3, #4]
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003c60:	4b08      	ldr	r3, [pc, #32]	@ (8003c84 <championship_update_walls+0x234>)
 8003c62:	7a9b      	ldrb	r3, [r3, #10]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003c64:	461c      	mov	r4, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003c66:	4b07      	ldr	r3, [pc, #28]	@ (8003c84 <championship_update_walls+0x234>)
 8003c68:	7adb      	ldrb	r3, [r3, #11]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003c6a:	4618      	mov	r0, r3
                         robot.x, robot.y, sensors.wall_front, sensors.wall_left, sensors.wall_right);
 8003c6c:	4b05      	ldr	r3, [pc, #20]	@ (8003c84 <championship_update_walls+0x234>)
 8003c6e:	7b1b      	ldrb	r3, [r3, #12]
    send_bluetooth_printf("Walls updated at (%d,%d) F:%d L:%d R:%d\r\n",
 8003c70:	9301      	str	r3, [sp, #4]
 8003c72:	9000      	str	r0, [sp, #0]
 8003c74:	4623      	mov	r3, r4
 8003c76:	4808      	ldr	r0, [pc, #32]	@ (8003c98 <championship_update_walls+0x248>)
 8003c78:	f7fd fe60 	bl	800193c <send_bluetooth_printf>
}
 8003c7c:	bf00      	nop
 8003c7e:	3724      	adds	r7, #36	@ 0x24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}
 8003c84:	20001460 	.word	0x20001460
 8003c88:	2000144c 	.word	0x2000144c
 8003c8c:	2000044c 	.word	0x2000044c
 8003c90:	0800fcdc 	.word	0x0800fcdc
 8003c94:	0800fcec 	.word	0x0800fcec
 8003c98:	0800eba4 	.word	0x0800eba4

08003c9c <turn_to_direction>:

/**
 * @brief Turn robot to face target direction (MMS style)
 */
void turn_to_direction(int target_dir)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
    while (robot.direction != target_dir) {
 8003ca4:	e041      	b.n	8003d2a <turn_to_direction+0x8e>
        int turn_diff = (target_dir - robot.direction + 4) % 4;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	@ (8003d40 <turn_to_direction+0xa4>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	3304      	adds	r3, #4
 8003cb0:	425a      	negs	r2, r3
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	f002 0203 	and.w	r2, r2, #3
 8003cba:	bf58      	it	pl
 8003cbc:	4253      	negpl	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

        if (turn_diff == 1) {
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10e      	bne.n	8003ce4 <turn_to_direction+0x48>
            turn_right();
 8003cc6:	f000 fc6d 	bl	80045a4 <turn_right>
            robot.direction = (robot.direction + 1) % 4;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <turn_to_direction+0xa4>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	425a      	negs	r2, r3
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	bf58      	it	pl
 8003cdc:	4253      	negpl	r3, r2
 8003cde:	4a18      	ldr	r2, [pc, #96]	@ (8003d40 <turn_to_direction+0xa4>)
 8003ce0:	6093      	str	r3, [r2, #8]
 8003ce2:	e022      	b.n	8003d2a <turn_to_direction+0x8e>
        } else if (turn_diff == 3) {
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d10e      	bne.n	8003d08 <turn_to_direction+0x6c>
            turn_left();
 8003cea:	f000 fc1b 	bl	8004524 <turn_left>
            robot.direction = (robot.direction + 3) % 4;
 8003cee:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <turn_to_direction+0xa4>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	425a      	negs	r2, r3
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	f002 0203 	and.w	r2, r2, #3
 8003cfe:	bf58      	it	pl
 8003d00:	4253      	negpl	r3, r2
 8003d02:	4a0f      	ldr	r2, [pc, #60]	@ (8003d40 <turn_to_direction+0xa4>)
 8003d04:	6093      	str	r3, [r2, #8]
 8003d06:	e010      	b.n	8003d2a <turn_to_direction+0x8e>
        } else if (turn_diff == 2) {
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d10d      	bne.n	8003d2a <turn_to_direction+0x8e>
            turn_around();
 8003d0e:	f000 fc89 	bl	8004624 <turn_around>
            robot.direction = (robot.direction + 2) % 4;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <turn_to_direction+0xa4>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	3302      	adds	r3, #2
 8003d18:	425a      	negs	r2, r3
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	bf58      	it	pl
 8003d24:	4253      	negpl	r3, r2
 8003d26:	4a06      	ldr	r2, [pc, #24]	@ (8003d40 <turn_to_direction+0xa4>)
 8003d28:	6093      	str	r3, [r2, #8]
    while (robot.direction != target_dir) {
 8003d2a:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <turn_to_direction+0xa4>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1b8      	bne.n	8003ca6 <turn_to_direction+0xa>
        }
    }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000144c 	.word	0x2000144c

08003d44 <championship_move_forward>:


/**
 * @brief Enhanced championship move forward with S-curve and gyro stabilization
 */
bool championship_move_forward(void) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
    if (mpu9250_is_initialized()) {
 8003d48:	f7fe fc5c 	bl	8002604 <mpu9250_is_initialized>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <championship_move_forward+0x16>
        // Use enhanced S-curve movement with gyro stabilization
        return championship_move_forward_enhanced();
 8003d52:	f7fe f9bf 	bl	80020d4 <championship_move_forward_enhanced>
 8003d56:	4603      	mov	r3, r0
 8003d58:	e017      	b.n	8003d8a <championship_move_forward+0x46>
    } else {
        // Fallback to original movement if gyro not available
        update_sensors();
 8003d5a:	f000 fdaf 	bl	80048bc <update_sensors>

        if (sensors.wall_front) {
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d90 <championship_move_forward+0x4c>)
 8003d60:	7a9b      	ldrb	r3, [r3, #10]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <championship_move_forward+0x2c>
            send_bluetooth_message("Front wall detected, cannot move\r\n");
 8003d66:	480b      	ldr	r0, [pc, #44]	@ (8003d94 <championship_move_forward+0x50>)
 8003d68:	f7fd fdd2 	bl	8001910 <send_bluetooth_message>
            return false;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e00c      	b.n	8003d8a <championship_move_forward+0x46>
        }

        move_forward();
 8003d70:	f000 fb6a 	bl	8004448 <move_forward>
        robot.exploration_steps++;
 8003d74:	4b08      	ldr	r3, [pc, #32]	@ (8003d98 <championship_move_forward+0x54>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a07      	ldr	r2, [pc, #28]	@ (8003d98 <championship_move_forward+0x54>)
 8003d7c:	6113      	str	r3, [r2, #16]
        exploration_steps++;
 8003d7e:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <championship_move_forward+0x58>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a05      	ldr	r2, [pc, #20]	@ (8003d9c <championship_move_forward+0x58>)
 8003d86:	6013      	str	r3, [r2, #0]
        return true;
 8003d88:	2301      	movs	r3, #1
    }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20001460 	.word	0x20001460
 8003d94:	0800ebd0 	.word	0x0800ebd0
 8003d98:	2000144c 	.word	0x2000144c
 8003d9c:	20001498 	.word	0x20001498

08003da0 <is_at_goal>:
/**
 * @brief Check if robot is at goal (MMS style)
 */
bool is_at_goal(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
    if (!robot.center_reached) {
 8003da4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e18 <is_at_goal+0x78>)
 8003da6:	7b1b      	ldrb	r3, [r3, #12]
 8003da8:	f083 0301 	eor.w	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01e      	beq.n	8003df0 <is_at_goal+0x50>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8003db2:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <is_at_goal+0x78>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b19      	ldr	r3, [pc, #100]	@ (8003e1c <is_at_goal+0x7c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d005      	beq.n	8003dca <is_at_goal+0x2a>
 8003dbe:	4b16      	ldr	r3, [pc, #88]	@ (8003e18 <is_at_goal+0x78>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b17      	ldr	r3, [pc, #92]	@ (8003e20 <is_at_goal+0x80>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d10d      	bne.n	8003de6 <is_at_goal+0x46>
               (robot.y == goal_y1 || robot.y == goal_y2);
 8003dca:	4b13      	ldr	r3, [pc, #76]	@ (8003e18 <is_at_goal+0x78>)
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <is_at_goal+0x84>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d005      	beq.n	8003de2 <is_at_goal+0x42>
               (robot.y == goal_y1 || robot.y == goal_y2);
 8003dd6:	4b10      	ldr	r3, [pc, #64]	@ (8003e18 <is_at_goal+0x78>)
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <is_at_goal+0x88>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d101      	bne.n	8003de6 <is_at_goal+0x46>
        return (robot.x == goal_x1 || robot.x == goal_x2) &&
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <is_at_goal+0x48>
 8003de6:	2300      	movs	r3, #0
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e00d      	b.n	8003e0c <is_at_goal+0x6c>
    } else {
        return robot.x == 0 && robot.y == 0;
 8003df0:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <is_at_goal+0x78>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <is_at_goal+0x64>
 8003df8:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <is_at_goal+0x78>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <is_at_goal+0x64>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <is_at_goal+0x66>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
    }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2000144c 	.word	0x2000144c
 8003e1c:	0800fcfc 	.word	0x0800fcfc
 8003e20:	0800fd04 	.word	0x0800fd04
 8003e24:	0800fd00 	.word	0x0800fd00
 8003e28:	0800fd08 	.word	0x0800fd08

08003e2c <championship_exploration_with_analysis>:

/**
 * @brief Main championship exploration algorithm with MMS integration
 */
void championship_exploration_with_analysis(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af00      	add	r7, sp, #0
    send_bluetooth_message("Starting championship exploration\r\n");
 8003e32:	4881      	ldr	r0, [pc, #516]	@ (8004038 <championship_exploration_with_analysis+0x20c>)
 8003e34:	f7fd fd6c 	bl	8001910 <send_bluetooth_message>

    int step_count = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    const int max_steps = 1000;
 8003e3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e40:	613b      	str	r3, [r7, #16]

    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 8003e42:	e0c0      	b.n	8003fc6 <championship_exploration_with_analysis+0x19a>
        send_bluetooth_printf("Step %d: Robot at (%d,%d)\r\n", step_count, robot.x, robot.y);
 8003e44:	4b7d      	ldr	r3, [pc, #500]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b7c      	ldr	r3, [pc, #496]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e4e:	487c      	ldr	r0, [pc, #496]	@ (8004040 <championship_exploration_with_analysis+0x214>)
 8003e50:	f7fd fd74 	bl	800193c <send_bluetooth_printf>

        // Update walls and run championship flood fill
        championship_update_walls();
 8003e54:	f7ff fdfc 	bl	8003a50 <championship_update_walls>
        championship_flood_fill();
 8003e58:	f7ff fb2c 	bl	80034b4 <championship_flood_fill>

        // Check if goal reached
        if (is_at_goal()) {
 8003e5c:	f7ff ffa0 	bl	8003da0 <is_at_goal>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d032      	beq.n	8003ecc <championship_exploration_with_analysis+0xa0>
            if (!robot.center_reached) {
 8003e66:	4b75      	ldr	r3, [pc, #468]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003e68:	7b1b      	ldrb	r3, [r3, #12]
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d024      	beq.n	8003ebe <championship_exploration_with_analysis+0x92>
                send_bluetooth_message("CENTER REACHED! Switching to return mode\r\n");
 8003e74:	4873      	ldr	r0, [pc, #460]	@ (8004044 <championship_exploration_with_analysis+0x218>)
 8003e76:	f7fd fd4b 	bl	8001910 <send_bluetooth_message>
                robot.center_reached = true;
 8003e7a:	4b70      	ldr	r3, [pc, #448]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	731a      	strb	r2, [r3, #12]
                play_confirmation_tone();
 8003e80:	f7fd f89a 	bl	8000fb8 <play_confirmation_tone>

                // Reset visit counts for return journey
                for (int x = 0; x < MAZE_SIZE; x++) {
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
 8003e88:	e015      	b.n	8003eb6 <championship_exploration_with_analysis+0x8a>
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e00c      	b.n	8003eaa <championship_exploration_with_analysis+0x7e>
                        maze[x][y].visit_count = 0;
 8003e90:	496d      	ldr	r1, [pc, #436]	@ (8004048 <championship_exploration_with_analysis+0x21c>)
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	011a      	lsls	r2, r3, #4
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4413      	add	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	440b      	add	r3, r1
 8003e9e:	330c      	adds	r3, #12
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
                    for (int y = 0; y < MAZE_SIZE; y++) {
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	ddef      	ble.n	8003e90 <championship_exploration_with_analysis+0x64>
                for (int x = 0; x < MAZE_SIZE; x++) {
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	623b      	str	r3, [r7, #32]
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	2b0f      	cmp	r3, #15
 8003eba:	dde6      	ble.n	8003e8a <championship_exploration_with_analysis+0x5e>
 8003ebc:	e006      	b.n	8003ecc <championship_exploration_with_analysis+0xa0>
                    }
                }
            } else {
                send_bluetooth_message("RETURNED TO START! Exploration complete!\r\n");
 8003ebe:	4863      	ldr	r0, [pc, #396]	@ (800404c <championship_exploration_with_analysis+0x220>)
 8003ec0:	f7fd fd26 	bl	8001910 <send_bluetooth_message>
                robot.returned_to_start = true;
 8003ec4:	4b5d      	ldr	r3, [pc, #372]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	735a      	strb	r2, [r3, #13]
                break;
 8003eca:	e090      	b.n	8003fee <championship_exploration_with_analysis+0x1c2>
            }
        }

        // Get championship direction
        int next_dir = get_championship_direction();
 8003ecc:	f7ff fca4 	bl	8003818 <get_championship_direction>
 8003ed0:	60f8      	str	r0, [r7, #12]
        send_bluetooth_printf("Championship direction: %d\r\n", next_dir);
 8003ed2:	68f9      	ldr	r1, [r7, #12]
 8003ed4:	485e      	ldr	r0, [pc, #376]	@ (8004050 <championship_exploration_with_analysis+0x224>)
 8003ed6:	f7fd fd31 	bl	800193c <send_bluetooth_printf>

        // Turn and move
        turn_to_direction(next_dir);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fede 	bl	8003c9c <turn_to_direction>

        if (championship_move_forward()) {
 8003ee0:	f7ff ff30 	bl	8003d44 <championship_move_forward>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <championship_exploration_with_analysis+0xda>
            // Update LED status
            if (robot.center_reached) {
 8003eea:	4b54      	ldr	r3, [pc, #336]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003eec:	7b1b      	ldrb	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <championship_exploration_with_analysis+0xd0>
                led_status(0, 1); // Right LED for return journey
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f001 fe8f 	bl	8005c18 <led_status>
 8003efa:	e05e      	b.n	8003fba <championship_exploration_with_analysis+0x18e>
            } else {
                led_status(1, 0); // Left LED for exploration
 8003efc:	2100      	movs	r1, #0
 8003efe:	2001      	movs	r0, #1
 8003f00:	f001 fe8a 	bl	8005c18 <led_status>
 8003f04:	e059      	b.n	8003fba <championship_exploration_with_analysis+0x18e>
            }
        } else {
            send_bluetooth_message("Movement blocked - trying alternatives\r\n");
 8003f06:	4853      	ldr	r0, [pc, #332]	@ (8004054 <championship_exploration_with_analysis+0x228>)
 8003f08:	f7fd fd02 	bl	8001910 <send_bluetooth_message>
            // Try other directions if blocked
            bool moved = false;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e03e      	b.n	8003f94 <championship_exploration_with_analysis+0x168>
                if (alt_dir != next_dir) {
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d037      	beq.n	8003f8e <championship_exploration_with_analysis+0x162>
                    int nx = robot.x + dx[alt_dir];
 8003f1e:	4b47      	ldr	r3, [pc, #284]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	494d      	ldr	r1, [pc, #308]	@ (8004058 <championship_exploration_with_analysis+0x22c>)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]
                    int ny = robot.y + dy[alt_dir];
 8003f2e:	4b43      	ldr	r3, [pc, #268]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	494a      	ldr	r1, [pc, #296]	@ (800405c <championship_exploration_with_analysis+0x230>)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	607b      	str	r3, [r7, #4]
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	db24      	blt.n	8003f8e <championship_exploration_with_analysis+0x162>
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	2b0f      	cmp	r3, #15
 8003f48:	dc21      	bgt.n	8003f8e <championship_exploration_with_analysis+0x162>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	db1e      	blt.n	8003f8e <championship_exploration_with_analysis+0x162>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	dc1b      	bgt.n	8003f8e <championship_exploration_with_analysis+0x162>
                        !maze[robot.x][robot.y].walls[alt_dir]) {
 8003f56:	4b39      	ldr	r3, [pc, #228]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b38      	ldr	r3, [pc, #224]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	493a      	ldr	r1, [pc, #232]	@ (8004048 <championship_exploration_with_analysis+0x21c>)
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	4413      	add	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	18ca      	adds	r2, r1, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3305      	adds	r3, #5
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	f083 0301 	eor.w	r3, r3, #1
 8003f74:	b2db      	uxtb	r3, r3
                    if (nx >= 0 && nx < MAZE_SIZE && ny >= 0 && ny < MAZE_SIZE &&
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <championship_exploration_with_analysis+0x162>
                        turn_to_direction(alt_dir);
 8003f7a:	6978      	ldr	r0, [r7, #20]
 8003f7c:	f7ff fe8e 	bl	8003c9c <turn_to_direction>
                        if (championship_move_forward()) {
 8003f80:	f7ff fee0 	bl	8003d44 <championship_move_forward>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <championship_exploration_with_analysis+0x162>
                            moved = true;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	76fb      	strb	r3, [r7, #27]
            for (int alt_dir = 0; alt_dir < 4 && !moved; alt_dir++) {
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	dc05      	bgt.n	8003fa6 <championship_exploration_with_analysis+0x17a>
 8003f9a:	7efb      	ldrb	r3, [r7, #27]
 8003f9c:	f083 0301 	eor.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1b7      	bne.n	8003f16 <championship_exploration_with_analysis+0xea>
                        }
                    }
                }
            }

            if (!moved) {
 8003fa6:	7efb      	ldrb	r3, [r7, #27]
 8003fa8:	f083 0301 	eor.w	r3, r3, #1
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <championship_exploration_with_analysis+0x18e>
                send_bluetooth_message("All directions blocked!\r\n");
 8003fb2:	482b      	ldr	r0, [pc, #172]	@ (8004060 <championship_exploration_with_analysis+0x234>)
 8003fb4:	f7fd fcac 	bl	8001910 <send_bluetooth_message>
                break;
 8003fb8:	e019      	b.n	8003fee <championship_exploration_with_analysis+0x1c2>
            }
        }

        step_count++;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_Delay(10); // Small delay for stability
 8003fc0:	200a      	movs	r0, #10
 8003fc2:	f001 ffb5 	bl	8005f30 <HAL_Delay>
    while (step_count < max_steps && (!robot.center_reached || !robot.returned_to_start)) {
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	da0f      	bge.n	8003fee <championship_exploration_with_analysis+0x1c2>
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003fd0:	7b1b      	ldrb	r3, [r3, #12]
 8003fd2:	f083 0301 	eor.w	r3, r3, #1
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f47f af33 	bne.w	8003e44 <championship_exploration_with_analysis+0x18>
 8003fde:	4b17      	ldr	r3, [pc, #92]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003fe0:	7b5b      	ldrb	r3, [r3, #13]
 8003fe2:	f083 0301 	eor.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f af2b 	bne.w	8003e44 <championship_exploration_with_analysis+0x18>
    }

    // Final status
    led_status(0, 0);
 8003fee:	2100      	movs	r1, #0
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f001 fe11 	bl	8005c18 <led_status>
    send_bluetooth_printf("Exploration completed in %d moves\r\n", robot.exploration_steps);
 8003ff6:	4b11      	ldr	r3, [pc, #68]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4819      	ldr	r0, [pc, #100]	@ (8004064 <championship_exploration_with_analysis+0x238>)
 8003ffe:	f7fd fc9d 	bl	800193c <send_bluetooth_printf>

    // Execute perfect path analysis if exploration successful
    if (robot.center_reached && robot.returned_to_start) {
 8004002:	4b0e      	ldr	r3, [pc, #56]	@ (800403c <championship_exploration_with_analysis+0x210>)
 8004004:	7b1b      	ldrb	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <championship_exploration_with_analysis+0x1f6>
 800400a:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <championship_exploration_with_analysis+0x210>)
 800400c:	7b5b      	ldrb	r3, [r3, #13]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d007      	beq.n	8004022 <championship_exploration_with_analysis+0x1f6>
        send_bluetooth_message("\r\nExploration successful! Starting path analysis...\r\n");
 8004012:	4815      	ldr	r0, [pc, #84]	@ (8004068 <championship_exploration_with_analysis+0x23c>)
 8004014:	f7fd fc7c 	bl	8001910 <send_bluetooth_message>
        execute_championship_path_analysis();
 8004018:	f000 f82a 	bl	8004070 <execute_championship_path_analysis>
        play_success_tone();
 800401c:	f7fc ffde 	bl	8000fdc <play_success_tone>
 8004020:	e005      	b.n	800402e <championship_exploration_with_analysis+0x202>
    } else {
        send_bluetooth_message("Exploration incomplete - path analysis not available\r\n");
 8004022:	4812      	ldr	r0, [pc, #72]	@ (800406c <championship_exploration_with_analysis+0x240>)
 8004024:	f7fd fc74 	bl	8001910 <send_bluetooth_message>
        play_error_tone();
 8004028:	f7fd f804 	bl	8001034 <play_error_tone>
    }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3728      	adds	r7, #40	@ 0x28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	0800ebf4 	.word	0x0800ebf4
 800403c:	2000144c 	.word	0x2000144c
 8004040:	0800ec18 	.word	0x0800ec18
 8004044:	0800ec34 	.word	0x0800ec34
 8004048:	2000044c 	.word	0x2000044c
 800404c:	0800ec60 	.word	0x0800ec60
 8004050:	0800ec8c 	.word	0x0800ec8c
 8004054:	0800ecac 	.word	0x0800ecac
 8004058:	0800fcdc 	.word	0x0800fcdc
 800405c:	0800fcec 	.word	0x0800fcec
 8004060:	0800ecd8 	.word	0x0800ecd8
 8004064:	0800ecf4 	.word	0x0800ecf4
 8004068:	0800ed18 	.word	0x0800ed18
 800406c:	0800ed50 	.word	0x0800ed50

08004070 <execute_championship_path_analysis>:

/**
 * @brief Execute championship path analysis (MMS style)
 */
void execute_championship_path_analysis(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== CHAMPIONSHIP PATH ANALYSIS ===\r\n");
 8004074:	4810      	ldr	r0, [pc, #64]	@ (80040b8 <execute_championship_path_analysis+0x48>)
 8004076:	f7fd fc4b 	bl	8001910 <send_bluetooth_message>

    // Calculate optimal path from explored areas
    calculate_optimal_path_from_explored_areas();
 800407a:	f7fc fff5 	bl	8001068 <calculate_optimal_path_from_explored_areas>

    // Comprehensive maze performance analysis
    analyze_championship_maze_performance();
 800407e:	f7fd fa85 	bl	800158c <analyze_championship_maze_performance>

    // Print optimal distance map
    print_championship_distance_map();
 8004082:	f7fd fbb5 	bl	80017f0 <print_championship_distance_map>

    // Visualize optimal path (would work with MMS visualization)
    send_bluetooth_message("\r\n🎯 CHAMPIONSHIP ANALYSIS COMPLETE!\r\n");
 8004086:	480d      	ldr	r0, [pc, #52]	@ (80040bc <execute_championship_path_analysis+0x4c>)
 8004088:	f7fd fc42 	bl	8001910 <send_bluetooth_message>

    if (theoretical_minimum < MAX_DISTANCE) {
 800408c:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <execute_championship_path_analysis+0x50>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f242 720e 	movw	r2, #9998	@ 0x270e
 8004094:	4293      	cmp	r3, r2
 8004096:	dc09      	bgt.n	80040ac <execute_championship_path_analysis+0x3c>
        send_bluetooth_printf("Optimal path through explored areas: %d steps!\r\n", theoretical_minimum);
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <execute_championship_path_analysis+0x50>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	4809      	ldr	r0, [pc, #36]	@ (80040c4 <execute_championship_path_analysis+0x54>)
 80040a0:	f7fd fc4c 	bl	800193c <send_bluetooth_printf>
        send_bluetooth_message("✅ Ready for IEEE Micromouse competition!\r\n");
 80040a4:	4808      	ldr	r0, [pc, #32]	@ (80040c8 <execute_championship_path_analysis+0x58>)
 80040a6:	f7fd fc33 	bl	8001910 <send_bluetooth_message>
    } else {
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
    }
}
 80040aa:	e002      	b.n	80040b2 <execute_championship_path_analysis+0x42>
        send_bluetooth_message("❌ No valid path found through explored areas\r\n");
 80040ac:	4807      	ldr	r0, [pc, #28]	@ (80040cc <execute_championship_path_analysis+0x5c>)
 80040ae:	f7fd fc2f 	bl	8001910 <send_bluetooth_message>
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	0800ed88 	.word	0x0800ed88
 80040bc:	0800edb0 	.word	0x0800edb0
 80040c0:	2000149c 	.word	0x2000149c
 80040c4:	0800eddc 	.word	0x0800eddc
 80040c8:	0800ee10 	.word	0x0800ee10
 80040cc:	0800ee40 	.word	0x0800ee40

080040d0 <reset_championship_micromouse>:

/**
 * @brief Reset championship micromouse to initial state
 */
void reset_championship_micromouse(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
    robot.x = 0;
 80040d4:	4b10      	ldr	r3, [pc, #64]	@ (8004118 <reset_championship_micromouse+0x48>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 80040da:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <reset_championship_micromouse+0x48>)
 80040dc:	2200      	movs	r2, #0
 80040de:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 80040e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <reset_championship_micromouse+0x48>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
    robot.center_reached = false;
 80040e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <reset_championship_micromouse+0x48>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	731a      	strb	r2, [r3, #12]
    robot.returned_to_start = false;
 80040ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <reset_championship_micromouse+0x48>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	735a      	strb	r2, [r3, #13]
    robot.exploration_steps = 0;
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <reset_championship_micromouse+0x48>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]

    exploration_steps = 0;
 80040f8:	4b08      	ldr	r3, [pc, #32]	@ (800411c <reset_championship_micromouse+0x4c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
    theoretical_minimum = 0;
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <reset_championship_micromouse+0x50>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

    initialize_championship_maze();
 8004104:	f7ff f956 	bl	80033b4 <initialize_championship_maze>
    send_bluetooth_message("Championship micromouse reset to initial state\r\n");
 8004108:	4806      	ldr	r0, [pc, #24]	@ (8004124 <reset_championship_micromouse+0x54>)
 800410a:	f7fd fc01 	bl	8001910 <send_bluetooth_message>
    play_startup_tone();
 800410e:	f7fc ff37 	bl	8000f80 <play_startup_tone>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	2000144c 	.word	0x2000144c
 800411c:	20001498 	.word	0x20001498
 8004120:	2000149c 	.word	0x2000149c
 8004124:	0800ee74 	.word	0x0800ee74

08004128 <championship_speed_run>:

/**
 * @brief Championship speed run with MMS path analysis
 */
void championship_speed_run(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 CHAMPIONSHIP SPEED RUN MODE!\r\n");
 800412c:	4804      	ldr	r0, [pc, #16]	@ (8004140 <championship_speed_run+0x18>)
 800412e:	f7fd fbef 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_message("Using MMS optimal path analysis\r\n");
 8004132:	4804      	ldr	r0, [pc, #16]	@ (8004144 <championship_speed_run+0x1c>)
 8004134:	f7fd fbec 	bl	8001910 <send_bluetooth_message>

    // Use the advanced speed run implementation
    speed_run();
 8004138:	f000 f806 	bl	8004148 <speed_run>
}
 800413c:	bf00      	nop
 800413e:	bd80      	pop	{r7, pc}
 8004140:	0800eea8 	.word	0x0800eea8
 8004144:	0800eed0 	.word	0x0800eed0

08004148 <speed_run>:

/**
 * @brief Simple speed run implementation
 */
void speed_run(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n🚀 SPEED RUN MODE ACTIVATED!\r\n");
 800414e:	4864      	ldr	r0, [pc, #400]	@ (80042e0 <speed_run+0x198>)
 8004150:	f7fd fbde 	bl	8001910 <send_bluetooth_message>

    // Check if exploration was completed
    if (!robot.center_reached || !robot.returned_to_start) {
 8004154:	4b63      	ldr	r3, [pc, #396]	@ (80042e4 <speed_run+0x19c>)
 8004156:	7b1b      	ldrb	r3, [r3, #12]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <speed_run+0x28>
 8004162:	4b60      	ldr	r3, [pc, #384]	@ (80042e4 <speed_run+0x19c>)
 8004164:	7b5b      	ldrb	r3, [r3, #13]
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <speed_run+0x30>
        send_bluetooth_message("❌ Speed run not available - exploration not complete\r\n");
 8004170:	485d      	ldr	r0, [pc, #372]	@ (80042e8 <speed_run+0x1a0>)
 8004172:	f7fd fbcd 	bl	8001910 <send_bluetooth_message>
        return;
 8004176:	e0b0      	b.n	80042da <speed_run+0x192>
    }

    send_bluetooth_message("Using championship algorithms for optimal speed run\r\n");
 8004178:	485c      	ldr	r0, [pc, #368]	@ (80042ec <speed_run+0x1a4>)
 800417a:	f7fd fbc9 	bl	8001910 <send_bluetooth_message>

    // Reset robot position
    robot.x = 0;
 800417e:	4b59      	ldr	r3, [pc, #356]	@ (80042e4 <speed_run+0x19c>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
    robot.y = 0;
 8004184:	4b57      	ldr	r3, [pc, #348]	@ (80042e4 <speed_run+0x19c>)
 8004186:	2200      	movs	r2, #0
 8004188:	605a      	str	r2, [r3, #4]
    robot.direction = NORTH;
 800418a:	4b56      	ldr	r3, [pc, #344]	@ (80042e4 <speed_run+0x19c>)
 800418c:	2200      	movs	r2, #0
 800418e:	609a      	str	r2, [r3, #8]

    // Status indication
    led_status(1, 1); // Both LEDs on
 8004190:	2101      	movs	r1, #1
 8004192:	2001      	movs	r0, #1
 8004194:	f001 fd40 	bl	8005c18 <led_status>
    play_confirmation_tone();
 8004198:	f7fc ff0e 	bl	8000fb8 <play_confirmation_tone>

    // Wait for confirmation
    send_bluetooth_message("Press RIGHT button to execute speed run...\r\n"); //later change to hand movement
 800419c:	4854      	ldr	r0, [pc, #336]	@ (80042f0 <speed_run+0x1a8>)
 800419e:	f7fd fbb7 	bl	8001910 <send_bluetooth_message>

    uint32_t start_time = HAL_GetTick();
 80041a2:	f001 feb9 	bl	8005f18 <HAL_GetTick>
 80041a6:	60f8      	str	r0, [r7, #12]
    bool execute_run = false;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]

    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 80041ac:	e00d      	b.n	80041ca <speed_run+0x82>
        if (button_pressed == 2) { // Right button
 80041ae:	4b51      	ldr	r3, [pc, #324]	@ (80042f4 <speed_run+0x1ac>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d105      	bne.n	80041c4 <speed_run+0x7c>
            button_pressed = 0;
 80041b8:	4b4e      	ldr	r3, [pc, #312]	@ (80042f4 <speed_run+0x1ac>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
            execute_run = true;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
            break;
 80041c2:	e00b      	b.n	80041dc <speed_run+0x94>
        }
        HAL_Delay(100);
 80041c4:	2064      	movs	r0, #100	@ 0x64
 80041c6:	f001 feb3 	bl	8005f30 <HAL_Delay>
    while ((HAL_GetTick() - start_time) < 10000) { // 10 second timeout
 80041ca:	f001 fea5 	bl	8005f18 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f242 720f 	movw	r2, #9999	@ 0x270f
 80041d8:	4293      	cmp	r3, r2
 80041da:	d9e8      	bls.n	80041ae <speed_run+0x66>
    }

    if (!execute_run) {
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d007      	beq.n	80041f8 <speed_run+0xb0>
        send_bluetooth_message("⏰ Speed run cancelled - timeout\r\n");
 80041e8:	4843      	ldr	r0, [pc, #268]	@ (80042f8 <speed_run+0x1b0>)
 80041ea:	f7fd fb91 	bl	8001910 <send_bluetooth_message>
        led_status(0, 0);
 80041ee:	2100      	movs	r1, #0
 80041f0:	2000      	movs	r0, #0
 80041f2:	f001 fd11 	bl	8005c18 <led_status>
        return;
 80041f6:	e070      	b.n	80042da <speed_run+0x192>
    }

    send_bluetooth_message("🏁 EXECUTING SPEED RUN!\r\n");
 80041f8:	4840      	ldr	r0, [pc, #256]	@ (80042fc <speed_run+0x1b4>)
 80041fa:	f7fd fb89 	bl	8001910 <send_bluetooth_message>

    // Simple speed run - follow the shortest known path to center
    int moves = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
    const int max_moves = 50;
 8004202:	2332      	movs	r3, #50	@ 0x32
 8004204:	60bb      	str	r3, [r7, #8]

    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8004206:	e021      	b.n	800424c <speed_run+0x104>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
           moves < max_moves) {

        // Update sensor data
        update_sensors();
 8004208:	f000 fb58 	bl	80048bc <update_sensors>

        // Use championship flood fill to get direction
        championship_flood_fill();
 800420c:	f7ff f952 	bl	80034b4 <championship_flood_fill>
        int next_dir = get_championship_direction();
 8004210:	f7ff fb02 	bl	8003818 <get_championship_direction>
 8004214:	6078      	str	r0, [r7, #4]

        // Turn to target direction
        turn_to_direction(next_dir);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff fd40 	bl	8003c9c <turn_to_direction>

        // Move forward
        if (championship_move_forward()) {
 800421c:	f7ff fd92 	bl	8003d44 <championship_move_forward>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <speed_run+0xf6>
            moves++;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3301      	adds	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
            send_bluetooth_printf("Speed run move %d to (%d,%d)\r\n", moves, robot.x, robot.y);
 800422c:	4b2d      	ldr	r3, [pc, #180]	@ (80042e4 <speed_run+0x19c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b2c      	ldr	r3, [pc, #176]	@ (80042e4 <speed_run+0x19c>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	6939      	ldr	r1, [r7, #16]
 8004236:	4832      	ldr	r0, [pc, #200]	@ (8004300 <speed_run+0x1b8>)
 8004238:	f7fd fb80 	bl	800193c <send_bluetooth_printf>
 800423c:	e003      	b.n	8004246 <speed_run+0xfe>
        } else {
            send_bluetooth_message("❌ Speed run blocked!\r\n");
 800423e:	4831      	ldr	r0, [pc, #196]	@ (8004304 <speed_run+0x1bc>)
 8004240:	f7fd fb66 	bl	8001910 <send_bluetooth_message>
            break;
 8004244:	e01e      	b.n	8004284 <speed_run+0x13c>
        }

        // Brief delay for stability
        HAL_Delay(50);
 8004246:	2032      	movs	r0, #50	@ 0x32
 8004248:	f001 fe72 	bl	8005f30 <HAL_Delay>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 800424c:	4b25      	ldr	r3, [pc, #148]	@ (80042e4 <speed_run+0x19c>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b2d      	ldr	r3, [pc, #180]	@ (8004308 <speed_run+0x1c0>)
 8004252:	681b      	ldr	r3, [r3, #0]
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8004254:	429a      	cmp	r2, r3
 8004256:	d005      	beq.n	8004264 <speed_run+0x11c>
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 8004258:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <speed_run+0x19c>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b2b      	ldr	r3, [pc, #172]	@ (800430c <speed_run+0x1c4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d10b      	bne.n	800427c <speed_run+0x134>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8004264:	4b1f      	ldr	r3, [pc, #124]	@ (80042e4 <speed_run+0x19c>)
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	4b29      	ldr	r3, [pc, #164]	@ (8004310 <speed_run+0x1c8>)
 800426a:	681b      	ldr	r3, [r3, #0]
    while (!((robot.x == goal_x1 || robot.x == goal_x2) &&
 800426c:	429a      	cmp	r2, r3
 800426e:	d009      	beq.n	8004284 <speed_run+0x13c>
             (robot.y == goal_y1 || robot.y == goal_y2)) &&
 8004270:	4b1c      	ldr	r3, [pc, #112]	@ (80042e4 <speed_run+0x19c>)
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	4b27      	ldr	r3, [pc, #156]	@ (8004314 <speed_run+0x1cc>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d003      	beq.n	8004284 <speed_run+0x13c>
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	429a      	cmp	r2, r3
 8004282:	dbc1      	blt.n	8004208 <speed_run+0xc0>
    }

    // Speed run complete
    led_status(0, 0);
 8004284:	2100      	movs	r1, #0
 8004286:	2000      	movs	r0, #0
 8004288:	f001 fcc6 	bl	8005c18 <led_status>

    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 800428c:	4b15      	ldr	r3, [pc, #84]	@ (80042e4 <speed_run+0x19c>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4b1d      	ldr	r3, [pc, #116]	@ (8004308 <speed_run+0x1c0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d005      	beq.n	80042a4 <speed_run+0x15c>
 8004298:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <speed_run+0x19c>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b1b      	ldr	r3, [pc, #108]	@ (800430c <speed_run+0x1c4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d115      	bne.n	80042d0 <speed_run+0x188>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <speed_run+0x19c>)
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	4b19      	ldr	r3, [pc, #100]	@ (8004310 <speed_run+0x1c8>)
 80042aa:	681b      	ldr	r3, [r3, #0]
    if ((robot.x == goal_x1 || robot.x == goal_x2) &&
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d005      	beq.n	80042bc <speed_run+0x174>
        (robot.y == goal_y1 || robot.y == goal_y2)) {
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <speed_run+0x19c>)
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <speed_run+0x1cc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d109      	bne.n	80042d0 <speed_run+0x188>
        send_bluetooth_message("🏁 SPEED RUN SUCCESS!\r\n");
 80042bc:	4816      	ldr	r0, [pc, #88]	@ (8004318 <speed_run+0x1d0>)
 80042be:	f7fd fb27 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_printf("Completed in %d moves\r\n", moves);
 80042c2:	6939      	ldr	r1, [r7, #16]
 80042c4:	4815      	ldr	r0, [pc, #84]	@ (800431c <speed_run+0x1d4>)
 80042c6:	f7fd fb39 	bl	800193c <send_bluetooth_printf>
        play_success_tone();
 80042ca:	f7fc fe87 	bl	8000fdc <play_success_tone>
 80042ce:	e004      	b.n	80042da <speed_run+0x192>
    } else {
        send_bluetooth_message("⚠️ Speed run incomplete\r\n");
 80042d0:	4813      	ldr	r0, [pc, #76]	@ (8004320 <speed_run+0x1d8>)
 80042d2:	f7fd fb1d 	bl	8001910 <send_bluetooth_message>
        play_error_tone();
 80042d6:	f7fc fead 	bl	8001034 <play_error_tone>
    }
}
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	0800eef4 	.word	0x0800eef4
 80042e4:	2000144c 	.word	0x2000144c
 80042e8:	0800ef18 	.word	0x0800ef18
 80042ec:	0800ef54 	.word	0x0800ef54
 80042f0:	0800ef8c 	.word	0x0800ef8c
 80042f4:	20001494 	.word	0x20001494
 80042f8:	0800efbc 	.word	0x0800efbc
 80042fc:	0800efe0 	.word	0x0800efe0
 8004300:	0800effc 	.word	0x0800effc
 8004304:	0800f01c 	.word	0x0800f01c
 8004308:	0800fcfc 	.word	0x0800fcfc
 800430c:	0800fd04 	.word	0x0800fd04
 8004310:	0800fd00 	.word	0x0800fd00
 8004314:	0800fd08 	.word	0x0800fd08
 8004318:	0800f038 	.word	0x0800f038
 800431c:	0800f054 	.word	0x0800f054
 8004320:	0800f06c 	.word	0x0800f06c

08004324 <update_encoder_totals>:

/**
 * @brief Update encoder totals with proper overflow handling - NEW FUNCTION
 */
void update_encoder_totals(void)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
    uint16_t current_left_raw = __HAL_TIM_GET_COUNTER(&htim2);
 800432a:	4b19      	ldr	r3, [pc, #100]	@ (8004390 <update_encoder_totals+0x6c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	80fb      	strh	r3, [r7, #6]
    uint16_t current_right_raw = __HAL_TIM_GET_COUNTER(&htim4);
 8004332:	4b18      	ldr	r3, [pc, #96]	@ (8004394 <update_encoder_totals+0x70>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	80bb      	strh	r3, [r7, #4]

    // Calculate differences accounting for 16-bit overflow
    int16_t left_diff = current_left_raw - last_left_count;
 800433a:	4b17      	ldr	r3, [pc, #92]	@ (8004398 <update_encoder_totals+0x74>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	b29b      	uxth	r3, r3
 8004344:	807b      	strh	r3, [r7, #2]
    int16_t right_diff = current_right_raw - last_right_count;
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <update_encoder_totals+0x78>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	88ba      	ldrh	r2, [r7, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	803b      	strh	r3, [r7, #0]

    // FIXED: Invert left encoder to match right encoder direction
    right_diff = -right_diff;  // Make left encoder positive for forward movement
 8004352:	883b      	ldrh	r3, [r7, #0]
 8004354:	425b      	negs	r3, r3
 8004356:	b29b      	uxth	r3, r3
 8004358:	803b      	strh	r3, [r7, #0]

    // Update totals
    left_total += left_diff;
 800435a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800435e:	4b10      	ldr	r3, [pc, #64]	@ (80043a0 <update_encoder_totals+0x7c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4413      	add	r3, r2
 8004364:	4a0e      	ldr	r2, [pc, #56]	@ (80043a0 <update_encoder_totals+0x7c>)
 8004366:	6013      	str	r3, [r2, #0]
    right_total += right_diff;
 8004368:	f9b7 2000 	ldrsh.w	r2, [r7]
 800436c:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <update_encoder_totals+0x80>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4413      	add	r3, r2
 8004372:	4a0c      	ldr	r2, [pc, #48]	@ (80043a4 <update_encoder_totals+0x80>)
 8004374:	6013      	str	r3, [r2, #0]

    // Update last counts
    last_left_count = current_left_raw;
 8004376:	4a08      	ldr	r2, [pc, #32]	@ (8004398 <update_encoder_totals+0x74>)
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	8013      	strh	r3, [r2, #0]
    last_right_count = current_right_raw;
 800437c:	4a07      	ldr	r2, [pc, #28]	@ (800439c <update_encoder_totals+0x78>)
 800437e:	88bb      	ldrh	r3, [r7, #4]
 8004380:	8013      	strh	r3, [r2, #0]
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	2000032c 	.word	0x2000032c
 8004394:	200003bc 	.word	0x200003bc
 8004398:	20000008 	.word	0x20000008
 800439c:	2000000a 	.word	0x2000000a
 80043a0:	200014bc 	.word	0x200014bc
 80043a4:	200014c0 	.word	0x200014c0

080043a8 <get_left_encoder_total>:

/**
 * @brief Get safe left encoder total - NEW FUNCTION
 */
int32_t get_left_encoder_total(void) {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
    update_encoder_totals();
 80043ac:	f7ff ffba 	bl	8004324 <update_encoder_totals>
    return left_total;
 80043b0:	4b01      	ldr	r3, [pc, #4]	@ (80043b8 <get_left_encoder_total+0x10>)
 80043b2:	681b      	ldr	r3, [r3, #0]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	200014bc 	.word	0x200014bc

080043bc <get_right_encoder_total>:

/**
 * @brief Get safe right encoder total - NEW FUNCTION
 */
int32_t get_right_encoder_total(void) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
    update_encoder_totals();
 80043c0:	f7ff ffb0 	bl	8004324 <update_encoder_totals>
    return right_total;
 80043c4:	4b01      	ldr	r3, [pc, #4]	@ (80043cc <get_right_encoder_total+0x10>)
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	200014c0 	.word	0x200014c0

080043d0 <start_encoders>:
}

/**
 * @brief Start encoder timers - FIXED VERSION
 */
void start_encoders(void) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // Right encoder
 80043d4:	213c      	movs	r1, #60	@ 0x3c
 80043d6:	4815      	ldr	r0, [pc, #84]	@ (800442c <start_encoders+0x5c>)
 80043d8:	f004 f9d8 	bl	800878c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // Left encoder
 80043dc:	213c      	movs	r1, #60	@ 0x3c
 80043de:	4814      	ldr	r0, [pc, #80]	@ (8004430 <start_encoders+0x60>)
 80043e0:	f004 f9d4 	bl	800878c <HAL_TIM_Encoder_Start>

    // Reset encoder counts
    __HAL_TIM_SET_COUNTER(&htim4, 32768);
 80043e4:	4b11      	ldr	r3, [pc, #68]	@ (800442c <start_encoders+0x5c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 32768);
 80043ee:	4b10      	ldr	r3, [pc, #64]	@ (8004430 <start_encoders+0x60>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_Delay(1);
 80043f8:	2001      	movs	r0, #1
 80043fa:	f001 fd99 	bl	8005f30 <HAL_Delay>
    // FIXED: Initialize our safe tracking variables
    last_left_count = 32768;
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <start_encoders+0x64>)
 8004400:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004404:	801a      	strh	r2, [r3, #0]
    last_right_count = 32768;
 8004406:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <start_encoders+0x68>)
 8004408:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800440c:	801a      	strh	r2, [r3, #0]
    left_total = 0;
 800440e:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <start_encoders+0x6c>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]
    right_total = 0;
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <start_encoders+0x70>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    encoders.left_total = 0;
 800441a:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <start_encoders+0x74>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
    encoders.right_total = 0;
 8004420:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <start_encoders+0x74>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200003bc 	.word	0x200003bc
 8004430:	2000032c 	.word	0x2000032c
 8004434:	20000008 	.word	0x20000008
 8004438:	2000000a 	.word	0x2000000a
 800443c:	200014bc 	.word	0x200014bc
 8004440:	200014c0 	.word	0x200014c0
 8004444:	20001484 	.word	0x20001484

08004448 <move_forward>:

/**
 * @brief Move forward one cell - FIXED VERSION
 */
void move_forward(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af00      	add	r7, sp, #0
    // Use safe encoder reading
    int32_t start_left = get_left_encoder_total();
 800444e:	f7ff ffab 	bl	80043a8 <get_left_encoder_total>
 8004452:	6278      	str	r0, [r7, #36]	@ 0x24
    int32_t start_right = get_right_encoder_total();
 8004454:	f7ff ffb2 	bl	80043bc <get_right_encoder_total>
 8004458:	6238      	str	r0, [r7, #32]

    // Check bounds before moving
    int new_x = robot.x + dx[robot.direction];
 800445a:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <move_forward+0xcc>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <move_forward+0xcc>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	492d      	ldr	r1, [pc, #180]	@ (8004518 <move_forward+0xd0>)
 8004464:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004468:	4413      	add	r3, r2
 800446a:	61fb      	str	r3, [r7, #28]
    int new_y = robot.y + dy[robot.direction];
 800446c:	4b29      	ldr	r3, [pc, #164]	@ (8004514 <move_forward+0xcc>)
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4b28      	ldr	r3, [pc, #160]	@ (8004514 <move_forward+0xcc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4929      	ldr	r1, [pc, #164]	@ (800451c <move_forward+0xd4>)
 8004476:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800447a:	4413      	add	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
    if (new_x < 0 || new_x >= MAZE_SIZE || new_y < 0 || new_y >= MAZE_SIZE) {
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db08      	blt.n	8004496 <move_forward+0x4e>
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b0f      	cmp	r3, #15
 8004488:	dc05      	bgt.n	8004496 <move_forward+0x4e>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	db02      	blt.n	8004496 <move_forward+0x4e>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b0f      	cmp	r3, #15
 8004494:	dd03      	ble.n	800449e <move_forward+0x56>
        send_bluetooth_message("Cannot move - would go out of bounds!\r\n");
 8004496:	4822      	ldr	r0, [pc, #136]	@ (8004520 <move_forward+0xd8>)
 8004498:	f7fd fa3a 	bl	8001910 <send_bluetooth_message>
        return;
 800449c:	e037      	b.n	800450e <move_forward+0xc6>
    }

    motor_set_fixed(0, true, 800);  // Left motor forward
 800449e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80044a2:	2101      	movs	r1, #1
 80044a4:	2000      	movs	r0, #0
 80044a6:	f000 f925 	bl	80046f4 <motor_set_fixed>
    motor_set_fixed(1, true, 800);  // Right motor forward
 80044aa:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80044ae:	2101      	movs	r1, #1
 80044b0:	2001      	movs	r0, #1
 80044b2:	f000 f91f 	bl	80046f4 <motor_set_fixed>

    // Move until target distance reached
    int32_t target_counts = ENCODER_COUNTS_PER_CELL;
 80044b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044ba:	617b      	str	r3, [r7, #20]
    while (1) {
        int32_t current_left = get_left_encoder_total();
 80044bc:	f7ff ff74 	bl	80043a8 <get_left_encoder_total>
 80044c0:	6138      	str	r0, [r7, #16]
        int32_t current_right = get_right_encoder_total();
 80044c2:	f7ff ff7b 	bl	80043bc <get_right_encoder_total>
 80044c6:	60f8      	str	r0, [r7, #12]
        int32_t left_traveled = current_left - start_left;
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	60bb      	str	r3, [r7, #8]
        int32_t right_traveled = current_right - start_right;
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	607b      	str	r3, [r7, #4]
        int32_t avg_traveled = (left_traveled + right_traveled) / 2;
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	0fda      	lsrs	r2, r3, #31
 80044e0:	4413      	add	r3, r2
 80044e2:	105b      	asrs	r3, r3, #1
 80044e4:	603b      	str	r3, [r7, #0]

        if (avg_traveled >= target_counts) {
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	da03      	bge.n	80044f6 <move_forward+0xae>
            break;
        }
        HAL_Delay(1);
 80044ee:	2001      	movs	r0, #1
 80044f0:	f001 fd1e 	bl	8005f30 <HAL_Delay>
    while (1) {
 80044f4:	e7e2      	b.n	80044bc <move_forward+0x74>
            break;
 80044f6:	bf00      	nop
    }

    // Stop motors
    stop_motors();
 80044f8:	f000 f89c 	bl	8004634 <stop_motors>

    // Update position only after successful movement
    robot.x = new_x;
 80044fc:	4a05      	ldr	r2, [pc, #20]	@ (8004514 <move_forward+0xcc>)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	6013      	str	r3, [r2, #0]
    robot.y = new_y;
 8004502:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <move_forward+0xcc>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]
    HAL_Delay(100); // Settling time
 8004508:	2064      	movs	r0, #100	@ 0x64
 800450a:	f001 fd11 	bl	8005f30 <HAL_Delay>
}
 800450e:	3728      	adds	r7, #40	@ 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	2000144c 	.word	0x2000144c
 8004518:	0800fcdc 	.word	0x0800fcdc
 800451c:	0800fcec 	.word	0x0800fcec
 8004520:	0800f08c 	.word	0x0800f08c

08004524 <turn_left>:


/**
 * @brief Turn left 90 degrees - FIXED VERSION (removed unused variables)
 */
void turn_left(void) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
    // REMOVED: unused variable 'start_left'
    int32_t start_right = get_right_encoder_total();
 800452a:	f7ff ff47 	bl	80043bc <get_right_encoder_total>
 800452e:	60f8      	str	r0, [r7, #12]


    // Left motor reverse, right motor forward
	motor_set_fixed(0, false, 800); // Left reverse
 8004530:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004534:	2100      	movs	r1, #0
 8004536:	2000      	movs	r0, #0
 8004538:	f000 f8dc 	bl	80046f4 <motor_set_fixed>
	motor_set_fixed(1, true, 800);  // Right forward
 800453c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004540:	2101      	movs	r1, #1
 8004542:	2001      	movs	r0, #1
 8004544:	f000 f8d6 	bl	80046f4 <motor_set_fixed>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 8004548:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800454c:	60bb      	str	r3, [r7, #8]
    while (1) {
        int32_t current_right = get_right_encoder_total();
 800454e:	f7ff ff35 	bl	80043bc <get_right_encoder_total>
 8004552:	6078      	str	r0, [r7, #4]
        int32_t right_traveled = abs(current_right - start_right);
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfb8      	it	lt
 800455e:	425b      	neglt	r3, r3
 8004560:	603b      	str	r3, [r7, #0]

        if (right_traveled >= target_counts) {
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	429a      	cmp	r2, r3
 8004568:	da03      	bge.n	8004572 <turn_left+0x4e>
            break;
        }
        HAL_Delay(1);
 800456a:	2001      	movs	r0, #1
 800456c:	f001 fce0 	bl	8005f30 <HAL_Delay>
    while (1) {
 8004570:	e7ed      	b.n	800454e <turn_left+0x2a>
            break;
 8004572:	bf00      	nop
    }

    stop_motors();
 8004574:	f000 f85e 	bl	8004634 <stop_motors>
    robot.direction = (robot.direction + 3) % 4; // Turn left
 8004578:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <turn_left+0x7c>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	3303      	adds	r3, #3
 800457e:	425a      	negs	r2, r3
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	f002 0203 	and.w	r2, r2, #3
 8004588:	bf58      	it	pl
 800458a:	4253      	negpl	r3, r2
 800458c:	4a04      	ldr	r2, [pc, #16]	@ (80045a0 <turn_left+0x7c>)
 800458e:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8004590:	20c8      	movs	r0, #200	@ 0xc8
 8004592:	f001 fccd 	bl	8005f30 <HAL_Delay>
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2000144c 	.word	0x2000144c

080045a4 <turn_right>:

/**
 * @brief Turn right 90 degrees - FIXED VERSION (removed unused variables)
 */
void turn_right(void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
    int32_t start_left = get_left_encoder_total();
 80045aa:	f7ff fefd 	bl	80043a8 <get_left_encoder_total>
 80045ae:	60f8      	str	r0, [r7, #12]
    // REMOVED: unused variable 'start_right'

    // Left motor forward, right motor backward
    motor_set_fixed(0, true, 800);  // Left forward
 80045b0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80045b4:	2101      	movs	r1, #1
 80045b6:	2000      	movs	r0, #0
 80045b8:	f000 f89c 	bl	80046f4 <motor_set_fixed>
    motor_set_fixed(1, false, 800); // Right reverse
 80045bc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80045c0:	2100      	movs	r1, #0
 80045c2:	2001      	movs	r0, #1
 80045c4:	f000 f896 	bl	80046f4 <motor_set_fixed>

    int32_t target_counts = ENCODER_COUNTS_PER_TURN;
 80045c8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80045cc:	60bb      	str	r3, [r7, #8]
    while (1) {
        int32_t current_left = get_left_encoder_total();
 80045ce:	f7ff feeb 	bl	80043a8 <get_left_encoder_total>
 80045d2:	6078      	str	r0, [r7, #4]
        int32_t left_traveled = abs(current_left - start_left);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bfb8      	it	lt
 80045de:	425b      	neglt	r3, r3
 80045e0:	603b      	str	r3, [r7, #0]

        if (left_traveled >= target_counts) {
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	da03      	bge.n	80045f2 <turn_right+0x4e>
            break;
        }
        HAL_Delay(1);
 80045ea:	2001      	movs	r0, #1
 80045ec:	f001 fca0 	bl	8005f30 <HAL_Delay>
    while (1) {
 80045f0:	e7ed      	b.n	80045ce <turn_right+0x2a>
            break;
 80045f2:	bf00      	nop
    }

    stop_motors();
 80045f4:	f000 f81e 	bl	8004634 <stop_motors>
    robot.direction = (robot.direction + 1) % 4; // Turn right
 80045f8:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <turn_right+0x7c>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	3301      	adds	r3, #1
 80045fe:	425a      	negs	r2, r3
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	f002 0203 	and.w	r2, r2, #3
 8004608:	bf58      	it	pl
 800460a:	4253      	negpl	r3, r2
 800460c:	4a04      	ldr	r2, [pc, #16]	@ (8004620 <turn_right+0x7c>)
 800460e:	6093      	str	r3, [r2, #8]
    HAL_Delay(200);
 8004610:	20c8      	movs	r0, #200	@ 0xc8
 8004612:	f001 fc8d 	bl	8005f30 <HAL_Delay>
}
 8004616:	bf00      	nop
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	2000144c 	.word	0x2000144c

08004624 <turn_around>:

/**
 * @brief Turn around 180 degrees
 */
void turn_around(void) {
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
    turn_right();
 8004628:	f7ff ffbc 	bl	80045a4 <turn_right>
    turn_right();
 800462c:	f7ff ffba 	bl	80045a4 <turn_right>
}
 8004630:	bf00      	nop
 8004632:	bd80      	pop	{r7, pc}

08004634 <stop_motors>:

/**
 * @brief Stop both motors
 */
void stop_motors(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
    // Stop all PWM channels
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);  // Left motor PWM = 0
 8004638:	4b0a      	ldr	r3, [pc, #40]	@ (8004664 <stop_motors+0x30>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);  // Left motor direction = 0
 8004640:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <stop_motors+0x30>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);  // Right motor PWM = 0
 8004648:	4b06      	ldr	r3, [pc, #24]	@ (8004664 <stop_motors+0x30>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);  // Right motor direction = 0
 8004650:	4b04      	ldr	r3, [pc, #16]	@ (8004664 <stop_motors+0x30>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000374 	.word	0x20000374

08004668 <motor_set>:
bool is_speed_run_ready(void) {
    return (robot.center_reached && robot.returned_to_start);
}

// helper to set speed (0–1000 = 0–100%)
void motor_set(uint16_t ch_pwm, GPIO_TypeDef *dirPort, uint16_t dirPin, bool forward, uint16_t duty) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	4611      	mov	r1, r2
 8004672:	461a      	mov	r2, r3
 8004674:	4603      	mov	r3, r0
 8004676:	81fb      	strh	r3, [r7, #14]
 8004678:	460b      	mov	r3, r1
 800467a:	81bb      	strh	r3, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	71fb      	strb	r3, [r7, #7]
    // Validate inputs
    if (duty > 1000) duty = 1000;
 8004680:	8b3b      	ldrh	r3, [r7, #24]
 8004682:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004686:	d902      	bls.n	800468e <motor_set+0x26>
 8004688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800468c:	833b      	strh	r3, [r7, #24]

    // Set PWM duty cycle
    __HAL_TIM_SET_COMPARE(&htim3, ch_pwm, duty);
 800468e:	89fb      	ldrh	r3, [r7, #14]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <motor_set+0x36>
 8004694:	4b16      	ldr	r3, [pc, #88]	@ (80046f0 <motor_set+0x88>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	8b3a      	ldrh	r2, [r7, #24]
 800469a:	635a      	str	r2, [r3, #52]	@ 0x34
 800469c:	e013      	b.n	80046c6 <motor_set+0x5e>
 800469e:	89fb      	ldrh	r3, [r7, #14]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <motor_set+0x46>
 80046a4:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <motor_set+0x88>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	8b3b      	ldrh	r3, [r7, #24]
 80046aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80046ac:	e00b      	b.n	80046c6 <motor_set+0x5e>
 80046ae:	89fb      	ldrh	r3, [r7, #14]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <motor_set+0x56>
 80046b4:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <motor_set+0x88>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	8b3b      	ldrh	r3, [r7, #24]
 80046ba:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80046bc:	e003      	b.n	80046c6 <motor_set+0x5e>
 80046be:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <motor_set+0x88>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	8b3b      	ldrh	r3, [r7, #24]
 80046c4:	6413      	str	r3, [r2, #64]	@ 0x40

    // FIXED: Proper DRV8833 control
    // For DRV8833: PWM on INx, Direction control on INy
    // Forward: INx=PWM, INy=LOW
    // Backward: INx=PWM, INy=HIGH
    if (forward) {
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <motor_set+0x72>
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_RESET);  // Direction LOW for forward
 80046cc:	89bb      	ldrh	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	4619      	mov	r1, r3
 80046d2:	68b8      	ldr	r0, [r7, #8]
 80046d4:	f002 fb82 	bl	8006ddc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);    // Direction HIGH for backward
    }
}
 80046d8:	e005      	b.n	80046e6 <motor_set+0x7e>
        HAL_GPIO_WritePin(dirPort, dirPin, GPIO_PIN_SET);    // Direction HIGH for backward
 80046da:	89bb      	ldrh	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	4619      	mov	r1, r3
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	f002 fb7b 	bl	8006ddc <HAL_GPIO_WritePin>
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000374 	.word	0x20000374

080046f4 <motor_set_fixed>:
// Fixed motor_set function for DRV8833
void motor_set_fixed(uint8_t motor, bool forward, uint16_t duty) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
 80046fe:	460b      	mov	r3, r1
 8004700:	71bb      	strb	r3, [r7, #6]
 8004702:	4613      	mov	r3, r2
 8004704:	80bb      	strh	r3, [r7, #4]
    if (motor == 0) { // Left motor
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <motor_set_fixed+0x44>
        if (forward) {
 800470c:	79bb      	ldrb	r3, [r7, #6]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <motor_set_fixed+0x32>
			// Left reverse: IN1=LOW, IN2=PWM
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty); // PA7 = PWM
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <motor_set_fixed+0x94>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	88ba      	ldrh	r2, [r7, #4]
 8004718:	639a      	str	r2, [r3, #56]	@ 0x38
        	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET); // PA6 = LOW
 800471a:	2200      	movs	r2, #0
 800471c:	2140      	movs	r1, #64	@ 0x40
 800471e:	481b      	ldr	r0, [pc, #108]	@ (800478c <motor_set_fixed+0x98>)
 8004720:	f002 fb5c 	bl	8006ddc <HAL_GPIO_WritePin>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM

        }
    }
}
 8004724:	e02b      	b.n	800477e <motor_set_fixed+0x8a>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); // PA6 = PWM
 8004726:	4b18      	ldr	r3, [pc, #96]	@ (8004788 <motor_set_fixed+0x94>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	88ba      	ldrh	r2, [r7, #4]
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0); // PA7 = LOW
 800472e:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <motor_set_fixed+0x94>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2200      	movs	r2, #0
 8004734:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004736:	e022      	b.n	800477e <motor_set_fixed+0x8a>
    	bool actual_forward = !forward;  // invert direction
 8004738:	79bb      	ldrb	r3, [r7, #6]
 800473a:	2b00      	cmp	r3, #0
 800473c:	bf14      	ite	ne
 800473e:	2301      	movne	r3, #1
 8004740:	2300      	moveq	r3, #0
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f083 0301 	eor.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	73fb      	strb	r3, [r7, #15]
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
        if (actual_forward) {
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <motor_set_fixed+0x7a>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, duty); // PB1 = PWM
 800475a:	4b0b      	ldr	r3, [pc, #44]	@ (8004788 <motor_set_fixed+0x94>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	88ba      	ldrh	r2, [r7, #4]
 8004760:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_GPIO_WritePin(MOTOR_IN3_GPIO_Port, MOTOR_IN3_Pin, GPIO_PIN_RESET); // PB0 = LOW
 8004762:	2200      	movs	r2, #0
 8004764:	2101      	movs	r1, #1
 8004766:	480a      	ldr	r0, [pc, #40]	@ (8004790 <motor_set_fixed+0x9c>)
 8004768:	f002 fb38 	bl	8006ddc <HAL_GPIO_WritePin>
}
 800476c:	e007      	b.n	800477e <motor_set_fixed+0x8a>
        	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0); // PB1 = LOW
 800476e:	4b06      	ldr	r3, [pc, #24]	@ (8004788 <motor_set_fixed+0x94>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	641a      	str	r2, [r3, #64]	@ 0x40
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty); // PB0 = PWM
 8004776:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <motor_set_fixed+0x94>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	88ba      	ldrh	r2, [r7, #4]
 800477c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800477e:	bf00      	nop
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000374 	.word	0x20000374
 800478c:	40020000 	.word	0x40020000
 8004790:	40020400 	.word	0x40020400

08004794 <turn_on_emitters>:
static SensorCalibration sensor_cal = {0};
/**
 * @brief Turn on IR emitters
 */
void turn_on_emitters(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_SET);
 8004798:	2201      	movs	r2, #1
 800479a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800479e:	480d      	ldr	r0, [pc, #52]	@ (80047d4 <turn_on_emitters+0x40>)
 80047a0:	f002 fb1c 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_SET);
 80047a4:	2201      	movs	r2, #1
 80047a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047aa:	480a      	ldr	r0, [pc, #40]	@ (80047d4 <turn_on_emitters+0x40>)
 80047ac:	f002 fb16 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_SET);
 80047b0:	2201      	movs	r2, #1
 80047b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047b6:	4808      	ldr	r0, [pc, #32]	@ (80047d8 <turn_on_emitters+0x44>)
 80047b8:	f002 fb10 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_SET);
 80047bc:	2201      	movs	r2, #1
 80047be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047c2:	4805      	ldr	r0, [pc, #20]	@ (80047d8 <turn_on_emitters+0x44>)
 80047c4:	f002 fb0a 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_Delay(2); // Emitter stabilization time
 80047c8:	2002      	movs	r0, #2
 80047ca:	f001 fbb1 	bl	8005f30 <HAL_Delay>
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40020400 	.word	0x40020400

080047dc <turn_off_emitters>:

/**
 * @brief Turn off IR emitters
 */
void turn_off_emitters(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EMIT_FRONT_LEFT_GPIO_Port, EMIT_FRONT_LEFT_Pin, GPIO_PIN_RESET);
 80047e0:	2200      	movs	r2, #0
 80047e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047e6:	480b      	ldr	r0, [pc, #44]	@ (8004814 <turn_off_emitters+0x38>)
 80047e8:	f002 faf8 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_LEFT_GPIO_Port, EMIT_SIDE_LEFT_Pin, GPIO_PIN_RESET);
 80047ec:	2200      	movs	r2, #0
 80047ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80047f2:	4808      	ldr	r0, [pc, #32]	@ (8004814 <turn_off_emitters+0x38>)
 80047f4:	f002 faf2 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_SIDE_RIGHT_GPIO_Port, EMIT_SIDE_RIGHT_Pin, GPIO_PIN_RESET);
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047fe:	4806      	ldr	r0, [pc, #24]	@ (8004818 <turn_off_emitters+0x3c>)
 8004800:	f002 faec 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EMIT_FRONT_RIGHT_GPIO_Port, EMIT_FRONT_RIGHT_Pin, GPIO_PIN_RESET);
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800480a:	4803      	ldr	r0, [pc, #12]	@ (8004818 <turn_off_emitters+0x3c>)
 800480c:	f002 fae6 	bl	8006ddc <HAL_GPIO_WritePin>
}
 8004810:	bf00      	nop
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40020000 	.word	0x40020000
 8004818:	40020400 	.word	0x40020400

0800481c <read_adc_channel>:

/**
 * @brief Read specific ADC channel using main.c multi-channel setup
 */
uint16_t read_adc_channel(uint32_t channel) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8004824:	f107 030c 	add.w	r3, r7, #12
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
    uint16_t adc_value = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	83fb      	strh	r3, [r7, #30]

    // Configure the channel
    sConfig.Channel = channel;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 800483a:	2301      	movs	r3, #1
 800483c:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES; // Longer sampling time
 800483e:	2304      	movs	r3, #4
 8004840:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	4619      	mov	r1, r3
 8004848:	4818      	ldr	r0, [pc, #96]	@ (80048ac <read_adc_channel+0x90>)
 800484a:	f001 fd59 	bl	8006300 <HAL_ADC_ConfigChannel>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d004      	beq.n	800485e <read_adc_channel+0x42>
        send_bluetooth_message("❌ ADC channel config failed\r\n");
 8004854:	4816      	ldr	r0, [pc, #88]	@ (80048b0 <read_adc_channel+0x94>)
 8004856:	f7fd f85b 	bl	8001910 <send_bluetooth_message>
        return 0;
 800485a:	2300      	movs	r3, #0
 800485c:	e022      	b.n	80048a4 <read_adc_channel+0x88>
    }

    // Start ADC conversion
    if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800485e:	4813      	ldr	r0, [pc, #76]	@ (80048ac <read_adc_channel+0x90>)
 8004860:	f001 fbce 	bl	8006000 <HAL_ADC_Start>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d004      	beq.n	8004874 <read_adc_channel+0x58>
        send_bluetooth_message("❌ ADC start failed\r\n");
 800486a:	4812      	ldr	r0, [pc, #72]	@ (80048b4 <read_adc_channel+0x98>)
 800486c:	f7fd f850 	bl	8001910 <send_bluetooth_message>
        return 0;
 8004870:	2300      	movs	r3, #0
 8004872:	e017      	b.n	80048a4 <read_adc_channel+0x88>
    }

    // Wait for conversion with longer timeout
    if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8004874:	2164      	movs	r1, #100	@ 0x64
 8004876:	480d      	ldr	r0, [pc, #52]	@ (80048ac <read_adc_channel+0x90>)
 8004878:	f001 fca9 	bl	80061ce <HAL_ADC_PollForConversion>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <read_adc_channel+0x76>
        send_bluetooth_message("❌ ADC conversion timeout\r\n");
 8004882:	480d      	ldr	r0, [pc, #52]	@ (80048b8 <read_adc_channel+0x9c>)
 8004884:	f7fd f844 	bl	8001910 <send_bluetooth_message>
        HAL_ADC_Stop(&hadc1);
 8004888:	4808      	ldr	r0, [pc, #32]	@ (80048ac <read_adc_channel+0x90>)
 800488a:	f001 fc6d 	bl	8006168 <HAL_ADC_Stop>
        return 0;
 800488e:	2300      	movs	r3, #0
 8004890:	e008      	b.n	80048a4 <read_adc_channel+0x88>
    }

    // Get the converted value
    adc_value = HAL_ADC_GetValue(&hadc1);
 8004892:	4806      	ldr	r0, [pc, #24]	@ (80048ac <read_adc_channel+0x90>)
 8004894:	f001 fd26 	bl	80062e4 <HAL_ADC_GetValue>
 8004898:	4603      	mov	r3, r0
 800489a:	83fb      	strh	r3, [r7, #30]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 800489c:	4803      	ldr	r0, [pc, #12]	@ (80048ac <read_adc_channel+0x90>)
 800489e:	f001 fc63 	bl	8006168 <HAL_ADC_Stop>

    return adc_value;
 80048a2:	8bfb      	ldrh	r3, [r7, #30]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000244 	.word	0x20000244
 80048b0:	0800f394 	.word	0x0800f394
 80048b4:	0800f3b4 	.word	0x0800f3b4
 80048b8:	0800f3cc 	.word	0x0800f3cc

080048bc <update_sensors>:

/**
 * @brief Enhanced update_sensors with calibrated thresholds
 */
void update_sensors(void)
{
 80048bc:	b590      	push	{r4, r7, lr}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
    // Read ambient light levels (emitters off)
    turn_off_emitters();
 80048c2:	f7ff ff8b 	bl	80047dc <turn_off_emitters>
    HAL_Delay(1);
 80048c6:	2001      	movs	r0, #1
 80048c8:	f001 fb32 	bl	8005f30 <HAL_Delay>
    uint16_t ambient_front_right = read_adc_channel(ADC_CHANNEL_2);
 80048cc:	2002      	movs	r0, #2
 80048ce:	f7ff ffa5 	bl	800481c <read_adc_channel>
 80048d2:	4603      	mov	r3, r0
 80048d4:	81fb      	strh	r3, [r7, #14]
    uint16_t ambient_side_right = read_adc_channel(ADC_CHANNEL_3);
 80048d6:	2003      	movs	r0, #3
 80048d8:	f7ff ffa0 	bl	800481c <read_adc_channel>
 80048dc:	4603      	mov	r3, r0
 80048de:	81bb      	strh	r3, [r7, #12]
    uint16_t ambient_side_left = read_adc_channel(ADC_CHANNEL_4);
 80048e0:	2004      	movs	r0, #4
 80048e2:	f7ff ff9b 	bl	800481c <read_adc_channel>
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
    uint16_t ambient_front_left = read_adc_channel(ADC_CHANNEL_5);
 80048ea:	2005      	movs	r0, #5
 80048ec:	f7ff ff96 	bl	800481c <read_adc_channel>
 80048f0:	4603      	mov	r3, r0
 80048f2:	813b      	strh	r3, [r7, #8]

    // Read with emitters on
    turn_on_emitters();
 80048f4:	f7ff ff4e 	bl	8004794 <turn_on_emitters>
    sensors.battery = read_adc_channel(ADC_CHANNEL_0);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7ff ff8f 	bl	800481c <read_adc_channel>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	4b71      	ldr	r3, [pc, #452]	@ (8004ac8 <update_sensors+0x20c>)
 8004904:	801a      	strh	r2, [r3, #0]
    sensors.front_right = read_adc_channel(ADC_CHANNEL_2) - ambient_front_right;
 8004906:	2002      	movs	r0, #2
 8004908:	f7ff ff88 	bl	800481c <read_adc_channel>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	89fb      	ldrh	r3, [r7, #14]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	b29a      	uxth	r2, r3
 8004916:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac8 <update_sensors+0x20c>)
 8004918:	805a      	strh	r2, [r3, #2]
    sensors.side_right = read_adc_channel(ADC_CHANNEL_3) - ambient_side_right;
 800491a:	2003      	movs	r0, #3
 800491c:	f7ff ff7e 	bl	800481c <read_adc_channel>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	89bb      	ldrh	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	b29a      	uxth	r2, r3
 800492a:	4b67      	ldr	r3, [pc, #412]	@ (8004ac8 <update_sensors+0x20c>)
 800492c:	809a      	strh	r2, [r3, #4]
    sensors.side_left = read_adc_channel(ADC_CHANNEL_4) - ambient_side_left;
 800492e:	2004      	movs	r0, #4
 8004930:	f7ff ff74 	bl	800481c <read_adc_channel>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	897b      	ldrh	r3, [r7, #10]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	b29a      	uxth	r2, r3
 800493e:	4b62      	ldr	r3, [pc, #392]	@ (8004ac8 <update_sensors+0x20c>)
 8004940:	80da      	strh	r2, [r3, #6]
    sensors.front_left = read_adc_channel(ADC_CHANNEL_5) - ambient_front_left;
 8004942:	2005      	movs	r0, #5
 8004944:	f7ff ff6a 	bl	800481c <read_adc_channel>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	893b      	ldrh	r3, [r7, #8]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	b29a      	uxth	r2, r3
 8004952:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac8 <update_sensors+0x20c>)
 8004954:	811a      	strh	r2, [r3, #8]

    // Turn off emitters to save power
    turn_off_emitters();
 8004956:	f7ff ff41 	bl	80047dc <turn_off_emitters>

    // Process wall detection using calibrated thresholds
    if (sensor_cal.calibration_valid) {
 800495a:	4b5c      	ldr	r3, [pc, #368]	@ (8004acc <update_sensors+0x210>)
 800495c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004960:	2b00      	cmp	r3, #0
 8004962:	d032      	beq.n	80049ca <update_sensors+0x10e>
        // Use dynamic thresholds
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 8004964:	4b58      	ldr	r3, [pc, #352]	@ (8004ac8 <update_sensors+0x20c>)
 8004966:	891c      	ldrh	r4, [r3, #8]
 8004968:	2000      	movs	r0, #0
 800496a:	f000 fda7 	bl	80054bc <get_calibrated_threshold>
 800496e:	4603      	mov	r3, r0
 8004970:	429c      	cmp	r4, r3
 8004972:	d807      	bhi.n	8004984 <update_sensors+0xc8>
                            (sensors.front_right > get_calibrated_threshold(1));
 8004974:	4b54      	ldr	r3, [pc, #336]	@ (8004ac8 <update_sensors+0x20c>)
 8004976:	885c      	ldrh	r4, [r3, #2]
 8004978:	2001      	movs	r0, #1
 800497a:	f000 fd9f 	bl	80054bc <get_calibrated_threshold>
 800497e:	4603      	mov	r3, r0
        sensors.wall_front = (sensors.front_left > get_calibrated_threshold(0)) ||
 8004980:	429c      	cmp	r4, r3
 8004982:	d901      	bls.n	8004988 <update_sensors+0xcc>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <update_sensors+0xce>
 8004988:	2300      	movs	r3, #0
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	4b4d      	ldr	r3, [pc, #308]	@ (8004ac8 <update_sensors+0x20c>)
 8004992:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > get_calibrated_threshold(2));
 8004994:	4b4c      	ldr	r3, [pc, #304]	@ (8004ac8 <update_sensors+0x20c>)
 8004996:	88dc      	ldrh	r4, [r3, #6]
 8004998:	2002      	movs	r0, #2
 800499a:	f000 fd8f 	bl	80054bc <get_calibrated_threshold>
 800499e:	4603      	mov	r3, r0
 80049a0:	429c      	cmp	r4, r3
 80049a2:	bf8c      	ite	hi
 80049a4:	2301      	movhi	r3, #1
 80049a6:	2300      	movls	r3, #0
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4b47      	ldr	r3, [pc, #284]	@ (8004ac8 <update_sensors+0x20c>)
 80049ac:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > get_calibrated_threshold(3));
 80049ae:	4b46      	ldr	r3, [pc, #280]	@ (8004ac8 <update_sensors+0x20c>)
 80049b0:	889c      	ldrh	r4, [r3, #4]
 80049b2:	2003      	movs	r0, #3
 80049b4:	f000 fd82 	bl	80054bc <get_calibrated_threshold>
 80049b8:	4603      	mov	r3, r0
 80049ba:	429c      	cmp	r4, r3
 80049bc:	bf8c      	ite	hi
 80049be:	2301      	movhi	r3, #1
 80049c0:	2300      	movls	r3, #0
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	4b40      	ldr	r3, [pc, #256]	@ (8004ac8 <update_sensors+0x20c>)
 80049c6:	731a      	strb	r2, [r3, #12]
 80049c8:	e027      	b.n	8004a1a <update_sensors+0x15e>
    } else {
        // Fallback to static thresholds
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80049ca:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac8 <update_sensors+0x20c>)
 80049cc:	891b      	ldrh	r3, [r3, #8]
 80049ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80049d2:	d804      	bhi.n	80049de <update_sensors+0x122>
                            (sensors.front_right > WALL_THRESHOLD_FRONT);
 80049d4:	4b3c      	ldr	r3, [pc, #240]	@ (8004ac8 <update_sensors+0x20c>)
 80049d6:	885b      	ldrh	r3, [r3, #2]
        sensors.wall_front = (sensors.front_left > WALL_THRESHOLD_FRONT) ||
 80049d8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80049dc:	d901      	bls.n	80049e2 <update_sensors+0x126>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <update_sensors+0x128>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b37      	ldr	r3, [pc, #220]	@ (8004ac8 <update_sensors+0x20c>)
 80049ec:	729a      	strb	r2, [r3, #10]
        sensors.wall_left = (sensors.side_left > WALL_THRESHOLD_SIDE);
 80049ee:	4b36      	ldr	r3, [pc, #216]	@ (8004ac8 <update_sensors+0x20c>)
 80049f0:	88db      	ldrh	r3, [r3, #6]
 80049f2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bf8c      	ite	hi
 80049fa:	2301      	movhi	r3, #1
 80049fc:	2300      	movls	r3, #0
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	4b31      	ldr	r3, [pc, #196]	@ (8004ac8 <update_sensors+0x20c>)
 8004a02:	72da      	strb	r2, [r3, #11]
        sensors.wall_right = (sensors.side_right > WALL_THRESHOLD_SIDE);
 8004a04:	4b30      	ldr	r3, [pc, #192]	@ (8004ac8 <update_sensors+0x20c>)
 8004a06:	889b      	ldrh	r3, [r3, #4]
 8004a08:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	bf8c      	ite	hi
 8004a10:	2301      	movhi	r3, #1
 8004a12:	2300      	movls	r3, #0
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac8 <update_sensors+0x20c>)
 8004a18:	731a      	strb	r2, [r3, #12]

    // Enhanced sensor health monitoring using calibration data
    static uint8_t sensor_error_count = 0;
    static bool sensors_healthy = true;

    if (sensor_cal.calibration_valid) {
 8004a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8004acc <update_sensors+0x210>)
 8004a1c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d04c      	beq.n	8004abe <update_sensors+0x202>
        // Check if readings are within expected ranges based on calibration
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 8004a24:	4b29      	ldr	r3, [pc, #164]	@ (8004acc <update_sensors+0x210>)
 8004a26:	8a1b      	ldrh	r3, [r3, #16]
 8004a28:	3bc7      	subs	r3, #199	@ 0xc7
 8004a2a:	4a27      	ldr	r2, [pc, #156]	@ (8004ac8 <update_sensors+0x20c>)
 8004a2c:	8812      	ldrh	r2, [r2, #0]
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
                                   (sensors.front_left < 3500) &&
                                   (sensors.front_right < 3500) &&
                                   (sensors.side_left < 3500) &&
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	dc21      	bgt.n	8004a76 <update_sensors+0x1ba>
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
 8004a32:	4b26      	ldr	r3, [pc, #152]	@ (8004acc <update_sensors+0x210>)
 8004a34:	8a1b      	ldrh	r3, [r3, #16]
 8004a36:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8004a3a:	4a23      	ldr	r2, [pc, #140]	@ (8004ac8 <update_sensors+0x20c>)
 8004a3c:	8812      	ldrh	r2, [r2, #0]
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	db19      	blt.n	8004a76 <update_sensors+0x1ba>
                                   (sensors.front_left < 3500) &&
 8004a42:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <update_sensors+0x20c>)
 8004a44:	891b      	ldrh	r3, [r3, #8]
                                   (sensors.battery < sensor_cal.battery_baseline + 500) &&
 8004a46:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d813      	bhi.n	8004a76 <update_sensors+0x1ba>
                                   (sensors.front_right < 3500) &&
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac8 <update_sensors+0x20c>)
 8004a50:	885b      	ldrh	r3, [r3, #2]
                                   (sensors.front_left < 3500) &&
 8004a52:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d80d      	bhi.n	8004a76 <update_sensors+0x1ba>
                                   (sensors.side_left < 3500) &&
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <update_sensors+0x20c>)
 8004a5c:	88db      	ldrh	r3, [r3, #6]
                                   (sensors.front_right < 3500) &&
 8004a5e:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d807      	bhi.n	8004a76 <update_sensors+0x1ba>
                                   (sensors.side_right < 3500);
 8004a66:	4b18      	ldr	r3, [pc, #96]	@ (8004ac8 <update_sensors+0x20c>)
 8004a68:	889b      	ldrh	r3, [r3, #4]
                                   (sensors.side_left < 3500) &&
 8004a6a:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d801      	bhi.n	8004a76 <update_sensors+0x1ba>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <update_sensors+0x1bc>
 8004a76:	2300      	movs	r3, #0
        bool current_reading_valid = (sensors.battery > sensor_cal.battery_baseline - 200) &&
 8004a78:	71fb      	strb	r3, [r7, #7]
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	71fb      	strb	r3, [r7, #7]

        if (!current_reading_valid) {
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	f083 0301 	eor.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00d      	beq.n	8004aaa <update_sensors+0x1ee>
            sensor_error_count++;
 8004a8e:	4b10      	ldr	r3, [pc, #64]	@ (8004ad0 <update_sensors+0x214>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad0 <update_sensors+0x214>)
 8004a98:	701a      	strb	r2, [r3, #0]
            if (sensor_error_count > 5) {
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ad0 <update_sensors+0x214>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d90d      	bls.n	8004abe <update_sensors+0x202>
                sensors_healthy = false;
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ad4 <update_sensors+0x218>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
            }
        } else {
            if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
        }
    }
}
 8004aa8:	e009      	b.n	8004abe <update_sensors+0x202>
            if (sensor_error_count > 0) sensor_error_count--; // Recover slowly
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <update_sensors+0x214>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d005      	beq.n	8004abe <update_sensors+0x202>
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <update_sensors+0x214>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <update_sensors+0x214>)
 8004abc:	701a      	strb	r2, [r3, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd90      	pop	{r4, r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20001460 	.word	0x20001460
 8004acc:	200014c4 	.word	0x200014c4
 8004ad0:	200014f8 	.word	0x200014f8
 8004ad4:	2000000c 	.word	0x2000000c

08004ad8 <adc_system_diagnostics>:

    send_bluetooth_message("===============================\r\n");
}


void adc_system_diagnostics(void) {
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b08e      	sub	sp, #56	@ 0x38
 8004adc:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ADC SYSTEM DIAGNOSTICS ===\r\n");
 8004ade:	484b      	ldr	r0, [pc, #300]	@ (8004c0c <adc_system_diagnostics+0x134>)
 8004ae0:	f7fc ff16 	bl	8001910 <send_bluetooth_message>

    // Check if ADC clock is enabled
    if (__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8004ae4:	4b4a      	ldr	r3, [pc, #296]	@ (8004c10 <adc_system_diagnostics+0x138>)
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <adc_system_diagnostics+0x20>
        send_bluetooth_message("✅ ADC1 clock: ENABLED\r\n");
 8004af0:	4848      	ldr	r0, [pc, #288]	@ (8004c14 <adc_system_diagnostics+0x13c>)
 8004af2:	f7fc ff0d 	bl	8001910 <send_bluetooth_message>
 8004af6:	e002      	b.n	8004afe <adc_system_diagnostics+0x26>
    } else {
        send_bluetooth_message("❌ ADC1 clock: DISABLED\r\n");
 8004af8:	4847      	ldr	r0, [pc, #284]	@ (8004c18 <adc_system_diagnostics+0x140>)
 8004afa:	f7fc ff09 	bl	8001910 <send_bluetooth_message>
    }

    // Check GPIO clock
    if (__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 8004afe:	4b44      	ldr	r3, [pc, #272]	@ (8004c10 <adc_system_diagnostics+0x138>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <adc_system_diagnostics+0x3a>
        send_bluetooth_message("✅ GPIOA clock: ENABLED\r\n");
 8004b0a:	4844      	ldr	r0, [pc, #272]	@ (8004c1c <adc_system_diagnostics+0x144>)
 8004b0c:	f7fc ff00 	bl	8001910 <send_bluetooth_message>
 8004b10:	e002      	b.n	8004b18 <adc_system_diagnostics+0x40>
    } else {
        send_bluetooth_message("❌ GPIOA clock: DISABLED\r\n");
 8004b12:	4843      	ldr	r0, [pc, #268]	@ (8004c20 <adc_system_diagnostics+0x148>)
 8004b14:	f7fc fefc 	bl	8001910 <send_bluetooth_message>
    }

    // Check ADC status
    if (hadc1.State == HAL_ADC_STATE_READY) {
 8004b18:	4b42      	ldr	r3, [pc, #264]	@ (8004c24 <adc_system_diagnostics+0x14c>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d103      	bne.n	8004b28 <adc_system_diagnostics+0x50>
        send_bluetooth_message("✅ ADC state: READY\r\n");
 8004b20:	4841      	ldr	r0, [pc, #260]	@ (8004c28 <adc_system_diagnostics+0x150>)
 8004b22:	f7fc fef5 	bl	8001910 <send_bluetooth_message>
 8004b26:	e005      	b.n	8004b34 <adc_system_diagnostics+0x5c>
    } else {
        send_bluetooth_printf("⚠️ ADC state: %d\r\n", hadc1.State);
 8004b28:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <adc_system_diagnostics+0x14c>)
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	483f      	ldr	r0, [pc, #252]	@ (8004c2c <adc_system_diagnostics+0x154>)
 8004b30:	f7fc ff04 	bl	800193c <send_bluetooth_printf>
    }

    // Test individual channel readings
    send_bluetooth_message("Testing individual channels:\r\n");
 8004b34:	483e      	ldr	r0, [pc, #248]	@ (8004c30 <adc_system_diagnostics+0x158>)
 8004b36:	f7fc feeb 	bl	8001910 <send_bluetooth_message>

    uint32_t channels[5] = {ADC_CHANNEL_0, ADC_CHANNEL_2, ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5};
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <adc_system_diagnostics+0x15c>)
 8004b3c:	f107 0420 	add.w	r4, r7, #32
 8004b40:	461d      	mov	r5, r3
 8004b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	6023      	str	r3, [r4, #0]
    const char* channel_names[5] = {"Battery", "Front_Right", "Side_Right", "Side_Left", "Front_Left"};
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c38 <adc_system_diagnostics+0x160>)
 8004b4c:	f107 040c 	add.w	r4, r7, #12
 8004b50:	461d      	mov	r5, r3
 8004b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b56:	682b      	ldr	r3, [r5, #0]
 8004b58:	6023      	str	r3, [r4, #0]
    uint16_t test_values[5];  // Fixed: Added array brackets

    for (int i = 0; i < 5; i++) {
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5e:	e04b      	b.n	8004bf8 <adc_system_diagnostics+0x120>
        test_values[i] = read_adc_channel(channels[i]);
 8004b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	3338      	adds	r3, #56	@ 0x38
 8004b66:	443b      	add	r3, r7
 8004b68:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fe55 	bl	800481c <read_adc_channel>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	3338      	adds	r3, #56	@ 0x38
 8004b7c:	443b      	add	r3, r7
 8004b7e:	f823 2c38 	strh.w	r2, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3338      	adds	r3, #56	@ 0x38
 8004b88:	443b      	add	r3, r7
 8004b8a:	f853 1c2c 	ldr.w	r1, [r3, #-44]
                             channels[i] == ADC_CHANNEL_0 ? 0 :
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	3338      	adds	r3, #56	@ 0x38
 8004b94:	443b      	add	r3, r7
 8004b96:	f853 3c18 	ldr.w	r3, [r3, #-24]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01f      	beq.n	8004bde <adc_system_diagnostics+0x106>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3338      	adds	r3, #56	@ 0x38
 8004ba4:	443b      	add	r3, r7
 8004ba6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d015      	beq.n	8004bda <adc_system_diagnostics+0x102>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8004bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	3338      	adds	r3, #56	@ 0x38
 8004bb4:	443b      	add	r3, r7
 8004bb6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d00b      	beq.n	8004bd6 <adc_system_diagnostics+0xfe>
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	3338      	adds	r3, #56	@ 0x38
 8004bc4:	443b      	add	r3, r7
 8004bc6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d101      	bne.n	8004bd2 <adc_system_diagnostics+0xfa>
 8004bce:	2204      	movs	r2, #4
 8004bd0:	e006      	b.n	8004be0 <adc_system_diagnostics+0x108>
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	e004      	b.n	8004be0 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_3 ? 3 :
 8004bd6:	2203      	movs	r2, #3
 8004bd8:	e002      	b.n	8004be0 <adc_system_diagnostics+0x108>
                             channels[i] == ADC_CHANNEL_2 ? 2 :
 8004bda:	2202      	movs	r2, #2
 8004bdc:	e000      	b.n	8004be0 <adc_system_diagnostics+0x108>
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004bde:	2200      	movs	r2, #0
                             channels[i] == ADC_CHANNEL_4 ? 4 : 5, test_values[i]);
 8004be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	3338      	adds	r3, #56	@ 0x38
 8004be6:	443b      	add	r3, r7
 8004be8:	f833 3c38 	ldrh.w	r3, [r3, #-56]
        send_bluetooth_printf("%s (CH%d): %d\r\n", channel_names[i],
 8004bec:	4813      	ldr	r0, [pc, #76]	@ (8004c3c <adc_system_diagnostics+0x164>)
 8004bee:	f7fc fea5 	bl	800193c <send_bluetooth_printf>
    for (int i = 0; i < 5; i++) {
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	ddb0      	ble.n	8004b60 <adc_system_diagnostics+0x88>
    }

    send_bluetooth_message("===============================\r\n");
 8004bfe:	4810      	ldr	r0, [pc, #64]	@ (8004c40 <adc_system_diagnostics+0x168>)
 8004c00:	f7fc fe86 	bl	8001910 <send_bluetooth_message>
}
 8004c04:	bf00      	nop
 8004c06:	3738      	adds	r7, #56	@ 0x38
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c0c:	0800f5b8 	.word	0x0800f5b8
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800f5dc 	.word	0x0800f5dc
 8004c18:	0800f5f8 	.word	0x0800f5f8
 8004c1c:	0800f614 	.word	0x0800f614
 8004c20:	0800f630 	.word	0x0800f630
 8004c24:	20000244 	.word	0x20000244
 8004c28:	0800f64c 	.word	0x0800f64c
 8004c2c:	0800f664 	.word	0x0800f664
 8004c30:	0800f67c 	.word	0x0800f67c
 8004c34:	0800f6ac 	.word	0x0800f6ac
 8004c38:	0800f6f8 	.word	0x0800f6f8
 8004c3c:	0800f69c 	.word	0x0800f69c
 8004c40:	0800f594 	.word	0x0800f594

08004c44 <calibrate_sensors>:
 * - Dynamic wall threshold calculation
 * - Sensor health validation
 * - Battery voltage baseline
 */
void calibrate_sensors(void)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b0a5      	sub	sp, #148	@ 0x94
 8004c48:	af00      	add	r7, sp, #0
    send_bluetooth_message("\r\n=== ENHANCED SENSOR CALIBRATION ===\r\n");
 8004c4a:	48a9      	ldr	r0, [pc, #676]	@ (8004ef0 <calibrate_sensors+0x2ac>)
 8004c4c:	f7fc fe60 	bl	8001910 <send_bluetooth_message>

    // Initialize calibration structure
    memset(&sensor_cal, 0, sizeof(sensor_cal));
 8004c50:	2234      	movs	r2, #52	@ 0x34
 8004c52:	2100      	movs	r1, #0
 8004c54:	48a7      	ldr	r0, [pc, #668]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004c56:	f006 fa29 	bl	800b0ac <memset>

    // Phase 1: ADC System Validation
    send_bluetooth_message("Phase 1: ADC System Validation\r\n");
 8004c5a:	48a7      	ldr	r0, [pc, #668]	@ (8004ef8 <calibrate_sensors+0x2b4>)
 8004c5c:	f7fc fe58 	bl	8001910 <send_bluetooth_message>

    // Check if ADC is properly initialized
    if (hadc1.State != HAL_ADC_STATE_READY) {
 8004c60:	4ba6      	ldr	r3, [pc, #664]	@ (8004efc <calibrate_sensors+0x2b8>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d00c      	beq.n	8004c82 <calibrate_sensors+0x3e>
        send_bluetooth_message("❌ ADC not ready - attempting re-initialization\r\n");
 8004c68:	48a5      	ldr	r0, [pc, #660]	@ (8004f00 <calibrate_sensors+0x2bc>)
 8004c6a:	f7fc fe51 	bl	8001910 <send_bluetooth_message>
        if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8004c6e:	48a3      	ldr	r0, [pc, #652]	@ (8004efc <calibrate_sensors+0x2b8>)
 8004c70:	f001 f982 	bl	8005f78 <HAL_ADC_Init>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <calibrate_sensors+0x3e>
            send_bluetooth_message("❌ CRITICAL: ADC initialization failed!\r\n");
 8004c7a:	48a2      	ldr	r0, [pc, #648]	@ (8004f04 <calibrate_sensors+0x2c0>)
 8004c7c:	f7fc fe48 	bl	8001910 <send_bluetooth_message>
            return;
 8004c80:	e3f0      	b.n	8005464 <calibrate_sensors+0x820>
        }
    }

    // Verify clock enables
    if (!__HAL_RCC_ADC1_IS_CLK_ENABLED()) {
 8004c82:	4ba1      	ldr	r3, [pc, #644]	@ (8004f08 <calibrate_sensors+0x2c4>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <calibrate_sensors+0x52>
        send_bluetooth_message("❌ ADC1 clock disabled\r\n");
 8004c8e:	489f      	ldr	r0, [pc, #636]	@ (8004f0c <calibrate_sensors+0x2c8>)
 8004c90:	f7fc fe3e 	bl	8001910 <send_bluetooth_message>
        return;
 8004c94:	e3e6      	b.n	8005464 <calibrate_sensors+0x820>
    }

    if (!__HAL_RCC_GPIOA_IS_CLK_ENABLED()) {
 8004c96:	4b9c      	ldr	r3, [pc, #624]	@ (8004f08 <calibrate_sensors+0x2c4>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <calibrate_sensors+0x66>
        send_bluetooth_message("❌ GPIOA clock disabled\r\n");
 8004ca2:	489b      	ldr	r0, [pc, #620]	@ (8004f10 <calibrate_sensors+0x2cc>)
 8004ca4:	f7fc fe34 	bl	8001910 <send_bluetooth_message>
        return;
 8004ca8:	e3dc      	b.n	8005464 <calibrate_sensors+0x820>
    }

    send_bluetooth_message("✅ ADC system validation passed\r\n");
 8004caa:	489a      	ldr	r0, [pc, #616]	@ (8004f14 <calibrate_sensors+0x2d0>)
 8004cac:	f7fc fe30 	bl	8001910 <send_bluetooth_message>

    // Phase 2: Baseline Ambient Light Measurement
    send_bluetooth_message("Phase 2: Measuring ambient baselines (IR emitters OFF)\r\n");
 8004cb0:	4899      	ldr	r0, [pc, #612]	@ (8004f18 <calibrate_sensors+0x2d4>)
 8004cb2:	f7fc fe2d 	bl	8001910 <send_bluetooth_message>

    // Ensure emitters are OFF
    turn_off_emitters();
 8004cb6:	f7ff fd91 	bl	80047dc <turn_off_emitters>
    HAL_Delay(100); // Allow sensors to stabilize
 8004cba:	2064      	movs	r0, #100	@ 0x64
 8004cbc:	f001 f938 	bl	8005f30 <HAL_Delay>

    // Take multiple ambient readings for stability
    uint32_t ambient_sum[4] = {0};
 8004cc0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
    uint32_t ambient_readings = 50;
 8004cce:	2332      	movs	r3, #50	@ 0x32
 8004cd0:	663b      	str	r3, [r7, #96]	@ 0x60

    for (int i = 0; i < ambient_readings; i++) {
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cd8:	e027      	b.n	8004d2a <calibrate_sensors+0xe6>
        ambient_sum[0] += read_adc_channel(ADC_CHANNEL_5); // Front Left
 8004cda:	2005      	movs	r0, #5
 8004cdc:	f7ff fd9e 	bl	800481c <read_adc_channel>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ce6:	4413      	add	r3, r2
 8004ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
        ambient_sum[1] += read_adc_channel(ADC_CHANNEL_2); // Front Right
 8004cea:	2002      	movs	r0, #2
 8004cec:	f7ff fd96 	bl	800481c <read_adc_channel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cf6:	4413      	add	r3, r2
 8004cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        ambient_sum[2] += read_adc_channel(ADC_CHANNEL_4); // Side Left
 8004cfa:	2004      	movs	r0, #4
 8004cfc:	f7ff fd8e 	bl	800481c <read_adc_channel>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d06:	4413      	add	r3, r2
 8004d08:	653b      	str	r3, [r7, #80]	@ 0x50
        ambient_sum[3] += read_adc_channel(ADC_CHANNEL_3); // Side Right
 8004d0a:	2003      	movs	r0, #3
 8004d0c:	f7ff fd86 	bl	800481c <read_adc_channel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	461a      	mov	r2, r3
 8004d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d16:	4413      	add	r3, r2
 8004d18:	657b      	str	r3, [r7, #84]	@ 0x54
        HAL_Delay(10);
 8004d1a:	200a      	movs	r0, #10
 8004d1c:	f001 f908 	bl	8005f30 <HAL_Delay>
    for (int i = 0; i < ambient_readings; i++) {
 8004d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d24:	3301      	adds	r3, #1
 8004d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d8d2      	bhi.n	8004cda <calibrate_sensors+0x96>
    }

    // Calculate ambient baselines
    sensor_cal.ambient_baseline[0] = ambient_sum[0] / ambient_readings; // Front Left
 8004d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d40:	801a      	strh	r2, [r3, #0]
    sensor_cal.ambient_baseline[1] = ambient_sum[1] / ambient_readings; // Front Right
 8004d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	4b69      	ldr	r3, [pc, #420]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d4e:	805a      	strh	r2, [r3, #2]
    sensor_cal.ambient_baseline[2] = ambient_sum[2] / ambient_readings; // Side Left
 8004d50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	4b66      	ldr	r3, [pc, #408]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d5c:	809a      	strh	r2, [r3, #4]
    sensor_cal.ambient_baseline[3] = ambient_sum[3] / ambient_readings; // Side Right
 8004d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	4b62      	ldr	r3, [pc, #392]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d6a:	80da      	strh	r2, [r3, #6]

    send_bluetooth_message("Ambient baselines (emitters OFF):\r\n");
 8004d6c:	486b      	ldr	r0, [pc, #428]	@ (8004f1c <calibrate_sensors+0x2d8>)
 8004d6e:	f7fc fdcf 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.ambient_baseline[0]);
 8004d72:	4b60      	ldr	r3, [pc, #384]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d74:	881b      	ldrh	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4869      	ldr	r0, [pc, #420]	@ (8004f20 <calibrate_sensors+0x2dc>)
 8004d7a:	f7fc fddf 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.ambient_baseline[1]);
 8004d7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d80:	885b      	ldrh	r3, [r3, #2]
 8004d82:	4619      	mov	r1, r3
 8004d84:	4867      	ldr	r0, [pc, #412]	@ (8004f24 <calibrate_sensors+0x2e0>)
 8004d86:	f7fc fdd9 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.ambient_baseline[2]);
 8004d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d8c:	889b      	ldrh	r3, [r3, #4]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4865      	ldr	r0, [pc, #404]	@ (8004f28 <calibrate_sensors+0x2e4>)
 8004d92:	f7fc fdd3 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.ambient_baseline[3]);
 8004d96:	4b57      	ldr	r3, [pc, #348]	@ (8004ef4 <calibrate_sensors+0x2b0>)
 8004d98:	88db      	ldrh	r3, [r3, #6]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4863      	ldr	r0, [pc, #396]	@ (8004f2c <calibrate_sensors+0x2e8>)
 8004d9e:	f7fc fdcd 	bl	800193c <send_bluetooth_printf>

    // Phase 3: Active Sensor Response Measurement
    send_bluetooth_message("Phase 3: Measuring sensor response (IR emitters ON)\r\n");
 8004da2:	4863      	ldr	r0, [pc, #396]	@ (8004f30 <calibrate_sensors+0x2ec>)
 8004da4:	f7fc fdb4 	bl	8001910 <send_bluetooth_message>

    // Turn on emitters and measure response
    turn_on_emitters();
 8004da8:	f7ff fcf4 	bl	8004794 <turn_on_emitters>
    HAL_Delay(50); // Emitter stabilization
 8004dac:	2032      	movs	r0, #50	@ 0x32
 8004dae:	f001 f8bf 	bl	8005f30 <HAL_Delay>

    uint32_t active_sum[4] = {0};
 8004db2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
    uint32_t active_readings = 50;
 8004dc0:	2332      	movs	r3, #50	@ 0x32
 8004dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Track min/max for noise calculation
    uint16_t temp_min[4] = {4095, 4095, 4095, 4095};
 8004dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8004f34 <calibrate_sensors+0x2f0>)
 8004dc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004dca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dce:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t temp_max[4] = {0, 0, 0, 0};
 8004dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < active_readings; i++) {
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004de2:	e07a      	b.n	8004eda <calibrate_sensors+0x296>
        uint16_t readings[4];
        readings[0] = read_adc_channel(ADC_CHANNEL_5); // Front Left
 8004de4:	2005      	movs	r0, #5
 8004de6:	f7ff fd19 	bl	800481c <read_adc_channel>
 8004dea:	4603      	mov	r3, r0
 8004dec:	803b      	strh	r3, [r7, #0]
        readings[1] = read_adc_channel(ADC_CHANNEL_2); // Front Right
 8004dee:	2002      	movs	r0, #2
 8004df0:	f7ff fd14 	bl	800481c <read_adc_channel>
 8004df4:	4603      	mov	r3, r0
 8004df6:	807b      	strh	r3, [r7, #2]
        readings[2] = read_adc_channel(ADC_CHANNEL_4); // Side Left
 8004df8:	2004      	movs	r0, #4
 8004dfa:	f7ff fd0f 	bl	800481c <read_adc_channel>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	80bb      	strh	r3, [r7, #4]
        readings[3] = read_adc_channel(ADC_CHANNEL_3); // Side Right
 8004e02:	2003      	movs	r0, #3
 8004e04:	f7ff fd0a 	bl	800481c <read_adc_channel>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	80fb      	strh	r3, [r7, #6]

        for (int j = 0; j < 4; j++) {
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e12:	e056      	b.n	8004ec2 <calibrate_sensors+0x27e>
            active_sum[j] += readings[j];
 8004e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	3390      	adds	r3, #144	@ 0x90
 8004e1c:	443b      	add	r3, r7
 8004e1e:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8004e22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	3390      	adds	r3, #144	@ 0x90
 8004e2a:	443b      	add	r3, r7
 8004e2c:	f833 3c90 	ldrh.w	r3, [r3, #-144]
 8004e30:	441a      	add	r2, r3
 8004e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	3390      	adds	r3, #144	@ 0x90
 8004e3a:	443b      	add	r3, r7
 8004e3c:	f843 2c58 	str.w	r2, [r3, #-88]
            if (readings[j] < temp_min[j]) temp_min[j] = readings[j];
 8004e40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	3390      	adds	r3, #144	@ 0x90
 8004e48:	443b      	add	r3, r7
 8004e4a:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	3390      	adds	r3, #144	@ 0x90
 8004e56:	443b      	add	r3, r7
 8004e58:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d20d      	bcs.n	8004e7c <calibrate_sensors+0x238>
 8004e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	3390      	adds	r3, #144	@ 0x90
 8004e68:	443b      	add	r3, r7
 8004e6a:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	3390      	adds	r3, #144	@ 0x90
 8004e76:	443b      	add	r3, r7
 8004e78:	f823 2c60 	strh.w	r2, [r3, #-96]
            if (readings[j] > temp_max[j]) temp_max[j] = readings[j];
 8004e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	3390      	adds	r3, #144	@ 0x90
 8004e84:	443b      	add	r3, r7
 8004e86:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	3390      	adds	r3, #144	@ 0x90
 8004e92:	443b      	add	r3, r7
 8004e94:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d90d      	bls.n	8004eb8 <calibrate_sensors+0x274>
 8004e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	3390      	adds	r3, #144	@ 0x90
 8004ea4:	443b      	add	r3, r7
 8004ea6:	f833 2c90 	ldrh.w	r2, [r3, #-144]
 8004eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	3390      	adds	r3, #144	@ 0x90
 8004eb2:	443b      	add	r3, r7
 8004eb4:	f823 2c68 	strh.w	r2, [r3, #-104]
        for (int j = 0; j < 4; j++) {
 8004eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	dda4      	ble.n	8004e14 <calibrate_sensors+0x1d0>
        }
        HAL_Delay(10);
 8004eca:	200a      	movs	r0, #10
 8004ecc:	f001 f830 	bl	8005f30 <HAL_Delay>
    for (int i = 0; i < active_readings; i++) {
 8004ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ede:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	f63f af7f 	bhi.w	8004de4 <calibrate_sensors+0x1a0>
    }

    // Calculate active response levels and noise
    uint16_t active_avg[4];
    for (int i = 0; i < 4; i++) {
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004eec:	e076      	b.n	8004fdc <calibrate_sensors+0x398>
 8004eee:	bf00      	nop
 8004ef0:	0800f70c 	.word	0x0800f70c
 8004ef4:	200014c4 	.word	0x200014c4
 8004ef8:	0800f734 	.word	0x0800f734
 8004efc:	20000244 	.word	0x20000244
 8004f00:	0800f758 	.word	0x0800f758
 8004f04:	0800f78c 	.word	0x0800f78c
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	0800f7b8 	.word	0x0800f7b8
 8004f10:	0800f7d4 	.word	0x0800f7d4
 8004f14:	0800f7f0 	.word	0x0800f7f0
 8004f18:	0800f814 	.word	0x0800f814
 8004f1c:	0800f850 	.word	0x0800f850
 8004f20:	0800f874 	.word	0x0800f874
 8004f24:	0800f888 	.word	0x0800f888
 8004f28:	0800f89c 	.word	0x0800f89c
 8004f2c:	0800f8b0 	.word	0x0800f8b0
 8004f30:	0800f8c4 	.word	0x0800f8c4
 8004f34:	0800fc94 	.word	0x0800fc94
        active_avg[i] = active_sum[i] / active_readings;
 8004f38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	3390      	adds	r3, #144	@ 0x90
 8004f40:	443b      	add	r3, r7
 8004f42:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8004f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	3390      	adds	r3, #144	@ 0x90
 8004f56:	443b      	add	r3, r7
 8004f58:	f823 2c70 	strh.w	r2, [r3, #-112]
        sensor_cal.sensor_min[i] = temp_min[i];
 8004f5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	3390      	adds	r3, #144	@ 0x90
 8004f64:	443b      	add	r3, r7
 8004f66:	f833 1c60 	ldrh.w	r1, [r3, #-96]
 8004f6a:	4aaf      	ldr	r2, [pc, #700]	@ (8005228 <calibrate_sensors+0x5e4>)
 8004f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f70:	3308      	adds	r3, #8
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	4413      	add	r3, r2
 8004f76:	460a      	mov	r2, r1
 8004f78:	805a      	strh	r2, [r3, #2]
        sensor_cal.sensor_max[i] = temp_max[i];
 8004f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	3390      	adds	r3, #144	@ 0x90
 8004f82:	443b      	add	r3, r7
 8004f84:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 8004f88:	4aa7      	ldr	r2, [pc, #668]	@ (8005228 <calibrate_sensors+0x5e4>)
 8004f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f8e:	330c      	adds	r3, #12
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	460a      	mov	r2, r1
 8004f96:	805a      	strh	r2, [r3, #2]
        sensor_cal.noise_levels[i] = (float)(temp_max[i] - temp_min[i]);
 8004f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	3390      	adds	r3, #144	@ 0x90
 8004fa0:	443b      	add	r3, r7
 8004fa2:	f833 3c68 	ldrh.w	r3, [r3, #-104]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	3390      	adds	r3, #144	@ 0x90
 8004fb0:	443b      	add	r3, r7
 8004fb2:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc0:	4a99      	ldr	r2, [pc, #612]	@ (8005228 <calibrate_sensors+0x5e4>)
 8004fc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	3304      	adds	r3, #4
 8004fce:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8004fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	dda9      	ble.n	8004f38 <calibrate_sensors+0x2f4>
    }

    send_bluetooth_message("Active sensor response (emitters ON):\r\n");
 8004fe4:	4891      	ldr	r0, [pc, #580]	@ (800522c <calibrate_sensors+0x5e8>)
 8004fe6:	f7fc fc93 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d (noise: %.1f)\r\n", active_avg[0], sensor_cal.noise_levels[0]);
 8004fea:	8c3b      	ldrh	r3, [r7, #32]
 8004fec:	461c      	mov	r4, r3
 8004fee:	4b8e      	ldr	r3, [pc, #568]	@ (8005228 <calibrate_sensors+0x5e4>)
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fb fab0 	bl	8000558 <__aeabi_f2d>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	488c      	ldr	r0, [pc, #560]	@ (8005230 <calibrate_sensors+0x5ec>)
 8005000:	f7fc fc9c 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d (noise: %.1f)\r\n", active_avg[1], sensor_cal.noise_levels[1]);
 8005004:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005006:	461c      	mov	r4, r3
 8005008:	4b87      	ldr	r3, [pc, #540]	@ (8005228 <calibrate_sensors+0x5e4>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	4618      	mov	r0, r3
 800500e:	f7fb faa3 	bl	8000558 <__aeabi_f2d>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4621      	mov	r1, r4
 8005018:	4886      	ldr	r0, [pc, #536]	@ (8005234 <calibrate_sensors+0x5f0>)
 800501a:	f7fc fc8f 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d (noise: %.1f)\r\n", active_avg[2], sensor_cal.noise_levels[2]);
 800501e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005020:	461c      	mov	r4, r3
 8005022:	4b81      	ldr	r3, [pc, #516]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb fa96 	bl	8000558 <__aeabi_f2d>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4621      	mov	r1, r4
 8005032:	4881      	ldr	r0, [pc, #516]	@ (8005238 <calibrate_sensors+0x5f4>)
 8005034:	f7fc fc82 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d (noise: %.1f)\r\n", active_avg[3], sensor_cal.noise_levels[3]);
 8005038:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800503a:	461c      	mov	r4, r3
 800503c:	4b7a      	ldr	r3, [pc, #488]	@ (8005228 <calibrate_sensors+0x5e4>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fa89 	bl	8000558 <__aeabi_f2d>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4621      	mov	r1, r4
 800504c:	487b      	ldr	r0, [pc, #492]	@ (800523c <calibrate_sensors+0x5f8>)
 800504e:	f7fc fc75 	bl	800193c <send_bluetooth_printf>

    // Phase 4: Dynamic Threshold Calculation
    send_bluetooth_message("Phase 4: Calculating dynamic wall detection thresholds\r\n");
 8005052:	487b      	ldr	r0, [pc, #492]	@ (8005240 <calibrate_sensors+0x5fc>)
 8005054:	f7fc fc5c 	bl	8001910 <send_bluetooth_message>

    // Calculate differential response (active - ambient)
    uint16_t differential[4];
    for (int i = 0; i < 4; i++) {
 8005058:	2300      	movs	r3, #0
 800505a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800505c:	e028      	b.n	80050b0 <calibrate_sensors+0x46c>
        if (active_avg[i] > sensor_cal.ambient_baseline[i]) {
 800505e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	3390      	adds	r3, #144	@ 0x90
 8005064:	443b      	add	r3, r7
 8005066:	f833 2c70 	ldrh.w	r2, [r3, #-112]
 800506a:	496f      	ldr	r1, [pc, #444]	@ (8005228 <calibrate_sensors+0x5e4>)
 800506c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800506e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005072:	429a      	cmp	r2, r3
 8005074:	d912      	bls.n	800509c <calibrate_sensors+0x458>
            differential[i] = active_avg[i] - sensor_cal.ambient_baseline[i];
 8005076:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	3390      	adds	r3, #144	@ 0x90
 800507c:	443b      	add	r3, r7
 800507e:	f833 2c70 	ldrh.w	r2, [r3, #-112]
 8005082:	4969      	ldr	r1, [pc, #420]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005084:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005086:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	b29a      	uxth	r2, r3
 800508e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	3390      	adds	r3, #144	@ 0x90
 8005094:	443b      	add	r3, r7
 8005096:	f823 2c78 	strh.w	r2, [r3, #-120]
 800509a:	e006      	b.n	80050aa <calibrate_sensors+0x466>
        } else {
            differential[i] = 0; // Sensor may be faulty
 800509c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	3390      	adds	r3, #144	@ 0x90
 80050a2:	443b      	add	r3, r7
 80050a4:	2200      	movs	r2, #0
 80050a6:	f823 2c78 	strh.w	r2, [r3, #-120]
    for (int i = 0; i < 4; i++) {
 80050aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050ac:	3301      	adds	r3, #1
 80050ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80050b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	ddd3      	ble.n	800505e <calibrate_sensors+0x41a>
    }

    // Set dynamic thresholds based on differential response and noise
    // Front sensors (0,1) typically have higher response near walls
    // Side sensors (2,3) have different response characteristics
    for (int i = 0; i < 4; i++) {
 80050b6:	2300      	movs	r3, #0
 80050b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050ba:	e08d      	b.n	80051d8 <calibrate_sensors+0x594>
        if (i < 2) { // Front sensors
 80050bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050be:	2b01      	cmp	r3, #1
 80050c0:	dc30      	bgt.n	8005124 <calibrate_sensors+0x4e0>
            // For front sensors, set threshold at 40% of differential + noise margin
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 80050c2:	4a59      	ldr	r2, [pc, #356]	@ (8005228 <calibrate_sensors+0x5e4>)
 80050c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                          (differential[i] * 0.4f) +
 80050d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	3390      	adds	r3, #144	@ 0x90
 80050d8:	443b      	add	r3, r7
 80050da:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050e6:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8005244 <calibrate_sensors+0x600>
 80050ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 80050ee:	ee37 7a27 	vadd.f32	s14, s14, s15
                                          (sensor_cal.noise_levels[i] * 3.0f);
 80050f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005228 <calibrate_sensors+0x5e4>)
 80050f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050f6:	3308      	adds	r3, #8
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	3304      	adds	r3, #4
 80050fe:	edd3 7a00 	vldr	s15, [r3]
 8005102:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8005106:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                          (differential[i] * 0.4f) +
 800510a:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	ee17 3a90 	vmov	r3, s15
 8005116:	b299      	uxth	r1, r3
 8005118:	4a43      	ldr	r2, [pc, #268]	@ (8005228 <calibrate_sensors+0x5e4>)
 800511a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800511c:	3304      	adds	r3, #4
 800511e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8005122:	e02f      	b.n	8005184 <calibrate_sensors+0x540>
        } else { // Side sensors
            // For side sensors, set threshold at 30% of differential + noise margin
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8005124:	4a40      	ldr	r2, [pc, #256]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005126:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512c:	ee07 3a90 	vmov	s15, r3
 8005130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                                          (differential[i] * 0.3f) +
 8005134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	3390      	adds	r3, #144	@ 0x90
 800513a:	443b      	add	r3, r7
 800513c:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005148:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8005248 <calibrate_sensors+0x604>
 800514c:	ee67 7aa6 	vmul.f32	s15, s15, s13
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8005150:	ee37 7a27 	vadd.f32	s14, s14, s15
                                          (sensor_cal.noise_levels[i] * 3.0f);
 8005154:	4a34      	ldr	r2, [pc, #208]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005158:	3308      	adds	r3, #8
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	3304      	adds	r3, #4
 8005160:	edd3 7a00 	vldr	s15, [r3]
 8005164:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8005168:	ee67 7aa6 	vmul.f32	s15, s15, s13
                                          (differential[i] * 0.3f) +
 800516c:	ee77 7a27 	vadd.f32	s15, s14, s15
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] +
 8005170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005174:	ee17 3a90 	vmov	r3, s15
 8005178:	b299      	uxth	r1, r3
 800517a:	4a2b      	ldr	r2, [pc, #172]	@ (8005228 <calibrate_sensors+0x5e4>)
 800517c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800517e:	3304      	adds	r3, #4
 8005180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }

        // Sanity check - ensure threshold is reasonable
        if (sensor_cal.wall_thresholds[i] < sensor_cal.ambient_baseline[i] + 100) {
 8005184:	4a28      	ldr	r2, [pc, #160]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518c:	3363      	adds	r3, #99	@ 0x63
 800518e:	4926      	ldr	r1, [pc, #152]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005190:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005192:	3204      	adds	r2, #4
 8005194:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005198:	4293      	cmp	r3, r2
 800519a:	db0a      	blt.n	80051b2 <calibrate_sensors+0x56e>
            sensor_cal.wall_thresholds[i] = sensor_cal.ambient_baseline[i] + 100;
 800519c:	4a22      	ldr	r2, [pc, #136]	@ (8005228 <calibrate_sensors+0x5e4>)
 800519e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051a4:	3364      	adds	r3, #100	@ 0x64
 80051a6:	b299      	uxth	r1, r3
 80051a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005228 <calibrate_sensors+0x5e4>)
 80051aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051ac:	3304      	adds	r3, #4
 80051ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        if (sensor_cal.wall_thresholds[i] > 3500) { // Don't exceed reasonable ADC range
 80051b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005228 <calibrate_sensors+0x5e4>)
 80051b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051b6:	3304      	adds	r3, #4
 80051b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051bc:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d906      	bls.n	80051d2 <calibrate_sensors+0x58e>
            sensor_cal.wall_thresholds[i] = 3500;
 80051c4:	4a18      	ldr	r2, [pc, #96]	@ (8005228 <calibrate_sensors+0x5e4>)
 80051c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051c8:	3304      	adds	r3, #4
 80051ca:	f640 51ac 	movw	r1, #3500	@ 0xdac
 80051ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < 4; i++) {
 80051d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051d4:	3301      	adds	r3, #1
 80051d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051da:	2b03      	cmp	r3, #3
 80051dc:	f77f af6e 	ble.w	80050bc <calibrate_sensors+0x478>
        }
    }

    send_bluetooth_message("Dynamic wall detection thresholds:\r\n");
 80051e0:	481a      	ldr	r0, [pc, #104]	@ (800524c <calibrate_sensors+0x608>)
 80051e2:	f7fc fb95 	bl	8001910 <send_bluetooth_message>
    send_bluetooth_printf("  Front Left:  %d\r\n", sensor_cal.wall_thresholds[0]);
 80051e6:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <calibrate_sensors+0x5e4>)
 80051e8:	891b      	ldrh	r3, [r3, #8]
 80051ea:	4619      	mov	r1, r3
 80051ec:	4818      	ldr	r0, [pc, #96]	@ (8005250 <calibrate_sensors+0x60c>)
 80051ee:	f7fc fba5 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Front Right: %d\r\n", sensor_cal.wall_thresholds[1]);
 80051f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <calibrate_sensors+0x5e4>)
 80051f4:	895b      	ldrh	r3, [r3, #10]
 80051f6:	4619      	mov	r1, r3
 80051f8:	4816      	ldr	r0, [pc, #88]	@ (8005254 <calibrate_sensors+0x610>)
 80051fa:	f7fc fb9f 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Left:   %d\r\n", sensor_cal.wall_thresholds[2]);
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <calibrate_sensors+0x5e4>)
 8005200:	899b      	ldrh	r3, [r3, #12]
 8005202:	4619      	mov	r1, r3
 8005204:	4814      	ldr	r0, [pc, #80]	@ (8005258 <calibrate_sensors+0x614>)
 8005206:	f7fc fb99 	bl	800193c <send_bluetooth_printf>
    send_bluetooth_printf("  Side Right:  %d\r\n", sensor_cal.wall_thresholds[3]);
 800520a:	4b07      	ldr	r3, [pc, #28]	@ (8005228 <calibrate_sensors+0x5e4>)
 800520c:	89db      	ldrh	r3, [r3, #14]
 800520e:	4619      	mov	r1, r3
 8005210:	4812      	ldr	r0, [pc, #72]	@ (800525c <calibrate_sensors+0x618>)
 8005212:	f7fc fb93 	bl	800193c <send_bluetooth_printf>

    // Phase 5: Battery Baseline Measurement
    send_bluetooth_message("Phase 5: Battery voltage baseline measurement\r\n");
 8005216:	4812      	ldr	r0, [pc, #72]	@ (8005260 <calibrate_sensors+0x61c>)
 8005218:	f7fc fb7a 	bl	8001910 <send_bluetooth_message>

    uint32_t battery_sum = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	677b      	str	r3, [r7, #116]	@ 0x74
    for (int i = 0; i < 20; i++) {
 8005220:	2300      	movs	r3, #0
 8005222:	673b      	str	r3, [r7, #112]	@ 0x70
 8005224:	e02c      	b.n	8005280 <calibrate_sensors+0x63c>
 8005226:	bf00      	nop
 8005228:	200014c4 	.word	0x200014c4
 800522c:	0800f8fc 	.word	0x0800f8fc
 8005230:	0800f924 	.word	0x0800f924
 8005234:	0800f948 	.word	0x0800f948
 8005238:	0800f96c 	.word	0x0800f96c
 800523c:	0800f990 	.word	0x0800f990
 8005240:	0800f9b4 	.word	0x0800f9b4
 8005244:	3ecccccd 	.word	0x3ecccccd
 8005248:	3e99999a 	.word	0x3e99999a
 800524c:	0800f9f0 	.word	0x0800f9f0
 8005250:	0800f874 	.word	0x0800f874
 8005254:	0800f888 	.word	0x0800f888
 8005258:	0800f89c 	.word	0x0800f89c
 800525c:	0800f8b0 	.word	0x0800f8b0
 8005260:	0800fa18 	.word	0x0800fa18
        battery_sum += read_adc_channel(ADC_CHANNEL_0);
 8005264:	2000      	movs	r0, #0
 8005266:	f7ff fad9 	bl	800481c <read_adc_channel>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005270:	4413      	add	r3, r2
 8005272:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_Delay(10);
 8005274:	200a      	movs	r0, #10
 8005276:	f000 fe5b 	bl	8005f30 <HAL_Delay>
    for (int i = 0; i < 20; i++) {
 800527a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800527c:	3301      	adds	r3, #1
 800527e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005280:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005282:	2b13      	cmp	r3, #19
 8005284:	ddee      	ble.n	8005264 <calibrate_sensors+0x620>
    }
    sensor_cal.battery_baseline = battery_sum / 20;
 8005286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005288:	4a78      	ldr	r2, [pc, #480]	@ (800546c <calibrate_sensors+0x828>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	b29a      	uxth	r2, r3
 8005292:	4b77      	ldr	r3, [pc, #476]	@ (8005470 <calibrate_sensors+0x82c>)
 8005294:	821a      	strh	r2, [r3, #16]

    float battery_voltage = (sensor_cal.battery_baseline * 3.3f) / 4096.0f;
 8005296:	4b76      	ldr	r3, [pc, #472]	@ (8005470 <calibrate_sensors+0x82c>)
 8005298:	8a1b      	ldrh	r3, [r3, #16]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052a2:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005474 <calibrate_sensors+0x830>
 80052a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052aa:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8005478 <calibrate_sensors+0x834>
 80052ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052b2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
                         sensor_cal.battery_baseline, battery_voltage);
 80052b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005470 <calibrate_sensors+0x82c>)
 80052b8:	8a1b      	ldrh	r3, [r3, #16]
    send_bluetooth_printf("Battery baseline: %d (%.2fV)\r\n",
 80052ba:	461c      	mov	r4, r3
 80052bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80052be:	f7fb f94b 	bl	8000558 <__aeabi_f2d>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4621      	mov	r1, r4
 80052c8:	486c      	ldr	r0, [pc, #432]	@ (800547c <calibrate_sensors+0x838>)
 80052ca:	f7fc fb37 	bl	800193c <send_bluetooth_printf>

    // Phase 6: Sensor Health Validation
    send_bluetooth_message("Phase 6: Sensor health validation\r\n");
 80052ce:	486c      	ldr	r0, [pc, #432]	@ (8005480 <calibrate_sensors+0x83c>)
 80052d0:	f7fc fb1e 	bl	8001910 <send_bluetooth_message>

    bool all_sensors_healthy = true;
 80052d4:	2301      	movs	r3, #1
 80052d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    // Check each sensor
    const char* sensor_names[4] = {"Front Left", "Front Right", "Side Left", "Side Right"};
 80052da:	4b6a      	ldr	r3, [pc, #424]	@ (8005484 <calibrate_sensors+0x840>)
 80052dc:	f107 0408 	add.w	r4, r7, #8
 80052e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for (int i = 0; i < 4; i++) {
 80052e6:	2300      	movs	r3, #0
 80052e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ea:	e079      	b.n	80053e0 <calibrate_sensors+0x79c>
        bool sensor_healthy = true;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

        // Check if sensor shows reasonable differential response
        if (differential[i] < 50) {
 80052f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	3390      	adds	r3, #144	@ 0x90
 80052f8:	443b      	add	r3, r7
 80052fa:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 80052fe:	2b31      	cmp	r3, #49	@ 0x31
 8005300:	d812      	bhi.n	8005328 <calibrate_sensors+0x6e4>
            send_bluetooth_printf("⚠️ %s: Low differential response (%d)\r\n",
 8005302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	3390      	adds	r3, #144	@ 0x90
 8005308:	443b      	add	r3, r7
 800530a:	f853 1c88 	ldr.w	r1, [r3, #-136]
                                 sensor_names[i], differential[i]);
 800530e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	3390      	adds	r3, #144	@ 0x90
 8005314:	443b      	add	r3, r7
 8005316:	f833 3c78 	ldrh.w	r3, [r3, #-120]
            send_bluetooth_printf("⚠️ %s: Low differential response (%d)\r\n",
 800531a:	461a      	mov	r2, r3
 800531c:	485a      	ldr	r0, [pc, #360]	@ (8005488 <calibrate_sensors+0x844>)
 800531e:	f7fc fb0d 	bl	800193c <send_bluetooth_printf>
            sensor_healthy = false;
 8005322:	2300      	movs	r3, #0
 8005324:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        // Check noise levels
        if (sensor_cal.noise_levels[i] > 200) {
 8005328:	4a51      	ldr	r2, [pc, #324]	@ (8005470 <calibrate_sensors+0x82c>)
 800532a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800532c:	3308      	adds	r3, #8
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	3304      	adds	r3, #4
 8005334:	edd3 7a00 	vldr	s15, [r3]
 8005338:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800548c <calibrate_sensors+0x848>
 800533c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005344:	dd18      	ble.n	8005378 <calibrate_sensors+0x734>
            send_bluetooth_printf("⚠️ %s: High noise level (%.1f)\r\n",
 8005346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	3390      	adds	r3, #144	@ 0x90
 800534c:	443b      	add	r3, r7
 800534e:	f853 4c88 	ldr.w	r4, [r3, #-136]
                                 sensor_names[i], sensor_cal.noise_levels[i]);
 8005352:	4a47      	ldr	r2, [pc, #284]	@ (8005470 <calibrate_sensors+0x82c>)
 8005354:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005356:	3308      	adds	r3, #8
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	3304      	adds	r3, #4
 800535e:	681b      	ldr	r3, [r3, #0]
            send_bluetooth_printf("⚠️ %s: High noise level (%.1f)\r\n",
 8005360:	4618      	mov	r0, r3
 8005362:	f7fb f8f9 	bl	8000558 <__aeabi_f2d>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4621      	mov	r1, r4
 800536c:	4848      	ldr	r0, [pc, #288]	@ (8005490 <calibrate_sensors+0x84c>)
 800536e:	f7fc fae5 	bl	800193c <send_bluetooth_printf>
            sensor_healthy = false;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        // Check if readings are within reasonable ADC range
        if (sensor_cal.ambient_baseline[i] > 3800 || sensor_cal.ambient_baseline[i] < 10) {
 8005378:	4a3d      	ldr	r2, [pc, #244]	@ (8005470 <calibrate_sensors+0x82c>)
 800537a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800537c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005380:	f640 62d8 	movw	r2, #3800	@ 0xed8
 8005384:	4293      	cmp	r3, r2
 8005386:	d805      	bhi.n	8005394 <calibrate_sensors+0x750>
 8005388:	4a39      	ldr	r2, [pc, #228]	@ (8005470 <calibrate_sensors+0x82c>)
 800538a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800538c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005390:	2b09      	cmp	r3, #9
 8005392:	d810      	bhi.n	80053b6 <calibrate_sensors+0x772>
            send_bluetooth_printf("⚠️ %s: Ambient reading out of range (%d)\r\n",
 8005394:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	3390      	adds	r3, #144	@ 0x90
 800539a:	443b      	add	r3, r7
 800539c:	f853 1c88 	ldr.w	r1, [r3, #-136]
                                 sensor_names[i], sensor_cal.ambient_baseline[i]);
 80053a0:	4a33      	ldr	r2, [pc, #204]	@ (8005470 <calibrate_sensors+0x82c>)
 80053a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
            send_bluetooth_printf("⚠️ %s: Ambient reading out of range (%d)\r\n",
 80053a8:	461a      	mov	r2, r3
 80053aa:	483a      	ldr	r0, [pc, #232]	@ (8005494 <calibrate_sensors+0x850>)
 80053ac:	f7fc fac6 	bl	800193c <send_bluetooth_printf>
            sensor_healthy = false;
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (sensor_healthy) {
 80053b6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00a      	beq.n	80053d4 <calibrate_sensors+0x790>
            send_bluetooth_printf("✅ %s: Healthy\r\n", sensor_names[i]);
 80053be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	3390      	adds	r3, #144	@ 0x90
 80053c4:	443b      	add	r3, r7
 80053c6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 80053ca:	4619      	mov	r1, r3
 80053cc:	4832      	ldr	r0, [pc, #200]	@ (8005498 <calibrate_sensors+0x854>)
 80053ce:	f7fc fab5 	bl	800193c <send_bluetooth_printf>
 80053d2:	e002      	b.n	80053da <calibrate_sensors+0x796>
        } else {
            all_sensors_healthy = false;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    for (int i = 0; i < 4; i++) {
 80053da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053dc:	3301      	adds	r3, #1
 80053de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	dd82      	ble.n	80052ec <calibrate_sensors+0x6a8>
        }
    }

    // Check battery
    if (battery_voltage < 3.0f) {
 80053e6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80053ea:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80053ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f6:	d506      	bpl.n	8005406 <calibrate_sensors+0x7c2>
        send_bluetooth_message("⚠️ Battery: Low voltage detected\r\n");
 80053f8:	4828      	ldr	r0, [pc, #160]	@ (800549c <calibrate_sensors+0x858>)
 80053fa:	f7fc fa89 	bl	8001910 <send_bluetooth_message>
        all_sensors_healthy = false;
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8005404:	e012      	b.n	800542c <calibrate_sensors+0x7e8>
    } else if (battery_voltage > 4.5f) {
 8005406:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800540a:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 800540e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	dd06      	ble.n	8005426 <calibrate_sensors+0x7e2>
        send_bluetooth_message("⚠️ Battery: Voltage too high\r\n");
 8005418:	4821      	ldr	r0, [pc, #132]	@ (80054a0 <calibrate_sensors+0x85c>)
 800541a:	f7fc fa79 	bl	8001910 <send_bluetooth_message>
        all_sensors_healthy = false;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8005424:	e002      	b.n	800542c <calibrate_sensors+0x7e8>
    } else {
        send_bluetooth_message("✅ Battery: Healthy\r\n");
 8005426:	481f      	ldr	r0, [pc, #124]	@ (80054a4 <calibrate_sensors+0x860>)
 8005428:	f7fc fa72 	bl	8001910 <send_bluetooth_message>
    }

    // Phase 7: Calibration Complete
    sensor_cal.calibration_valid = all_sensors_healthy;
 800542c:	4a10      	ldr	r2, [pc, #64]	@ (8005470 <calibrate_sensors+0x82c>)
 800542e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005432:	f882 3022 	strb.w	r3, [r2, #34]	@ 0x22

    turn_off_emitters(); // Save power
 8005436:	f7ff f9d1 	bl	80047dc <turn_off_emitters>

    if (sensor_cal.calibration_valid) {
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <calibrate_sensors+0x82c>)
 800543c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005440:	2b00      	cmp	r3, #0
 8005442:	d006      	beq.n	8005452 <calibrate_sensors+0x80e>
        send_bluetooth_message("✅ SENSOR CALIBRATION COMPLETE - All systems nominal\r\n");
 8005444:	4818      	ldr	r0, [pc, #96]	@ (80054a8 <calibrate_sensors+0x864>)
 8005446:	f7fc fa63 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message("Dynamic thresholds will be used for wall detection\r\n");
 800544a:	4818      	ldr	r0, [pc, #96]	@ (80054ac <calibrate_sensors+0x868>)
 800544c:	f7fc fa60 	bl	8001910 <send_bluetooth_message>
 8005450:	e005      	b.n	800545e <calibrate_sensors+0x81a>
    } else {
        send_bluetooth_message("⚠️ SENSOR CALIBRATION COMPLETE - Some issues detected\r\n");
 8005452:	4817      	ldr	r0, [pc, #92]	@ (80054b0 <calibrate_sensors+0x86c>)
 8005454:	f7fc fa5c 	bl	8001910 <send_bluetooth_message>
        send_bluetooth_message("Robot will continue with degraded sensor performance\r\n");
 8005458:	4816      	ldr	r0, [pc, #88]	@ (80054b4 <calibrate_sensors+0x870>)
 800545a:	f7fc fa59 	bl	8001910 <send_bluetooth_message>
    }

    send_bluetooth_message("=====================================\r\n");
 800545e:	4816      	ldr	r0, [pc, #88]	@ (80054b8 <calibrate_sensors+0x874>)
 8005460:	f7fc fa56 	bl	8001910 <send_bluetooth_message>
}
 8005464:	3794      	adds	r7, #148	@ 0x94
 8005466:	46bd      	mov	sp, r7
 8005468:	bd90      	pop	{r4, r7, pc}
 800546a:	bf00      	nop
 800546c:	cccccccd 	.word	0xcccccccd
 8005470:	200014c4 	.word	0x200014c4
 8005474:	40533333 	.word	0x40533333
 8005478:	45800000 	.word	0x45800000
 800547c:	0800fa48 	.word	0x0800fa48
 8005480:	0800fa68 	.word	0x0800fa68
 8005484:	0800fccc 	.word	0x0800fccc
 8005488:	0800fa8c 	.word	0x0800fa8c
 800548c:	43480000 	.word	0x43480000
 8005490:	0800fab8 	.word	0x0800fab8
 8005494:	0800fae0 	.word	0x0800fae0
 8005498:	0800fb10 	.word	0x0800fb10
 800549c:	0800fb24 	.word	0x0800fb24
 80054a0:	0800fb4c 	.word	0x0800fb4c
 80054a4:	0800fb70 	.word	0x0800fb70
 80054a8:	0800fb88 	.word	0x0800fb88
 80054ac:	0800fbc0 	.word	0x0800fbc0
 80054b0:	0800fbf8 	.word	0x0800fbf8
 80054b4:	0800fc34 	.word	0x0800fc34
 80054b8:	0800fc6c 	.word	0x0800fc6c

080054bc <get_calibrated_threshold>:
 * @brief Get calibrated wall threshold for specific sensor
 * @param sensor_index: 0=Front_Left, 1=Front_Right, 2=Side_Left, 3=Side_Right
 * @return Calibrated threshold value
 */
uint16_t get_calibrated_threshold(int sensor_index)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
    if (sensor_index < 0 || sensor_index > 3 || !sensor_cal.calibration_valid) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	db0a      	blt.n	80054e0 <get_calibrated_threshold+0x24>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	dc07      	bgt.n	80054e0 <get_calibrated_threshold+0x24>
 80054d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005508 <get_calibrated_threshold+0x4c>)
 80054d2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80054d6:	f083 0301 	eor.w	r3, r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <get_calibrated_threshold+0x36>
        // Return default thresholds if calibration failed
        return (sensor_index < 2) ? WALL_THRESHOLD_FRONT : WALL_THRESHOLD_SIDE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	dc02      	bgt.n	80054ec <get_calibrated_threshold+0x30>
 80054e6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80054ea:	e007      	b.n	80054fc <get_calibrated_threshold+0x40>
 80054ec:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80054f0:	e004      	b.n	80054fc <get_calibrated_threshold+0x40>
    }

    return sensor_cal.wall_thresholds[sensor_index];
 80054f2:	4a05      	ldr	r2, [pc, #20]	@ (8005508 <get_calibrated_threshold+0x4c>)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	200014c4 	.word	0x200014c4

0800550c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	4b10      	ldr	r3, [pc, #64]	@ (8005558 <HAL_MspInit+0x4c>)
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	4a0f      	ldr	r2, [pc, #60]	@ (8005558 <HAL_MspInit+0x4c>)
 800551c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005520:	6453      	str	r3, [r2, #68]	@ 0x44
 8005522:	4b0d      	ldr	r3, [pc, #52]	@ (8005558 <HAL_MspInit+0x4c>)
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	4b09      	ldr	r3, [pc, #36]	@ (8005558 <HAL_MspInit+0x4c>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	4a08      	ldr	r2, [pc, #32]	@ (8005558 <HAL_MspInit+0x4c>)
 8005538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800553c:	6413      	str	r3, [r2, #64]	@ 0x40
 800553e:	4b06      	ldr	r3, [pc, #24]	@ (8005558 <HAL_MspInit+0x4c>)
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800

0800555c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	@ 0x28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	60da      	str	r2, [r3, #12]
 8005572:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a17      	ldr	r2, [pc, #92]	@ (80055d8 <HAL_ADC_MspInit+0x7c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d127      	bne.n	80055ce <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	4b16      	ldr	r3, [pc, #88]	@ (80055dc <HAL_ADC_MspInit+0x80>)
 8005584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005586:	4a15      	ldr	r2, [pc, #84]	@ (80055dc <HAL_ADC_MspInit+0x80>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800558c:	6453      	str	r3, [r2, #68]	@ 0x44
 800558e:	4b13      	ldr	r3, [pc, #76]	@ (80055dc <HAL_ADC_MspInit+0x80>)
 8005590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <HAL_ADC_MspInit+0x80>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055a2:	4a0e      	ldr	r2, [pc, #56]	@ (80055dc <HAL_ADC_MspInit+0x80>)
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055aa:	4b0c      	ldr	r3, [pc, #48]	@ (80055dc <HAL_ADC_MspInit+0x80>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = Battery_Voltage_Pin|Front_Right_Receiver_Pin|Side_Right_Receiver_Pin|Side_Left_Receiver_Pin
 80055b6:	233d      	movs	r3, #61	@ 0x3d
 80055b8:	617b      	str	r3, [r7, #20]
                          |Front_Left_Receiver_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055ba:	2303      	movs	r3, #3
 80055bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	4619      	mov	r1, r3
 80055c8:	4805      	ldr	r0, [pc, #20]	@ (80055e0 <HAL_ADC_MspInit+0x84>)
 80055ca:	f001 fa6b 	bl	8006aa4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80055ce:	bf00      	nop
 80055d0:	3728      	adds	r7, #40	@ 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40012000 	.word	0x40012000
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40020000 	.word	0x40020000

080055e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08a      	sub	sp, #40	@ 0x28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 0314 	add.w	r3, r7, #20
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <HAL_SPI_MspInit+0x84>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d12c      	bne.n	8005660 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	4b18      	ldr	r3, [pc, #96]	@ (800566c <HAL_SPI_MspInit+0x88>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	4a17      	ldr	r2, [pc, #92]	@ (800566c <HAL_SPI_MspInit+0x88>)
 8005610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005614:	6413      	str	r3, [r2, #64]	@ 0x40
 8005616:	4b15      	ldr	r3, [pc, #84]	@ (800566c <HAL_SPI_MspInit+0x88>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800561e:	613b      	str	r3, [r7, #16]
 8005620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_SPI_MspInit+0x88>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	4a10      	ldr	r2, [pc, #64]	@ (800566c <HAL_SPI_MspInit+0x88>)
 800562c:	f043 0302 	orr.w	r3, r3, #2
 8005630:	6313      	str	r3, [r2, #48]	@ 0x30
 8005632:	4b0e      	ldr	r3, [pc, #56]	@ (800566c <HAL_SPI_MspInit+0x88>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = Gyro_SCL_Pin|Gyro_ADO_Pin|Gyro_SDA_Pin;
 800563e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005644:	2302      	movs	r3, #2
 8005646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800564c:	2303      	movs	r3, #3
 800564e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005650:	2305      	movs	r3, #5
 8005652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4619      	mov	r1, r3
 800565a:	4805      	ldr	r0, [pc, #20]	@ (8005670 <HAL_SPI_MspInit+0x8c>)
 800565c:	f001 fa22 	bl	8006aa4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8005660:	bf00      	nop
 8005662:	3728      	adds	r7, #40	@ 0x28
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40003800 	.word	0x40003800
 800566c:	40023800 	.word	0x40023800
 8005670:	40020400 	.word	0x40020400

08005674 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a18      	ldr	r2, [pc, #96]	@ (80056e4 <HAL_TIM_Base_MspInit+0x70>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d116      	bne.n	80056b4 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	4b17      	ldr	r3, [pc, #92]	@ (80056e8 <HAL_TIM_Base_MspInit+0x74>)
 800568c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568e:	4a16      	ldr	r2, [pc, #88]	@ (80056e8 <HAL_TIM_Base_MspInit+0x74>)
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	6453      	str	r3, [r2, #68]	@ 0x44
 8005696:	4b14      	ldr	r3, [pc, #80]	@ (80056e8 <HAL_TIM_Base_MspInit+0x74>)
 8005698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 80056a2:	2200      	movs	r2, #0
 80056a4:	2107      	movs	r1, #7
 80056a6:	2019      	movs	r0, #25
 80056a8:	f001 f933 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80056ac:	2019      	movs	r0, #25
 80056ae:	f001 f94c 	bl	800694a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80056b2:	e012      	b.n	80056da <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a0c      	ldr	r2, [pc, #48]	@ (80056ec <HAL_TIM_Base_MspInit+0x78>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d10d      	bne.n	80056da <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <HAL_TIM_Base_MspInit+0x74>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	4a08      	ldr	r2, [pc, #32]	@ (80056e8 <HAL_TIM_Base_MspInit+0x74>)
 80056c8:	f043 0302 	orr.w	r3, r3, #2
 80056cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ce:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <HAL_TIM_Base_MspInit+0x74>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	f003 0302 	and.w	r3, r3, #2
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40023800 	.word	0x40023800
 80056ec:	40000400 	.word	0x40000400

080056f0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	@ 0x30
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 031c 	add.w	r3, r7, #28
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005710:	d14b      	bne.n	80057aa <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	4b3f      	ldr	r3, [pc, #252]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571a:	4a3e      	ldr	r2, [pc, #248]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6413      	str	r3, [r2, #64]	@ 0x40
 8005722:	4b3c      	ldr	r3, [pc, #240]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	4b38      	ldr	r3, [pc, #224]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	4a37      	ldr	r2, [pc, #220]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	6313      	str	r3, [r2, #48]	@ 0x30
 800573e:	4b35      	ldr	r3, [pc, #212]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	4b31      	ldr	r3, [pc, #196]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005752:	4a30      	ldr	r2, [pc, #192]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	6313      	str	r3, [r2, #48]	@ 0x30
 800575a:	4b2e      	ldr	r3, [pc, #184]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_EncoderA_Pin;
 8005766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576c:	2302      	movs	r3, #2
 800576e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005774:	2300      	movs	r3, #0
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005778:	2301      	movs	r3, #1
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderA_GPIO_Port, &GPIO_InitStruct);
 800577c:	f107 031c 	add.w	r3, r7, #28
 8005780:	4619      	mov	r1, r3
 8005782:	4825      	ldr	r0, [pc, #148]	@ (8005818 <HAL_TIM_Encoder_MspInit+0x128>)
 8005784:	f001 f98e 	bl	8006aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_EncoderB_Pin;
 8005788:	2308      	movs	r3, #8
 800578a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005794:	2300      	movs	r3, #0
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005798:	2301      	movs	r3, #1
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Left_EncoderB_GPIO_Port, &GPIO_InitStruct);
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	4619      	mov	r1, r3
 80057a2:	481e      	ldr	r0, [pc, #120]	@ (800581c <HAL_TIM_Encoder_MspInit+0x12c>)
 80057a4:	f001 f97e 	bl	8006aa4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80057a8:	e030      	b.n	800580c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005820 <HAL_TIM_Encoder_MspInit+0x130>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d12b      	bne.n	800580c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	4b16      	ldr	r3, [pc, #88]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	4a15      	ldr	r2, [pc, #84]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 80057be:	f043 0304 	orr.w	r3, r3, #4
 80057c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80057c4:	4b13      	ldr	r3, [pc, #76]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d0:	2300      	movs	r3, #0
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 80057d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 80057da:	f043 0302 	orr.w	r3, r3, #2
 80057de:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005814 <HAL_TIM_Encoder_MspInit+0x124>)
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_EncoderA_Pin|Right_EncoderB_Pin;
 80057ec:	23c0      	movs	r3, #192	@ 0xc0
 80057ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f0:	2302      	movs	r3, #2
 80057f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f8:	2300      	movs	r3, #0
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80057fc:	2302      	movs	r3, #2
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005800:	f107 031c 	add.w	r3, r7, #28
 8005804:	4619      	mov	r1, r3
 8005806:	4805      	ldr	r0, [pc, #20]	@ (800581c <HAL_TIM_Encoder_MspInit+0x12c>)
 8005808:	f001 f94c 	bl	8006aa4 <HAL_GPIO_Init>
}
 800580c:	bf00      	nop
 800580e:	3730      	adds	r7, #48	@ 0x30
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40023800 	.word	0x40023800
 8005818:	40020000 	.word	0x40020000
 800581c:	40020400 	.word	0x40020400
 8005820:	40000800 	.word	0x40000800

08005824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	@ 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	60da      	str	r2, [r3, #12]
 800583a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a33      	ldr	r2, [pc, #204]	@ (8005910 <HAL_TIM_MspPostInit+0xec>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d11f      	bne.n	8005886 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005846:	2300      	movs	r3, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	4b32      	ldr	r3, [pc, #200]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	4a31      	ldr	r2, [pc, #196]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 8005850:	f043 0301 	orr.w	r3, r3, #1
 8005854:	6313      	str	r3, [r2, #48]	@ 0x30
 8005856:	4b2f      	ldr	r3, [pc, #188]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = speaker_PWM_Pin;
 8005862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005868:	2302      	movs	r3, #2
 800586a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586c:	2300      	movs	r3, #0
 800586e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005870:	2300      	movs	r3, #0
 8005872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005874:	2301      	movs	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(speaker_PWM_GPIO_Port, &GPIO_InitStruct);
 8005878:	f107 0314 	add.w	r3, r7, #20
 800587c:	4619      	mov	r1, r3
 800587e:	4826      	ldr	r0, [pc, #152]	@ (8005918 <HAL_TIM_MspPostInit+0xf4>)
 8005880:	f001 f910 	bl	8006aa4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005884:	e040      	b.n	8005908 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a24      	ldr	r2, [pc, #144]	@ (800591c <HAL_TIM_MspPostInit+0xf8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d13b      	bne.n	8005908 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	4b1f      	ldr	r3, [pc, #124]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	4a1e      	ldr	r2, [pc, #120]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6313      	str	r3, [r2, #48]	@ 0x30
 80058a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 80058a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	4b18      	ldr	r3, [pc, #96]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	4a17      	ldr	r2, [pc, #92]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 80058b6:	f043 0302 	orr.w	r3, r3, #2
 80058ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80058bc:	4b15      	ldr	r3, [pc, #84]	@ (8005914 <HAL_TIM_MspPostInit+0xf0>)
 80058be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	60bb      	str	r3, [r7, #8]
 80058c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 80058c8:	23c0      	movs	r3, #192	@ 0xc0
 80058ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058cc:	2302      	movs	r3, #2
 80058ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d4:	2300      	movs	r3, #0
 80058d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80058d8:	2302      	movs	r3, #2
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	4619      	mov	r1, r3
 80058e2:	480d      	ldr	r0, [pc, #52]	@ (8005918 <HAL_TIM_MspPostInit+0xf4>)
 80058e4:	f001 f8de 	bl	8006aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR_IN3_Pin|MOTOR_IN4_Pin;
 80058e8:	2303      	movs	r3, #3
 80058ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ec:	2302      	movs	r3, #2
 80058ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f4:	2300      	movs	r3, #0
 80058f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80058f8:	2302      	movs	r3, #2
 80058fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	4619      	mov	r1, r3
 8005902:	4807      	ldr	r0, [pc, #28]	@ (8005920 <HAL_TIM_MspPostInit+0xfc>)
 8005904:	f001 f8ce 	bl	8006aa4 <HAL_GPIO_Init>
}
 8005908:	bf00      	nop
 800590a:	3728      	adds	r7, #40	@ 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	40010000 	.word	0x40010000
 8005914:	40023800 	.word	0x40023800
 8005918:	40020000 	.word	0x40020000
 800591c:	40000400 	.word	0x40000400
 8005920:	40020400 	.word	0x40020400

08005924 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	@ 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592c:	f107 0314 	add.w	r3, r7, #20
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	605a      	str	r2, [r3, #4]
 8005936:	609a      	str	r2, [r3, #8]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1d      	ldr	r2, [pc, #116]	@ (80059b8 <HAL_UART_MspInit+0x94>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d134      	bne.n	80059b0 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	4b1c      	ldr	r3, [pc, #112]	@ (80059bc <HAL_UART_MspInit+0x98>)
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	4a1b      	ldr	r2, [pc, #108]	@ (80059bc <HAL_UART_MspInit+0x98>)
 8005950:	f043 0320 	orr.w	r3, r3, #32
 8005954:	6453      	str	r3, [r2, #68]	@ 0x44
 8005956:	4b19      	ldr	r3, [pc, #100]	@ (80059bc <HAL_UART_MspInit+0x98>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	4b15      	ldr	r3, [pc, #84]	@ (80059bc <HAL_UART_MspInit+0x98>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596a:	4a14      	ldr	r2, [pc, #80]	@ (80059bc <HAL_UART_MspInit+0x98>)
 800596c:	f043 0301 	orr.w	r3, r3, #1
 8005970:	6313      	str	r3, [r2, #48]	@ 0x30
 8005972:	4b12      	ldr	r3, [pc, #72]	@ (80059bc <HAL_UART_MspInit+0x98>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_TX_Pin|Bluetooth_RX_Pin;
 800597e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005984:	2302      	movs	r3, #2
 8005986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800598c:	2303      	movs	r3, #3
 800598e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005990:	2308      	movs	r3, #8
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005994:	f107 0314 	add.w	r3, r7, #20
 8005998:	4619      	mov	r1, r3
 800599a:	4809      	ldr	r0, [pc, #36]	@ (80059c0 <HAL_UART_MspInit+0x9c>)
 800599c:	f001 f882 	bl	8006aa4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 80059a0:	2200      	movs	r2, #0
 80059a2:	2106      	movs	r1, #6
 80059a4:	2047      	movs	r0, #71	@ 0x47
 80059a6:	f000 ffb4 	bl	8006912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80059aa:	2047      	movs	r0, #71	@ 0x47
 80059ac:	f000 ffcd 	bl	800694a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 80059b0:	bf00      	nop
 80059b2:	3728      	adds	r7, #40	@ 0x28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	40011400 	.word	0x40011400
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40020000 	.word	0x40020000

080059c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80059c8:	bf00      	nop
 80059ca:	e7fd      	b.n	80059c8 <NMI_Handler+0x4>

080059cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <HardFault_Handler+0x4>

080059d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <MemManage_Handler+0x4>

080059dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059e0:	bf00      	nop
 80059e2:	e7fd      	b.n	80059e0 <BusFault_Handler+0x4>

080059e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <UsageFault_Handler+0x4>

080059ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a0c:	bf00      	nop
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a1a:	f000 fa69 	bl	8005ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a1e:	bf00      	nop
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8005a26:	2002      	movs	r0, #2
 8005a28:	f001 fa0c 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a34:	4802      	ldr	r0, [pc, #8]	@ (8005a40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005a36:	f002 ff37 	bl	80088a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	200002e4 	.word	0x200002e4

08005a44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8005a48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005a4c:	f001 f9fa 	bl	8006e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005a58:	4802      	ldr	r0, [pc, #8]	@ (8005a64 <USART6_IRQHandler+0x10>)
 8005a5a:	f003 fe53 	bl	8009704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005a5e:	bf00      	nop
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000404 	.word	0x20000404

08005a68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return 1;
 8005a6c:	2301      	movs	r3, #1
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <_kill>:

int _kill(int pid, int sig)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a82:	f005 fb65 	bl	800b150 <__errno>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2216      	movs	r2, #22
 8005a8a:	601a      	str	r2, [r3, #0]
  return -1;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <_exit>:

void _exit (int status)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f7ff ffe7 	bl	8005a78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005aaa:	bf00      	nop
 8005aac:	e7fd      	b.n	8005aaa <_exit+0x12>

08005aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e00a      	b.n	8005ad6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ac0:	f3af 8000 	nop.w
 8005ac4:	4601      	mov	r1, r0
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	1c5a      	adds	r2, r3, #1
 8005aca:	60ba      	str	r2, [r7, #8]
 8005acc:	b2ca      	uxtb	r2, r1
 8005ace:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	dbf0      	blt.n	8005ac0 <_read+0x12>
  }

  return len;
 8005ade:	687b      	ldr	r3, [r7, #4]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005af4:	2300      	movs	r3, #0
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	e009      	b.n	8005b0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	1c5a      	adds	r2, r3, #1
 8005afe:	60ba      	str	r2, [r7, #8]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	dbf1      	blt.n	8005afa <_write+0x12>
  }
  return len;
 8005b16:	687b      	ldr	r3, [r7, #4]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3718      	adds	r7, #24
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <_close>:

int _close(int file)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b48:	605a      	str	r2, [r3, #4]
  return 0;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <_isatty>:

int _isatty(int file)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b60:	2301      	movs	r3, #1
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b90:	4a14      	ldr	r2, [pc, #80]	@ (8005be4 <_sbrk+0x5c>)
 8005b92:	4b15      	ldr	r3, [pc, #84]	@ (8005be8 <_sbrk+0x60>)
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b9c:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <_sbrk+0x64>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ba4:	4b11      	ldr	r3, [pc, #68]	@ (8005bec <_sbrk+0x64>)
 8005ba6:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <_sbrk+0x68>)
 8005ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005baa:	4b10      	ldr	r3, [pc, #64]	@ (8005bec <_sbrk+0x64>)
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bb8:	f005 faca 	bl	800b150 <__errno>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	220c      	movs	r2, #12
 8005bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	e009      	b.n	8005bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bc8:	4b08      	ldr	r3, [pc, #32]	@ (8005bec <_sbrk+0x64>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bce:	4b07      	ldr	r3, [pc, #28]	@ (8005bec <_sbrk+0x64>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	4a05      	ldr	r2, [pc, #20]	@ (8005bec <_sbrk+0x64>)
 8005bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005bda:	68fb      	ldr	r3, [r7, #12]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	20020000 	.word	0x20020000
 8005be8:	00000400 	.word	0x00000400
 8005bec:	200014fc 	.word	0x200014fc
 8005bf0:	20001650 	.word	0x20001650

08005bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bf8:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <SystemInit+0x20>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfe:	4a05      	ldr	r2, [pc, #20]	@ (8005c14 <SystemInit+0x20>)
 8005c00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c08:	bf00      	nop
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <led_status>:

/**
 * @brief Control LED status indicators
 */
void led_status(uint8_t left_state, uint8_t right_state)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	460a      	mov	r2, r1
 8005c22:	71fb      	strb	r3, [r7, #7]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LED_LEFT_GPIO_Port, LED_LEFT_Pin, left_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf14      	ite	ne
 8005c2e:	2301      	movne	r3, #1
 8005c30:	2300      	moveq	r3, #0
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	2110      	movs	r1, #16
 8005c38:	4808      	ldr	r0, [pc, #32]	@ (8005c5c <led_status+0x44>)
 8005c3a:	f001 f8cf 	bl	8006ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RIGHT_GPIO_Port, LED_RIGHT_Pin, right_state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005c3e:	79bb      	ldrb	r3, [r7, #6]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	bf14      	ite	ne
 8005c44:	2301      	movne	r3, #1
 8005c46:	2300      	moveq	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	2120      	movs	r1, #32
 8005c4e:	4803      	ldr	r0, [pc, #12]	@ (8005c5c <led_status+0x44>)
 8005c50:	f001 f8c4 	bl	8006ddc <HAL_GPIO_WritePin>
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40020400 	.word	0x40020400

08005c60 <velocity_profile_init>:
 */


#include "velocity_profile.h"

void velocity_profile_init(VelocityProfile* profile, float distance, float max_vel) {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c6c:	edc7 0a01 	vstr	s1, [r7, #4]
    profile->max_velocity = max_vel;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	601a      	str	r2, [r3, #0]
    profile->max_acceleration = max_vel / 0.5f;  // Reach max vel in 0.5s
 8005c76:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c7a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8005c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	edc3 7a01 	vstr	s15, [r3, #4]
    profile->distance_remaining = distance;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	60da      	str	r2, [r3, #12]
    profile->current_velocity = 0.0f;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	609a      	str	r2, [r3, #8]
    profile->profile_start_time = HAL_GetTick();
 8005c96:	f000 f93f 	bl	8005f18 <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	611a      	str	r2, [r3, #16]
    profile->profile_active = true;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	751a      	strb	r2, [r3, #20]
    profile->t_accel = profile->max_velocity / profile->max_acceleration;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	edd3 6a00 	vldr	s13, [r3]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	ed93 7a01 	vldr	s14, [r3, #4]
 8005cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <velocity_profile_update>:

void velocity_profile_update(VelocityProfile* profile) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
    if (!profile->profile_active) return;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	7d1b      	ldrb	r3, [r3, #20]
 8005cd0:	f083 0301 	eor.w	r3, r3, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d161      	bne.n	8005d9e <velocity_profile_update+0xda>

    uint32_t current_time = HAL_GetTick();
 8005cda:	f000 f91d 	bl	8005f18 <HAL_GetTick>
 8005cde:	6178      	str	r0, [r7, #20]
    float elapsed = (current_time - profile->profile_start_time) / 1000.0f;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cf0:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8005da8 <velocity_profile_update+0xe4>
 8005cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cf8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Simple trapezoidal profile
    if (elapsed < profile->t_accel) {
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d02:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	d50a      	bpl.n	8005d26 <velocity_profile_update+0x62>
        // Acceleration phase
        profile->current_velocity = profile->max_acceleration * elapsed;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d16:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	edc3 7a02 	vstr	s15, [r3, #8]
 8005d24:	e03c      	b.n	8005da0 <velocity_profile_update+0xdc>
    } else if (elapsed < 2 * profile->t_accel) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d30:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3c:	d527      	bpl.n	8005d8e <velocity_profile_update+0xca>
        // Deceleration phase
        float decel_time = elapsed - profile->t_accel;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d44:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d4c:	edc7 7a03 	vstr	s15, [r7, #12]
        profile->current_velocity = profile->max_velocity - profile->max_acceleration * decel_time;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	ed93 7a00 	vldr	s14, [r3]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	edc3 7a02 	vstr	s15, [r3, #8]
        if (profile->current_velocity <= 0) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7c:	d810      	bhi.n	8005da0 <velocity_profile_update+0xdc>
            profile->current_velocity = 0;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	609a      	str	r2, [r3, #8]
            profile->profile_active = false;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	751a      	strb	r2, [r3, #20]
 8005d8c:	e008      	b.n	8005da0 <velocity_profile_update+0xdc>
        }
    } else {
        profile->current_velocity = 0;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	609a      	str	r2, [r3, #8]
        profile->profile_active = false;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	751a      	strb	r2, [r3, #20]
 8005d9c:	e000      	b.n	8005da0 <velocity_profile_update+0xdc>
    if (!profile->profile_active) return;
 8005d9e:	bf00      	nop
    }
}
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	447a0000 	.word	0x447a0000

08005dac <velocity_profile_get_target_velocity>:

float velocity_profile_get_target_velocity(VelocityProfile* profile) {
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    return profile->current_velocity;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	ee07 3a90 	vmov	s15, r3
}
 8005dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <velocity_profile_is_complete>:

bool velocity_profile_is_complete(VelocityProfile* profile) {
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
    return !profile->profile_active;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	7d1b      	ldrb	r3, [r3, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bf14      	ite	ne
 8005dda:	2301      	movne	r3, #1
 8005ddc:	2300      	moveq	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f083 0301 	eor.w	r3, r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	b2db      	uxtb	r3, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005e30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005dfc:	f7ff fefa 	bl	8005bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e00:	480c      	ldr	r0, [pc, #48]	@ (8005e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e02:	490d      	ldr	r1, [pc, #52]	@ (8005e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e04:	4a0d      	ldr	r2, [pc, #52]	@ (8005e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e08:	e002      	b.n	8005e10 <LoopCopyDataInit>

08005e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e0e:	3304      	adds	r3, #4

08005e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e14:	d3f9      	bcc.n	8005e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e16:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e18:	4c0a      	ldr	r4, [pc, #40]	@ (8005e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e1c:	e001      	b.n	8005e22 <LoopFillZerobss>

08005e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e20:	3204      	adds	r2, #4

08005e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e24:	d3fb      	bcc.n	8005e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e26:	f005 f999 	bl	800b15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e2a:	f7fc fc81 	bl	8002730 <main>
  bx  lr    
 8005e2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e38:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005e3c:	080100ac 	.word	0x080100ac
  ldr r2, =_sbss
 8005e40:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005e44:	20001650 	.word	0x20001650

08005e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e48:	e7fe      	b.n	8005e48 <ADC_IRQHandler>
	...

08005e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e50:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <HAL_Init+0x40>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0d      	ldr	r2, [pc, #52]	@ (8005e8c <HAL_Init+0x40>)
 8005e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <HAL_Init+0x40>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	@ (8005e8c <HAL_Init+0x40>)
 8005e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e68:	4b08      	ldr	r3, [pc, #32]	@ (8005e8c <HAL_Init+0x40>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a07      	ldr	r2, [pc, #28]	@ (8005e8c <HAL_Init+0x40>)
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e74:	2003      	movs	r0, #3
 8005e76:	f000 fd41 	bl	80068fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e7a:	200f      	movs	r0, #15
 8005e7c:	f000 f808 	bl	8005e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e80:	f7ff fb44 	bl	800550c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40023c00 	.word	0x40023c00

08005e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e98:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <HAL_InitTick+0x54>)
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	4b12      	ldr	r3, [pc, #72]	@ (8005ee8 <HAL_InitTick+0x58>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fd59 	bl	8006966 <HAL_SYSTICK_Config>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e00e      	b.n	8005edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b0f      	cmp	r3, #15
 8005ec2:	d80a      	bhi.n	8005eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	f000 fd21 	bl	8006912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ed0:	4a06      	ldr	r2, [pc, #24]	@ (8005eec <HAL_InitTick+0x5c>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3708      	adds	r7, #8
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000010 	.word	0x20000010
 8005ee8:	20000018 	.word	0x20000018
 8005eec:	20000014 	.word	0x20000014

08005ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ef4:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <HAL_IncTick+0x20>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <HAL_IncTick+0x24>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4413      	add	r3, r2
 8005f00:	4a04      	ldr	r2, [pc, #16]	@ (8005f14 <HAL_IncTick+0x24>)
 8005f02:	6013      	str	r3, [r2, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000018 	.word	0x20000018
 8005f14:	20001500 	.word	0x20001500

08005f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f1c:	4b03      	ldr	r3, [pc, #12]	@ (8005f2c <HAL_GetTick+0x14>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20001500 	.word	0x20001500

08005f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f38:	f7ff ffee 	bl	8005f18 <HAL_GetTick>
 8005f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d005      	beq.n	8005f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f74 <HAL_Delay+0x44>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f56:	bf00      	nop
 8005f58:	f7ff ffde 	bl	8005f18 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d8f7      	bhi.n	8005f58 <HAL_Delay+0x28>
  {
  }
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000018 	.word	0x20000018

08005f78 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e033      	b.n	8005ff6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fae0 	bl	800555c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d118      	bne.n	8005fe8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005fbe:	f023 0302 	bic.w	r3, r3, #2
 8005fc2:	f043 0202 	orr.w	r2, r3, #2
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 faca 	bl	8006564 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fe6:	e001      	b.n	8005fec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_ADC_Start+0x1a>
 8006016:	2302      	movs	r3, #2
 8006018:	e097      	b.n	800614a <HAL_ADC_Start+0x14a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d018      	beq.n	8006062 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689a      	ldr	r2, [r3, #8]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006040:	4b45      	ldr	r3, [pc, #276]	@ (8006158 <HAL_ADC_Start+0x158>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a45      	ldr	r2, [pc, #276]	@ (800615c <HAL_ADC_Start+0x15c>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	0c9a      	lsrs	r2, r3, #18
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006054:	e002      	b.n	800605c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3b01      	subs	r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f9      	bne.n	8006056 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	2b01      	cmp	r3, #1
 800606e:	d15f      	bne.n	8006130 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800609a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ae:	d106      	bne.n	80060be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b4:	f023 0206 	bic.w	r2, r3, #6
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	645a      	str	r2, [r3, #68]	@ 0x44
 80060bc:	e002      	b.n	80060c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060cc:	4b24      	ldr	r3, [pc, #144]	@ (8006160 <HAL_ADC_Start+0x160>)
 80060ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80060d8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10f      	bne.n	8006106 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d129      	bne.n	8006148 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006102:	609a      	str	r2, [r3, #8]
 8006104:	e020      	b.n	8006148 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a16      	ldr	r2, [pc, #88]	@ (8006164 <HAL_ADC_Start+0x164>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d11b      	bne.n	8006148 <HAL_ADC_Start+0x148>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d114      	bne.n	8006148 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800612c:	609a      	str	r2, [r3, #8]
 800612e:	e00b      	b.n	8006148 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006134:	f043 0210 	orr.w	r2, r3, #16
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006140:	f043 0201 	orr.w	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	20000010 	.word	0x20000010
 800615c:	431bde83 	.word	0x431bde83
 8006160:	40012300 	.word	0x40012300
 8006164:	40012000 	.word	0x40012000

08006168 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_ADC_Stop+0x16>
 800617a:	2302      	movs	r3, #2
 800617c:	e021      	b.n	80061c2 <HAL_ADC_Stop+0x5a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d109      	bne.n	80061b8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	f043 0201 	orr.w	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ea:	d113      	bne.n	8006214 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fa:	d10b      	bne.n	8006214 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e063      	b.n	80062dc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006214:	f7ff fe80 	bl	8005f18 <HAL_GetTick>
 8006218:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800621a:	e021      	b.n	8006260 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d01d      	beq.n	8006260 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <HAL_ADC_PollForConversion+0x6c>
 800622a:	f7ff fe75 	bl	8005f18 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d212      	bcs.n	8006260 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b02      	cmp	r3, #2
 8006246:	d00b      	beq.n	8006260 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624c:	f043 0204 	orr.w	r2, r3, #4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e03d      	b.n	80062dc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b02      	cmp	r3, #2
 800626c:	d1d6      	bne.n	800621c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f06f 0212 	mvn.w	r2, #18
 8006276:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d123      	bne.n	80062da <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11f      	bne.n	80062da <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d006      	beq.n	80062b6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d111      	bne.n	80062da <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d105      	bne.n	80062da <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f043 0201 	orr.w	r2, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_ADC_ConfigChannel+0x1c>
 8006318:	2302      	movs	r3, #2
 800631a:	e113      	b.n	8006544 <HAL_ADC_ConfigChannel+0x244>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2b09      	cmp	r3, #9
 800632a:	d925      	bls.n	8006378 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68d9      	ldr	r1, [r3, #12]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	461a      	mov	r2, r3
 800633a:	4613      	mov	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	4413      	add	r3, r2
 8006340:	3b1e      	subs	r3, #30
 8006342:	2207      	movs	r2, #7
 8006344:	fa02 f303 	lsl.w	r3, r2, r3
 8006348:	43da      	mvns	r2, r3
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	400a      	ands	r2, r1
 8006350:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68d9      	ldr	r1, [r3, #12]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	4618      	mov	r0, r3
 8006364:	4603      	mov	r3, r0
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	4403      	add	r3, r0
 800636a:	3b1e      	subs	r3, #30
 800636c:	409a      	lsls	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	e022      	b.n	80063be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6919      	ldr	r1, [r3, #16]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	461a      	mov	r2, r3
 8006386:	4613      	mov	r3, r2
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	4413      	add	r3, r2
 800638c:	2207      	movs	r2, #7
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43da      	mvns	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	400a      	ands	r2, r1
 800639a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6919      	ldr	r1, [r3, #16]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	4618      	mov	r0, r3
 80063ae:	4603      	mov	r3, r0
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	4403      	add	r3, r0
 80063b4:	409a      	lsls	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b06      	cmp	r3, #6
 80063c4:	d824      	bhi.n	8006410 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	3b05      	subs	r3, #5
 80063d8:	221f      	movs	r2, #31
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43da      	mvns	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	400a      	ands	r2, r1
 80063e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4618      	mov	r0, r3
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	3b05      	subs	r3, #5
 8006402:	fa00 f203 	lsl.w	r2, r0, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	635a      	str	r2, [r3, #52]	@ 0x34
 800640e:	e04c      	b.n	80064aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b0c      	cmp	r3, #12
 8006416:	d824      	bhi.n	8006462 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	3b23      	subs	r3, #35	@ 0x23
 800642a:	221f      	movs	r2, #31
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43da      	mvns	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	400a      	ands	r2, r1
 8006438:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	4618      	mov	r0, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	3b23      	subs	r3, #35	@ 0x23
 8006454:	fa00 f203 	lsl.w	r2, r0, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006460:	e023      	b.n	80064aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	3b41      	subs	r3, #65	@ 0x41
 8006474:	221f      	movs	r2, #31
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43da      	mvns	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	400a      	ands	r2, r1
 8006482:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	4618      	mov	r0, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	3b41      	subs	r3, #65	@ 0x41
 800649e:	fa00 f203 	lsl.w	r2, r0, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064aa:	4b29      	ldr	r3, [pc, #164]	@ (8006550 <HAL_ADC_ConfigChannel+0x250>)
 80064ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a28      	ldr	r2, [pc, #160]	@ (8006554 <HAL_ADC_ConfigChannel+0x254>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10f      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x1d8>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b12      	cmp	r3, #18
 80064be:	d10b      	bne.n	80064d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006554 <HAL_ADC_ConfigChannel+0x254>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d12b      	bne.n	800653a <HAL_ADC_ConfigChannel+0x23a>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006558 <HAL_ADC_ConfigChannel+0x258>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <HAL_ADC_ConfigChannel+0x1f4>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b11      	cmp	r3, #17
 80064f2:	d122      	bne.n	800653a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a11      	ldr	r2, [pc, #68]	@ (8006558 <HAL_ADC_ConfigChannel+0x258>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d111      	bne.n	800653a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006516:	4b11      	ldr	r3, [pc, #68]	@ (800655c <HAL_ADC_ConfigChannel+0x25c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <HAL_ADC_ConfigChannel+0x260>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	0c9a      	lsrs	r2, r3, #18
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800652c:	e002      	b.n	8006534 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3b01      	subs	r3, #1
 8006532:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f9      	bne.n	800652e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40012300 	.word	0x40012300
 8006554:	40012000 	.word	0x40012000
 8006558:	10000012 	.word	0x10000012
 800655c:	20000010 	.word	0x20000010
 8006560:	431bde83 	.word	0x431bde83

08006564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800656c:	4b79      	ldr	r3, [pc, #484]	@ (8006754 <ADC_Init+0x1f0>)
 800656e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	431a      	orrs	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6859      	ldr	r1, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	021a      	lsls	r2, r3, #8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80065bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6859      	ldr	r1, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	4a58      	ldr	r2, [pc, #352]	@ (8006758 <ADC_Init+0x1f4>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800660a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800662c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6899      	ldr	r1, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	e00f      	b.n	8006662 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0202 	bic.w	r2, r2, #2
 8006670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6899      	ldr	r1, [r3, #8]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	7e1b      	ldrb	r3, [r3, #24]
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01b      	beq.n	80066c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800669e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80066ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	3b01      	subs	r3, #1
 80066bc:	035a      	lsls	r2, r3, #13
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	e007      	b.n	80066d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80066e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	051a      	lsls	r2, r3, #20
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800670c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6899      	ldr	r1, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800671a:	025a      	lsls	r2, r3, #9
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6899      	ldr	r1, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	029a      	lsls	r2, r3, #10
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	609a      	str	r2, [r3, #8]
}
 8006748:	bf00      	nop
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr
 8006754:	40012300 	.word	0x40012300
 8006758:	0f000001 	.word	0x0f000001

0800675c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800676c:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <__NVIC_SetPriorityGrouping+0x44>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006778:	4013      	ands	r3, r2
 800677a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800678c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800678e:	4a04      	ldr	r2, [pc, #16]	@ (80067a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	60d3      	str	r3, [r2, #12]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067a8:	4b04      	ldr	r3, [pc, #16]	@ (80067bc <__NVIC_GetPriorityGrouping+0x18>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	0a1b      	lsrs	r3, r3, #8
 80067ae:	f003 0307 	and.w	r3, r3, #7
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	e000ed00 	.word	0xe000ed00

080067c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db0b      	blt.n	80067ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	f003 021f 	and.w	r2, r3, #31
 80067d8:	4907      	ldr	r1, [pc, #28]	@ (80067f8 <__NVIC_EnableIRQ+0x38>)
 80067da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	2001      	movs	r0, #1
 80067e2:	fa00 f202 	lsl.w	r2, r0, r2
 80067e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	e000e100 	.word	0xe000e100

080067fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680c:	2b00      	cmp	r3, #0
 800680e:	db0a      	blt.n	8006826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	490c      	ldr	r1, [pc, #48]	@ (8006848 <__NVIC_SetPriority+0x4c>)
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	0112      	lsls	r2, r2, #4
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	440b      	add	r3, r1
 8006820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006824:	e00a      	b.n	800683c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	b2da      	uxtb	r2, r3
 800682a:	4908      	ldr	r1, [pc, #32]	@ (800684c <__NVIC_SetPriority+0x50>)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	3b04      	subs	r3, #4
 8006834:	0112      	lsls	r2, r2, #4
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	440b      	add	r3, r1
 800683a:	761a      	strb	r2, [r3, #24]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	e000e100 	.word	0xe000e100
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	@ 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f1c3 0307 	rsb	r3, r3, #7
 800686a:	2b04      	cmp	r3, #4
 800686c:	bf28      	it	cs
 800686e:	2304      	movcs	r3, #4
 8006870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3304      	adds	r3, #4
 8006876:	2b06      	cmp	r3, #6
 8006878:	d902      	bls.n	8006880 <NVIC_EncodePriority+0x30>
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3b03      	subs	r3, #3
 800687e:	e000      	b.n	8006882 <NVIC_EncodePriority+0x32>
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	43da      	mvns	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	401a      	ands	r2, r3
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006898:	f04f 31ff 	mov.w	r1, #4294967295
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	43d9      	mvns	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a8:	4313      	orrs	r3, r2
         );
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	@ 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
	...

080068b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068c8:	d301      	bcc.n	80068ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068ca:	2301      	movs	r3, #1
 80068cc:	e00f      	b.n	80068ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068ce:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <SysTick_Config+0x40>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068d6:	210f      	movs	r1, #15
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	f7ff ff8e 	bl	80067fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <SysTick_Config+0x40>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068e6:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <SysTick_Config+0x40>)
 80068e8:	2207      	movs	r2, #7
 80068ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	e000e010 	.word	0xe000e010

080068fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7ff ff29 	bl	800675c <__NVIC_SetPriorityGrouping>
}
 800690a:	bf00      	nop
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006912:	b580      	push	{r7, lr}
 8006914:	b086      	sub	sp, #24
 8006916:	af00      	add	r7, sp, #0
 8006918:	4603      	mov	r3, r0
 800691a:	60b9      	str	r1, [r7, #8]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006924:	f7ff ff3e 	bl	80067a4 <__NVIC_GetPriorityGrouping>
 8006928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	6978      	ldr	r0, [r7, #20]
 8006930:	f7ff ff8e 	bl	8006850 <NVIC_EncodePriority>
 8006934:	4602      	mov	r2, r0
 8006936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800693a:	4611      	mov	r1, r2
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff ff5d 	bl	80067fc <__NVIC_SetPriority>
}
 8006942:	bf00      	nop
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b082      	sub	sp, #8
 800694e:	af00      	add	r7, sp, #0
 8006950:	4603      	mov	r3, r0
 8006952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff ff31 	bl	80067c0 <__NVIC_EnableIRQ>
}
 800695e:	bf00      	nop
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff ffa2 	bl	80068b8 <SysTick_Config>
 8006974:	4603      	mov	r3, r0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800698a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800698c:	f7ff fac4 	bl	8005f18 <HAL_GetTick>
 8006990:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d008      	beq.n	80069b0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2280      	movs	r2, #128	@ 0x80
 80069a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e052      	b.n	8006a56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f022 0216 	bic.w	r2, r2, #22
 80069be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	695a      	ldr	r2, [r3, #20]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069ce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <HAL_DMA_Abort+0x62>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0208 	bic.w	r2, r2, #8
 80069ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0201 	bic.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a00:	e013      	b.n	8006a2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a02:	f7ff fa89 	bl	8005f18 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d90c      	bls.n	8006a2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e015      	b.n	8006a56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e4      	bne.n	8006a02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a3c:	223f      	movs	r2, #63	@ 0x3f
 8006a3e:	409a      	lsls	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d004      	beq.n	8006a7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2280      	movs	r2, #128	@ 0x80
 8006a76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e00c      	b.n	8006a96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2205      	movs	r2, #5
 8006a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0201 	bic.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b089      	sub	sp, #36	@ 0x24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
 8006abe:	e159      	b.n	8006d74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	f040 8148 	bne.w	8006d6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d005      	beq.n	8006af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d130      	bne.n	8006b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	005b      	lsls	r3, r3, #1
 8006b00:	2203      	movs	r2, #3
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43db      	mvns	r3, r3
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	fa02 f303 	lsl.w	r3, r2, r3
 8006b34:	43db      	mvns	r3, r3
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	091b      	lsrs	r3, r3, #4
 8006b42:	f003 0201 	and.w	r2, r3, #1
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 0303 	and.w	r3, r3, #3
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d017      	beq.n	8006b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	2203      	movs	r2, #3
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	43db      	mvns	r3, r3
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d123      	bne.n	8006be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	08da      	lsrs	r2, r3, #3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3208      	adds	r2, #8
 8006ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	220f      	movs	r2, #15
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	691a      	ldr	r2, [r3, #16]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	08da      	lsrs	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3208      	adds	r2, #8
 8006be2:	69b9      	ldr	r1, [r7, #24]
 8006be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f003 0203 	and.w	r2, r3, #3
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80a2 	beq.w	8006d6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	4b57      	ldr	r3, [pc, #348]	@ (8006d8c <HAL_GPIO_Init+0x2e8>)
 8006c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c32:	4a56      	ldr	r2, [pc, #344]	@ (8006d8c <HAL_GPIO_Init+0x2e8>)
 8006c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8006c3a:	4b54      	ldr	r3, [pc, #336]	@ (8006d8c <HAL_GPIO_Init+0x2e8>)
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c46:	4a52      	ldr	r2, [pc, #328]	@ (8006d90 <HAL_GPIO_Init+0x2ec>)
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	089b      	lsrs	r3, r3, #2
 8006c4c:	3302      	adds	r3, #2
 8006c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	220f      	movs	r2, #15
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	43db      	mvns	r3, r3
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	4013      	ands	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a49      	ldr	r2, [pc, #292]	@ (8006d94 <HAL_GPIO_Init+0x2f0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d019      	beq.n	8006ca6 <HAL_GPIO_Init+0x202>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a48      	ldr	r2, [pc, #288]	@ (8006d98 <HAL_GPIO_Init+0x2f4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_GPIO_Init+0x1fe>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a47      	ldr	r2, [pc, #284]	@ (8006d9c <HAL_GPIO_Init+0x2f8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00d      	beq.n	8006c9e <HAL_GPIO_Init+0x1fa>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a46      	ldr	r2, [pc, #280]	@ (8006da0 <HAL_GPIO_Init+0x2fc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d007      	beq.n	8006c9a <HAL_GPIO_Init+0x1f6>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a45      	ldr	r2, [pc, #276]	@ (8006da4 <HAL_GPIO_Init+0x300>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d101      	bne.n	8006c96 <HAL_GPIO_Init+0x1f2>
 8006c92:	2304      	movs	r3, #4
 8006c94:	e008      	b.n	8006ca8 <HAL_GPIO_Init+0x204>
 8006c96:	2307      	movs	r3, #7
 8006c98:	e006      	b.n	8006ca8 <HAL_GPIO_Init+0x204>
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e004      	b.n	8006ca8 <HAL_GPIO_Init+0x204>
 8006c9e:	2302      	movs	r3, #2
 8006ca0:	e002      	b.n	8006ca8 <HAL_GPIO_Init+0x204>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <HAL_GPIO_Init+0x204>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	f002 0203 	and.w	r2, r2, #3
 8006cae:	0092      	lsls	r2, r2, #2
 8006cb0:	4093      	lsls	r3, r2
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cb8:	4935      	ldr	r1, [pc, #212]	@ (8006d90 <HAL_GPIO_Init+0x2ec>)
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	089b      	lsrs	r3, r3, #2
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cc6:	4b38      	ldr	r3, [pc, #224]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	43db      	mvns	r3, r3
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cea:	4a2f      	ldr	r2, [pc, #188]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d14:	4a24      	ldr	r2, [pc, #144]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d1a:	4b23      	ldr	r3, [pc, #140]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4013      	ands	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d44:	4b18      	ldr	r3, [pc, #96]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d68:	4a0f      	ldr	r2, [pc, #60]	@ (8006da8 <HAL_GPIO_Init+0x304>)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	2b0f      	cmp	r3, #15
 8006d78:	f67f aea2 	bls.w	8006ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	3724      	adds	r7, #36	@ 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40013800 	.word	0x40013800
 8006d94:	40020000 	.word	0x40020000
 8006d98:	40020400 	.word	0x40020400
 8006d9c:	40020800 	.word	0x40020800
 8006da0:	40020c00 	.word	0x40020c00
 8006da4:	40021000 	.word	0x40021000
 8006da8:	40013c00 	.word	0x40013c00

08006dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	887b      	ldrh	r3, [r7, #2]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
 8006dc8:	e001      	b.n	8006dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
 8006de8:	4613      	mov	r3, r2
 8006dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006dec:	787b      	ldrb	r3, [r7, #1]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006df2:	887a      	ldrh	r2, [r7, #2]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006df8:	e003      	b.n	8006e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006dfa:	887b      	ldrh	r3, [r7, #2]
 8006dfc:	041a      	lsls	r2, r3, #16
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	619a      	str	r2, [r3, #24]
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b085      	sub	sp, #20
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e20:	887a      	ldrh	r2, [r7, #2]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4013      	ands	r3, r2
 8006e26:	041a      	lsls	r2, r3, #16
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	43d9      	mvns	r1, r3
 8006e2c:	887b      	ldrh	r3, [r7, #2]
 8006e2e:	400b      	ands	r3, r1
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	619a      	str	r2, [r3, #24]
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e4e:	4b08      	ldr	r3, [pc, #32]	@ (8006e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	88fb      	ldrh	r3, [r7, #6]
 8006e54:	4013      	ands	r3, r2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e5a:	4a05      	ldr	r2, [pc, #20]	@ (8006e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e60:	88fb      	ldrh	r3, [r7, #6]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fc f9da 	bl	800321c <HAL_GPIO_EXTI_Callback>
  }
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40013c00 	.word	0x40013c00

08006e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e267      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0301 	and.w	r3, r3, #1
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d075      	beq.n	8006f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e92:	4b88      	ldr	r3, [pc, #544]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d00c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9e:	4b85      	ldr	r3, [pc, #532]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d112      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006eaa:	4b82      	ldr	r3, [pc, #520]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05b      	beq.n	8006f7c <HAL_RCC_OscConfig+0x108>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d157      	bne.n	8006f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e242      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x74>
 8006eda:	4b76      	ldr	r3, [pc, #472]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a75      	ldr	r2, [pc, #468]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e01d      	b.n	8006f24 <HAL_RCC_OscConfig+0xb0>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCC_OscConfig+0x98>
 8006ef2:	4b70      	ldr	r3, [pc, #448]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	4b6d      	ldr	r3, [pc, #436]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a6c      	ldr	r2, [pc, #432]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e00b      	b.n	8006f24 <HAL_RCC_OscConfig+0xb0>
 8006f0c:	4b69      	ldr	r3, [pc, #420]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a68      	ldr	r2, [pc, #416]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	4b66      	ldr	r3, [pc, #408]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a65      	ldr	r2, [pc, #404]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d013      	beq.n	8006f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2c:	f7fe fff4 	bl	8005f18 <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f34:	f7fe fff0 	bl	8005f18 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b64      	cmp	r3, #100	@ 0x64
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e207      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	4b5b      	ldr	r3, [pc, #364]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0xc0>
 8006f52:	e014      	b.n	8006f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f54:	f7fe ffe0 	bl	8005f18 <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f5c:	f7fe ffdc 	bl	8005f18 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b64      	cmp	r3, #100	@ 0x64
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e1f3      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	4b51      	ldr	r3, [pc, #324]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1f0      	bne.n	8006f5c <HAL_RCC_OscConfig+0xe8>
 8006f7a:	e000      	b.n	8006f7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d063      	beq.n	8007052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 030c 	and.w	r3, r3, #12
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00b      	beq.n	8006fae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f96:	4b47      	ldr	r3, [pc, #284]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d11c      	bne.n	8006fdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fa2:	4b44      	ldr	r3, [pc, #272]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d116      	bne.n	8006fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fae:	4b41      	ldr	r3, [pc, #260]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x152>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d001      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e1c7      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4937      	ldr	r1, [pc, #220]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fda:	e03a      	b.n	8007052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d020      	beq.n	8007026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe4:	4b34      	ldr	r3, [pc, #208]	@ (80070b8 <HAL_RCC_OscConfig+0x244>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fea:	f7fe ff95 	bl	8005f18 <HAL_GetTick>
 8006fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff0:	e008      	b.n	8007004 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff2:	f7fe ff91 	bl	8005f18 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d901      	bls.n	8007004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e1a8      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007004:	4b2b      	ldr	r3, [pc, #172]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f0      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007010:	4b28      	ldr	r3, [pc, #160]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	4925      	ldr	r1, [pc, #148]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8007020:	4313      	orrs	r3, r2
 8007022:	600b      	str	r3, [r1, #0]
 8007024:	e015      	b.n	8007052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007026:	4b24      	ldr	r3, [pc, #144]	@ (80070b8 <HAL_RCC_OscConfig+0x244>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702c:	f7fe ff74 	bl	8005f18 <HAL_GetTick>
 8007030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007032:	e008      	b.n	8007046 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007034:	f7fe ff70 	bl	8005f18 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e187      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007046:	4b1b      	ldr	r3, [pc, #108]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1f0      	bne.n	8007034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d036      	beq.n	80070cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d016      	beq.n	8007094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007066:	4b15      	ldr	r3, [pc, #84]	@ (80070bc <HAL_RCC_OscConfig+0x248>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800706c:	f7fe ff54 	bl	8005f18 <HAL_GetTick>
 8007070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007072:	e008      	b.n	8007086 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007074:	f7fe ff50 	bl	8005f18 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b02      	cmp	r3, #2
 8007080:	d901      	bls.n	8007086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007082:	2303      	movs	r3, #3
 8007084:	e167      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007086:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <HAL_RCC_OscConfig+0x240>)
 8007088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f0      	beq.n	8007074 <HAL_RCC_OscConfig+0x200>
 8007092:	e01b      	b.n	80070cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007094:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <HAL_RCC_OscConfig+0x248>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800709a:	f7fe ff3d 	bl	8005f18 <HAL_GetTick>
 800709e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a0:	e00e      	b.n	80070c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070a2:	f7fe ff39 	bl	8005f18 <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d907      	bls.n	80070c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e150      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
 80070b4:	40023800 	.word	0x40023800
 80070b8:	42470000 	.word	0x42470000
 80070bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c0:	4b88      	ldr	r3, [pc, #544]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80070c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ea      	bne.n	80070a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 8097 	beq.w	8007208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070da:	2300      	movs	r3, #0
 80070dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070de:	4b81      	ldr	r3, [pc, #516]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10f      	bne.n	800710a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ea:	2300      	movs	r3, #0
 80070ec:	60bb      	str	r3, [r7, #8]
 80070ee:	4b7d      	ldr	r3, [pc, #500]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	4a7c      	ldr	r2, [pc, #496]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80070f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80070fa:	4b7a      	ldr	r3, [pc, #488]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80070fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007102:	60bb      	str	r3, [r7, #8]
 8007104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007106:	2301      	movs	r3, #1
 8007108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800710a:	4b77      	ldr	r3, [pc, #476]	@ (80072e8 <HAL_RCC_OscConfig+0x474>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007112:	2b00      	cmp	r3, #0
 8007114:	d118      	bne.n	8007148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007116:	4b74      	ldr	r3, [pc, #464]	@ (80072e8 <HAL_RCC_OscConfig+0x474>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a73      	ldr	r2, [pc, #460]	@ (80072e8 <HAL_RCC_OscConfig+0x474>)
 800711c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007122:	f7fe fef9 	bl	8005f18 <HAL_GetTick>
 8007126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007128:	e008      	b.n	800713c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712a:	f7fe fef5 	bl	8005f18 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e10c      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800713c:	4b6a      	ldr	r3, [pc, #424]	@ (80072e8 <HAL_RCC_OscConfig+0x474>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f0      	beq.n	800712a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d106      	bne.n	800715e <HAL_RCC_OscConfig+0x2ea>
 8007150:	4b64      	ldr	r3, [pc, #400]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007154:	4a63      	ldr	r2, [pc, #396]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	6713      	str	r3, [r2, #112]	@ 0x70
 800715c:	e01c      	b.n	8007198 <HAL_RCC_OscConfig+0x324>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	2b05      	cmp	r3, #5
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0x30c>
 8007166:	4b5f      	ldr	r3, [pc, #380]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716a:	4a5e      	ldr	r2, [pc, #376]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 800716c:	f043 0304 	orr.w	r3, r3, #4
 8007170:	6713      	str	r3, [r2, #112]	@ 0x70
 8007172:	4b5c      	ldr	r3, [pc, #368]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007176:	4a5b      	ldr	r2, [pc, #364]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007178:	f043 0301 	orr.w	r3, r3, #1
 800717c:	6713      	str	r3, [r2, #112]	@ 0x70
 800717e:	e00b      	b.n	8007198 <HAL_RCC_OscConfig+0x324>
 8007180:	4b58      	ldr	r3, [pc, #352]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007184:	4a57      	ldr	r2, [pc, #348]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	6713      	str	r3, [r2, #112]	@ 0x70
 800718c:	4b55      	ldr	r3, [pc, #340]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 800718e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007190:	4a54      	ldr	r2, [pc, #336]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007192:	f023 0304 	bic.w	r3, r3, #4
 8007196:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d015      	beq.n	80071cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a0:	f7fe feba 	bl	8005f18 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a6:	e00a      	b.n	80071be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071a8:	f7fe feb6 	bl	8005f18 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e0cb      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071be:	4b49      	ldr	r3, [pc, #292]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80071c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0ee      	beq.n	80071a8 <HAL_RCC_OscConfig+0x334>
 80071ca:	e014      	b.n	80071f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071cc:	f7fe fea4 	bl	8005f18 <HAL_GetTick>
 80071d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d2:	e00a      	b.n	80071ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071d4:	f7fe fea0 	bl	8005f18 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e0b5      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ea:	4b3e      	ldr	r3, [pc, #248]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80071ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1ee      	bne.n	80071d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d105      	bne.n	8007208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071fc:	4b39      	ldr	r3, [pc, #228]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	4a38      	ldr	r2, [pc, #224]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007206:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 80a1 	beq.w	8007354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007212:	4b34      	ldr	r3, [pc, #208]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b08      	cmp	r3, #8
 800721c:	d05c      	beq.n	80072d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d141      	bne.n	80072aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007226:	4b31      	ldr	r3, [pc, #196]	@ (80072ec <HAL_RCC_OscConfig+0x478>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800722c:	f7fe fe74 	bl	8005f18 <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007232:	e008      	b.n	8007246 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007234:	f7fe fe70 	bl	8005f18 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d901      	bls.n	8007246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e087      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007246:	4b27      	ldr	r3, [pc, #156]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1f0      	bne.n	8007234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69da      	ldr	r2, [r3, #28]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007260:	019b      	lsls	r3, r3, #6
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	3b01      	subs	r3, #1
 800726c:	041b      	lsls	r3, r3, #16
 800726e:	431a      	orrs	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	061b      	lsls	r3, r3, #24
 8007276:	491b      	ldr	r1, [pc, #108]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 8007278:	4313      	orrs	r3, r2
 800727a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800727c:	4b1b      	ldr	r3, [pc, #108]	@ (80072ec <HAL_RCC_OscConfig+0x478>)
 800727e:	2201      	movs	r2, #1
 8007280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007282:	f7fe fe49 	bl	8005f18 <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007288:	e008      	b.n	800729c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800728a:	f7fe fe45 	bl	8005f18 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d901      	bls.n	800729c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e05c      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800729c:	4b11      	ldr	r3, [pc, #68]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0f0      	beq.n	800728a <HAL_RCC_OscConfig+0x416>
 80072a8:	e054      	b.n	8007354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072aa:	4b10      	ldr	r3, [pc, #64]	@ (80072ec <HAL_RCC_OscConfig+0x478>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b0:	f7fe fe32 	bl	8005f18 <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b6:	e008      	b.n	80072ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072b8:	f7fe fe2e 	bl	8005f18 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d901      	bls.n	80072ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e045      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072ca:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <HAL_RCC_OscConfig+0x470>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1f0      	bne.n	80072b8 <HAL_RCC_OscConfig+0x444>
 80072d6:	e03d      	b.n	8007354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d107      	bne.n	80072f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e038      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40007000 	.word	0x40007000
 80072ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072f0:	4b1b      	ldr	r3, [pc, #108]	@ (8007360 <HAL_RCC_OscConfig+0x4ec>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d028      	beq.n	8007350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007308:	429a      	cmp	r2, r3
 800730a:	d121      	bne.n	8007350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007316:	429a      	cmp	r2, r3
 8007318:	d11a      	bne.n	8007350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007320:	4013      	ands	r3, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007328:	4293      	cmp	r3, r2
 800732a:	d111      	bne.n	8007350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	3b01      	subs	r3, #1
 800733a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d107      	bne.n	8007350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800734c:	429a      	cmp	r2, r3
 800734e:	d001      	beq.n	8007354 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40023800 	.word	0x40023800

08007364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e0cc      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007378:	4b68      	ldr	r3, [pc, #416]	@ (800751c <HAL_RCC_ClockConfig+0x1b8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	429a      	cmp	r2, r3
 8007384:	d90c      	bls.n	80073a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007386:	4b65      	ldr	r3, [pc, #404]	@ (800751c <HAL_RCC_ClockConfig+0x1b8>)
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800738e:	4b63      	ldr	r3, [pc, #396]	@ (800751c <HAL_RCC_ClockConfig+0x1b8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	429a      	cmp	r2, r3
 800739a:	d001      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0b8      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d020      	beq.n	80073ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073b8:	4b59      	ldr	r3, [pc, #356]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4a58      	ldr	r2, [pc, #352]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80073c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073d0:	4b53      	ldr	r3, [pc, #332]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	4a52      	ldr	r2, [pc, #328]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80073d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80073da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073dc:	4b50      	ldr	r3, [pc, #320]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	494d      	ldr	r1, [pc, #308]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d044      	beq.n	8007484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d107      	bne.n	8007412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007402:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d119      	bne.n	8007442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e07f      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d003      	beq.n	8007422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800741e:	2b03      	cmp	r3, #3
 8007420:	d107      	bne.n	8007432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007422:	4b3f      	ldr	r3, [pc, #252]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e06f      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007432:	4b3b      	ldr	r3, [pc, #236]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e067      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007442:	4b37      	ldr	r3, [pc, #220]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f023 0203 	bic.w	r2, r3, #3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4934      	ldr	r1, [pc, #208]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 8007450:	4313      	orrs	r3, r2
 8007452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007454:	f7fe fd60 	bl	8005f18 <HAL_GetTick>
 8007458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800745a:	e00a      	b.n	8007472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800745c:	f7fe fd5c 	bl	8005f18 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e04f      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007472:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 020c 	and.w	r2, r3, #12
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	429a      	cmp	r2, r3
 8007482:	d1eb      	bne.n	800745c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007484:	4b25      	ldr	r3, [pc, #148]	@ (800751c <HAL_RCC_ClockConfig+0x1b8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 0307 	and.w	r3, r3, #7
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d20c      	bcs.n	80074ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007492:	4b22      	ldr	r3, [pc, #136]	@ (800751c <HAL_RCC_ClockConfig+0x1b8>)
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800749a:	4b20      	ldr	r3, [pc, #128]	@ (800751c <HAL_RCC_ClockConfig+0x1b8>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d001      	beq.n	80074ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e032      	b.n	8007512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074b8:	4b19      	ldr	r3, [pc, #100]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4916      	ldr	r1, [pc, #88]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0308 	and.w	r3, r3, #8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074d6:	4b12      	ldr	r3, [pc, #72]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	00db      	lsls	r3, r3, #3
 80074e4:	490e      	ldr	r1, [pc, #56]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074ea:	f000 f821 	bl	8007530 <HAL_RCC_GetSysClockFreq>
 80074ee:	4602      	mov	r2, r0
 80074f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007520 <HAL_RCC_ClockConfig+0x1bc>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	f003 030f 	and.w	r3, r3, #15
 80074fa:	490a      	ldr	r1, [pc, #40]	@ (8007524 <HAL_RCC_ClockConfig+0x1c0>)
 80074fc:	5ccb      	ldrb	r3, [r1, r3]
 80074fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007502:	4a09      	ldr	r2, [pc, #36]	@ (8007528 <HAL_RCC_ClockConfig+0x1c4>)
 8007504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007506:	4b09      	ldr	r3, [pc, #36]	@ (800752c <HAL_RCC_ClockConfig+0x1c8>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f7fe fcc0 	bl	8005e90 <HAL_InitTick>

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40023c00 	.word	0x40023c00
 8007520:	40023800 	.word	0x40023800
 8007524:	0800fd0c 	.word	0x0800fd0c
 8007528:	20000010 	.word	0x20000010
 800752c:	20000014 	.word	0x20000014

08007530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007534:	b090      	sub	sp, #64	@ 0x40
 8007536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007548:	4b59      	ldr	r3, [pc, #356]	@ (80076b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 030c 	and.w	r3, r3, #12
 8007550:	2b08      	cmp	r3, #8
 8007552:	d00d      	beq.n	8007570 <HAL_RCC_GetSysClockFreq+0x40>
 8007554:	2b08      	cmp	r3, #8
 8007556:	f200 80a1 	bhi.w	800769c <HAL_RCC_GetSysClockFreq+0x16c>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_RCC_GetSysClockFreq+0x34>
 800755e:	2b04      	cmp	r3, #4
 8007560:	d003      	beq.n	800756a <HAL_RCC_GetSysClockFreq+0x3a>
 8007562:	e09b      	b.n	800769c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007564:	4b53      	ldr	r3, [pc, #332]	@ (80076b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007566:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007568:	e09b      	b.n	80076a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800756a:	4b53      	ldr	r3, [pc, #332]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800756c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800756e:	e098      	b.n	80076a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007570:	4b4f      	ldr	r3, [pc, #316]	@ (80076b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800757a:	4b4d      	ldr	r3, [pc, #308]	@ (80076b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d028      	beq.n	80075d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007586:	4b4a      	ldr	r3, [pc, #296]	@ (80076b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	2200      	movs	r2, #0
 800758e:	623b      	str	r3, [r7, #32]
 8007590:	627a      	str	r2, [r7, #36]	@ 0x24
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007598:	2100      	movs	r1, #0
 800759a:	4b47      	ldr	r3, [pc, #284]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800759c:	fb03 f201 	mul.w	r2, r3, r1
 80075a0:	2300      	movs	r3, #0
 80075a2:	fb00 f303 	mul.w	r3, r0, r3
 80075a6:	4413      	add	r3, r2
 80075a8:	4a43      	ldr	r2, [pc, #268]	@ (80076b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80075aa:	fba0 1202 	umull	r1, r2, r0, r2
 80075ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075b0:	460a      	mov	r2, r1
 80075b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80075b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b6:	4413      	add	r3, r2
 80075b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075bc:	2200      	movs	r2, #0
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	61fa      	str	r2, [r7, #28]
 80075c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80075ca:	f7f9 faf5 	bl	8000bb8 <__aeabi_uldivmod>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4613      	mov	r3, r2
 80075d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d6:	e053      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075d8:	4b35      	ldr	r3, [pc, #212]	@ (80076b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	099b      	lsrs	r3, r3, #6
 80075de:	2200      	movs	r2, #0
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	617a      	str	r2, [r7, #20]
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80075ea:	f04f 0b00 	mov.w	fp, #0
 80075ee:	4652      	mov	r2, sl
 80075f0:	465b      	mov	r3, fp
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	0159      	lsls	r1, r3, #5
 80075fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007600:	0150      	lsls	r0, r2, #5
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	ebb2 080a 	subs.w	r8, r2, sl
 800760a:	eb63 090b 	sbc.w	r9, r3, fp
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	f04f 0300 	mov.w	r3, #0
 8007616:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800761a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800761e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007622:	ebb2 0408 	subs.w	r4, r2, r8
 8007626:	eb63 0509 	sbc.w	r5, r3, r9
 800762a:	f04f 0200 	mov.w	r2, #0
 800762e:	f04f 0300 	mov.w	r3, #0
 8007632:	00eb      	lsls	r3, r5, #3
 8007634:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007638:	00e2      	lsls	r2, r4, #3
 800763a:	4614      	mov	r4, r2
 800763c:	461d      	mov	r5, r3
 800763e:	eb14 030a 	adds.w	r3, r4, sl
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	eb45 030b 	adc.w	r3, r5, fp
 8007648:	607b      	str	r3, [r7, #4]
 800764a:	f04f 0200 	mov.w	r2, #0
 800764e:	f04f 0300 	mov.w	r3, #0
 8007652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007656:	4629      	mov	r1, r5
 8007658:	028b      	lsls	r3, r1, #10
 800765a:	4621      	mov	r1, r4
 800765c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007660:	4621      	mov	r1, r4
 8007662:	028a      	lsls	r2, r1, #10
 8007664:	4610      	mov	r0, r2
 8007666:	4619      	mov	r1, r3
 8007668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766a:	2200      	movs	r2, #0
 800766c:	60bb      	str	r3, [r7, #8]
 800766e:	60fa      	str	r2, [r7, #12]
 8007670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007674:	f7f9 faa0 	bl	8000bb8 <__aeabi_uldivmod>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4613      	mov	r3, r2
 800767e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007680:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	0c1b      	lsrs	r3, r3, #16
 8007686:	f003 0303 	and.w	r3, r3, #3
 800768a:	3301      	adds	r3, #1
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007690:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	fbb2 f3f3 	udiv	r3, r2, r3
 8007698:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800769a:	e002      	b.n	80076a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800769e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80076a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3740      	adds	r7, #64	@ 0x40
 80076a8:	46bd      	mov	sp, r7
 80076aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076ae:	bf00      	nop
 80076b0:	40023800 	.word	0x40023800
 80076b4:	00f42400 	.word	0x00f42400
 80076b8:	017d7840 	.word	0x017d7840

080076bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076c0:	4b03      	ldr	r3, [pc, #12]	@ (80076d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80076c2:	681b      	ldr	r3, [r3, #0]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000010 	.word	0x20000010

080076d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076d8:	f7ff fff0 	bl	80076bc <HAL_RCC_GetHCLKFreq>
 80076dc:	4602      	mov	r2, r0
 80076de:	4b05      	ldr	r3, [pc, #20]	@ (80076f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	0a9b      	lsrs	r3, r3, #10
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	4903      	ldr	r1, [pc, #12]	@ (80076f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ea:	5ccb      	ldrb	r3, [r1, r3]
 80076ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40023800 	.word	0x40023800
 80076f8:	0800fd1c 	.word	0x0800fd1c

080076fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007700:	f7ff ffdc 	bl	80076bc <HAL_RCC_GetHCLKFreq>
 8007704:	4602      	mov	r2, r0
 8007706:	4b05      	ldr	r3, [pc, #20]	@ (800771c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	0b5b      	lsrs	r3, r3, #13
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	4903      	ldr	r1, [pc, #12]	@ (8007720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007712:	5ccb      	ldrb	r3, [r1, r3]
 8007714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007718:	4618      	mov	r0, r3
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40023800 	.word	0x40023800
 8007720:	0800fd1c 	.word	0x0800fd1c

08007724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e07b      	b.n	800782e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d108      	bne.n	8007750 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007746:	d009      	beq.n	800775c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	61da      	str	r2, [r3, #28]
 800774e:	e005      	b.n	800775c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fd ff34 	bl	80055e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007792:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80077a4:	431a      	orrs	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077d6:	431a      	orrs	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077e0:	ea42 0103 	orr.w	r1, r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0104 	and.w	r1, r3, #4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007802:	f003 0210 	and.w	r2, r3, #16
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800781c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b088      	sub	sp, #32
 800783a:	af00      	add	r7, sp, #0
 800783c:	60f8      	str	r0, [r7, #12]
 800783e:	60b9      	str	r1, [r7, #8]
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	4613      	mov	r3, r2
 8007844:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007846:	f7fe fb67 	bl	8005f18 <HAL_GetTick>
 800784a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800784c:	88fb      	ldrh	r3, [r7, #6]
 800784e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d001      	beq.n	8007860 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800785c:	2302      	movs	r3, #2
 800785e:	e12a      	b.n	8007ab6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <HAL_SPI_Transmit+0x36>
 8007866:	88fb      	ldrh	r3, [r7, #6]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e122      	b.n	8007ab6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_SPI_Transmit+0x48>
 800787a:	2302      	movs	r3, #2
 800787c:	e11b      	b.n	8007ab6 <HAL_SPI_Transmit+0x280>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2203      	movs	r2, #3
 800788a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	88fa      	ldrh	r2, [r7, #6]
 800789e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	88fa      	ldrh	r2, [r7, #6]
 80078a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078cc:	d10f      	bne.n	80078ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b40      	cmp	r3, #64	@ 0x40
 80078fa:	d007      	beq.n	800790c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007914:	d152      	bne.n	80079bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_Transmit+0xee>
 800791e:	8b7b      	ldrh	r3, [r7, #26]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d145      	bne.n	80079b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007948:	e032      	b.n	80079b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d112      	bne.n	800797e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795c:	881a      	ldrh	r2, [r3, #0]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800797c:	e018      	b.n	80079b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800797e:	f7fe facb 	bl	8005f18 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d803      	bhi.n	8007996 <HAL_SPI_Transmit+0x160>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d102      	bne.n	800799c <HAL_SPI_Transmit+0x166>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d109      	bne.n	80079b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e082      	b.n	8007ab6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1c7      	bne.n	800794a <HAL_SPI_Transmit+0x114>
 80079ba:	e053      	b.n	8007a64 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_SPI_Transmit+0x194>
 80079c4:	8b7b      	ldrh	r3, [r7, #26]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d147      	bne.n	8007a5a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	7812      	ldrb	r2, [r2, #0]
 80079d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079dc:	1c5a      	adds	r2, r3, #1
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079f0:	e033      	b.n	8007a5a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 0302 	and.w	r3, r3, #2
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d113      	bne.n	8007a28 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	330c      	adds	r3, #12
 8007a0a:	7812      	ldrb	r2, [r2, #0]
 8007a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007a26:	e018      	b.n	8007a5a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a28:	f7fe fa76 	bl	8005f18 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d803      	bhi.n	8007a40 <HAL_SPI_Transmit+0x20a>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3e:	d102      	bne.n	8007a46 <HAL_SPI_Transmit+0x210>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e02d      	b.n	8007ab6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1c6      	bne.n	80079f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 fbd9 	bl	8008220 <SPI_EndRxTxTransaction>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	617b      	str	r3, [r7, #20]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e000      	b.n	8007ab6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
  }
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3720      	adds	r7, #32
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b088      	sub	sp, #32
 8007ac2:	af02      	add	r7, sp, #8
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	60b9      	str	r1, [r7, #8]
 8007ac8:	603b      	str	r3, [r7, #0]
 8007aca:	4613      	mov	r3, r2
 8007acc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d001      	beq.n	8007ade <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007ada:	2302      	movs	r3, #2
 8007adc:	e104      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_SPI_Receive+0x2c>
 8007ae4:	88fb      	ldrh	r3, [r7, #6]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e0fc      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007af6:	d112      	bne.n	8007b1e <HAL_SPI_Receive+0x60>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10e      	bne.n	8007b1e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2204      	movs	r2, #4
 8007b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007b08:	88fa      	ldrh	r2, [r7, #6]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	68b9      	ldr	r1, [r7, #8]
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f8eb 	bl	8007cf0 <HAL_SPI_TransmitReceive>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	e0e4      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b1e:	f7fe f9fb 	bl	8005f18 <HAL_GetTick>
 8007b22:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_SPI_Receive+0x74>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e0da      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	88fa      	ldrh	r2, [r7, #6]
 8007b52:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	88fa      	ldrh	r2, [r7, #6]
 8007b58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b80:	d10f      	bne.n	8007ba2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007ba0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bac:	2b40      	cmp	r3, #64	@ 0x40
 8007bae:	d007      	beq.n	8007bc0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bbe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d170      	bne.n	8007caa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007bc8:	e035      	b.n	8007c36 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d115      	bne.n	8007c04 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f103 020c 	add.w	r2, r3, #12
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be4:	7812      	ldrb	r2, [r2, #0]
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bee:	1c5a      	adds	r2, r3, #1
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c02:	e018      	b.n	8007c36 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c04:	f7fe f988 	bl	8005f18 <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d803      	bhi.n	8007c1c <HAL_SPI_Receive+0x15e>
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d102      	bne.n	8007c22 <HAL_SPI_Receive+0x164>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e058      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1c4      	bne.n	8007bca <HAL_SPI_Receive+0x10c>
 8007c40:	e038      	b.n	8007cb4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d113      	bne.n	8007c78 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007c76:	e018      	b.n	8007caa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c78:	f7fe f94e 	bl	8005f18 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d803      	bhi.n	8007c90 <HAL_SPI_Receive+0x1d2>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	d102      	bne.n	8007c96 <HAL_SPI_Receive+0x1d8>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d109      	bne.n	8007caa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e01e      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1c6      	bne.n	8007c42 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	6839      	ldr	r1, [r7, #0]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f000 fa4b 	bl	8008154 <SPI_EndRxTransaction>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
  }
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	@ 0x28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d02:	f7fe f909 	bl	8005f18 <HAL_GetTick>
 8007d06:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d0e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007d16:	887b      	ldrh	r3, [r7, #2]
 8007d18:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d1a:	7ffb      	ldrb	r3, [r7, #31]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d00c      	beq.n	8007d3a <HAL_SPI_TransmitReceive+0x4a>
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d26:	d106      	bne.n	8007d36 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d102      	bne.n	8007d36 <HAL_SPI_TransmitReceive+0x46>
 8007d30:	7ffb      	ldrb	r3, [r7, #31]
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d001      	beq.n	8007d3a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007d36:	2302      	movs	r3, #2
 8007d38:	e17f      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x5c>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x5c>
 8007d46:	887b      	ldrh	r3, [r7, #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e174      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x6e>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e16d      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d003      	beq.n	8007d7a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2205      	movs	r2, #5
 8007d76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	887a      	ldrh	r2, [r7, #2]
 8007d8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	887a      	ldrh	r2, [r7, #2]
 8007d90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	887a      	ldrh	r2, [r7, #2]
 8007d9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	887a      	ldrh	r2, [r7, #2]
 8007da2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d007      	beq.n	8007dce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007dcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dd6:	d17e      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <HAL_SPI_TransmitReceive+0xf6>
 8007de0:	8afb      	ldrh	r3, [r7, #22]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d16c      	bne.n	8007ec0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dea:	881a      	ldrh	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df6:	1c9a      	adds	r2, r3, #2
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e0a:	e059      	b.n	8007ec0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d11b      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x162>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d016      	beq.n	8007e52 <HAL_SPI_TransmitReceive+0x162>
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d113      	bne.n	8007e52 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e2e:	881a      	ldrh	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e3a:	1c9a      	adds	r2, r3, #2
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d119      	bne.n	8007e94 <HAL_SPI_TransmitReceive+0x1a4>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d014      	beq.n	8007e94 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e74:	b292      	uxth	r2, r2
 8007e76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e7c:	1c9a      	adds	r2, r3, #2
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e90:	2301      	movs	r3, #1
 8007e92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e94:	f7fe f840 	bl	8005f18 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d80d      	bhi.n	8007ec0 <HAL_SPI_TransmitReceive+0x1d0>
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d009      	beq.n	8007ec0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e0bc      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1a0      	bne.n	8007e0c <HAL_SPI_TransmitReceive+0x11c>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d19b      	bne.n	8007e0c <HAL_SPI_TransmitReceive+0x11c>
 8007ed4:	e082      	b.n	8007fdc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_SPI_TransmitReceive+0x1f4>
 8007ede:	8afb      	ldrh	r3, [r7, #22]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d171      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f0a:	e05d      	b.n	8007fc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d11c      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x264>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d017      	beq.n	8007f54 <HAL_SPI_TransmitReceive+0x264>
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d114      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	330c      	adds	r3, #12
 8007f34:	7812      	ldrb	r2, [r2, #0]
 8007f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f50:	2300      	movs	r3, #0
 8007f52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d119      	bne.n	8007f96 <HAL_SPI_TransmitReceive+0x2a6>
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d014      	beq.n	8007f96 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f76:	b2d2      	uxtb	r2, r2
 8007f78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f92:	2301      	movs	r3, #1
 8007f94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f96:	f7fd ffbf 	bl	8005f18 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d803      	bhi.n	8007fae <HAL_SPI_TransmitReceive+0x2be>
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d102      	bne.n	8007fb4 <HAL_SPI_TransmitReceive+0x2c4>
 8007fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e038      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d19c      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x21c>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d197      	bne.n	8007f0c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fdc:	6a3a      	ldr	r2, [r7, #32]
 8007fde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f91d 	bl	8008220 <SPI_EndRxTxTransaction>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d008      	beq.n	8007ffe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e01d      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10a      	bne.n	800801c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008006:	2300      	movs	r3, #0
 8008008:	613b      	str	r3, [r7, #16]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	613b      	str	r3, [r7, #16]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e000      	b.n	800803a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008038:	2300      	movs	r3, #0
  }
}
 800803a:	4618      	mov	r0, r3
 800803c:	3728      	adds	r7, #40	@ 0x28
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	4613      	mov	r3, r2
 8008052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008054:	f7fd ff60 	bl	8005f18 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	4413      	add	r3, r2
 8008062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008064:	f7fd ff58 	bl	8005f18 <HAL_GetTick>
 8008068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800806a:	4b39      	ldr	r3, [pc, #228]	@ (8008150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	015b      	lsls	r3, r3, #5
 8008070:	0d1b      	lsrs	r3, r3, #20
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800807a:	e055      	b.n	8008128 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d051      	beq.n	8008128 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008084:	f7fd ff48 	bl	8005f18 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	69fa      	ldr	r2, [r7, #28]
 8008090:	429a      	cmp	r2, r3
 8008092:	d902      	bls.n	800809a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d13d      	bne.n	8008116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80080a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080b2:	d111      	bne.n	80080d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080bc:	d004      	beq.n	80080c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c6:	d107      	bne.n	80080d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e0:	d10f      	bne.n	8008102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e018      	b.n	8008148 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800811c:	2300      	movs	r3, #0
 800811e:	61fb      	str	r3, [r7, #28]
 8008120:	e002      	b.n	8008128 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	3b01      	subs	r3, #1
 8008126:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4013      	ands	r3, r2
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	429a      	cmp	r2, r3
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	429a      	cmp	r2, r3
 8008144:	d19a      	bne.n	800807c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000010 	.word	0x20000010

08008154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af02      	add	r7, sp, #8
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008168:	d111      	bne.n	800818e <SPI_EndRxTransaction+0x3a>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008172:	d004      	beq.n	800817e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800817c:	d107      	bne.n	800818e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800818c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008196:	d12a      	bne.n	80081ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a0:	d012      	beq.n	80081c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	2180      	movs	r1, #128	@ 0x80
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f7ff ff49 	bl	8008044 <SPI_WaitFlagStateUntilTimeout>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d02d      	beq.n	8008214 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081bc:	f043 0220 	orr.w	r2, r3, #32
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e026      	b.n	8008216 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2200      	movs	r2, #0
 80081d0:	2101      	movs	r1, #1
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff ff36 	bl	8008044 <SPI_WaitFlagStateUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01a      	beq.n	8008214 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e013      	b.n	8008216 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2101      	movs	r1, #1
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f7ff ff23 	bl	8008044 <SPI_WaitFlagStateUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d007      	beq.n	8008214 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008208:	f043 0220 	orr.w	r2, r3, #32
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e000      	b.n	8008216 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af02      	add	r7, sp, #8
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2201      	movs	r2, #1
 8008234:	2102      	movs	r1, #2
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff ff04 	bl	8008044 <SPI_WaitFlagStateUntilTimeout>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d007      	beq.n	8008252 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008246:	f043 0220 	orr.w	r2, r3, #32
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e032      	b.n	80082b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008252:	4b1b      	ldr	r3, [pc, #108]	@ (80082c0 <SPI_EndRxTxTransaction+0xa0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a1b      	ldr	r2, [pc, #108]	@ (80082c4 <SPI_EndRxTxTransaction+0xa4>)
 8008258:	fba2 2303 	umull	r2, r3, r2, r3
 800825c:	0d5b      	lsrs	r3, r3, #21
 800825e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008262:	fb02 f303 	mul.w	r3, r2, r3
 8008266:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008270:	d112      	bne.n	8008298 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2200      	movs	r2, #0
 800827a:	2180      	movs	r1, #128	@ 0x80
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f7ff fee1 	bl	8008044 <SPI_WaitFlagStateUntilTimeout>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d016      	beq.n	80082b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828c:	f043 0220 	orr.w	r2, r3, #32
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008294:	2303      	movs	r3, #3
 8008296:	e00f      	b.n	80082b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00a      	beq.n	80082b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ae:	2b80      	cmp	r3, #128	@ 0x80
 80082b0:	d0f2      	beq.n	8008298 <SPI_EndRxTxTransaction+0x78>
 80082b2:	e000      	b.n	80082b6 <SPI_EndRxTxTransaction+0x96>
        break;
 80082b4:	bf00      	nop
  }

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000010 	.word	0x20000010
 80082c4:	165e9f81 	.word	0x165e9f81

080082c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e041      	b.n	800835e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fd f9c0 	bl	8005674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f000 fd7a 	bl	8008e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e041      	b.n	80083fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f839 	bl	8008404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	3304      	adds	r3, #4
 80083a2:	4619      	mov	r1, r3
 80083a4:	4610      	mov	r0, r2
 80083a6:	f000 fd2b 	bl	8008e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d109      	bne.n	800843c <HAL_TIM_PWM_Start+0x24>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	bf14      	ite	ne
 8008434:	2301      	movne	r3, #1
 8008436:	2300      	moveq	r3, #0
 8008438:	b2db      	uxtb	r3, r3
 800843a:	e022      	b.n	8008482 <HAL_TIM_PWM_Start+0x6a>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	2b04      	cmp	r3, #4
 8008440:	d109      	bne.n	8008456 <HAL_TIM_PWM_Start+0x3e>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b01      	cmp	r3, #1
 800844c:	bf14      	ite	ne
 800844e:	2301      	movne	r3, #1
 8008450:	2300      	moveq	r3, #0
 8008452:	b2db      	uxtb	r3, r3
 8008454:	e015      	b.n	8008482 <HAL_TIM_PWM_Start+0x6a>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d109      	bne.n	8008470 <HAL_TIM_PWM_Start+0x58>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	bf14      	ite	ne
 8008468:	2301      	movne	r3, #1
 800846a:	2300      	moveq	r3, #0
 800846c:	b2db      	uxtb	r3, r3
 800846e:	e008      	b.n	8008482 <HAL_TIM_PWM_Start+0x6a>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b01      	cmp	r3, #1
 800847a:	bf14      	ite	ne
 800847c:	2301      	movne	r3, #1
 800847e:	2300      	moveq	r3, #0
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e068      	b.n	800855c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d104      	bne.n	800849a <HAL_TIM_PWM_Start+0x82>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2202      	movs	r2, #2
 8008494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008498:	e013      	b.n	80084c2 <HAL_TIM_PWM_Start+0xaa>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d104      	bne.n	80084aa <HAL_TIM_PWM_Start+0x92>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084a8:	e00b      	b.n	80084c2 <HAL_TIM_PWM_Start+0xaa>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b08      	cmp	r3, #8
 80084ae:	d104      	bne.n	80084ba <HAL_TIM_PWM_Start+0xa2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084b8:	e003      	b.n	80084c2 <HAL_TIM_PWM_Start+0xaa>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2202      	movs	r2, #2
 80084be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2201      	movs	r2, #1
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 ff44 	bl	8009358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a23      	ldr	r2, [pc, #140]	@ (8008564 <HAL_TIM_PWM_Start+0x14c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d107      	bne.n	80084ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008564 <HAL_TIM_PWM_Start+0x14c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d018      	beq.n	8008526 <HAL_TIM_PWM_Start+0x10e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084fc:	d013      	beq.n	8008526 <HAL_TIM_PWM_Start+0x10e>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a19      	ldr	r2, [pc, #100]	@ (8008568 <HAL_TIM_PWM_Start+0x150>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <HAL_TIM_PWM_Start+0x10e>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a17      	ldr	r2, [pc, #92]	@ (800856c <HAL_TIM_PWM_Start+0x154>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <HAL_TIM_PWM_Start+0x10e>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a16      	ldr	r2, [pc, #88]	@ (8008570 <HAL_TIM_PWM_Start+0x158>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <HAL_TIM_PWM_Start+0x10e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a14      	ldr	r2, [pc, #80]	@ (8008574 <HAL_TIM_PWM_Start+0x15c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d111      	bne.n	800854a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f003 0307 	and.w	r3, r3, #7
 8008530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b06      	cmp	r3, #6
 8008536:	d010      	beq.n	800855a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008548:	e007      	b.n	800855a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f042 0201 	orr.w	r2, r2, #1
 8008558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	40010000 	.word	0x40010000
 8008568:	40000400 	.word	0x40000400
 800856c:	40000800 	.word	0x40000800
 8008570:	40000c00 	.word	0x40000c00
 8008574:	40014000 	.word	0x40014000

08008578 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2200      	movs	r2, #0
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fee4 	bl	8009358 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a29      	ldr	r2, [pc, #164]	@ (800863c <HAL_TIM_PWM_Stop+0xc4>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d117      	bne.n	80085ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6a1a      	ldr	r2, [r3, #32]
 80085a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10f      	bne.n	80085ca <HAL_TIM_PWM_Stop+0x52>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6a1a      	ldr	r2, [r3, #32]
 80085b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80085b4:	4013      	ands	r3, r2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d107      	bne.n	80085ca <HAL_TIM_PWM_Stop+0x52>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80085c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6a1a      	ldr	r2, [r3, #32]
 80085d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80085d4:	4013      	ands	r3, r2
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10f      	bne.n	80085fa <HAL_TIM_PWM_Stop+0x82>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d107      	bne.n	80085fa <HAL_TIM_PWM_Stop+0x82>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0201 	bic.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <HAL_TIM_PWM_Stop+0x92>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008608:	e013      	b.n	8008632 <HAL_TIM_PWM_Stop+0xba>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b04      	cmp	r3, #4
 800860e:	d104      	bne.n	800861a <HAL_TIM_PWM_Stop+0xa2>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008618:	e00b      	b.n	8008632 <HAL_TIM_PWM_Stop+0xba>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	2b08      	cmp	r3, #8
 800861e:	d104      	bne.n	800862a <HAL_TIM_PWM_Stop+0xb2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008628:	e003      	b.n	8008632 <HAL_TIM_PWM_Stop+0xba>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40010000 	.word	0x40010000

08008640 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d101      	bne.n	8008654 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e097      	b.n	8008784 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d106      	bne.n	800866e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7fd f841 	bl	80056f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	6812      	ldr	r2, [r2, #0]
 8008680:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008684:	f023 0307 	bic.w	r3, r3, #7
 8008688:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	4619      	mov	r1, r3
 8008694:	4610      	mov	r0, r2
 8008696:	f000 fbb3 	bl	8008e00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	4313      	orrs	r3, r2
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80086e0:	f023 030c 	bic.w	r3, r3, #12
 80086e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68da      	ldr	r2, [r3, #12]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	4313      	orrs	r3, r2
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	4313      	orrs	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	011a      	lsls	r2, r3, #4
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	031b      	lsls	r3, r3, #12
 8008710:	4313      	orrs	r3, r2
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800871e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008726:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	4313      	orrs	r3, r2
 8008734:	68fa      	ldr	r2, [r7, #12]
 8008736:	4313      	orrs	r3, r2
 8008738:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3718      	adds	r7, #24
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800879c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80087a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80087ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80087b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d110      	bne.n	80087de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d102      	bne.n	80087c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d001      	beq.n	80087cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e069      	b.n	80088a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087dc:	e031      	b.n	8008842 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d110      	bne.n	8008806 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d102      	bne.n	80087f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80087ea:	7b3b      	ldrb	r3, [r7, #12]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d001      	beq.n	80087f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e055      	b.n	80088a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008804:	e01d      	b.n	8008842 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008806:	7bfb      	ldrb	r3, [r7, #15]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d108      	bne.n	800881e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d105      	bne.n	800881e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008812:	7b7b      	ldrb	r3, [r7, #13]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d102      	bne.n	800881e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008818:	7b3b      	ldrb	r3, [r7, #12]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d001      	beq.n	8008822 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e03e      	b.n	80088a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2202      	movs	r2, #2
 8008826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2202      	movs	r2, #2
 8008836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2202      	movs	r2, #2
 800883e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <HAL_TIM_Encoder_Start+0xc4>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b04      	cmp	r3, #4
 800884c:	d008      	beq.n	8008860 <HAL_TIM_Encoder_Start+0xd4>
 800884e:	e00f      	b.n	8008870 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2201      	movs	r2, #1
 8008856:	2100      	movs	r1, #0
 8008858:	4618      	mov	r0, r3
 800885a:	f000 fd7d 	bl	8009358 <TIM_CCxChannelCmd>
      break;
 800885e:	e016      	b.n	800888e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2201      	movs	r2, #1
 8008866:	2104      	movs	r1, #4
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fd75 	bl	8009358 <TIM_CCxChannelCmd>
      break;
 800886e:	e00e      	b.n	800888e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2201      	movs	r2, #1
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fd6d 	bl	8009358 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2201      	movs	r2, #1
 8008884:	2104      	movs	r1, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fd66 	bl	8009358 <TIM_CCxChannelCmd>
      break;
 800888c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f042 0201 	orr.w	r2, r2, #1
 800889c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d020      	beq.n	800890c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d01b      	beq.n	800890c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f06f 0202 	mvn.w	r2, #2
 80088dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fa65 	bl	8008dc2 <HAL_TIM_IC_CaptureCallback>
 80088f8:	e005      	b.n	8008906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fa57 	bl	8008dae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fa68 	bl	8008dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d020      	beq.n	8008958 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01b      	beq.n	8008958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f06f 0204 	mvn.w	r2, #4
 8008928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa3f 	bl	8008dc2 <HAL_TIM_IC_CaptureCallback>
 8008944:	e005      	b.n	8008952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa31 	bl	8008dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fa42 	bl	8008dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f003 0308 	and.w	r3, r3, #8
 800895e:	2b00      	cmp	r3, #0
 8008960:	d020      	beq.n	80089a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01b      	beq.n	80089a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0208 	mvn.w	r2, #8
 8008974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2204      	movs	r2, #4
 800897a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa19 	bl	8008dc2 <HAL_TIM_IC_CaptureCallback>
 8008990:	e005      	b.n	800899e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa0b 	bl	8008dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa1c 	bl	8008dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d020      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01b      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f06f 0210 	mvn.w	r2, #16
 80089c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2208      	movs	r2, #8
 80089c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f9f3 	bl	8008dc2 <HAL_TIM_IC_CaptureCallback>
 80089dc:	e005      	b.n	80089ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f9e5 	bl	8008dae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f9f6 	bl	8008dd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00c      	beq.n	8008a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d007      	beq.n	8008a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0201 	mvn.w	r2, #1
 8008a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9c3 	bl	8008d9a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00c      	beq.n	8008a38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d007      	beq.n	8008a38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fd80 	bl	8009538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00c      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d007      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f9c7 	bl	8008dea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00c      	beq.n	8008a80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d007      	beq.n	8008a80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f06f 0220 	mvn.w	r2, #32
 8008a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fd52 	bl	8009524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d101      	bne.n	8008aa6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e0ae      	b.n	8008c04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b0c      	cmp	r3, #12
 8008ab2:	f200 809f 	bhi.w	8008bf4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8008abc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abc:	08008af1 	.word	0x08008af1
 8008ac0:	08008bf5 	.word	0x08008bf5
 8008ac4:	08008bf5 	.word	0x08008bf5
 8008ac8:	08008bf5 	.word	0x08008bf5
 8008acc:	08008b31 	.word	0x08008b31
 8008ad0:	08008bf5 	.word	0x08008bf5
 8008ad4:	08008bf5 	.word	0x08008bf5
 8008ad8:	08008bf5 	.word	0x08008bf5
 8008adc:	08008b73 	.word	0x08008b73
 8008ae0:	08008bf5 	.word	0x08008bf5
 8008ae4:	08008bf5 	.word	0x08008bf5
 8008ae8:	08008bf5 	.word	0x08008bf5
 8008aec:	08008bb3 	.word	0x08008bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 fa08 	bl	8008f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f042 0208 	orr.w	r2, r2, #8
 8008b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699a      	ldr	r2, [r3, #24]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f022 0204 	bic.w	r2, r2, #4
 8008b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6999      	ldr	r1, [r3, #24]
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	691a      	ldr	r2, [r3, #16]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	619a      	str	r2, [r3, #24]
      break;
 8008b2e:	e064      	b.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fa4e 	bl	8008fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699a      	ldr	r2, [r3, #24]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6999      	ldr	r1, [r3, #24]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	021a      	lsls	r2, r3, #8
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	619a      	str	r2, [r3, #24]
      break;
 8008b70:	e043      	b.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68b9      	ldr	r1, [r7, #8]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 fa99 	bl	80090b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	69da      	ldr	r2, [r3, #28]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0208 	orr.w	r2, r2, #8
 8008b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69da      	ldr	r2, [r3, #28]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0204 	bic.w	r2, r2, #4
 8008b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69d9      	ldr	r1, [r3, #28]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	430a      	orrs	r2, r1
 8008bae:	61da      	str	r2, [r3, #28]
      break;
 8008bb0:	e023      	b.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	68b9      	ldr	r1, [r7, #8]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fae3 	bl	8009184 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69da      	ldr	r2, [r3, #28]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	69da      	ldr	r2, [r3, #28]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69d9      	ldr	r1, [r3, #28]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	021a      	lsls	r2, r3, #8
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	61da      	str	r2, [r3, #28]
      break;
 8008bf2:	e002      	b.n	8008bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c16:	2300      	movs	r3, #0
 8008c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_TIM_ConfigClockSource+0x1c>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e0b4      	b.n	8008d92 <HAL_TIM_ConfigClockSource+0x186>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008c46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c60:	d03e      	beq.n	8008ce0 <HAL_TIM_ConfigClockSource+0xd4>
 8008c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c66:	f200 8087 	bhi.w	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c6e:	f000 8086 	beq.w	8008d7e <HAL_TIM_ConfigClockSource+0x172>
 8008c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c76:	d87f      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008c78:	2b70      	cmp	r3, #112	@ 0x70
 8008c7a:	d01a      	beq.n	8008cb2 <HAL_TIM_ConfigClockSource+0xa6>
 8008c7c:	2b70      	cmp	r3, #112	@ 0x70
 8008c7e:	d87b      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008c80:	2b60      	cmp	r3, #96	@ 0x60
 8008c82:	d050      	beq.n	8008d26 <HAL_TIM_ConfigClockSource+0x11a>
 8008c84:	2b60      	cmp	r3, #96	@ 0x60
 8008c86:	d877      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008c88:	2b50      	cmp	r3, #80	@ 0x50
 8008c8a:	d03c      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0xfa>
 8008c8c:	2b50      	cmp	r3, #80	@ 0x50
 8008c8e:	d873      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008c90:	2b40      	cmp	r3, #64	@ 0x40
 8008c92:	d058      	beq.n	8008d46 <HAL_TIM_ConfigClockSource+0x13a>
 8008c94:	2b40      	cmp	r3, #64	@ 0x40
 8008c96:	d86f      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008c98:	2b30      	cmp	r3, #48	@ 0x30
 8008c9a:	d064      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x15a>
 8008c9c:	2b30      	cmp	r3, #48	@ 0x30
 8008c9e:	d86b      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d060      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x15a>
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	d867      	bhi.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d05c      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x15a>
 8008cac:	2b10      	cmp	r3, #16
 8008cae:	d05a      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0x15a>
 8008cb0:	e062      	b.n	8008d78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cc2:	f000 fb29 	bl	8009318 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008cd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	609a      	str	r2, [r3, #8]
      break;
 8008cde:	e04f      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cf0:	f000 fb12 	bl	8009318 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689a      	ldr	r2, [r3, #8]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d02:	609a      	str	r2, [r3, #8]
      break;
 8008d04:	e03c      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d12:	461a      	mov	r2, r3
 8008d14:	f000 fa86 	bl	8009224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2150      	movs	r1, #80	@ 0x50
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 fadf 	bl	80092e2 <TIM_ITRx_SetConfig>
      break;
 8008d24:	e02c      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d32:	461a      	mov	r2, r3
 8008d34:	f000 faa5 	bl	8009282 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2160      	movs	r1, #96	@ 0x60
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 facf 	bl	80092e2 <TIM_ITRx_SetConfig>
      break;
 8008d44:	e01c      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d52:	461a      	mov	r2, r3
 8008d54:	f000 fa66 	bl	8009224 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2140      	movs	r1, #64	@ 0x40
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 fabf 	bl	80092e2 <TIM_ITRx_SetConfig>
      break;
 8008d64:	e00c      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	4610      	mov	r0, r2
 8008d72:	f000 fab6 	bl	80092e2 <TIM_ITRx_SetConfig>
      break;
 8008d76:	e003      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7c:	e000      	b.n	8008d80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008da2:	bf00      	nop
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b083      	sub	sp, #12
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a37      	ldr	r2, [pc, #220]	@ (8008ef0 <TIM_Base_SetConfig+0xf0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00f      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e1e:	d00b      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a34      	ldr	r2, [pc, #208]	@ (8008ef4 <TIM_Base_SetConfig+0xf4>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d007      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a33      	ldr	r2, [pc, #204]	@ (8008ef8 <TIM_Base_SetConfig+0xf8>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_Base_SetConfig+0x38>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a32      	ldr	r2, [pc, #200]	@ (8008efc <TIM_Base_SetConfig+0xfc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d108      	bne.n	8008e4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a28      	ldr	r2, [pc, #160]	@ (8008ef0 <TIM_Base_SetConfig+0xf0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01b      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e58:	d017      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a25      	ldr	r2, [pc, #148]	@ (8008ef4 <TIM_Base_SetConfig+0xf4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a24      	ldr	r2, [pc, #144]	@ (8008ef8 <TIM_Base_SetConfig+0xf8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00f      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a23      	ldr	r2, [pc, #140]	@ (8008efc <TIM_Base_SetConfig+0xfc>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a22      	ldr	r2, [pc, #136]	@ (8008f00 <TIM_Base_SetConfig+0x100>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a21      	ldr	r2, [pc, #132]	@ (8008f04 <TIM_Base_SetConfig+0x104>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_Base_SetConfig+0x8a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a20      	ldr	r2, [pc, #128]	@ (8008f08 <TIM_Base_SetConfig+0x108>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d108      	bne.n	8008e9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8008ef0 <TIM_Base_SetConfig+0xf0>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d103      	bne.n	8008eca <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f043 0204 	orr.w	r2, r3, #4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	601a      	str	r2, [r3, #0]
}
 8008ee2:	bf00      	nop
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40000400 	.word	0x40000400
 8008ef8:	40000800 	.word	0x40000800
 8008efc:	40000c00 	.word	0x40000c00
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800

08008f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	f023 0201 	bic.w	r2, r3, #1
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0303 	bic.w	r3, r3, #3
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	f023 0302 	bic.w	r3, r3, #2
 8008f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a1c      	ldr	r2, [pc, #112]	@ (8008fd4 <TIM_OC1_SetConfig+0xc8>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d10c      	bne.n	8008f82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f023 0308 	bic.w	r3, r3, #8
 8008f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	4313      	orrs	r3, r2
 8008f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f023 0304 	bic.w	r3, r3, #4
 8008f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a13      	ldr	r2, [pc, #76]	@ (8008fd4 <TIM_OC1_SetConfig+0xc8>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d111      	bne.n	8008fae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	621a      	str	r2, [r3, #32]
}
 8008fc8:	bf00      	nop
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	40010000 	.word	0x40010000

08008fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b087      	sub	sp, #28
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	f023 0210 	bic.w	r2, r3, #16
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800900e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f023 0320 	bic.w	r3, r3, #32
 8009022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	011b      	lsls	r3, r3, #4
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a1e      	ldr	r2, [pc, #120]	@ (80090ac <TIM_OC2_SetConfig+0xd4>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d10d      	bne.n	8009054 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800903e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009052:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a15      	ldr	r2, [pc, #84]	@ (80090ac <TIM_OC2_SetConfig+0xd4>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d113      	bne.n	8009084 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800906a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	621a      	str	r2, [r3, #32]
}
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40010000 	.word	0x40010000

080090b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a1b      	ldr	r3, [r3, #32]
 80090c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	689b      	ldr	r3, [r3, #8]
 80090fe:	021b      	lsls	r3, r3, #8
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	4313      	orrs	r3, r2
 8009104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a1d      	ldr	r2, [pc, #116]	@ (8009180 <TIM_OC3_SetConfig+0xd0>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d10d      	bne.n	800912a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	021b      	lsls	r3, r3, #8
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	4313      	orrs	r3, r2
 8009120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a14      	ldr	r2, [pc, #80]	@ (8009180 <TIM_OC3_SetConfig+0xd0>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d113      	bne.n	800915a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	693a      	ldr	r2, [r7, #16]
 800914a:	4313      	orrs	r3, r2
 800914c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	011b      	lsls	r3, r3, #4
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	4313      	orrs	r3, r2
 8009158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	621a      	str	r2, [r3, #32]
}
 8009174:	bf00      	nop
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	40010000 	.word	0x40010000

08009184 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	021b      	lsls	r3, r3, #8
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80091ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	031b      	lsls	r3, r3, #12
 80091d6:	693a      	ldr	r2, [r7, #16]
 80091d8:	4313      	orrs	r3, r2
 80091da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a10      	ldr	r2, [pc, #64]	@ (8009220 <TIM_OC4_SetConfig+0x9c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d109      	bne.n	80091f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	019b      	lsls	r3, r3, #6
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	621a      	str	r2, [r3, #32]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	40010000 	.word	0x40010000

08009224 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009224:	b480      	push	{r7}
 8009226:	b087      	sub	sp, #28
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	f023 0201 	bic.w	r2, r3, #1
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800924e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	011b      	lsls	r3, r3, #4
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4313      	orrs	r3, r2
 8009258:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f023 030a 	bic.w	r3, r3, #10
 8009260:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4313      	orrs	r3, r2
 8009268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	693a      	ldr	r2, [r7, #16]
 800926e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	697a      	ldr	r2, [r7, #20]
 8009274:	621a      	str	r2, [r3, #32]
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009282:	b480      	push	{r7}
 8009284:	b087      	sub	sp, #28
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6a1b      	ldr	r3, [r3, #32]
 8009292:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	f023 0210 	bic.w	r2, r3, #16
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	031b      	lsls	r3, r3, #12
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	621a      	str	r2, [r3, #32]
}
 80092d6:	bf00      	nop
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4313      	orrs	r3, r2
 8009300:	f043 0307 	orr.w	r3, r3, #7
 8009304:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	609a      	str	r2, [r3, #8]
}
 800930c:	bf00      	nop
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
 8009324:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009332:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	021a      	lsls	r2, r3, #8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	431a      	orrs	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	4313      	orrs	r3, r2
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	609a      	str	r2, [r3, #8]
}
 800934c:	bf00      	nop
 800934e:	371c      	adds	r7, #28
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009358:	b480      	push	{r7}
 800935a:	b087      	sub	sp, #28
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	f003 031f 	and.w	r3, r3, #31
 800936a:	2201      	movs	r2, #1
 800936c:	fa02 f303 	lsl.w	r3, r2, r3
 8009370:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a1a      	ldr	r2, [r3, #32]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	43db      	mvns	r3, r3
 800937a:	401a      	ands	r2, r3
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1a      	ldr	r2, [r3, #32]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	6879      	ldr	r1, [r7, #4]
 800938c:	fa01 f303 	lsl.w	r3, r1, r3
 8009390:	431a      	orrs	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	621a      	str	r2, [r3, #32]
}
 8009396:	bf00      	nop
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
	...

080093a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e050      	b.n	800945e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1c      	ldr	r2, [pc, #112]	@ (800946c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d018      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009408:	d013      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d00e      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a16      	ldr	r2, [pc, #88]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d009      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a15      	ldr	r2, [pc, #84]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d004      	beq.n	8009432 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a13      	ldr	r2, [pc, #76]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d10c      	bne.n	800944c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4313      	orrs	r3, r2
 8009442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	40010000 	.word	0x40010000
 8009470:	40000400 	.word	0x40000400
 8009474:	40000800 	.word	0x40000800
 8009478:	40000c00 	.word	0x40000c00
 800947c:	40014000 	.word	0x40014000

08009480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009494:	2b01      	cmp	r3, #1
 8009496:	d101      	bne.n	800949c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009498:	2302      	movs	r3, #2
 800949a:	e03d      	b.n	8009518 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2201      	movs	r2, #1
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4313      	orrs	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3714      	adds	r7, #20
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e042      	b.n	80095e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fc f9d6 	bl	8005924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2224      	movs	r2, #36	@ 0x24
 800957c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800958e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fd7f 	bl	800a094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	691a      	ldr	r2, [r3, #16]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08a      	sub	sp, #40	@ 0x28
 80095f0:	af02      	add	r7, sp, #8
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b20      	cmp	r3, #32
 800960a:	d175      	bne.n	80096f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <HAL_UART_Transmit+0x2c>
 8009612:	88fb      	ldrh	r3, [r7, #6]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e06e      	b.n	80096fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2221      	movs	r2, #33	@ 0x21
 8009626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800962a:	f7fc fc75 	bl	8005f18 <HAL_GetTick>
 800962e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	88fa      	ldrh	r2, [r7, #6]
 8009634:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	88fa      	ldrh	r2, [r7, #6]
 800963a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009644:	d108      	bne.n	8009658 <HAL_UART_Transmit+0x6c>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d104      	bne.n	8009658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	61bb      	str	r3, [r7, #24]
 8009656:	e003      	b.n	8009660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800965c:	2300      	movs	r3, #0
 800965e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009660:	e02e      	b.n	80096c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2200      	movs	r2, #0
 800966a:	2180      	movs	r1, #128	@ 0x80
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f000 fb1d 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 8009672:	4603      	mov	r3, r0
 8009674:	2b00      	cmp	r3, #0
 8009676:	d005      	beq.n	8009684 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e03a      	b.n	80096fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10b      	bne.n	80096a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	3302      	adds	r3, #2
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	e007      	b.n	80096b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	3301      	adds	r3, #1
 80096b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	3b01      	subs	r3, #1
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1cb      	bne.n	8009662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	9300      	str	r3, [sp, #0]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	2140      	movs	r1, #64	@ 0x40
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 fae9 	bl	8009cac <UART_WaitOnFlagUntilTimeout>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2220      	movs	r2, #32
 80096e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80096e8:	2303      	movs	r3, #3
 80096ea:	e006      	b.n	80096fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	e000      	b.n	80096fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80096f8:	2302      	movs	r3, #2
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3720      	adds	r7, #32
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b0ba      	sub	sp, #232	@ 0xe8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800972a:	2300      	movs	r3, #0
 800972c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009730:	2300      	movs	r3, #0
 8009732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10f      	bne.n	800976a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800974a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d009      	beq.n	800976a <HAL_UART_IRQHandler+0x66>
 8009756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fbd7 	bl	8009f16 <UART_Receive_IT>
      return;
 8009768:	e273      	b.n	8009c52 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800976a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 80de 	beq.w	8009930 <HAL_UART_IRQHandler+0x22c>
 8009774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009784:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80d1 	beq.w	8009930 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800978e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00b      	beq.n	80097b2 <HAL_UART_IRQHandler+0xae>
 800979a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800979e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097aa:	f043 0201 	orr.w	r2, r3, #1
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00b      	beq.n	80097d6 <HAL_UART_IRQHandler+0xd2>
 80097be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ce:	f043 0202 	orr.w	r2, r3, #2
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00b      	beq.n	80097fa <HAL_UART_IRQHandler+0xf6>
 80097e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d005      	beq.n	80097fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097f2:	f043 0204 	orr.w	r2, r3, #4
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097fe:	f003 0308 	and.w	r3, r3, #8
 8009802:	2b00      	cmp	r3, #0
 8009804:	d011      	beq.n	800982a <HAL_UART_IRQHandler+0x126>
 8009806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d005      	beq.n	800982a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009822:	f043 0208 	orr.w	r2, r3, #8
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 820a 	beq.w	8009c48 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d008      	beq.n	8009852 <HAL_UART_IRQHandler+0x14e>
 8009840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fb62 	bl	8009f16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800985c:	2b40      	cmp	r3, #64	@ 0x40
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	2b00      	cmp	r3, #0
 8009874:	d103      	bne.n	800987e <HAL_UART_IRQHandler+0x17a>
 8009876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d04f      	beq.n	800991e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fa6d 	bl	8009d5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988e:	2b40      	cmp	r3, #64	@ 0x40
 8009890:	d141      	bne.n	8009916 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3314      	adds	r3, #20
 80098ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098ce:	e841 2300 	strex	r3, r2, [r1]
 80098d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d9      	bne.n	8009892 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d013      	beq.n	800990e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ea:	4a8a      	ldr	r2, [pc, #552]	@ (8009b14 <HAL_UART_IRQHandler+0x410>)
 80098ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7fd f8b3 	bl	8006a5e <HAL_DMA_Abort_IT>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d016      	beq.n	800992c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009908:	4610      	mov	r0, r2
 800990a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990c:	e00e      	b.n	800992c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f9b6 	bl	8009c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009914:	e00a      	b.n	800992c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f9b2 	bl	8009c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991c:	e006      	b.n	800992c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 f9ae 	bl	8009c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800992a:	e18d      	b.n	8009c48 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800992c:	bf00      	nop
    return;
 800992e:	e18b      	b.n	8009c48 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009934:	2b01      	cmp	r3, #1
 8009936:	f040 8167 	bne.w	8009c08 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800993a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800993e:	f003 0310 	and.w	r3, r3, #16
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8160 	beq.w	8009c08 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8159 	beq.w	8009c08 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009956:	2300      	movs	r3, #0
 8009958:	60bb      	str	r3, [r7, #8]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	60bb      	str	r3, [r7, #8]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	60bb      	str	r3, [r7, #8]
 800996a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009976:	2b40      	cmp	r3, #64	@ 0x40
 8009978:	f040 80ce 	bne.w	8009b18 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009988:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80a9 	beq.w	8009ae4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800999a:	429a      	cmp	r2, r3
 800999c:	f080 80a2 	bcs.w	8009ae4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ac:	69db      	ldr	r3, [r3, #28]
 80099ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099b2:	f000 8088 	beq.w	8009ac6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	330c      	adds	r3, #12
 80099bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80099e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80099e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80099ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099f2:	e841 2300 	strex	r3, r2, [r1]
 80099f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80099fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1d9      	bne.n	80099b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3314      	adds	r3, #20
 8009a08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a14:	f023 0301 	bic.w	r3, r3, #1
 8009a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3314      	adds	r3, #20
 8009a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a32:	e841 2300 	strex	r3, r2, [r1]
 8009a36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1e1      	bne.n	8009a02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3314      	adds	r3, #20
 8009a44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3314      	adds	r3, #20
 8009a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a6a:	e841 2300 	strex	r3, r2, [r1]
 8009a6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1e3      	bne.n	8009a3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2220      	movs	r2, #32
 8009a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2200      	movs	r2, #0
 8009a82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	330c      	adds	r3, #12
 8009a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a96:	f023 0310 	bic.w	r3, r3, #16
 8009a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	330c      	adds	r3, #12
 8009aa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009aa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009aaa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e3      	bne.n	8009a84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fc ff5c 	bl	800697e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2202      	movs	r2, #2
 8009aca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f8d9 	bl	8009c94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009ae2:	e0b3      	b.n	8009c4c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aec:	429a      	cmp	r2, r3
 8009aee:	f040 80ad 	bne.w	8009c4c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009af6:	69db      	ldr	r3, [r3, #28]
 8009af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009afc:	f040 80a6 	bne.w	8009c4c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f8c1 	bl	8009c94 <HAL_UARTEx_RxEventCallback>
      return;
 8009b12:	e09b      	b.n	8009c4c <HAL_UART_IRQHandler+0x548>
 8009b14:	08009e25 	.word	0x08009e25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 808e 	beq.w	8009c50 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 8089 	beq.w	8009c50 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	330c      	adds	r3, #12
 8009b44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009b62:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e3      	bne.n	8009b3e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3314      	adds	r3, #20
 8009b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	623b      	str	r3, [r7, #32]
   return(result);
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3314      	adds	r3, #20
 8009b96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e3      	bne.n	8009b76 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	330c      	adds	r3, #12
 8009bc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	e853 3f00 	ldrex	r3, [r3]
 8009bca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f023 0310 	bic.w	r3, r3, #16
 8009bd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	330c      	adds	r3, #12
 8009bdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009be0:	61fa      	str	r2, [r7, #28]
 8009be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be4:	69b9      	ldr	r1, [r7, #24]
 8009be6:	69fa      	ldr	r2, [r7, #28]
 8009be8:	e841 2300 	strex	r3, r2, [r1]
 8009bec:	617b      	str	r3, [r7, #20]
   return(result);
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1e3      	bne.n	8009bbc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009bfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f847 	bl	8009c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c06:	e023      	b.n	8009c50 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <HAL_UART_IRQHandler+0x524>
 8009c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f910 	bl	8009e46 <UART_Transmit_IT>
    return;
 8009c26:	e014      	b.n	8009c52 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00e      	beq.n	8009c52 <HAL_UART_IRQHandler+0x54e>
 8009c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d008      	beq.n	8009c52 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f950 	bl	8009ee6 <UART_EndTransmit_IT>
    return;
 8009c46:	e004      	b.n	8009c52 <HAL_UART_IRQHandler+0x54e>
    return;
 8009c48:	bf00      	nop
 8009c4a:	e002      	b.n	8009c52 <HAL_UART_IRQHandler+0x54e>
      return;
 8009c4c:	bf00      	nop
 8009c4e:	e000      	b.n	8009c52 <HAL_UART_IRQHandler+0x54e>
      return;
 8009c50:	bf00      	nop
  }
}
 8009c52:	37e8      	adds	r7, #232	@ 0xe8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009c74:	bf00      	nop
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	4613      	mov	r3, r2
 8009cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cbc:	e03b      	b.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc4:	d037      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cc6:	f7fc f927 	bl	8005f18 <HAL_GetTick>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d302      	bcc.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e03a      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d023      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b80      	cmp	r3, #128	@ 0x80
 8009cf2:	d020      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b40      	cmp	r3, #64	@ 0x40
 8009cf8:	d01d      	beq.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d116      	bne.n	8009d36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009d08:	2300      	movs	r3, #0
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 f81d 	bl	8009d5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2208      	movs	r2, #8
 8009d28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e00f      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	4013      	ands	r3, r2
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	bf0c      	ite	eq
 8009d46:	2301      	moveq	r3, #1
 8009d48:	2300      	movne	r3, #0
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d0b4      	beq.n	8009cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b095      	sub	sp, #84	@ 0x54
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	330c      	adds	r3, #12
 8009d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d70:	e853 3f00 	ldrex	r3, [r3]
 8009d74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	330c      	adds	r3, #12
 8009d84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d86:	643a      	str	r2, [r7, #64]	@ 0x40
 8009d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d8e:	e841 2300 	strex	r3, r2, [r1]
 8009d92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1e5      	bne.n	8009d66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3314      	adds	r3, #20
 8009da0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	f023 0301 	bic.w	r3, r3, #1
 8009db0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	3314      	adds	r3, #20
 8009db8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e5      	bne.n	8009d9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d119      	bne.n	8009e0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	330c      	adds	r3, #12
 8009ddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f023 0310 	bic.w	r3, r3, #16
 8009dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	330c      	adds	r3, #12
 8009df4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009df6:	61ba      	str	r2, [r7, #24]
 8009df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6979      	ldr	r1, [r7, #20]
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	613b      	str	r3, [r7, #16]
   return(result);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e5      	bne.n	8009dd6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2220      	movs	r2, #32
 8009e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009e18:	bf00      	nop
 8009e1a:	3754      	adds	r7, #84	@ 0x54
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f7ff ff21 	bl	8009c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e3e:	bf00      	nop
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b085      	sub	sp, #20
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b21      	cmp	r3, #33	@ 0x21
 8009e58:	d13e      	bne.n	8009ed8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e62:	d114      	bne.n	8009e8e <UART_Transmit_IT+0x48>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d110      	bne.n	8009e8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	1c9a      	adds	r2, r3, #2
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	621a      	str	r2, [r3, #32]
 8009e8c:	e008      	b.n	8009ea0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	6211      	str	r1, [r2, #32]
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	4619      	mov	r1, r3
 8009eae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10f      	bne.n	8009ed4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ec2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ed2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	e000      	b.n	8009eda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ed8:	2302      	movs	r3, #2
  }
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68da      	ldr	r2, [r3, #12]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009efc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7ff fea6 	bl	8009c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b08c      	sub	sp, #48	@ 0x30
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009f22:	2300      	movs	r3, #0
 8009f24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b22      	cmp	r3, #34	@ 0x22
 8009f30:	f040 80aa 	bne.w	800a088 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f3c:	d115      	bne.n	8009f6a <UART_Receive_IT+0x54>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d111      	bne.n	8009f6a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f62:	1c9a      	adds	r2, r3, #2
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f68:	e024      	b.n	8009fb4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f78:	d007      	beq.n	8009f8a <UART_Receive_IT+0x74>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <UART_Receive_IT+0x82>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d106      	bne.n	8009f98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e008      	b.n	8009faa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d15d      	bne.n	800a084 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f022 0220 	bic.w	r2, r2, #32
 8009fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	695a      	ldr	r2, [r3, #20]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0201 	bic.w	r2, r2, #1
 8009ff6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d135      	bne.n	800a07a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	330c      	adds	r3, #12
 800a01a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	e853 3f00 	ldrex	r3, [r3]
 800a022:	613b      	str	r3, [r7, #16]
   return(result);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f023 0310 	bic.w	r3, r3, #16
 800a02a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	330c      	adds	r3, #12
 800a032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a034:	623a      	str	r2, [r7, #32]
 800a036:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a038:	69f9      	ldr	r1, [r7, #28]
 800a03a:	6a3a      	ldr	r2, [r7, #32]
 800a03c:	e841 2300 	strex	r3, r2, [r1]
 800a040:	61bb      	str	r3, [r7, #24]
   return(result);
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e5      	bne.n	800a014 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0310 	and.w	r3, r3, #16
 800a052:	2b10      	cmp	r3, #16
 800a054:	d10a      	bne.n	800a06c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a056:	2300      	movs	r3, #0
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff fe0e 	bl	8009c94 <HAL_UARTEx_RxEventCallback>
 800a078:	e002      	b.n	800a080 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7ff fdf6 	bl	8009c6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a080:	2300      	movs	r3, #0
 800a082:	e002      	b.n	800a08a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	e000      	b.n	800a08a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a088:	2302      	movs	r3, #2
  }
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3730      	adds	r7, #48	@ 0x30
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a098:	b0c0      	sub	sp, #256	@ 0x100
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b0:	68d9      	ldr	r1, [r3, #12]
 800a0b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	ea40 0301 	orr.w	r3, r0, r1
 800a0bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0c2:	689a      	ldr	r2, [r3, #8]
 800a0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	431a      	orrs	r2, r3
 800a0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	431a      	orrs	r2, r3
 800a0d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a0e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a0ec:	f021 010c 	bic.w	r1, r1, #12
 800a0f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a0fa:	430b      	orrs	r3, r1
 800a0fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a10e:	6999      	ldr	r1, [r3, #24]
 800a110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	ea40 0301 	orr.w	r3, r0, r1
 800a11a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a11c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b8f      	ldr	r3, [pc, #572]	@ (800a360 <UART_SetConfig+0x2cc>)
 800a124:	429a      	cmp	r2, r3
 800a126:	d005      	beq.n	800a134 <UART_SetConfig+0xa0>
 800a128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b8d      	ldr	r3, [pc, #564]	@ (800a364 <UART_SetConfig+0x2d0>)
 800a130:	429a      	cmp	r2, r3
 800a132:	d104      	bne.n	800a13e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a134:	f7fd fae2 	bl	80076fc <HAL_RCC_GetPCLK2Freq>
 800a138:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a13c:	e003      	b.n	800a146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a13e:	f7fd fac9 	bl	80076d4 <HAL_RCC_GetPCLK1Freq>
 800a142:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a150:	f040 810c 	bne.w	800a36c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a158:	2200      	movs	r2, #0
 800a15a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a15e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a166:	4622      	mov	r2, r4
 800a168:	462b      	mov	r3, r5
 800a16a:	1891      	adds	r1, r2, r2
 800a16c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a16e:	415b      	adcs	r3, r3
 800a170:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a176:	4621      	mov	r1, r4
 800a178:	eb12 0801 	adds.w	r8, r2, r1
 800a17c:	4629      	mov	r1, r5
 800a17e:	eb43 0901 	adc.w	r9, r3, r1
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a18e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a196:	4690      	mov	r8, r2
 800a198:	4699      	mov	r9, r3
 800a19a:	4623      	mov	r3, r4
 800a19c:	eb18 0303 	adds.w	r3, r8, r3
 800a1a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a1a4:	462b      	mov	r3, r5
 800a1a6:	eb49 0303 	adc.w	r3, r9, r3
 800a1aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a1be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	18db      	adds	r3, r3, r3
 800a1c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	eb42 0303 	adc.w	r3, r2, r3
 800a1ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a1d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a1d8:	f7f6 fcee 	bl	8000bb8 <__aeabi_uldivmod>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4b61      	ldr	r3, [pc, #388]	@ (800a368 <UART_SetConfig+0x2d4>)
 800a1e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	011c      	lsls	r4, r3, #4
 800a1ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a1f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a1fc:	4642      	mov	r2, r8
 800a1fe:	464b      	mov	r3, r9
 800a200:	1891      	adds	r1, r2, r2
 800a202:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a204:	415b      	adcs	r3, r3
 800a206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a20c:	4641      	mov	r1, r8
 800a20e:	eb12 0a01 	adds.w	sl, r2, r1
 800a212:	4649      	mov	r1, r9
 800a214:	eb43 0b01 	adc.w	fp, r3, r1
 800a218:	f04f 0200 	mov.w	r2, #0
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a22c:	4692      	mov	sl, r2
 800a22e:	469b      	mov	fp, r3
 800a230:	4643      	mov	r3, r8
 800a232:	eb1a 0303 	adds.w	r3, sl, r3
 800a236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a23a:	464b      	mov	r3, r9
 800a23c:	eb4b 0303 	adc.w	r3, fp, r3
 800a240:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a250:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a258:	460b      	mov	r3, r1
 800a25a:	18db      	adds	r3, r3, r3
 800a25c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a25e:	4613      	mov	r3, r2
 800a260:	eb42 0303 	adc.w	r3, r2, r3
 800a264:	647b      	str	r3, [r7, #68]	@ 0x44
 800a266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a26a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a26e:	f7f6 fca3 	bl	8000bb8 <__aeabi_uldivmod>
 800a272:	4602      	mov	r2, r0
 800a274:	460b      	mov	r3, r1
 800a276:	4611      	mov	r1, r2
 800a278:	4b3b      	ldr	r3, [pc, #236]	@ (800a368 <UART_SetConfig+0x2d4>)
 800a27a:	fba3 2301 	umull	r2, r3, r3, r1
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	2264      	movs	r2, #100	@ 0x64
 800a282:	fb02 f303 	mul.w	r3, r2, r3
 800a286:	1acb      	subs	r3, r1, r3
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a28e:	4b36      	ldr	r3, [pc, #216]	@ (800a368 <UART_SetConfig+0x2d4>)
 800a290:	fba3 2302 	umull	r2, r3, r3, r2
 800a294:	095b      	lsrs	r3, r3, #5
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a29c:	441c      	add	r4, r3
 800a29e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a2a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a2ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a2b0:	4642      	mov	r2, r8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	1891      	adds	r1, r2, r2
 800a2b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a2b8:	415b      	adcs	r3, r3
 800a2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a2c0:	4641      	mov	r1, r8
 800a2c2:	1851      	adds	r1, r2, r1
 800a2c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	414b      	adcs	r3, r1
 800a2ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	f04f 0300 	mov.w	r3, #0
 800a2d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a2d8:	4659      	mov	r1, fp
 800a2da:	00cb      	lsls	r3, r1, #3
 800a2dc:	4651      	mov	r1, sl
 800a2de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2e2:	4651      	mov	r1, sl
 800a2e4:	00ca      	lsls	r2, r1, #3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	4642      	mov	r2, r8
 800a2ee:	189b      	adds	r3, r3, r2
 800a2f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2f4:	464b      	mov	r3, r9
 800a2f6:	460a      	mov	r2, r1
 800a2f8:	eb42 0303 	adc.w	r3, r2, r3
 800a2fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a30c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a314:	460b      	mov	r3, r1
 800a316:	18db      	adds	r3, r3, r3
 800a318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a31a:	4613      	mov	r3, r2
 800a31c:	eb42 0303 	adc.w	r3, r2, r3
 800a320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a32a:	f7f6 fc45 	bl	8000bb8 <__aeabi_uldivmod>
 800a32e:	4602      	mov	r2, r0
 800a330:	460b      	mov	r3, r1
 800a332:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <UART_SetConfig+0x2d4>)
 800a334:	fba3 1302 	umull	r1, r3, r3, r2
 800a338:	095b      	lsrs	r3, r3, #5
 800a33a:	2164      	movs	r1, #100	@ 0x64
 800a33c:	fb01 f303 	mul.w	r3, r1, r3
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	3332      	adds	r3, #50	@ 0x32
 800a346:	4a08      	ldr	r2, [pc, #32]	@ (800a368 <UART_SetConfig+0x2d4>)
 800a348:	fba2 2303 	umull	r2, r3, r2, r3
 800a34c:	095b      	lsrs	r3, r3, #5
 800a34e:	f003 0207 	and.w	r2, r3, #7
 800a352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4422      	add	r2, r4
 800a35a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a35c:	e106      	b.n	800a56c <UART_SetConfig+0x4d8>
 800a35e:	bf00      	nop
 800a360:	40011000 	.word	0x40011000
 800a364:	40011400 	.word	0x40011400
 800a368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a36c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a370:	2200      	movs	r2, #0
 800a372:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a376:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a37a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a37e:	4642      	mov	r2, r8
 800a380:	464b      	mov	r3, r9
 800a382:	1891      	adds	r1, r2, r2
 800a384:	6239      	str	r1, [r7, #32]
 800a386:	415b      	adcs	r3, r3
 800a388:	627b      	str	r3, [r7, #36]	@ 0x24
 800a38a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a38e:	4641      	mov	r1, r8
 800a390:	1854      	adds	r4, r2, r1
 800a392:	4649      	mov	r1, r9
 800a394:	eb43 0501 	adc.w	r5, r3, r1
 800a398:	f04f 0200 	mov.w	r2, #0
 800a39c:	f04f 0300 	mov.w	r3, #0
 800a3a0:	00eb      	lsls	r3, r5, #3
 800a3a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a3a6:	00e2      	lsls	r2, r4, #3
 800a3a8:	4614      	mov	r4, r2
 800a3aa:	461d      	mov	r5, r3
 800a3ac:	4643      	mov	r3, r8
 800a3ae:	18e3      	adds	r3, r4, r3
 800a3b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	eb45 0303 	adc.w	r3, r5, r3
 800a3ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a3ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3ce:	f04f 0200 	mov.w	r2, #0
 800a3d2:	f04f 0300 	mov.w	r3, #0
 800a3d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a3da:	4629      	mov	r1, r5
 800a3dc:	008b      	lsls	r3, r1, #2
 800a3de:	4621      	mov	r1, r4
 800a3e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	008a      	lsls	r2, r1, #2
 800a3e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a3ec:	f7f6 fbe4 	bl	8000bb8 <__aeabi_uldivmod>
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	4b60      	ldr	r3, [pc, #384]	@ (800a578 <UART_SetConfig+0x4e4>)
 800a3f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a3fa:	095b      	lsrs	r3, r3, #5
 800a3fc:	011c      	lsls	r4, r3, #4
 800a3fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a402:	2200      	movs	r2, #0
 800a404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a40c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a410:	4642      	mov	r2, r8
 800a412:	464b      	mov	r3, r9
 800a414:	1891      	adds	r1, r2, r2
 800a416:	61b9      	str	r1, [r7, #24]
 800a418:	415b      	adcs	r3, r3
 800a41a:	61fb      	str	r3, [r7, #28]
 800a41c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a420:	4641      	mov	r1, r8
 800a422:	1851      	adds	r1, r2, r1
 800a424:	6139      	str	r1, [r7, #16]
 800a426:	4649      	mov	r1, r9
 800a428:	414b      	adcs	r3, r1
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	f04f 0200 	mov.w	r2, #0
 800a430:	f04f 0300 	mov.w	r3, #0
 800a434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a438:	4659      	mov	r1, fp
 800a43a:	00cb      	lsls	r3, r1, #3
 800a43c:	4651      	mov	r1, sl
 800a43e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a442:	4651      	mov	r1, sl
 800a444:	00ca      	lsls	r2, r1, #3
 800a446:	4610      	mov	r0, r2
 800a448:	4619      	mov	r1, r3
 800a44a:	4603      	mov	r3, r0
 800a44c:	4642      	mov	r2, r8
 800a44e:	189b      	adds	r3, r3, r2
 800a450:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a454:	464b      	mov	r3, r9
 800a456:	460a      	mov	r2, r1
 800a458:	eb42 0303 	adc.w	r3, r2, r3
 800a45c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a46a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a478:	4649      	mov	r1, r9
 800a47a:	008b      	lsls	r3, r1, #2
 800a47c:	4641      	mov	r1, r8
 800a47e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a482:	4641      	mov	r1, r8
 800a484:	008a      	lsls	r2, r1, #2
 800a486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a48a:	f7f6 fb95 	bl	8000bb8 <__aeabi_uldivmod>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4611      	mov	r1, r2
 800a494:	4b38      	ldr	r3, [pc, #224]	@ (800a578 <UART_SetConfig+0x4e4>)
 800a496:	fba3 2301 	umull	r2, r3, r3, r1
 800a49a:	095b      	lsrs	r3, r3, #5
 800a49c:	2264      	movs	r2, #100	@ 0x64
 800a49e:	fb02 f303 	mul.w	r3, r2, r3
 800a4a2:	1acb      	subs	r3, r1, r3
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	3332      	adds	r3, #50	@ 0x32
 800a4a8:	4a33      	ldr	r2, [pc, #204]	@ (800a578 <UART_SetConfig+0x4e4>)
 800a4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ae:	095b      	lsrs	r3, r3, #5
 800a4b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4b4:	441c      	add	r4, r3
 800a4b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4be:	677a      	str	r2, [r7, #116]	@ 0x74
 800a4c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a4c4:	4642      	mov	r2, r8
 800a4c6:	464b      	mov	r3, r9
 800a4c8:	1891      	adds	r1, r2, r2
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	415b      	adcs	r3, r3
 800a4ce:	60fb      	str	r3, [r7, #12]
 800a4d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4d4:	4641      	mov	r1, r8
 800a4d6:	1851      	adds	r1, r2, r1
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	4649      	mov	r1, r9
 800a4dc:	414b      	adcs	r3, r1
 800a4de:	607b      	str	r3, [r7, #4]
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	f04f 0300 	mov.w	r3, #0
 800a4e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	00cb      	lsls	r3, r1, #3
 800a4f0:	4651      	mov	r1, sl
 800a4f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4f6:	4651      	mov	r1, sl
 800a4f8:	00ca      	lsls	r2, r1, #3
 800a4fa:	4610      	mov	r0, r2
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	4642      	mov	r2, r8
 800a502:	189b      	adds	r3, r3, r2
 800a504:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a506:	464b      	mov	r3, r9
 800a508:	460a      	mov	r2, r1
 800a50a:	eb42 0303 	adc.w	r3, r2, r3
 800a50e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	663b      	str	r3, [r7, #96]	@ 0x60
 800a51a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a528:	4649      	mov	r1, r9
 800a52a:	008b      	lsls	r3, r1, #2
 800a52c:	4641      	mov	r1, r8
 800a52e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a532:	4641      	mov	r1, r8
 800a534:	008a      	lsls	r2, r1, #2
 800a536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a53a:	f7f6 fb3d 	bl	8000bb8 <__aeabi_uldivmod>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <UART_SetConfig+0x4e4>)
 800a544:	fba3 1302 	umull	r1, r3, r3, r2
 800a548:	095b      	lsrs	r3, r3, #5
 800a54a:	2164      	movs	r1, #100	@ 0x64
 800a54c:	fb01 f303 	mul.w	r3, r1, r3
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	3332      	adds	r3, #50	@ 0x32
 800a556:	4a08      	ldr	r2, [pc, #32]	@ (800a578 <UART_SetConfig+0x4e4>)
 800a558:	fba2 2303 	umull	r2, r3, r2, r3
 800a55c:	095b      	lsrs	r3, r3, #5
 800a55e:	f003 020f 	and.w	r2, r3, #15
 800a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4422      	add	r2, r4
 800a56a:	609a      	str	r2, [r3, #8]
}
 800a56c:	bf00      	nop
 800a56e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a572:	46bd      	mov	sp, r7
 800a574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a578:	51eb851f 	.word	0x51eb851f

0800a57c <__cvt>:
 800a57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a580:	ec57 6b10 	vmov	r6, r7, d0
 800a584:	2f00      	cmp	r7, #0
 800a586:	460c      	mov	r4, r1
 800a588:	4619      	mov	r1, r3
 800a58a:	463b      	mov	r3, r7
 800a58c:	bfbb      	ittet	lt
 800a58e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a592:	461f      	movlt	r7, r3
 800a594:	2300      	movge	r3, #0
 800a596:	232d      	movlt	r3, #45	@ 0x2d
 800a598:	700b      	strb	r3, [r1, #0]
 800a59a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a59c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a5a0:	4691      	mov	r9, r2
 800a5a2:	f023 0820 	bic.w	r8, r3, #32
 800a5a6:	bfbc      	itt	lt
 800a5a8:	4632      	movlt	r2, r6
 800a5aa:	4616      	movlt	r6, r2
 800a5ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a5b0:	d005      	beq.n	800a5be <__cvt+0x42>
 800a5b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a5b6:	d100      	bne.n	800a5ba <__cvt+0x3e>
 800a5b8:	3401      	adds	r4, #1
 800a5ba:	2102      	movs	r1, #2
 800a5bc:	e000      	b.n	800a5c0 <__cvt+0x44>
 800a5be:	2103      	movs	r1, #3
 800a5c0:	ab03      	add	r3, sp, #12
 800a5c2:	9301      	str	r3, [sp, #4]
 800a5c4:	ab02      	add	r3, sp, #8
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	ec47 6b10 	vmov	d0, r6, r7
 800a5cc:	4653      	mov	r3, sl
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	f000 fe76 	bl	800b2c0 <_dtoa_r>
 800a5d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a5d8:	4605      	mov	r5, r0
 800a5da:	d119      	bne.n	800a610 <__cvt+0x94>
 800a5dc:	f019 0f01 	tst.w	r9, #1
 800a5e0:	d00e      	beq.n	800a600 <__cvt+0x84>
 800a5e2:	eb00 0904 	add.w	r9, r0, r4
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7f6 fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5f2:	b108      	cbz	r0, 800a5f8 <__cvt+0x7c>
 800a5f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5f8:	2230      	movs	r2, #48	@ 0x30
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	454b      	cmp	r3, r9
 800a5fe:	d31e      	bcc.n	800a63e <__cvt+0xc2>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a604:	1b5b      	subs	r3, r3, r5
 800a606:	4628      	mov	r0, r5
 800a608:	6013      	str	r3, [r2, #0]
 800a60a:	b004      	add	sp, #16
 800a60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a610:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a614:	eb00 0904 	add.w	r9, r0, r4
 800a618:	d1e5      	bne.n	800a5e6 <__cvt+0x6a>
 800a61a:	7803      	ldrb	r3, [r0, #0]
 800a61c:	2b30      	cmp	r3, #48	@ 0x30
 800a61e:	d10a      	bne.n	800a636 <__cvt+0xba>
 800a620:	2200      	movs	r2, #0
 800a622:	2300      	movs	r3, #0
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f6 fa56 	bl	8000ad8 <__aeabi_dcmpeq>
 800a62c:	b918      	cbnz	r0, 800a636 <__cvt+0xba>
 800a62e:	f1c4 0401 	rsb	r4, r4, #1
 800a632:	f8ca 4000 	str.w	r4, [sl]
 800a636:	f8da 3000 	ldr.w	r3, [sl]
 800a63a:	4499      	add	r9, r3
 800a63c:	e7d3      	b.n	800a5e6 <__cvt+0x6a>
 800a63e:	1c59      	adds	r1, r3, #1
 800a640:	9103      	str	r1, [sp, #12]
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e7d9      	b.n	800a5fa <__cvt+0x7e>

0800a646 <__exponent>:
 800a646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a648:	2900      	cmp	r1, #0
 800a64a:	bfba      	itte	lt
 800a64c:	4249      	neglt	r1, r1
 800a64e:	232d      	movlt	r3, #45	@ 0x2d
 800a650:	232b      	movge	r3, #43	@ 0x2b
 800a652:	2909      	cmp	r1, #9
 800a654:	7002      	strb	r2, [r0, #0]
 800a656:	7043      	strb	r3, [r0, #1]
 800a658:	dd29      	ble.n	800a6ae <__exponent+0x68>
 800a65a:	f10d 0307 	add.w	r3, sp, #7
 800a65e:	461d      	mov	r5, r3
 800a660:	270a      	movs	r7, #10
 800a662:	461a      	mov	r2, r3
 800a664:	fbb1 f6f7 	udiv	r6, r1, r7
 800a668:	fb07 1416 	mls	r4, r7, r6, r1
 800a66c:	3430      	adds	r4, #48	@ 0x30
 800a66e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a672:	460c      	mov	r4, r1
 800a674:	2c63      	cmp	r4, #99	@ 0x63
 800a676:	f103 33ff 	add.w	r3, r3, #4294967295
 800a67a:	4631      	mov	r1, r6
 800a67c:	dcf1      	bgt.n	800a662 <__exponent+0x1c>
 800a67e:	3130      	adds	r1, #48	@ 0x30
 800a680:	1e94      	subs	r4, r2, #2
 800a682:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a686:	1c41      	adds	r1, r0, #1
 800a688:	4623      	mov	r3, r4
 800a68a:	42ab      	cmp	r3, r5
 800a68c:	d30a      	bcc.n	800a6a4 <__exponent+0x5e>
 800a68e:	f10d 0309 	add.w	r3, sp, #9
 800a692:	1a9b      	subs	r3, r3, r2
 800a694:	42ac      	cmp	r4, r5
 800a696:	bf88      	it	hi
 800a698:	2300      	movhi	r3, #0
 800a69a:	3302      	adds	r3, #2
 800a69c:	4403      	add	r3, r0
 800a69e:	1a18      	subs	r0, r3, r0
 800a6a0:	b003      	add	sp, #12
 800a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a6a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a6ac:	e7ed      	b.n	800a68a <__exponent+0x44>
 800a6ae:	2330      	movs	r3, #48	@ 0x30
 800a6b0:	3130      	adds	r1, #48	@ 0x30
 800a6b2:	7083      	strb	r3, [r0, #2]
 800a6b4:	70c1      	strb	r1, [r0, #3]
 800a6b6:	1d03      	adds	r3, r0, #4
 800a6b8:	e7f1      	b.n	800a69e <__exponent+0x58>
	...

0800a6bc <_printf_float>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	b08d      	sub	sp, #52	@ 0x34
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	461f      	mov	r7, r3
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	f000 fcf5 	bl	800b0bc <_localeconv_r>
 800a6d2:	6803      	ldr	r3, [r0, #0]
 800a6d4:	9304      	str	r3, [sp, #16]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7f5 fdd2 	bl	8000280 <strlen>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e4:	9005      	str	r0, [sp, #20]
 800a6e6:	3307      	adds	r3, #7
 800a6e8:	f023 0307 	bic.w	r3, r3, #7
 800a6ec:	f103 0208 	add.w	r2, r3, #8
 800a6f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a6f4:	f8d4 b000 	ldr.w	fp, [r4]
 800a6f8:	f8c8 2000 	str.w	r2, [r8]
 800a6fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a700:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a704:	9307      	str	r3, [sp, #28]
 800a706:	f8cd 8018 	str.w	r8, [sp, #24]
 800a70a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a70e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a712:	4b9c      	ldr	r3, [pc, #624]	@ (800a984 <_printf_float+0x2c8>)
 800a714:	f04f 32ff 	mov.w	r2, #4294967295
 800a718:	f7f6 fa10 	bl	8000b3c <__aeabi_dcmpun>
 800a71c:	bb70      	cbnz	r0, 800a77c <_printf_float+0xc0>
 800a71e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a722:	4b98      	ldr	r3, [pc, #608]	@ (800a984 <_printf_float+0x2c8>)
 800a724:	f04f 32ff 	mov.w	r2, #4294967295
 800a728:	f7f6 f9ea 	bl	8000b00 <__aeabi_dcmple>
 800a72c:	bb30      	cbnz	r0, 800a77c <_printf_float+0xc0>
 800a72e:	2200      	movs	r2, #0
 800a730:	2300      	movs	r3, #0
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f6 f9d9 	bl	8000aec <__aeabi_dcmplt>
 800a73a:	b110      	cbz	r0, 800a742 <_printf_float+0x86>
 800a73c:	232d      	movs	r3, #45	@ 0x2d
 800a73e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a742:	4a91      	ldr	r2, [pc, #580]	@ (800a988 <_printf_float+0x2cc>)
 800a744:	4b91      	ldr	r3, [pc, #580]	@ (800a98c <_printf_float+0x2d0>)
 800a746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a74a:	bf8c      	ite	hi
 800a74c:	4690      	movhi	r8, r2
 800a74e:	4698      	movls	r8, r3
 800a750:	2303      	movs	r3, #3
 800a752:	6123      	str	r3, [r4, #16]
 800a754:	f02b 0304 	bic.w	r3, fp, #4
 800a758:	6023      	str	r3, [r4, #0]
 800a75a:	f04f 0900 	mov.w	r9, #0
 800a75e:	9700      	str	r7, [sp, #0]
 800a760:	4633      	mov	r3, r6
 800a762:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a764:	4621      	mov	r1, r4
 800a766:	4628      	mov	r0, r5
 800a768:	f000 f9d2 	bl	800ab10 <_printf_common>
 800a76c:	3001      	adds	r0, #1
 800a76e:	f040 808d 	bne.w	800a88c <_printf_float+0x1d0>
 800a772:	f04f 30ff 	mov.w	r0, #4294967295
 800a776:	b00d      	add	sp, #52	@ 0x34
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	4642      	mov	r2, r8
 800a77e:	464b      	mov	r3, r9
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	f7f6 f9da 	bl	8000b3c <__aeabi_dcmpun>
 800a788:	b140      	cbz	r0, 800a79c <_printf_float+0xe0>
 800a78a:	464b      	mov	r3, r9
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	bfbc      	itt	lt
 800a790:	232d      	movlt	r3, #45	@ 0x2d
 800a792:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a796:	4a7e      	ldr	r2, [pc, #504]	@ (800a990 <_printf_float+0x2d4>)
 800a798:	4b7e      	ldr	r3, [pc, #504]	@ (800a994 <_printf_float+0x2d8>)
 800a79a:	e7d4      	b.n	800a746 <_printf_float+0x8a>
 800a79c:	6863      	ldr	r3, [r4, #4]
 800a79e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a7a2:	9206      	str	r2, [sp, #24]
 800a7a4:	1c5a      	adds	r2, r3, #1
 800a7a6:	d13b      	bne.n	800a820 <_printf_float+0x164>
 800a7a8:	2306      	movs	r3, #6
 800a7aa:	6063      	str	r3, [r4, #4]
 800a7ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	9303      	str	r3, [sp, #12]
 800a7b6:	ab0a      	add	r3, sp, #40	@ 0x28
 800a7b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a7bc:	ab09      	add	r3, sp, #36	@ 0x24
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	6861      	ldr	r1, [r4, #4]
 800a7c2:	ec49 8b10 	vmov	d0, r8, r9
 800a7c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f7ff fed6 	bl	800a57c <__cvt>
 800a7d0:	9b06      	ldr	r3, [sp, #24]
 800a7d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7d4:	2b47      	cmp	r3, #71	@ 0x47
 800a7d6:	4680      	mov	r8, r0
 800a7d8:	d129      	bne.n	800a82e <_printf_float+0x172>
 800a7da:	1cc8      	adds	r0, r1, #3
 800a7dc:	db02      	blt.n	800a7e4 <_printf_float+0x128>
 800a7de:	6863      	ldr	r3, [r4, #4]
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	dd41      	ble.n	800a868 <_printf_float+0x1ac>
 800a7e4:	f1aa 0a02 	sub.w	sl, sl, #2
 800a7e8:	fa5f fa8a 	uxtb.w	sl, sl
 800a7ec:	3901      	subs	r1, #1
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a7f4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a7f6:	f7ff ff26 	bl	800a646 <__exponent>
 800a7fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7fc:	1813      	adds	r3, r2, r0
 800a7fe:	2a01      	cmp	r2, #1
 800a800:	4681      	mov	r9, r0
 800a802:	6123      	str	r3, [r4, #16]
 800a804:	dc02      	bgt.n	800a80c <_printf_float+0x150>
 800a806:	6822      	ldr	r2, [r4, #0]
 800a808:	07d2      	lsls	r2, r2, #31
 800a80a:	d501      	bpl.n	800a810 <_printf_float+0x154>
 800a80c:	3301      	adds	r3, #1
 800a80e:	6123      	str	r3, [r4, #16]
 800a810:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0a2      	beq.n	800a75e <_printf_float+0xa2>
 800a818:	232d      	movs	r3, #45	@ 0x2d
 800a81a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a81e:	e79e      	b.n	800a75e <_printf_float+0xa2>
 800a820:	9a06      	ldr	r2, [sp, #24]
 800a822:	2a47      	cmp	r2, #71	@ 0x47
 800a824:	d1c2      	bne.n	800a7ac <_printf_float+0xf0>
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1c0      	bne.n	800a7ac <_printf_float+0xf0>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e7bd      	b.n	800a7aa <_printf_float+0xee>
 800a82e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a832:	d9db      	bls.n	800a7ec <_printf_float+0x130>
 800a834:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a838:	d118      	bne.n	800a86c <_printf_float+0x1b0>
 800a83a:	2900      	cmp	r1, #0
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	dd0b      	ble.n	800a858 <_printf_float+0x19c>
 800a840:	6121      	str	r1, [r4, #16]
 800a842:	b913      	cbnz	r3, 800a84a <_printf_float+0x18e>
 800a844:	6822      	ldr	r2, [r4, #0]
 800a846:	07d0      	lsls	r0, r2, #31
 800a848:	d502      	bpl.n	800a850 <_printf_float+0x194>
 800a84a:	3301      	adds	r3, #1
 800a84c:	440b      	add	r3, r1
 800a84e:	6123      	str	r3, [r4, #16]
 800a850:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a852:	f04f 0900 	mov.w	r9, #0
 800a856:	e7db      	b.n	800a810 <_printf_float+0x154>
 800a858:	b913      	cbnz	r3, 800a860 <_printf_float+0x1a4>
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	07d2      	lsls	r2, r2, #31
 800a85e:	d501      	bpl.n	800a864 <_printf_float+0x1a8>
 800a860:	3302      	adds	r3, #2
 800a862:	e7f4      	b.n	800a84e <_printf_float+0x192>
 800a864:	2301      	movs	r3, #1
 800a866:	e7f2      	b.n	800a84e <_printf_float+0x192>
 800a868:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a86c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a86e:	4299      	cmp	r1, r3
 800a870:	db05      	blt.n	800a87e <_printf_float+0x1c2>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	6121      	str	r1, [r4, #16]
 800a876:	07d8      	lsls	r0, r3, #31
 800a878:	d5ea      	bpl.n	800a850 <_printf_float+0x194>
 800a87a:	1c4b      	adds	r3, r1, #1
 800a87c:	e7e7      	b.n	800a84e <_printf_float+0x192>
 800a87e:	2900      	cmp	r1, #0
 800a880:	bfd4      	ite	le
 800a882:	f1c1 0202 	rsble	r2, r1, #2
 800a886:	2201      	movgt	r2, #1
 800a888:	4413      	add	r3, r2
 800a88a:	e7e0      	b.n	800a84e <_printf_float+0x192>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	055a      	lsls	r2, r3, #21
 800a890:	d407      	bmi.n	800a8a2 <_printf_float+0x1e6>
 800a892:	6923      	ldr	r3, [r4, #16]
 800a894:	4642      	mov	r2, r8
 800a896:	4631      	mov	r1, r6
 800a898:	4628      	mov	r0, r5
 800a89a:	47b8      	blx	r7
 800a89c:	3001      	adds	r0, #1
 800a89e:	d12b      	bne.n	800a8f8 <_printf_float+0x23c>
 800a8a0:	e767      	b.n	800a772 <_printf_float+0xb6>
 800a8a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a8a6:	f240 80dd 	bls.w	800aa64 <_printf_float+0x3a8>
 800a8aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f7f6 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d033      	beq.n	800a922 <_printf_float+0x266>
 800a8ba:	4a37      	ldr	r2, [pc, #220]	@ (800a998 <_printf_float+0x2dc>)
 800a8bc:	2301      	movs	r3, #1
 800a8be:	4631      	mov	r1, r6
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	47b8      	blx	r7
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	f43f af54 	beq.w	800a772 <_printf_float+0xb6>
 800a8ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a8ce:	4543      	cmp	r3, r8
 800a8d0:	db02      	blt.n	800a8d8 <_printf_float+0x21c>
 800a8d2:	6823      	ldr	r3, [r4, #0]
 800a8d4:	07d8      	lsls	r0, r3, #31
 800a8d6:	d50f      	bpl.n	800a8f8 <_printf_float+0x23c>
 800a8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4628      	mov	r0, r5
 800a8e0:	47b8      	blx	r7
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	f43f af45 	beq.w	800a772 <_printf_float+0xb6>
 800a8e8:	f04f 0900 	mov.w	r9, #0
 800a8ec:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8f0:	f104 0a1a 	add.w	sl, r4, #26
 800a8f4:	45c8      	cmp	r8, r9
 800a8f6:	dc09      	bgt.n	800a90c <_printf_float+0x250>
 800a8f8:	6823      	ldr	r3, [r4, #0]
 800a8fa:	079b      	lsls	r3, r3, #30
 800a8fc:	f100 8103 	bmi.w	800ab06 <_printf_float+0x44a>
 800a900:	68e0      	ldr	r0, [r4, #12]
 800a902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a904:	4298      	cmp	r0, r3
 800a906:	bfb8      	it	lt
 800a908:	4618      	movlt	r0, r3
 800a90a:	e734      	b.n	800a776 <_printf_float+0xba>
 800a90c:	2301      	movs	r3, #1
 800a90e:	4652      	mov	r2, sl
 800a910:	4631      	mov	r1, r6
 800a912:	4628      	mov	r0, r5
 800a914:	47b8      	blx	r7
 800a916:	3001      	adds	r0, #1
 800a918:	f43f af2b 	beq.w	800a772 <_printf_float+0xb6>
 800a91c:	f109 0901 	add.w	r9, r9, #1
 800a920:	e7e8      	b.n	800a8f4 <_printf_float+0x238>
 800a922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	dc39      	bgt.n	800a99c <_printf_float+0x2e0>
 800a928:	4a1b      	ldr	r2, [pc, #108]	@ (800a998 <_printf_float+0x2dc>)
 800a92a:	2301      	movs	r3, #1
 800a92c:	4631      	mov	r1, r6
 800a92e:	4628      	mov	r0, r5
 800a930:	47b8      	blx	r7
 800a932:	3001      	adds	r0, #1
 800a934:	f43f af1d 	beq.w	800a772 <_printf_float+0xb6>
 800a938:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a93c:	ea59 0303 	orrs.w	r3, r9, r3
 800a940:	d102      	bne.n	800a948 <_printf_float+0x28c>
 800a942:	6823      	ldr	r3, [r4, #0]
 800a944:	07d9      	lsls	r1, r3, #31
 800a946:	d5d7      	bpl.n	800a8f8 <_printf_float+0x23c>
 800a948:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a94c:	4631      	mov	r1, r6
 800a94e:	4628      	mov	r0, r5
 800a950:	47b8      	blx	r7
 800a952:	3001      	adds	r0, #1
 800a954:	f43f af0d 	beq.w	800a772 <_printf_float+0xb6>
 800a958:	f04f 0a00 	mov.w	sl, #0
 800a95c:	f104 0b1a 	add.w	fp, r4, #26
 800a960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a962:	425b      	negs	r3, r3
 800a964:	4553      	cmp	r3, sl
 800a966:	dc01      	bgt.n	800a96c <_printf_float+0x2b0>
 800a968:	464b      	mov	r3, r9
 800a96a:	e793      	b.n	800a894 <_printf_float+0x1d8>
 800a96c:	2301      	movs	r3, #1
 800a96e:	465a      	mov	r2, fp
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f aefb 	beq.w	800a772 <_printf_float+0xb6>
 800a97c:	f10a 0a01 	add.w	sl, sl, #1
 800a980:	e7ee      	b.n	800a960 <_printf_float+0x2a4>
 800a982:	bf00      	nop
 800a984:	7fefffff 	.word	0x7fefffff
 800a988:	0800fd28 	.word	0x0800fd28
 800a98c:	0800fd24 	.word	0x0800fd24
 800a990:	0800fd30 	.word	0x0800fd30
 800a994:	0800fd2c 	.word	0x0800fd2c
 800a998:	0800fd34 	.word	0x0800fd34
 800a99c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a99e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a9a2:	4553      	cmp	r3, sl
 800a9a4:	bfa8      	it	ge
 800a9a6:	4653      	movge	r3, sl
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	4699      	mov	r9, r3
 800a9ac:	dc36      	bgt.n	800aa1c <_printf_float+0x360>
 800a9ae:	f04f 0b00 	mov.w	fp, #0
 800a9b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9b6:	f104 021a 	add.w	r2, r4, #26
 800a9ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9bc:	9306      	str	r3, [sp, #24]
 800a9be:	eba3 0309 	sub.w	r3, r3, r9
 800a9c2:	455b      	cmp	r3, fp
 800a9c4:	dc31      	bgt.n	800aa2a <_printf_float+0x36e>
 800a9c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9c8:	459a      	cmp	sl, r3
 800a9ca:	dc3a      	bgt.n	800aa42 <_printf_float+0x386>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	07da      	lsls	r2, r3, #31
 800a9d0:	d437      	bmi.n	800aa42 <_printf_float+0x386>
 800a9d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d4:	ebaa 0903 	sub.w	r9, sl, r3
 800a9d8:	9b06      	ldr	r3, [sp, #24]
 800a9da:	ebaa 0303 	sub.w	r3, sl, r3
 800a9de:	4599      	cmp	r9, r3
 800a9e0:	bfa8      	it	ge
 800a9e2:	4699      	movge	r9, r3
 800a9e4:	f1b9 0f00 	cmp.w	r9, #0
 800a9e8:	dc33      	bgt.n	800aa52 <_printf_float+0x396>
 800a9ea:	f04f 0800 	mov.w	r8, #0
 800a9ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9f2:	f104 0b1a 	add.w	fp, r4, #26
 800a9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f8:	ebaa 0303 	sub.w	r3, sl, r3
 800a9fc:	eba3 0309 	sub.w	r3, r3, r9
 800aa00:	4543      	cmp	r3, r8
 800aa02:	f77f af79 	ble.w	800a8f8 <_printf_float+0x23c>
 800aa06:	2301      	movs	r3, #1
 800aa08:	465a      	mov	r2, fp
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	47b8      	blx	r7
 800aa10:	3001      	adds	r0, #1
 800aa12:	f43f aeae 	beq.w	800a772 <_printf_float+0xb6>
 800aa16:	f108 0801 	add.w	r8, r8, #1
 800aa1a:	e7ec      	b.n	800a9f6 <_printf_float+0x33a>
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	4631      	mov	r1, r6
 800aa20:	4628      	mov	r0, r5
 800aa22:	47b8      	blx	r7
 800aa24:	3001      	adds	r0, #1
 800aa26:	d1c2      	bne.n	800a9ae <_printf_float+0x2f2>
 800aa28:	e6a3      	b.n	800a772 <_printf_float+0xb6>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4628      	mov	r0, r5
 800aa30:	9206      	str	r2, [sp, #24]
 800aa32:	47b8      	blx	r7
 800aa34:	3001      	adds	r0, #1
 800aa36:	f43f ae9c 	beq.w	800a772 <_printf_float+0xb6>
 800aa3a:	9a06      	ldr	r2, [sp, #24]
 800aa3c:	f10b 0b01 	add.w	fp, fp, #1
 800aa40:	e7bb      	b.n	800a9ba <_printf_float+0x2fe>
 800aa42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa46:	4631      	mov	r1, r6
 800aa48:	4628      	mov	r0, r5
 800aa4a:	47b8      	blx	r7
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d1c0      	bne.n	800a9d2 <_printf_float+0x316>
 800aa50:	e68f      	b.n	800a772 <_printf_float+0xb6>
 800aa52:	9a06      	ldr	r2, [sp, #24]
 800aa54:	464b      	mov	r3, r9
 800aa56:	4442      	add	r2, r8
 800aa58:	4631      	mov	r1, r6
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	47b8      	blx	r7
 800aa5e:	3001      	adds	r0, #1
 800aa60:	d1c3      	bne.n	800a9ea <_printf_float+0x32e>
 800aa62:	e686      	b.n	800a772 <_printf_float+0xb6>
 800aa64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa68:	f1ba 0f01 	cmp.w	sl, #1
 800aa6c:	dc01      	bgt.n	800aa72 <_printf_float+0x3b6>
 800aa6e:	07db      	lsls	r3, r3, #31
 800aa70:	d536      	bpl.n	800aae0 <_printf_float+0x424>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4642      	mov	r2, r8
 800aa76:	4631      	mov	r1, r6
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b8      	blx	r7
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	f43f ae78 	beq.w	800a772 <_printf_float+0xb6>
 800aa82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b8      	blx	r7
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f ae70 	beq.w	800a772 <_printf_float+0xb6>
 800aa92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa96:	2200      	movs	r2, #0
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa9e:	f7f6 f81b 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaa2:	b9c0      	cbnz	r0, 800aad6 <_printf_float+0x41a>
 800aaa4:	4653      	mov	r3, sl
 800aaa6:	f108 0201 	add.w	r2, r8, #1
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b8      	blx	r7
 800aab0:	3001      	adds	r0, #1
 800aab2:	d10c      	bne.n	800aace <_printf_float+0x412>
 800aab4:	e65d      	b.n	800a772 <_printf_float+0xb6>
 800aab6:	2301      	movs	r3, #1
 800aab8:	465a      	mov	r2, fp
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae56 	beq.w	800a772 <_printf_float+0xb6>
 800aac6:	f108 0801 	add.w	r8, r8, #1
 800aaca:	45d0      	cmp	r8, sl
 800aacc:	dbf3      	blt.n	800aab6 <_printf_float+0x3fa>
 800aace:	464b      	mov	r3, r9
 800aad0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aad4:	e6df      	b.n	800a896 <_printf_float+0x1da>
 800aad6:	f04f 0800 	mov.w	r8, #0
 800aada:	f104 0b1a 	add.w	fp, r4, #26
 800aade:	e7f4      	b.n	800aaca <_printf_float+0x40e>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4642      	mov	r2, r8
 800aae4:	e7e1      	b.n	800aaaa <_printf_float+0x3ee>
 800aae6:	2301      	movs	r3, #1
 800aae8:	464a      	mov	r2, r9
 800aaea:	4631      	mov	r1, r6
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b8      	blx	r7
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	f43f ae3e 	beq.w	800a772 <_printf_float+0xb6>
 800aaf6:	f108 0801 	add.w	r8, r8, #1
 800aafa:	68e3      	ldr	r3, [r4, #12]
 800aafc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aafe:	1a5b      	subs	r3, r3, r1
 800ab00:	4543      	cmp	r3, r8
 800ab02:	dcf0      	bgt.n	800aae6 <_printf_float+0x42a>
 800ab04:	e6fc      	b.n	800a900 <_printf_float+0x244>
 800ab06:	f04f 0800 	mov.w	r8, #0
 800ab0a:	f104 0919 	add.w	r9, r4, #25
 800ab0e:	e7f4      	b.n	800aafa <_printf_float+0x43e>

0800ab10 <_printf_common>:
 800ab10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab14:	4616      	mov	r6, r2
 800ab16:	4698      	mov	r8, r3
 800ab18:	688a      	ldr	r2, [r1, #8]
 800ab1a:	690b      	ldr	r3, [r1, #16]
 800ab1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab20:	4293      	cmp	r3, r2
 800ab22:	bfb8      	it	lt
 800ab24:	4613      	movlt	r3, r2
 800ab26:	6033      	str	r3, [r6, #0]
 800ab28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab2c:	4607      	mov	r7, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	b10a      	cbz	r2, 800ab36 <_printf_common+0x26>
 800ab32:	3301      	adds	r3, #1
 800ab34:	6033      	str	r3, [r6, #0]
 800ab36:	6823      	ldr	r3, [r4, #0]
 800ab38:	0699      	lsls	r1, r3, #26
 800ab3a:	bf42      	ittt	mi
 800ab3c:	6833      	ldrmi	r3, [r6, #0]
 800ab3e:	3302      	addmi	r3, #2
 800ab40:	6033      	strmi	r3, [r6, #0]
 800ab42:	6825      	ldr	r5, [r4, #0]
 800ab44:	f015 0506 	ands.w	r5, r5, #6
 800ab48:	d106      	bne.n	800ab58 <_printf_common+0x48>
 800ab4a:	f104 0a19 	add.w	sl, r4, #25
 800ab4e:	68e3      	ldr	r3, [r4, #12]
 800ab50:	6832      	ldr	r2, [r6, #0]
 800ab52:	1a9b      	subs	r3, r3, r2
 800ab54:	42ab      	cmp	r3, r5
 800ab56:	dc26      	bgt.n	800aba6 <_printf_common+0x96>
 800ab58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab5c:	6822      	ldr	r2, [r4, #0]
 800ab5e:	3b00      	subs	r3, #0
 800ab60:	bf18      	it	ne
 800ab62:	2301      	movne	r3, #1
 800ab64:	0692      	lsls	r2, r2, #26
 800ab66:	d42b      	bmi.n	800abc0 <_printf_common+0xb0>
 800ab68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab6c:	4641      	mov	r1, r8
 800ab6e:	4638      	mov	r0, r7
 800ab70:	47c8      	blx	r9
 800ab72:	3001      	adds	r0, #1
 800ab74:	d01e      	beq.n	800abb4 <_printf_common+0xa4>
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	6922      	ldr	r2, [r4, #16]
 800ab7a:	f003 0306 	and.w	r3, r3, #6
 800ab7e:	2b04      	cmp	r3, #4
 800ab80:	bf02      	ittt	eq
 800ab82:	68e5      	ldreq	r5, [r4, #12]
 800ab84:	6833      	ldreq	r3, [r6, #0]
 800ab86:	1aed      	subeq	r5, r5, r3
 800ab88:	68a3      	ldr	r3, [r4, #8]
 800ab8a:	bf0c      	ite	eq
 800ab8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab90:	2500      	movne	r5, #0
 800ab92:	4293      	cmp	r3, r2
 800ab94:	bfc4      	itt	gt
 800ab96:	1a9b      	subgt	r3, r3, r2
 800ab98:	18ed      	addgt	r5, r5, r3
 800ab9a:	2600      	movs	r6, #0
 800ab9c:	341a      	adds	r4, #26
 800ab9e:	42b5      	cmp	r5, r6
 800aba0:	d11a      	bne.n	800abd8 <_printf_common+0xc8>
 800aba2:	2000      	movs	r0, #0
 800aba4:	e008      	b.n	800abb8 <_printf_common+0xa8>
 800aba6:	2301      	movs	r3, #1
 800aba8:	4652      	mov	r2, sl
 800abaa:	4641      	mov	r1, r8
 800abac:	4638      	mov	r0, r7
 800abae:	47c8      	blx	r9
 800abb0:	3001      	adds	r0, #1
 800abb2:	d103      	bne.n	800abbc <_printf_common+0xac>
 800abb4:	f04f 30ff 	mov.w	r0, #4294967295
 800abb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbc:	3501      	adds	r5, #1
 800abbe:	e7c6      	b.n	800ab4e <_printf_common+0x3e>
 800abc0:	18e1      	adds	r1, r4, r3
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	2030      	movs	r0, #48	@ 0x30
 800abc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abca:	4422      	add	r2, r4
 800abcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abd4:	3302      	adds	r3, #2
 800abd6:	e7c7      	b.n	800ab68 <_printf_common+0x58>
 800abd8:	2301      	movs	r3, #1
 800abda:	4622      	mov	r2, r4
 800abdc:	4641      	mov	r1, r8
 800abde:	4638      	mov	r0, r7
 800abe0:	47c8      	blx	r9
 800abe2:	3001      	adds	r0, #1
 800abe4:	d0e6      	beq.n	800abb4 <_printf_common+0xa4>
 800abe6:	3601      	adds	r6, #1
 800abe8:	e7d9      	b.n	800ab9e <_printf_common+0x8e>
	...

0800abec <_printf_i>:
 800abec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf0:	7e0f      	ldrb	r7, [r1, #24]
 800abf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abf4:	2f78      	cmp	r7, #120	@ 0x78
 800abf6:	4691      	mov	r9, r2
 800abf8:	4680      	mov	r8, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	469a      	mov	sl, r3
 800abfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac02:	d807      	bhi.n	800ac14 <_printf_i+0x28>
 800ac04:	2f62      	cmp	r7, #98	@ 0x62
 800ac06:	d80a      	bhi.n	800ac1e <_printf_i+0x32>
 800ac08:	2f00      	cmp	r7, #0
 800ac0a:	f000 80d1 	beq.w	800adb0 <_printf_i+0x1c4>
 800ac0e:	2f58      	cmp	r7, #88	@ 0x58
 800ac10:	f000 80b8 	beq.w	800ad84 <_printf_i+0x198>
 800ac14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac1c:	e03a      	b.n	800ac94 <_printf_i+0xa8>
 800ac1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac22:	2b15      	cmp	r3, #21
 800ac24:	d8f6      	bhi.n	800ac14 <_printf_i+0x28>
 800ac26:	a101      	add	r1, pc, #4	@ (adr r1, 800ac2c <_printf_i+0x40>)
 800ac28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac2c:	0800ac85 	.word	0x0800ac85
 800ac30:	0800ac99 	.word	0x0800ac99
 800ac34:	0800ac15 	.word	0x0800ac15
 800ac38:	0800ac15 	.word	0x0800ac15
 800ac3c:	0800ac15 	.word	0x0800ac15
 800ac40:	0800ac15 	.word	0x0800ac15
 800ac44:	0800ac99 	.word	0x0800ac99
 800ac48:	0800ac15 	.word	0x0800ac15
 800ac4c:	0800ac15 	.word	0x0800ac15
 800ac50:	0800ac15 	.word	0x0800ac15
 800ac54:	0800ac15 	.word	0x0800ac15
 800ac58:	0800ad97 	.word	0x0800ad97
 800ac5c:	0800acc3 	.word	0x0800acc3
 800ac60:	0800ad51 	.word	0x0800ad51
 800ac64:	0800ac15 	.word	0x0800ac15
 800ac68:	0800ac15 	.word	0x0800ac15
 800ac6c:	0800adb9 	.word	0x0800adb9
 800ac70:	0800ac15 	.word	0x0800ac15
 800ac74:	0800acc3 	.word	0x0800acc3
 800ac78:	0800ac15 	.word	0x0800ac15
 800ac7c:	0800ac15 	.word	0x0800ac15
 800ac80:	0800ad59 	.word	0x0800ad59
 800ac84:	6833      	ldr	r3, [r6, #0]
 800ac86:	1d1a      	adds	r2, r3, #4
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6032      	str	r2, [r6, #0]
 800ac8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac94:	2301      	movs	r3, #1
 800ac96:	e09c      	b.n	800add2 <_printf_i+0x1e6>
 800ac98:	6833      	ldr	r3, [r6, #0]
 800ac9a:	6820      	ldr	r0, [r4, #0]
 800ac9c:	1d19      	adds	r1, r3, #4
 800ac9e:	6031      	str	r1, [r6, #0]
 800aca0:	0606      	lsls	r6, r0, #24
 800aca2:	d501      	bpl.n	800aca8 <_printf_i+0xbc>
 800aca4:	681d      	ldr	r5, [r3, #0]
 800aca6:	e003      	b.n	800acb0 <_printf_i+0xc4>
 800aca8:	0645      	lsls	r5, r0, #25
 800acaa:	d5fb      	bpl.n	800aca4 <_printf_i+0xb8>
 800acac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acb0:	2d00      	cmp	r5, #0
 800acb2:	da03      	bge.n	800acbc <_printf_i+0xd0>
 800acb4:	232d      	movs	r3, #45	@ 0x2d
 800acb6:	426d      	negs	r5, r5
 800acb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acbc:	4858      	ldr	r0, [pc, #352]	@ (800ae20 <_printf_i+0x234>)
 800acbe:	230a      	movs	r3, #10
 800acc0:	e011      	b.n	800ace6 <_printf_i+0xfa>
 800acc2:	6821      	ldr	r1, [r4, #0]
 800acc4:	6833      	ldr	r3, [r6, #0]
 800acc6:	0608      	lsls	r0, r1, #24
 800acc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800accc:	d402      	bmi.n	800acd4 <_printf_i+0xe8>
 800acce:	0649      	lsls	r1, r1, #25
 800acd0:	bf48      	it	mi
 800acd2:	b2ad      	uxthmi	r5, r5
 800acd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800acd6:	4852      	ldr	r0, [pc, #328]	@ (800ae20 <_printf_i+0x234>)
 800acd8:	6033      	str	r3, [r6, #0]
 800acda:	bf14      	ite	ne
 800acdc:	230a      	movne	r3, #10
 800acde:	2308      	moveq	r3, #8
 800ace0:	2100      	movs	r1, #0
 800ace2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ace6:	6866      	ldr	r6, [r4, #4]
 800ace8:	60a6      	str	r6, [r4, #8]
 800acea:	2e00      	cmp	r6, #0
 800acec:	db05      	blt.n	800acfa <_printf_i+0x10e>
 800acee:	6821      	ldr	r1, [r4, #0]
 800acf0:	432e      	orrs	r6, r5
 800acf2:	f021 0104 	bic.w	r1, r1, #4
 800acf6:	6021      	str	r1, [r4, #0]
 800acf8:	d04b      	beq.n	800ad92 <_printf_i+0x1a6>
 800acfa:	4616      	mov	r6, r2
 800acfc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad00:	fb03 5711 	mls	r7, r3, r1, r5
 800ad04:	5dc7      	ldrb	r7, [r0, r7]
 800ad06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad0a:	462f      	mov	r7, r5
 800ad0c:	42bb      	cmp	r3, r7
 800ad0e:	460d      	mov	r5, r1
 800ad10:	d9f4      	bls.n	800acfc <_printf_i+0x110>
 800ad12:	2b08      	cmp	r3, #8
 800ad14:	d10b      	bne.n	800ad2e <_printf_i+0x142>
 800ad16:	6823      	ldr	r3, [r4, #0]
 800ad18:	07df      	lsls	r7, r3, #31
 800ad1a:	d508      	bpl.n	800ad2e <_printf_i+0x142>
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	6861      	ldr	r1, [r4, #4]
 800ad20:	4299      	cmp	r1, r3
 800ad22:	bfde      	ittt	le
 800ad24:	2330      	movle	r3, #48	@ 0x30
 800ad26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad2e:	1b92      	subs	r2, r2, r6
 800ad30:	6122      	str	r2, [r4, #16]
 800ad32:	f8cd a000 	str.w	sl, [sp]
 800ad36:	464b      	mov	r3, r9
 800ad38:	aa03      	add	r2, sp, #12
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4640      	mov	r0, r8
 800ad3e:	f7ff fee7 	bl	800ab10 <_printf_common>
 800ad42:	3001      	adds	r0, #1
 800ad44:	d14a      	bne.n	800addc <_printf_i+0x1f0>
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	b004      	add	sp, #16
 800ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	f043 0320 	orr.w	r3, r3, #32
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	4832      	ldr	r0, [pc, #200]	@ (800ae24 <_printf_i+0x238>)
 800ad5a:	2778      	movs	r7, #120	@ 0x78
 800ad5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	6831      	ldr	r1, [r6, #0]
 800ad64:	061f      	lsls	r7, r3, #24
 800ad66:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad6a:	d402      	bmi.n	800ad72 <_printf_i+0x186>
 800ad6c:	065f      	lsls	r7, r3, #25
 800ad6e:	bf48      	it	mi
 800ad70:	b2ad      	uxthmi	r5, r5
 800ad72:	6031      	str	r1, [r6, #0]
 800ad74:	07d9      	lsls	r1, r3, #31
 800ad76:	bf44      	itt	mi
 800ad78:	f043 0320 	orrmi.w	r3, r3, #32
 800ad7c:	6023      	strmi	r3, [r4, #0]
 800ad7e:	b11d      	cbz	r5, 800ad88 <_printf_i+0x19c>
 800ad80:	2310      	movs	r3, #16
 800ad82:	e7ad      	b.n	800ace0 <_printf_i+0xf4>
 800ad84:	4826      	ldr	r0, [pc, #152]	@ (800ae20 <_printf_i+0x234>)
 800ad86:	e7e9      	b.n	800ad5c <_printf_i+0x170>
 800ad88:	6823      	ldr	r3, [r4, #0]
 800ad8a:	f023 0320 	bic.w	r3, r3, #32
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	e7f6      	b.n	800ad80 <_printf_i+0x194>
 800ad92:	4616      	mov	r6, r2
 800ad94:	e7bd      	b.n	800ad12 <_printf_i+0x126>
 800ad96:	6833      	ldr	r3, [r6, #0]
 800ad98:	6825      	ldr	r5, [r4, #0]
 800ad9a:	6961      	ldr	r1, [r4, #20]
 800ad9c:	1d18      	adds	r0, r3, #4
 800ad9e:	6030      	str	r0, [r6, #0]
 800ada0:	062e      	lsls	r6, r5, #24
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	d501      	bpl.n	800adaa <_printf_i+0x1be>
 800ada6:	6019      	str	r1, [r3, #0]
 800ada8:	e002      	b.n	800adb0 <_printf_i+0x1c4>
 800adaa:	0668      	lsls	r0, r5, #25
 800adac:	d5fb      	bpl.n	800ada6 <_printf_i+0x1ba>
 800adae:	8019      	strh	r1, [r3, #0]
 800adb0:	2300      	movs	r3, #0
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	4616      	mov	r6, r2
 800adb6:	e7bc      	b.n	800ad32 <_printf_i+0x146>
 800adb8:	6833      	ldr	r3, [r6, #0]
 800adba:	1d1a      	adds	r2, r3, #4
 800adbc:	6032      	str	r2, [r6, #0]
 800adbe:	681e      	ldr	r6, [r3, #0]
 800adc0:	6862      	ldr	r2, [r4, #4]
 800adc2:	2100      	movs	r1, #0
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7f5 fa0b 	bl	80001e0 <memchr>
 800adca:	b108      	cbz	r0, 800add0 <_printf_i+0x1e4>
 800adcc:	1b80      	subs	r0, r0, r6
 800adce:	6060      	str	r0, [r4, #4]
 800add0:	6863      	ldr	r3, [r4, #4]
 800add2:	6123      	str	r3, [r4, #16]
 800add4:	2300      	movs	r3, #0
 800add6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adda:	e7aa      	b.n	800ad32 <_printf_i+0x146>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	4632      	mov	r2, r6
 800ade0:	4649      	mov	r1, r9
 800ade2:	4640      	mov	r0, r8
 800ade4:	47d0      	blx	sl
 800ade6:	3001      	adds	r0, #1
 800ade8:	d0ad      	beq.n	800ad46 <_printf_i+0x15a>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	079b      	lsls	r3, r3, #30
 800adee:	d413      	bmi.n	800ae18 <_printf_i+0x22c>
 800adf0:	68e0      	ldr	r0, [r4, #12]
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	4298      	cmp	r0, r3
 800adf6:	bfb8      	it	lt
 800adf8:	4618      	movlt	r0, r3
 800adfa:	e7a6      	b.n	800ad4a <_printf_i+0x15e>
 800adfc:	2301      	movs	r3, #1
 800adfe:	4632      	mov	r2, r6
 800ae00:	4649      	mov	r1, r9
 800ae02:	4640      	mov	r0, r8
 800ae04:	47d0      	blx	sl
 800ae06:	3001      	adds	r0, #1
 800ae08:	d09d      	beq.n	800ad46 <_printf_i+0x15a>
 800ae0a:	3501      	adds	r5, #1
 800ae0c:	68e3      	ldr	r3, [r4, #12]
 800ae0e:	9903      	ldr	r1, [sp, #12]
 800ae10:	1a5b      	subs	r3, r3, r1
 800ae12:	42ab      	cmp	r3, r5
 800ae14:	dcf2      	bgt.n	800adfc <_printf_i+0x210>
 800ae16:	e7eb      	b.n	800adf0 <_printf_i+0x204>
 800ae18:	2500      	movs	r5, #0
 800ae1a:	f104 0619 	add.w	r6, r4, #25
 800ae1e:	e7f5      	b.n	800ae0c <_printf_i+0x220>
 800ae20:	0800fd36 	.word	0x0800fd36
 800ae24:	0800fd47 	.word	0x0800fd47

0800ae28 <std>:
 800ae28:	2300      	movs	r3, #0
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae36:	6083      	str	r3, [r0, #8]
 800ae38:	8181      	strh	r1, [r0, #12]
 800ae3a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae3c:	81c2      	strh	r2, [r0, #14]
 800ae3e:	6183      	str	r3, [r0, #24]
 800ae40:	4619      	mov	r1, r3
 800ae42:	2208      	movs	r2, #8
 800ae44:	305c      	adds	r0, #92	@ 0x5c
 800ae46:	f000 f931 	bl	800b0ac <memset>
 800ae4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae80 <std+0x58>)
 800ae4c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae84 <std+0x5c>)
 800ae50:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae52:	4b0d      	ldr	r3, [pc, #52]	@ (800ae88 <std+0x60>)
 800ae54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae56:	4b0d      	ldr	r3, [pc, #52]	@ (800ae8c <std+0x64>)
 800ae58:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae90 <std+0x68>)
 800ae5c:	6224      	str	r4, [r4, #32]
 800ae5e:	429c      	cmp	r4, r3
 800ae60:	d006      	beq.n	800ae70 <std+0x48>
 800ae62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae66:	4294      	cmp	r4, r2
 800ae68:	d002      	beq.n	800ae70 <std+0x48>
 800ae6a:	33d0      	adds	r3, #208	@ 0xd0
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	d105      	bne.n	800ae7c <std+0x54>
 800ae70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae78:	f000 b994 	b.w	800b1a4 <__retarget_lock_init_recursive>
 800ae7c:	bd10      	pop	{r4, pc}
 800ae7e:	bf00      	nop
 800ae80:	0800afad 	.word	0x0800afad
 800ae84:	0800afcf 	.word	0x0800afcf
 800ae88:	0800b007 	.word	0x0800b007
 800ae8c:	0800b02b 	.word	0x0800b02b
 800ae90:	20001504 	.word	0x20001504

0800ae94 <stdio_exit_handler>:
 800ae94:	4a02      	ldr	r2, [pc, #8]	@ (800aea0 <stdio_exit_handler+0xc>)
 800ae96:	4903      	ldr	r1, [pc, #12]	@ (800aea4 <stdio_exit_handler+0x10>)
 800ae98:	4803      	ldr	r0, [pc, #12]	@ (800aea8 <stdio_exit_handler+0x14>)
 800ae9a:	f000 b869 	b.w	800af70 <_fwalk_sglue>
 800ae9e:	bf00      	nop
 800aea0:	2000001c 	.word	0x2000001c
 800aea4:	0800cb0d 	.word	0x0800cb0d
 800aea8:	2000002c 	.word	0x2000002c

0800aeac <cleanup_stdio>:
 800aeac:	6841      	ldr	r1, [r0, #4]
 800aeae:	4b0c      	ldr	r3, [pc, #48]	@ (800aee0 <cleanup_stdio+0x34>)
 800aeb0:	4299      	cmp	r1, r3
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	d001      	beq.n	800aebc <cleanup_stdio+0x10>
 800aeb8:	f001 fe28 	bl	800cb0c <_fflush_r>
 800aebc:	68a1      	ldr	r1, [r4, #8]
 800aebe:	4b09      	ldr	r3, [pc, #36]	@ (800aee4 <cleanup_stdio+0x38>)
 800aec0:	4299      	cmp	r1, r3
 800aec2:	d002      	beq.n	800aeca <cleanup_stdio+0x1e>
 800aec4:	4620      	mov	r0, r4
 800aec6:	f001 fe21 	bl	800cb0c <_fflush_r>
 800aeca:	68e1      	ldr	r1, [r4, #12]
 800aecc:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <cleanup_stdio+0x3c>)
 800aece:	4299      	cmp	r1, r3
 800aed0:	d004      	beq.n	800aedc <cleanup_stdio+0x30>
 800aed2:	4620      	mov	r0, r4
 800aed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aed8:	f001 be18 	b.w	800cb0c <_fflush_r>
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	bf00      	nop
 800aee0:	20001504 	.word	0x20001504
 800aee4:	2000156c 	.word	0x2000156c
 800aee8:	200015d4 	.word	0x200015d4

0800aeec <global_stdio_init.part.0>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	4b0b      	ldr	r3, [pc, #44]	@ (800af1c <global_stdio_init.part.0+0x30>)
 800aef0:	4c0b      	ldr	r4, [pc, #44]	@ (800af20 <global_stdio_init.part.0+0x34>)
 800aef2:	4a0c      	ldr	r2, [pc, #48]	@ (800af24 <global_stdio_init.part.0+0x38>)
 800aef4:	601a      	str	r2, [r3, #0]
 800aef6:	4620      	mov	r0, r4
 800aef8:	2200      	movs	r2, #0
 800aefa:	2104      	movs	r1, #4
 800aefc:	f7ff ff94 	bl	800ae28 <std>
 800af00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af04:	2201      	movs	r2, #1
 800af06:	2109      	movs	r1, #9
 800af08:	f7ff ff8e 	bl	800ae28 <std>
 800af0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af10:	2202      	movs	r2, #2
 800af12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af16:	2112      	movs	r1, #18
 800af18:	f7ff bf86 	b.w	800ae28 <std>
 800af1c:	2000163c 	.word	0x2000163c
 800af20:	20001504 	.word	0x20001504
 800af24:	0800ae95 	.word	0x0800ae95

0800af28 <__sfp_lock_acquire>:
 800af28:	4801      	ldr	r0, [pc, #4]	@ (800af30 <__sfp_lock_acquire+0x8>)
 800af2a:	f000 b93c 	b.w	800b1a6 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	20001645 	.word	0x20001645

0800af34 <__sfp_lock_release>:
 800af34:	4801      	ldr	r0, [pc, #4]	@ (800af3c <__sfp_lock_release+0x8>)
 800af36:	f000 b937 	b.w	800b1a8 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	20001645 	.word	0x20001645

0800af40 <__sinit>:
 800af40:	b510      	push	{r4, lr}
 800af42:	4604      	mov	r4, r0
 800af44:	f7ff fff0 	bl	800af28 <__sfp_lock_acquire>
 800af48:	6a23      	ldr	r3, [r4, #32]
 800af4a:	b11b      	cbz	r3, 800af54 <__sinit+0x14>
 800af4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af50:	f7ff bff0 	b.w	800af34 <__sfp_lock_release>
 800af54:	4b04      	ldr	r3, [pc, #16]	@ (800af68 <__sinit+0x28>)
 800af56:	6223      	str	r3, [r4, #32]
 800af58:	4b04      	ldr	r3, [pc, #16]	@ (800af6c <__sinit+0x2c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f5      	bne.n	800af4c <__sinit+0xc>
 800af60:	f7ff ffc4 	bl	800aeec <global_stdio_init.part.0>
 800af64:	e7f2      	b.n	800af4c <__sinit+0xc>
 800af66:	bf00      	nop
 800af68:	0800aead 	.word	0x0800aead
 800af6c:	2000163c 	.word	0x2000163c

0800af70 <_fwalk_sglue>:
 800af70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af74:	4607      	mov	r7, r0
 800af76:	4688      	mov	r8, r1
 800af78:	4614      	mov	r4, r2
 800af7a:	2600      	movs	r6, #0
 800af7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af80:	f1b9 0901 	subs.w	r9, r9, #1
 800af84:	d505      	bpl.n	800af92 <_fwalk_sglue+0x22>
 800af86:	6824      	ldr	r4, [r4, #0]
 800af88:	2c00      	cmp	r4, #0
 800af8a:	d1f7      	bne.n	800af7c <_fwalk_sglue+0xc>
 800af8c:	4630      	mov	r0, r6
 800af8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d907      	bls.n	800afa8 <_fwalk_sglue+0x38>
 800af98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af9c:	3301      	adds	r3, #1
 800af9e:	d003      	beq.n	800afa8 <_fwalk_sglue+0x38>
 800afa0:	4629      	mov	r1, r5
 800afa2:	4638      	mov	r0, r7
 800afa4:	47c0      	blx	r8
 800afa6:	4306      	orrs	r6, r0
 800afa8:	3568      	adds	r5, #104	@ 0x68
 800afaa:	e7e9      	b.n	800af80 <_fwalk_sglue+0x10>

0800afac <__sread>:
 800afac:	b510      	push	{r4, lr}
 800afae:	460c      	mov	r4, r1
 800afb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb4:	f000 f8a8 	bl	800b108 <_read_r>
 800afb8:	2800      	cmp	r0, #0
 800afba:	bfab      	itete	ge
 800afbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800afbe:	89a3      	ldrhlt	r3, [r4, #12]
 800afc0:	181b      	addge	r3, r3, r0
 800afc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800afc6:	bfac      	ite	ge
 800afc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800afca:	81a3      	strhlt	r3, [r4, #12]
 800afcc:	bd10      	pop	{r4, pc}

0800afce <__swrite>:
 800afce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd2:	461f      	mov	r7, r3
 800afd4:	898b      	ldrh	r3, [r1, #12]
 800afd6:	05db      	lsls	r3, r3, #23
 800afd8:	4605      	mov	r5, r0
 800afda:	460c      	mov	r4, r1
 800afdc:	4616      	mov	r6, r2
 800afde:	d505      	bpl.n	800afec <__swrite+0x1e>
 800afe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe4:	2302      	movs	r3, #2
 800afe6:	2200      	movs	r2, #0
 800afe8:	f000 f87c 	bl	800b0e4 <_lseek_r>
 800afec:	89a3      	ldrh	r3, [r4, #12]
 800afee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aff6:	81a3      	strh	r3, [r4, #12]
 800aff8:	4632      	mov	r2, r6
 800affa:	463b      	mov	r3, r7
 800affc:	4628      	mov	r0, r5
 800affe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b002:	f000 b893 	b.w	800b12c <_write_r>

0800b006 <__sseek>:
 800b006:	b510      	push	{r4, lr}
 800b008:	460c      	mov	r4, r1
 800b00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00e:	f000 f869 	bl	800b0e4 <_lseek_r>
 800b012:	1c43      	adds	r3, r0, #1
 800b014:	89a3      	ldrh	r3, [r4, #12]
 800b016:	bf15      	itete	ne
 800b018:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b01a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b01e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b022:	81a3      	strheq	r3, [r4, #12]
 800b024:	bf18      	it	ne
 800b026:	81a3      	strhne	r3, [r4, #12]
 800b028:	bd10      	pop	{r4, pc}

0800b02a <__sclose>:
 800b02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b02e:	f000 b849 	b.w	800b0c4 <_close_r>

0800b032 <_vsniprintf_r>:
 800b032:	b530      	push	{r4, r5, lr}
 800b034:	4614      	mov	r4, r2
 800b036:	2c00      	cmp	r4, #0
 800b038:	b09b      	sub	sp, #108	@ 0x6c
 800b03a:	4605      	mov	r5, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	da05      	bge.n	800b04c <_vsniprintf_r+0x1a>
 800b040:	238b      	movs	r3, #139	@ 0x8b
 800b042:	6003      	str	r3, [r0, #0]
 800b044:	f04f 30ff 	mov.w	r0, #4294967295
 800b048:	b01b      	add	sp, #108	@ 0x6c
 800b04a:	bd30      	pop	{r4, r5, pc}
 800b04c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b050:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b054:	f04f 0300 	mov.w	r3, #0
 800b058:	9319      	str	r3, [sp, #100]	@ 0x64
 800b05a:	bf14      	ite	ne
 800b05c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b060:	4623      	moveq	r3, r4
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	9305      	str	r3, [sp, #20]
 800b066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b06a:	9100      	str	r1, [sp, #0]
 800b06c:	9104      	str	r1, [sp, #16]
 800b06e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b072:	4669      	mov	r1, sp
 800b074:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b076:	f001 fbc9 	bl	800c80c <_svfiprintf_r>
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	bfbc      	itt	lt
 800b07e:	238b      	movlt	r3, #139	@ 0x8b
 800b080:	602b      	strlt	r3, [r5, #0]
 800b082:	2c00      	cmp	r4, #0
 800b084:	d0e0      	beq.n	800b048 <_vsniprintf_r+0x16>
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	2200      	movs	r2, #0
 800b08a:	701a      	strb	r2, [r3, #0]
 800b08c:	e7dc      	b.n	800b048 <_vsniprintf_r+0x16>
	...

0800b090 <vsniprintf>:
 800b090:	b507      	push	{r0, r1, r2, lr}
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	4613      	mov	r3, r2
 800b096:	460a      	mov	r2, r1
 800b098:	4601      	mov	r1, r0
 800b09a:	4803      	ldr	r0, [pc, #12]	@ (800b0a8 <vsniprintf+0x18>)
 800b09c:	6800      	ldr	r0, [r0, #0]
 800b09e:	f7ff ffc8 	bl	800b032 <_vsniprintf_r>
 800b0a2:	b003      	add	sp, #12
 800b0a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0a8:	20000028 	.word	0x20000028

0800b0ac <memset>:
 800b0ac:	4402      	add	r2, r0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d100      	bne.n	800b0b6 <memset+0xa>
 800b0b4:	4770      	bx	lr
 800b0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b0ba:	e7f9      	b.n	800b0b0 <memset+0x4>

0800b0bc <_localeconv_r>:
 800b0bc:	4800      	ldr	r0, [pc, #0]	@ (800b0c0 <_localeconv_r+0x4>)
 800b0be:	4770      	bx	lr
 800b0c0:	20000168 	.word	0x20000168

0800b0c4 <_close_r>:
 800b0c4:	b538      	push	{r3, r4, r5, lr}
 800b0c6:	4d06      	ldr	r5, [pc, #24]	@ (800b0e0 <_close_r+0x1c>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	4608      	mov	r0, r1
 800b0ce:	602b      	str	r3, [r5, #0]
 800b0d0:	f7fa fd26 	bl	8005b20 <_close>
 800b0d4:	1c43      	adds	r3, r0, #1
 800b0d6:	d102      	bne.n	800b0de <_close_r+0x1a>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b103      	cbz	r3, 800b0de <_close_r+0x1a>
 800b0dc:	6023      	str	r3, [r4, #0]
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	20001640 	.word	0x20001640

0800b0e4 <_lseek_r>:
 800b0e4:	b538      	push	{r3, r4, r5, lr}
 800b0e6:	4d07      	ldr	r5, [pc, #28]	@ (800b104 <_lseek_r+0x20>)
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	602a      	str	r2, [r5, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f7fa fd3b 	bl	8005b6e <_lseek>
 800b0f8:	1c43      	adds	r3, r0, #1
 800b0fa:	d102      	bne.n	800b102 <_lseek_r+0x1e>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	b103      	cbz	r3, 800b102 <_lseek_r+0x1e>
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	bd38      	pop	{r3, r4, r5, pc}
 800b104:	20001640 	.word	0x20001640

0800b108 <_read_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	4d07      	ldr	r5, [pc, #28]	@ (800b128 <_read_r+0x20>)
 800b10c:	4604      	mov	r4, r0
 800b10e:	4608      	mov	r0, r1
 800b110:	4611      	mov	r1, r2
 800b112:	2200      	movs	r2, #0
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	f7fa fcc9 	bl	8005aae <_read>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_read_r+0x1e>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_read_r+0x1e>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20001640 	.word	0x20001640

0800b12c <_write_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d07      	ldr	r5, [pc, #28]	@ (800b14c <_write_r+0x20>)
 800b130:	4604      	mov	r4, r0
 800b132:	4608      	mov	r0, r1
 800b134:	4611      	mov	r1, r2
 800b136:	2200      	movs	r2, #0
 800b138:	602a      	str	r2, [r5, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	f7fa fcd4 	bl	8005ae8 <_write>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d102      	bne.n	800b14a <_write_r+0x1e>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	b103      	cbz	r3, 800b14a <_write_r+0x1e>
 800b148:	6023      	str	r3, [r4, #0]
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	20001640 	.word	0x20001640

0800b150 <__errno>:
 800b150:	4b01      	ldr	r3, [pc, #4]	@ (800b158 <__errno+0x8>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000028 	.word	0x20000028

0800b15c <__libc_init_array>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4d0d      	ldr	r5, [pc, #52]	@ (800b194 <__libc_init_array+0x38>)
 800b160:	4c0d      	ldr	r4, [pc, #52]	@ (800b198 <__libc_init_array+0x3c>)
 800b162:	1b64      	subs	r4, r4, r5
 800b164:	10a4      	asrs	r4, r4, #2
 800b166:	2600      	movs	r6, #0
 800b168:	42a6      	cmp	r6, r4
 800b16a:	d109      	bne.n	800b180 <__libc_init_array+0x24>
 800b16c:	4d0b      	ldr	r5, [pc, #44]	@ (800b19c <__libc_init_array+0x40>)
 800b16e:	4c0c      	ldr	r4, [pc, #48]	@ (800b1a0 <__libc_init_array+0x44>)
 800b170:	f002 f86a 	bl	800d248 <_init>
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	2600      	movs	r6, #0
 800b17a:	42a6      	cmp	r6, r4
 800b17c:	d105      	bne.n	800b18a <__libc_init_array+0x2e>
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
 800b180:	f855 3b04 	ldr.w	r3, [r5], #4
 800b184:	4798      	blx	r3
 800b186:	3601      	adds	r6, #1
 800b188:	e7ee      	b.n	800b168 <__libc_init_array+0xc>
 800b18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18e:	4798      	blx	r3
 800b190:	3601      	adds	r6, #1
 800b192:	e7f2      	b.n	800b17a <__libc_init_array+0x1e>
 800b194:	080100a4 	.word	0x080100a4
 800b198:	080100a4 	.word	0x080100a4
 800b19c:	080100a4 	.word	0x080100a4
 800b1a0:	080100a8 	.word	0x080100a8

0800b1a4 <__retarget_lock_init_recursive>:
 800b1a4:	4770      	bx	lr

0800b1a6 <__retarget_lock_acquire_recursive>:
 800b1a6:	4770      	bx	lr

0800b1a8 <__retarget_lock_release_recursive>:
 800b1a8:	4770      	bx	lr

0800b1aa <quorem>:
 800b1aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ae:	6903      	ldr	r3, [r0, #16]
 800b1b0:	690c      	ldr	r4, [r1, #16]
 800b1b2:	42a3      	cmp	r3, r4
 800b1b4:	4607      	mov	r7, r0
 800b1b6:	db7e      	blt.n	800b2b6 <quorem+0x10c>
 800b1b8:	3c01      	subs	r4, #1
 800b1ba:	f101 0814 	add.w	r8, r1, #20
 800b1be:	00a3      	lsls	r3, r4, #2
 800b1c0:	f100 0514 	add.w	r5, r0, #20
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1e0:	d32e      	bcc.n	800b240 <quorem+0x96>
 800b1e2:	f04f 0a00 	mov.w	sl, #0
 800b1e6:	46c4      	mov	ip, r8
 800b1e8:	46ae      	mov	lr, r5
 800b1ea:	46d3      	mov	fp, sl
 800b1ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1f0:	b298      	uxth	r0, r3
 800b1f2:	fb06 a000 	mla	r0, r6, r0, sl
 800b1f6:	0c02      	lsrs	r2, r0, #16
 800b1f8:	0c1b      	lsrs	r3, r3, #16
 800b1fa:	fb06 2303 	mla	r3, r6, r3, r2
 800b1fe:	f8de 2000 	ldr.w	r2, [lr]
 800b202:	b280      	uxth	r0, r0
 800b204:	b292      	uxth	r2, r2
 800b206:	1a12      	subs	r2, r2, r0
 800b208:	445a      	add	r2, fp
 800b20a:	f8de 0000 	ldr.w	r0, [lr]
 800b20e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b212:	b29b      	uxth	r3, r3
 800b214:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b218:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b21c:	b292      	uxth	r2, r2
 800b21e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b222:	45e1      	cmp	r9, ip
 800b224:	f84e 2b04 	str.w	r2, [lr], #4
 800b228:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b22c:	d2de      	bcs.n	800b1ec <quorem+0x42>
 800b22e:	9b00      	ldr	r3, [sp, #0]
 800b230:	58eb      	ldr	r3, [r5, r3]
 800b232:	b92b      	cbnz	r3, 800b240 <quorem+0x96>
 800b234:	9b01      	ldr	r3, [sp, #4]
 800b236:	3b04      	subs	r3, #4
 800b238:	429d      	cmp	r5, r3
 800b23a:	461a      	mov	r2, r3
 800b23c:	d32f      	bcc.n	800b29e <quorem+0xf4>
 800b23e:	613c      	str	r4, [r7, #16]
 800b240:	4638      	mov	r0, r7
 800b242:	f001 f97f 	bl	800c544 <__mcmp>
 800b246:	2800      	cmp	r0, #0
 800b248:	db25      	blt.n	800b296 <quorem+0xec>
 800b24a:	4629      	mov	r1, r5
 800b24c:	2000      	movs	r0, #0
 800b24e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b252:	f8d1 c000 	ldr.w	ip, [r1]
 800b256:	fa1f fe82 	uxth.w	lr, r2
 800b25a:	fa1f f38c 	uxth.w	r3, ip
 800b25e:	eba3 030e 	sub.w	r3, r3, lr
 800b262:	4403      	add	r3, r0
 800b264:	0c12      	lsrs	r2, r2, #16
 800b266:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b26a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b26e:	b29b      	uxth	r3, r3
 800b270:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b274:	45c1      	cmp	r9, r8
 800b276:	f841 3b04 	str.w	r3, [r1], #4
 800b27a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b27e:	d2e6      	bcs.n	800b24e <quorem+0xa4>
 800b280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b284:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b288:	b922      	cbnz	r2, 800b294 <quorem+0xea>
 800b28a:	3b04      	subs	r3, #4
 800b28c:	429d      	cmp	r5, r3
 800b28e:	461a      	mov	r2, r3
 800b290:	d30b      	bcc.n	800b2aa <quorem+0x100>
 800b292:	613c      	str	r4, [r7, #16]
 800b294:	3601      	adds	r6, #1
 800b296:	4630      	mov	r0, r6
 800b298:	b003      	add	sp, #12
 800b29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29e:	6812      	ldr	r2, [r2, #0]
 800b2a0:	3b04      	subs	r3, #4
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	d1cb      	bne.n	800b23e <quorem+0x94>
 800b2a6:	3c01      	subs	r4, #1
 800b2a8:	e7c6      	b.n	800b238 <quorem+0x8e>
 800b2aa:	6812      	ldr	r2, [r2, #0]
 800b2ac:	3b04      	subs	r3, #4
 800b2ae:	2a00      	cmp	r2, #0
 800b2b0:	d1ef      	bne.n	800b292 <quorem+0xe8>
 800b2b2:	3c01      	subs	r4, #1
 800b2b4:	e7ea      	b.n	800b28c <quorem+0xe2>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e7ee      	b.n	800b298 <quorem+0xee>
 800b2ba:	0000      	movs	r0, r0
 800b2bc:	0000      	movs	r0, r0
	...

0800b2c0 <_dtoa_r>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	69c7      	ldr	r7, [r0, #28]
 800b2c6:	b097      	sub	sp, #92	@ 0x5c
 800b2c8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b2cc:	ec55 4b10 	vmov	r4, r5, d0
 800b2d0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b2d2:	9107      	str	r1, [sp, #28]
 800b2d4:	4681      	mov	r9, r0
 800b2d6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2da:	b97f      	cbnz	r7, 800b2fc <_dtoa_r+0x3c>
 800b2dc:	2010      	movs	r0, #16
 800b2de:	f000 fe09 	bl	800bef4 <malloc>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	f8c9 001c 	str.w	r0, [r9, #28]
 800b2e8:	b920      	cbnz	r0, 800b2f4 <_dtoa_r+0x34>
 800b2ea:	4ba9      	ldr	r3, [pc, #676]	@ (800b590 <_dtoa_r+0x2d0>)
 800b2ec:	21ef      	movs	r1, #239	@ 0xef
 800b2ee:	48a9      	ldr	r0, [pc, #676]	@ (800b594 <_dtoa_r+0x2d4>)
 800b2f0:	f001 fc6c 	bl	800cbcc <__assert_func>
 800b2f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2f8:	6007      	str	r7, [r0, #0]
 800b2fa:	60c7      	str	r7, [r0, #12]
 800b2fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b300:	6819      	ldr	r1, [r3, #0]
 800b302:	b159      	cbz	r1, 800b31c <_dtoa_r+0x5c>
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	604a      	str	r2, [r1, #4]
 800b308:	2301      	movs	r3, #1
 800b30a:	4093      	lsls	r3, r2
 800b30c:	608b      	str	r3, [r1, #8]
 800b30e:	4648      	mov	r0, r9
 800b310:	f000 fee6 	bl	800c0e0 <_Bfree>
 800b314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	1e2b      	subs	r3, r5, #0
 800b31e:	bfb9      	ittee	lt
 800b320:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b324:	9305      	strlt	r3, [sp, #20]
 800b326:	2300      	movge	r3, #0
 800b328:	6033      	strge	r3, [r6, #0]
 800b32a:	9f05      	ldr	r7, [sp, #20]
 800b32c:	4b9a      	ldr	r3, [pc, #616]	@ (800b598 <_dtoa_r+0x2d8>)
 800b32e:	bfbc      	itt	lt
 800b330:	2201      	movlt	r2, #1
 800b332:	6032      	strlt	r2, [r6, #0]
 800b334:	43bb      	bics	r3, r7
 800b336:	d112      	bne.n	800b35e <_dtoa_r+0x9e>
 800b338:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b33a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b344:	4323      	orrs	r3, r4
 800b346:	f000 855a 	beq.w	800bdfe <_dtoa_r+0xb3e>
 800b34a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b34c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b5ac <_dtoa_r+0x2ec>
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 855c 	beq.w	800be0e <_dtoa_r+0xb4e>
 800b356:	f10a 0303 	add.w	r3, sl, #3
 800b35a:	f000 bd56 	b.w	800be0a <_dtoa_r+0xb4a>
 800b35e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b362:	2200      	movs	r2, #0
 800b364:	ec51 0b17 	vmov	r0, r1, d7
 800b368:	2300      	movs	r3, #0
 800b36a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b36e:	f7f5 fbb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800b372:	4680      	mov	r8, r0
 800b374:	b158      	cbz	r0, 800b38e <_dtoa_r+0xce>
 800b376:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b378:	2301      	movs	r3, #1
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b37e:	b113      	cbz	r3, 800b386 <_dtoa_r+0xc6>
 800b380:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b382:	4b86      	ldr	r3, [pc, #536]	@ (800b59c <_dtoa_r+0x2dc>)
 800b384:	6013      	str	r3, [r2, #0]
 800b386:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b5b0 <_dtoa_r+0x2f0>
 800b38a:	f000 bd40 	b.w	800be0e <_dtoa_r+0xb4e>
 800b38e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b392:	aa14      	add	r2, sp, #80	@ 0x50
 800b394:	a915      	add	r1, sp, #84	@ 0x54
 800b396:	4648      	mov	r0, r9
 800b398:	f001 f984 	bl	800c6a4 <__d2b>
 800b39c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b3a0:	9002      	str	r0, [sp, #8]
 800b3a2:	2e00      	cmp	r6, #0
 800b3a4:	d078      	beq.n	800b498 <_dtoa_r+0x1d8>
 800b3a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3a8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b3ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3b4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b3b8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b3bc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4b76      	ldr	r3, [pc, #472]	@ (800b5a0 <_dtoa_r+0x2e0>)
 800b3c6:	f7f4 ff67 	bl	8000298 <__aeabi_dsub>
 800b3ca:	a36b      	add	r3, pc, #428	@ (adr r3, 800b578 <_dtoa_r+0x2b8>)
 800b3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d0:	f7f5 f91a 	bl	8000608 <__aeabi_dmul>
 800b3d4:	a36a      	add	r3, pc, #424	@ (adr r3, 800b580 <_dtoa_r+0x2c0>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	f7f4 ff5f 	bl	800029c <__adddf3>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	f7f5 f8a6 	bl	8000534 <__aeabi_i2d>
 800b3e8:	a367      	add	r3, pc, #412	@ (adr r3, 800b588 <_dtoa_r+0x2c8>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f5 f90b 	bl	8000608 <__aeabi_dmul>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	4629      	mov	r1, r5
 800b3fa:	f7f4 ff4f 	bl	800029c <__adddf3>
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	f7f5 fbb1 	bl	8000b68 <__aeabi_d2iz>
 800b406:	2200      	movs	r2, #0
 800b408:	4607      	mov	r7, r0
 800b40a:	2300      	movs	r3, #0
 800b40c:	4620      	mov	r0, r4
 800b40e:	4629      	mov	r1, r5
 800b410:	f7f5 fb6c 	bl	8000aec <__aeabi_dcmplt>
 800b414:	b140      	cbz	r0, 800b428 <_dtoa_r+0x168>
 800b416:	4638      	mov	r0, r7
 800b418:	f7f5 f88c 	bl	8000534 <__aeabi_i2d>
 800b41c:	4622      	mov	r2, r4
 800b41e:	462b      	mov	r3, r5
 800b420:	f7f5 fb5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b424:	b900      	cbnz	r0, 800b428 <_dtoa_r+0x168>
 800b426:	3f01      	subs	r7, #1
 800b428:	2f16      	cmp	r7, #22
 800b42a:	d852      	bhi.n	800b4d2 <_dtoa_r+0x212>
 800b42c:	4b5d      	ldr	r3, [pc, #372]	@ (800b5a4 <_dtoa_r+0x2e4>)
 800b42e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b43a:	f7f5 fb57 	bl	8000aec <__aeabi_dcmplt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d049      	beq.n	800b4d6 <_dtoa_r+0x216>
 800b442:	3f01      	subs	r7, #1
 800b444:	2300      	movs	r3, #0
 800b446:	9310      	str	r3, [sp, #64]	@ 0x40
 800b448:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b44a:	1b9b      	subs	r3, r3, r6
 800b44c:	1e5a      	subs	r2, r3, #1
 800b44e:	bf45      	ittet	mi
 800b450:	f1c3 0301 	rsbmi	r3, r3, #1
 800b454:	9300      	strmi	r3, [sp, #0]
 800b456:	2300      	movpl	r3, #0
 800b458:	2300      	movmi	r3, #0
 800b45a:	9206      	str	r2, [sp, #24]
 800b45c:	bf54      	ite	pl
 800b45e:	9300      	strpl	r3, [sp, #0]
 800b460:	9306      	strmi	r3, [sp, #24]
 800b462:	2f00      	cmp	r7, #0
 800b464:	db39      	blt.n	800b4da <_dtoa_r+0x21a>
 800b466:	9b06      	ldr	r3, [sp, #24]
 800b468:	970d      	str	r7, [sp, #52]	@ 0x34
 800b46a:	443b      	add	r3, r7
 800b46c:	9306      	str	r3, [sp, #24]
 800b46e:	2300      	movs	r3, #0
 800b470:	9308      	str	r3, [sp, #32]
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	2b09      	cmp	r3, #9
 800b476:	d863      	bhi.n	800b540 <_dtoa_r+0x280>
 800b478:	2b05      	cmp	r3, #5
 800b47a:	bfc4      	itt	gt
 800b47c:	3b04      	subgt	r3, #4
 800b47e:	9307      	strgt	r3, [sp, #28]
 800b480:	9b07      	ldr	r3, [sp, #28]
 800b482:	f1a3 0302 	sub.w	r3, r3, #2
 800b486:	bfcc      	ite	gt
 800b488:	2400      	movgt	r4, #0
 800b48a:	2401      	movle	r4, #1
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d863      	bhi.n	800b558 <_dtoa_r+0x298>
 800b490:	e8df f003 	tbb	[pc, r3]
 800b494:	2b375452 	.word	0x2b375452
 800b498:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b49c:	441e      	add	r6, r3
 800b49e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	bfc1      	itttt	gt
 800b4a6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b4aa:	409f      	lslgt	r7, r3
 800b4ac:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b4b0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b4b4:	bfd6      	itet	le
 800b4b6:	f1c3 0320 	rsble	r3, r3, #32
 800b4ba:	ea47 0003 	orrgt.w	r0, r7, r3
 800b4be:	fa04 f003 	lslle.w	r0, r4, r3
 800b4c2:	f7f5 f827 	bl	8000514 <__aeabi_ui2d>
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b4cc:	3e01      	subs	r6, #1
 800b4ce:	9212      	str	r2, [sp, #72]	@ 0x48
 800b4d0:	e776      	b.n	800b3c0 <_dtoa_r+0x100>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e7b7      	b.n	800b446 <_dtoa_r+0x186>
 800b4d6:	9010      	str	r0, [sp, #64]	@ 0x40
 800b4d8:	e7b6      	b.n	800b448 <_dtoa_r+0x188>
 800b4da:	9b00      	ldr	r3, [sp, #0]
 800b4dc:	1bdb      	subs	r3, r3, r7
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	427b      	negs	r3, r7
 800b4e2:	9308      	str	r3, [sp, #32]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	930d      	str	r3, [sp, #52]	@ 0x34
 800b4e8:	e7c3      	b.n	800b472 <_dtoa_r+0x1b2>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4f0:	eb07 0b03 	add.w	fp, r7, r3
 800b4f4:	f10b 0301 	add.w	r3, fp, #1
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	9303      	str	r3, [sp, #12]
 800b4fc:	bfb8      	it	lt
 800b4fe:	2301      	movlt	r3, #1
 800b500:	e006      	b.n	800b510 <_dtoa_r+0x250>
 800b502:	2301      	movs	r3, #1
 800b504:	9309      	str	r3, [sp, #36]	@ 0x24
 800b506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dd28      	ble.n	800b55e <_dtoa_r+0x29e>
 800b50c:	469b      	mov	fp, r3
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b514:	2100      	movs	r1, #0
 800b516:	2204      	movs	r2, #4
 800b518:	f102 0514 	add.w	r5, r2, #20
 800b51c:	429d      	cmp	r5, r3
 800b51e:	d926      	bls.n	800b56e <_dtoa_r+0x2ae>
 800b520:	6041      	str	r1, [r0, #4]
 800b522:	4648      	mov	r0, r9
 800b524:	f000 fd9c 	bl	800c060 <_Balloc>
 800b528:	4682      	mov	sl, r0
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d142      	bne.n	800b5b4 <_dtoa_r+0x2f4>
 800b52e:	4b1e      	ldr	r3, [pc, #120]	@ (800b5a8 <_dtoa_r+0x2e8>)
 800b530:	4602      	mov	r2, r0
 800b532:	f240 11af 	movw	r1, #431	@ 0x1af
 800b536:	e6da      	b.n	800b2ee <_dtoa_r+0x2e>
 800b538:	2300      	movs	r3, #0
 800b53a:	e7e3      	b.n	800b504 <_dtoa_r+0x244>
 800b53c:	2300      	movs	r3, #0
 800b53e:	e7d5      	b.n	800b4ec <_dtoa_r+0x22c>
 800b540:	2401      	movs	r4, #1
 800b542:	2300      	movs	r3, #0
 800b544:	9307      	str	r3, [sp, #28]
 800b546:	9409      	str	r4, [sp, #36]	@ 0x24
 800b548:	f04f 3bff 	mov.w	fp, #4294967295
 800b54c:	2200      	movs	r2, #0
 800b54e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b552:	2312      	movs	r3, #18
 800b554:	920c      	str	r2, [sp, #48]	@ 0x30
 800b556:	e7db      	b.n	800b510 <_dtoa_r+0x250>
 800b558:	2301      	movs	r3, #1
 800b55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b55c:	e7f4      	b.n	800b548 <_dtoa_r+0x288>
 800b55e:	f04f 0b01 	mov.w	fp, #1
 800b562:	f8cd b00c 	str.w	fp, [sp, #12]
 800b566:	465b      	mov	r3, fp
 800b568:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b56c:	e7d0      	b.n	800b510 <_dtoa_r+0x250>
 800b56e:	3101      	adds	r1, #1
 800b570:	0052      	lsls	r2, r2, #1
 800b572:	e7d1      	b.n	800b518 <_dtoa_r+0x258>
 800b574:	f3af 8000 	nop.w
 800b578:	636f4361 	.word	0x636f4361
 800b57c:	3fd287a7 	.word	0x3fd287a7
 800b580:	8b60c8b3 	.word	0x8b60c8b3
 800b584:	3fc68a28 	.word	0x3fc68a28
 800b588:	509f79fb 	.word	0x509f79fb
 800b58c:	3fd34413 	.word	0x3fd34413
 800b590:	0800fd65 	.word	0x0800fd65
 800b594:	0800fd7c 	.word	0x0800fd7c
 800b598:	7ff00000 	.word	0x7ff00000
 800b59c:	0800fd35 	.word	0x0800fd35
 800b5a0:	3ff80000 	.word	0x3ff80000
 800b5a4:	0800fed0 	.word	0x0800fed0
 800b5a8:	0800fdd4 	.word	0x0800fdd4
 800b5ac:	0800fd61 	.word	0x0800fd61
 800b5b0:	0800fd34 	.word	0x0800fd34
 800b5b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b5b8:	6018      	str	r0, [r3, #0]
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	2b0e      	cmp	r3, #14
 800b5be:	f200 80a1 	bhi.w	800b704 <_dtoa_r+0x444>
 800b5c2:	2c00      	cmp	r4, #0
 800b5c4:	f000 809e 	beq.w	800b704 <_dtoa_r+0x444>
 800b5c8:	2f00      	cmp	r7, #0
 800b5ca:	dd33      	ble.n	800b634 <_dtoa_r+0x374>
 800b5cc:	4b9c      	ldr	r3, [pc, #624]	@ (800b840 <_dtoa_r+0x580>)
 800b5ce:	f007 020f 	and.w	r2, r7, #15
 800b5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5d6:	ed93 7b00 	vldr	d7, [r3]
 800b5da:	05f8      	lsls	r0, r7, #23
 800b5dc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b5e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b5e4:	d516      	bpl.n	800b614 <_dtoa_r+0x354>
 800b5e6:	4b97      	ldr	r3, [pc, #604]	@ (800b844 <_dtoa_r+0x584>)
 800b5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b5ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5f0:	f7f5 f934 	bl	800085c <__aeabi_ddiv>
 800b5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5f8:	f004 040f 	and.w	r4, r4, #15
 800b5fc:	2603      	movs	r6, #3
 800b5fe:	4d91      	ldr	r5, [pc, #580]	@ (800b844 <_dtoa_r+0x584>)
 800b600:	b954      	cbnz	r4, 800b618 <_dtoa_r+0x358>
 800b602:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b60a:	f7f5 f927 	bl	800085c <__aeabi_ddiv>
 800b60e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b612:	e028      	b.n	800b666 <_dtoa_r+0x3a6>
 800b614:	2602      	movs	r6, #2
 800b616:	e7f2      	b.n	800b5fe <_dtoa_r+0x33e>
 800b618:	07e1      	lsls	r1, r4, #31
 800b61a:	d508      	bpl.n	800b62e <_dtoa_r+0x36e>
 800b61c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b620:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b624:	f7f4 fff0 	bl	8000608 <__aeabi_dmul>
 800b628:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b62c:	3601      	adds	r6, #1
 800b62e:	1064      	asrs	r4, r4, #1
 800b630:	3508      	adds	r5, #8
 800b632:	e7e5      	b.n	800b600 <_dtoa_r+0x340>
 800b634:	f000 80af 	beq.w	800b796 <_dtoa_r+0x4d6>
 800b638:	427c      	negs	r4, r7
 800b63a:	4b81      	ldr	r3, [pc, #516]	@ (800b840 <_dtoa_r+0x580>)
 800b63c:	4d81      	ldr	r5, [pc, #516]	@ (800b844 <_dtoa_r+0x584>)
 800b63e:	f004 020f 	and.w	r2, r4, #15
 800b642:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b64e:	f7f4 ffdb 	bl	8000608 <__aeabi_dmul>
 800b652:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b656:	1124      	asrs	r4, r4, #4
 800b658:	2300      	movs	r3, #0
 800b65a:	2602      	movs	r6, #2
 800b65c:	2c00      	cmp	r4, #0
 800b65e:	f040 808f 	bne.w	800b780 <_dtoa_r+0x4c0>
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1d3      	bne.n	800b60e <_dtoa_r+0x34e>
 800b666:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b668:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f000 8094 	beq.w	800b79a <_dtoa_r+0x4da>
 800b672:	4b75      	ldr	r3, [pc, #468]	@ (800b848 <_dtoa_r+0x588>)
 800b674:	2200      	movs	r2, #0
 800b676:	4620      	mov	r0, r4
 800b678:	4629      	mov	r1, r5
 800b67a:	f7f5 fa37 	bl	8000aec <__aeabi_dcmplt>
 800b67e:	2800      	cmp	r0, #0
 800b680:	f000 808b 	beq.w	800b79a <_dtoa_r+0x4da>
 800b684:	9b03      	ldr	r3, [sp, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 8087 	beq.w	800b79a <_dtoa_r+0x4da>
 800b68c:	f1bb 0f00 	cmp.w	fp, #0
 800b690:	dd34      	ble.n	800b6fc <_dtoa_r+0x43c>
 800b692:	4620      	mov	r0, r4
 800b694:	4b6d      	ldr	r3, [pc, #436]	@ (800b84c <_dtoa_r+0x58c>)
 800b696:	2200      	movs	r2, #0
 800b698:	4629      	mov	r1, r5
 800b69a:	f7f4 ffb5 	bl	8000608 <__aeabi_dmul>
 800b69e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6a2:	f107 38ff 	add.w	r8, r7, #4294967295
 800b6a6:	3601      	adds	r6, #1
 800b6a8:	465c      	mov	r4, fp
 800b6aa:	4630      	mov	r0, r6
 800b6ac:	f7f4 ff42 	bl	8000534 <__aeabi_i2d>
 800b6b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	4b65      	ldr	r3, [pc, #404]	@ (800b850 <_dtoa_r+0x590>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f7f4 fdee 	bl	800029c <__adddf3>
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	d16a      	bne.n	800b7a0 <_dtoa_r+0x4e0>
 800b6ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6ce:	4b61      	ldr	r3, [pc, #388]	@ (800b854 <_dtoa_r+0x594>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f7f4 fde1 	bl	8000298 <__aeabi_dsub>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	460b      	mov	r3, r1
 800b6da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6de:	462a      	mov	r2, r5
 800b6e0:	4633      	mov	r3, r6
 800b6e2:	f7f5 fa21 	bl	8000b28 <__aeabi_dcmpgt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f040 8298 	bne.w	800bc1c <_dtoa_r+0x95c>
 800b6ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6f0:	462a      	mov	r2, r5
 800b6f2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b6f6:	f7f5 f9f9 	bl	8000aec <__aeabi_dcmplt>
 800b6fa:	bb38      	cbnz	r0, 800b74c <_dtoa_r+0x48c>
 800b6fc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b700:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b704:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b706:	2b00      	cmp	r3, #0
 800b708:	f2c0 8157 	blt.w	800b9ba <_dtoa_r+0x6fa>
 800b70c:	2f0e      	cmp	r7, #14
 800b70e:	f300 8154 	bgt.w	800b9ba <_dtoa_r+0x6fa>
 800b712:	4b4b      	ldr	r3, [pc, #300]	@ (800b840 <_dtoa_r+0x580>)
 800b714:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b718:	ed93 7b00 	vldr	d7, [r3]
 800b71c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b71e:	2b00      	cmp	r3, #0
 800b720:	ed8d 7b00 	vstr	d7, [sp]
 800b724:	f280 80e5 	bge.w	800b8f2 <_dtoa_r+0x632>
 800b728:	9b03      	ldr	r3, [sp, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f300 80e1 	bgt.w	800b8f2 <_dtoa_r+0x632>
 800b730:	d10c      	bne.n	800b74c <_dtoa_r+0x48c>
 800b732:	4b48      	ldr	r3, [pc, #288]	@ (800b854 <_dtoa_r+0x594>)
 800b734:	2200      	movs	r2, #0
 800b736:	ec51 0b17 	vmov	r0, r1, d7
 800b73a:	f7f4 ff65 	bl	8000608 <__aeabi_dmul>
 800b73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b742:	f7f5 f9e7 	bl	8000b14 <__aeabi_dcmpge>
 800b746:	2800      	cmp	r0, #0
 800b748:	f000 8266 	beq.w	800bc18 <_dtoa_r+0x958>
 800b74c:	2400      	movs	r4, #0
 800b74e:	4625      	mov	r5, r4
 800b750:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b752:	4656      	mov	r6, sl
 800b754:	ea6f 0803 	mvn.w	r8, r3
 800b758:	2700      	movs	r7, #0
 800b75a:	4621      	mov	r1, r4
 800b75c:	4648      	mov	r0, r9
 800b75e:	f000 fcbf 	bl	800c0e0 <_Bfree>
 800b762:	2d00      	cmp	r5, #0
 800b764:	f000 80bd 	beq.w	800b8e2 <_dtoa_r+0x622>
 800b768:	b12f      	cbz	r7, 800b776 <_dtoa_r+0x4b6>
 800b76a:	42af      	cmp	r7, r5
 800b76c:	d003      	beq.n	800b776 <_dtoa_r+0x4b6>
 800b76e:	4639      	mov	r1, r7
 800b770:	4648      	mov	r0, r9
 800b772:	f000 fcb5 	bl	800c0e0 <_Bfree>
 800b776:	4629      	mov	r1, r5
 800b778:	4648      	mov	r0, r9
 800b77a:	f000 fcb1 	bl	800c0e0 <_Bfree>
 800b77e:	e0b0      	b.n	800b8e2 <_dtoa_r+0x622>
 800b780:	07e2      	lsls	r2, r4, #31
 800b782:	d505      	bpl.n	800b790 <_dtoa_r+0x4d0>
 800b784:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b788:	f7f4 ff3e 	bl	8000608 <__aeabi_dmul>
 800b78c:	3601      	adds	r6, #1
 800b78e:	2301      	movs	r3, #1
 800b790:	1064      	asrs	r4, r4, #1
 800b792:	3508      	adds	r5, #8
 800b794:	e762      	b.n	800b65c <_dtoa_r+0x39c>
 800b796:	2602      	movs	r6, #2
 800b798:	e765      	b.n	800b666 <_dtoa_r+0x3a6>
 800b79a:	9c03      	ldr	r4, [sp, #12]
 800b79c:	46b8      	mov	r8, r7
 800b79e:	e784      	b.n	800b6aa <_dtoa_r+0x3ea>
 800b7a0:	4b27      	ldr	r3, [pc, #156]	@ (800b840 <_dtoa_r+0x580>)
 800b7a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7ac:	4454      	add	r4, sl
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	d054      	beq.n	800b85c <_dtoa_r+0x59c>
 800b7b2:	4929      	ldr	r1, [pc, #164]	@ (800b858 <_dtoa_r+0x598>)
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f7f5 f851 	bl	800085c <__aeabi_ddiv>
 800b7ba:	4633      	mov	r3, r6
 800b7bc:	462a      	mov	r2, r5
 800b7be:	f7f4 fd6b 	bl	8000298 <__aeabi_dsub>
 800b7c2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7c6:	4656      	mov	r6, sl
 800b7c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7cc:	f7f5 f9cc 	bl	8000b68 <__aeabi_d2iz>
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	f7f4 feaf 	bl	8000534 <__aeabi_i2d>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7de:	f7f4 fd5b 	bl	8000298 <__aeabi_dsub>
 800b7e2:	3530      	adds	r5, #48	@ 0x30
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7ec:	f806 5b01 	strb.w	r5, [r6], #1
 800b7f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7f4:	f7f5 f97a 	bl	8000aec <__aeabi_dcmplt>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d172      	bne.n	800b8e2 <_dtoa_r+0x622>
 800b7fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b800:	4911      	ldr	r1, [pc, #68]	@ (800b848 <_dtoa_r+0x588>)
 800b802:	2000      	movs	r0, #0
 800b804:	f7f4 fd48 	bl	8000298 <__aeabi_dsub>
 800b808:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b80c:	f7f5 f96e 	bl	8000aec <__aeabi_dcmplt>
 800b810:	2800      	cmp	r0, #0
 800b812:	f040 80b4 	bne.w	800b97e <_dtoa_r+0x6be>
 800b816:	42a6      	cmp	r6, r4
 800b818:	f43f af70 	beq.w	800b6fc <_dtoa_r+0x43c>
 800b81c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b820:	4b0a      	ldr	r3, [pc, #40]	@ (800b84c <_dtoa_r+0x58c>)
 800b822:	2200      	movs	r2, #0
 800b824:	f7f4 fef0 	bl	8000608 <__aeabi_dmul>
 800b828:	4b08      	ldr	r3, [pc, #32]	@ (800b84c <_dtoa_r+0x58c>)
 800b82a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b82e:	2200      	movs	r2, #0
 800b830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b834:	f7f4 fee8 	bl	8000608 <__aeabi_dmul>
 800b838:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b83c:	e7c4      	b.n	800b7c8 <_dtoa_r+0x508>
 800b83e:	bf00      	nop
 800b840:	0800fed0 	.word	0x0800fed0
 800b844:	0800fea8 	.word	0x0800fea8
 800b848:	3ff00000 	.word	0x3ff00000
 800b84c:	40240000 	.word	0x40240000
 800b850:	401c0000 	.word	0x401c0000
 800b854:	40140000 	.word	0x40140000
 800b858:	3fe00000 	.word	0x3fe00000
 800b85c:	4631      	mov	r1, r6
 800b85e:	4628      	mov	r0, r5
 800b860:	f7f4 fed2 	bl	8000608 <__aeabi_dmul>
 800b864:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b868:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b86a:	4656      	mov	r6, sl
 800b86c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b870:	f7f5 f97a 	bl	8000b68 <__aeabi_d2iz>
 800b874:	4605      	mov	r5, r0
 800b876:	f7f4 fe5d 	bl	8000534 <__aeabi_i2d>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b882:	f7f4 fd09 	bl	8000298 <__aeabi_dsub>
 800b886:	3530      	adds	r5, #48	@ 0x30
 800b888:	f806 5b01 	strb.w	r5, [r6], #1
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	42a6      	cmp	r6, r4
 800b892:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b896:	f04f 0200 	mov.w	r2, #0
 800b89a:	d124      	bne.n	800b8e6 <_dtoa_r+0x626>
 800b89c:	4baf      	ldr	r3, [pc, #700]	@ (800bb5c <_dtoa_r+0x89c>)
 800b89e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b8a2:	f7f4 fcfb 	bl	800029c <__adddf3>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8ae:	f7f5 f93b 	bl	8000b28 <__aeabi_dcmpgt>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d163      	bne.n	800b97e <_dtoa_r+0x6be>
 800b8b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b8ba:	49a8      	ldr	r1, [pc, #672]	@ (800bb5c <_dtoa_r+0x89c>)
 800b8bc:	2000      	movs	r0, #0
 800b8be:	f7f4 fceb 	bl	8000298 <__aeabi_dsub>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8ca:	f7f5 f90f 	bl	8000aec <__aeabi_dcmplt>
 800b8ce:	2800      	cmp	r0, #0
 800b8d0:	f43f af14 	beq.w	800b6fc <_dtoa_r+0x43c>
 800b8d4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b8d6:	1e73      	subs	r3, r6, #1
 800b8d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b8da:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b8de:	2b30      	cmp	r3, #48	@ 0x30
 800b8e0:	d0f8      	beq.n	800b8d4 <_dtoa_r+0x614>
 800b8e2:	4647      	mov	r7, r8
 800b8e4:	e03b      	b.n	800b95e <_dtoa_r+0x69e>
 800b8e6:	4b9e      	ldr	r3, [pc, #632]	@ (800bb60 <_dtoa_r+0x8a0>)
 800b8e8:	f7f4 fe8e 	bl	8000608 <__aeabi_dmul>
 800b8ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8f0:	e7bc      	b.n	800b86c <_dtoa_r+0x5ac>
 800b8f2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b8f6:	4656      	mov	r6, sl
 800b8f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4629      	mov	r1, r5
 800b900:	f7f4 ffac 	bl	800085c <__aeabi_ddiv>
 800b904:	f7f5 f930 	bl	8000b68 <__aeabi_d2iz>
 800b908:	4680      	mov	r8, r0
 800b90a:	f7f4 fe13 	bl	8000534 <__aeabi_i2d>
 800b90e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b912:	f7f4 fe79 	bl	8000608 <__aeabi_dmul>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4620      	mov	r0, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b922:	f7f4 fcb9 	bl	8000298 <__aeabi_dsub>
 800b926:	f806 4b01 	strb.w	r4, [r6], #1
 800b92a:	9d03      	ldr	r5, [sp, #12]
 800b92c:	eba6 040a 	sub.w	r4, r6, sl
 800b930:	42a5      	cmp	r5, r4
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	d133      	bne.n	800b9a0 <_dtoa_r+0x6e0>
 800b938:	f7f4 fcb0 	bl	800029c <__adddf3>
 800b93c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b940:	4604      	mov	r4, r0
 800b942:	460d      	mov	r5, r1
 800b944:	f7f5 f8f0 	bl	8000b28 <__aeabi_dcmpgt>
 800b948:	b9c0      	cbnz	r0, 800b97c <_dtoa_r+0x6bc>
 800b94a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b94e:	4620      	mov	r0, r4
 800b950:	4629      	mov	r1, r5
 800b952:	f7f5 f8c1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b956:	b110      	cbz	r0, 800b95e <_dtoa_r+0x69e>
 800b958:	f018 0f01 	tst.w	r8, #1
 800b95c:	d10e      	bne.n	800b97c <_dtoa_r+0x6bc>
 800b95e:	9902      	ldr	r1, [sp, #8]
 800b960:	4648      	mov	r0, r9
 800b962:	f000 fbbd 	bl	800c0e0 <_Bfree>
 800b966:	2300      	movs	r3, #0
 800b968:	7033      	strb	r3, [r6, #0]
 800b96a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b96c:	3701      	adds	r7, #1
 800b96e:	601f      	str	r7, [r3, #0]
 800b970:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 824b 	beq.w	800be0e <_dtoa_r+0xb4e>
 800b978:	601e      	str	r6, [r3, #0]
 800b97a:	e248      	b.n	800be0e <_dtoa_r+0xb4e>
 800b97c:	46b8      	mov	r8, r7
 800b97e:	4633      	mov	r3, r6
 800b980:	461e      	mov	r6, r3
 800b982:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b986:	2a39      	cmp	r2, #57	@ 0x39
 800b988:	d106      	bne.n	800b998 <_dtoa_r+0x6d8>
 800b98a:	459a      	cmp	sl, r3
 800b98c:	d1f8      	bne.n	800b980 <_dtoa_r+0x6c0>
 800b98e:	2230      	movs	r2, #48	@ 0x30
 800b990:	f108 0801 	add.w	r8, r8, #1
 800b994:	f88a 2000 	strb.w	r2, [sl]
 800b998:	781a      	ldrb	r2, [r3, #0]
 800b99a:	3201      	adds	r2, #1
 800b99c:	701a      	strb	r2, [r3, #0]
 800b99e:	e7a0      	b.n	800b8e2 <_dtoa_r+0x622>
 800b9a0:	4b6f      	ldr	r3, [pc, #444]	@ (800bb60 <_dtoa_r+0x8a0>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f7f4 fe30 	bl	8000608 <__aeabi_dmul>
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	460d      	mov	r5, r1
 800b9b0:	f7f5 f892 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d09f      	beq.n	800b8f8 <_dtoa_r+0x638>
 800b9b8:	e7d1      	b.n	800b95e <_dtoa_r+0x69e>
 800b9ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	f000 80ea 	beq.w	800bb96 <_dtoa_r+0x8d6>
 800b9c2:	9a07      	ldr	r2, [sp, #28]
 800b9c4:	2a01      	cmp	r2, #1
 800b9c6:	f300 80cd 	bgt.w	800bb64 <_dtoa_r+0x8a4>
 800b9ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9cc:	2a00      	cmp	r2, #0
 800b9ce:	f000 80c1 	beq.w	800bb54 <_dtoa_r+0x894>
 800b9d2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b9d6:	9c08      	ldr	r4, [sp, #32]
 800b9d8:	9e00      	ldr	r6, [sp, #0]
 800b9da:	9a00      	ldr	r2, [sp, #0]
 800b9dc:	441a      	add	r2, r3
 800b9de:	9200      	str	r2, [sp, #0]
 800b9e0:	9a06      	ldr	r2, [sp, #24]
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	441a      	add	r2, r3
 800b9e6:	4648      	mov	r0, r9
 800b9e8:	9206      	str	r2, [sp, #24]
 800b9ea:	f000 fc2d 	bl	800c248 <__i2b>
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	b166      	cbz	r6, 800ba0c <_dtoa_r+0x74c>
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	dd09      	ble.n	800ba0c <_dtoa_r+0x74c>
 800b9f8:	42b3      	cmp	r3, r6
 800b9fa:	9a00      	ldr	r2, [sp, #0]
 800b9fc:	bfa8      	it	ge
 800b9fe:	4633      	movge	r3, r6
 800ba00:	1ad2      	subs	r2, r2, r3
 800ba02:	9200      	str	r2, [sp, #0]
 800ba04:	9a06      	ldr	r2, [sp, #24]
 800ba06:	1af6      	subs	r6, r6, r3
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	9306      	str	r3, [sp, #24]
 800ba0c:	9b08      	ldr	r3, [sp, #32]
 800ba0e:	b30b      	cbz	r3, 800ba54 <_dtoa_r+0x794>
 800ba10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80c6 	beq.w	800bba4 <_dtoa_r+0x8e4>
 800ba18:	2c00      	cmp	r4, #0
 800ba1a:	f000 80c0 	beq.w	800bb9e <_dtoa_r+0x8de>
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4622      	mov	r2, r4
 800ba22:	4648      	mov	r0, r9
 800ba24:	f000 fcc8 	bl	800c3b8 <__pow5mult>
 800ba28:	9a02      	ldr	r2, [sp, #8]
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	4648      	mov	r0, r9
 800ba30:	f000 fc20 	bl	800c274 <__multiply>
 800ba34:	9902      	ldr	r1, [sp, #8]
 800ba36:	4680      	mov	r8, r0
 800ba38:	4648      	mov	r0, r9
 800ba3a:	f000 fb51 	bl	800c0e0 <_Bfree>
 800ba3e:	9b08      	ldr	r3, [sp, #32]
 800ba40:	1b1b      	subs	r3, r3, r4
 800ba42:	9308      	str	r3, [sp, #32]
 800ba44:	f000 80b1 	beq.w	800bbaa <_dtoa_r+0x8ea>
 800ba48:	9a08      	ldr	r2, [sp, #32]
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	4648      	mov	r0, r9
 800ba4e:	f000 fcb3 	bl	800c3b8 <__pow5mult>
 800ba52:	9002      	str	r0, [sp, #8]
 800ba54:	2101      	movs	r1, #1
 800ba56:	4648      	mov	r0, r9
 800ba58:	f000 fbf6 	bl	800c248 <__i2b>
 800ba5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba5e:	4604      	mov	r4, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 81d8 	beq.w	800be16 <_dtoa_r+0xb56>
 800ba66:	461a      	mov	r2, r3
 800ba68:	4601      	mov	r1, r0
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f000 fca4 	bl	800c3b8 <__pow5mult>
 800ba70:	9b07      	ldr	r3, [sp, #28]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	4604      	mov	r4, r0
 800ba76:	f300 809f 	bgt.w	800bbb8 <_dtoa_r+0x8f8>
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 8097 	bne.w	800bbb0 <_dtoa_r+0x8f0>
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f040 8093 	bne.w	800bbb4 <_dtoa_r+0x8f4>
 800ba8e:	9b05      	ldr	r3, [sp, #20]
 800ba90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba94:	0d1b      	lsrs	r3, r3, #20
 800ba96:	051b      	lsls	r3, r3, #20
 800ba98:	b133      	cbz	r3, 800baa8 <_dtoa_r+0x7e8>
 800ba9a:	9b00      	ldr	r3, [sp, #0]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	9b06      	ldr	r3, [sp, #24]
 800baa2:	3301      	adds	r3, #1
 800baa4:	9306      	str	r3, [sp, #24]
 800baa6:	2301      	movs	r3, #1
 800baa8:	9308      	str	r3, [sp, #32]
 800baaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 81b8 	beq.w	800be22 <_dtoa_r+0xb62>
 800bab2:	6923      	ldr	r3, [r4, #16]
 800bab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bab8:	6918      	ldr	r0, [r3, #16]
 800baba:	f000 fb79 	bl	800c1b0 <__hi0bits>
 800babe:	f1c0 0020 	rsb	r0, r0, #32
 800bac2:	9b06      	ldr	r3, [sp, #24]
 800bac4:	4418      	add	r0, r3
 800bac6:	f010 001f 	ands.w	r0, r0, #31
 800baca:	f000 8082 	beq.w	800bbd2 <_dtoa_r+0x912>
 800bace:	f1c0 0320 	rsb	r3, r0, #32
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	dd73      	ble.n	800bbbe <_dtoa_r+0x8fe>
 800bad6:	9b00      	ldr	r3, [sp, #0]
 800bad8:	f1c0 001c 	rsb	r0, r0, #28
 800badc:	4403      	add	r3, r0
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	9b06      	ldr	r3, [sp, #24]
 800bae2:	4403      	add	r3, r0
 800bae4:	4406      	add	r6, r0
 800bae6:	9306      	str	r3, [sp, #24]
 800bae8:	9b00      	ldr	r3, [sp, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	dd05      	ble.n	800bafa <_dtoa_r+0x83a>
 800baee:	9902      	ldr	r1, [sp, #8]
 800baf0:	461a      	mov	r2, r3
 800baf2:	4648      	mov	r0, r9
 800baf4:	f000 fcba 	bl	800c46c <__lshift>
 800baf8:	9002      	str	r0, [sp, #8]
 800bafa:	9b06      	ldr	r3, [sp, #24]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dd05      	ble.n	800bb0c <_dtoa_r+0x84c>
 800bb00:	4621      	mov	r1, r4
 800bb02:	461a      	mov	r2, r3
 800bb04:	4648      	mov	r0, r9
 800bb06:	f000 fcb1 	bl	800c46c <__lshift>
 800bb0a:	4604      	mov	r4, r0
 800bb0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d061      	beq.n	800bbd6 <_dtoa_r+0x916>
 800bb12:	9802      	ldr	r0, [sp, #8]
 800bb14:	4621      	mov	r1, r4
 800bb16:	f000 fd15 	bl	800c544 <__mcmp>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	da5b      	bge.n	800bbd6 <_dtoa_r+0x916>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9902      	ldr	r1, [sp, #8]
 800bb22:	220a      	movs	r2, #10
 800bb24:	4648      	mov	r0, r9
 800bb26:	f000 fafd 	bl	800c124 <__multadd>
 800bb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2c:	9002      	str	r0, [sp, #8]
 800bb2e:	f107 38ff 	add.w	r8, r7, #4294967295
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 8177 	beq.w	800be26 <_dtoa_r+0xb66>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	220a      	movs	r2, #10
 800bb3e:	4648      	mov	r0, r9
 800bb40:	f000 faf0 	bl	800c124 <__multadd>
 800bb44:	f1bb 0f00 	cmp.w	fp, #0
 800bb48:	4605      	mov	r5, r0
 800bb4a:	dc6f      	bgt.n	800bc2c <_dtoa_r+0x96c>
 800bb4c:	9b07      	ldr	r3, [sp, #28]
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	dc49      	bgt.n	800bbe6 <_dtoa_r+0x926>
 800bb52:	e06b      	b.n	800bc2c <_dtoa_r+0x96c>
 800bb54:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bb56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bb5a:	e73c      	b.n	800b9d6 <_dtoa_r+0x716>
 800bb5c:	3fe00000 	.word	0x3fe00000
 800bb60:	40240000 	.word	0x40240000
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	1e5c      	subs	r4, r3, #1
 800bb68:	9b08      	ldr	r3, [sp, #32]
 800bb6a:	42a3      	cmp	r3, r4
 800bb6c:	db09      	blt.n	800bb82 <_dtoa_r+0x8c2>
 800bb6e:	1b1c      	subs	r4, r3, r4
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f6bf af30 	bge.w	800b9d8 <_dtoa_r+0x718>
 800bb78:	9b00      	ldr	r3, [sp, #0]
 800bb7a:	9a03      	ldr	r2, [sp, #12]
 800bb7c:	1a9e      	subs	r6, r3, r2
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e72b      	b.n	800b9da <_dtoa_r+0x71a>
 800bb82:	9b08      	ldr	r3, [sp, #32]
 800bb84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bb86:	9408      	str	r4, [sp, #32]
 800bb88:	1ae3      	subs	r3, r4, r3
 800bb8a:	441a      	add	r2, r3
 800bb8c:	9e00      	ldr	r6, [sp, #0]
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	920d      	str	r2, [sp, #52]	@ 0x34
 800bb92:	2400      	movs	r4, #0
 800bb94:	e721      	b.n	800b9da <_dtoa_r+0x71a>
 800bb96:	9c08      	ldr	r4, [sp, #32]
 800bb98:	9e00      	ldr	r6, [sp, #0]
 800bb9a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bb9c:	e728      	b.n	800b9f0 <_dtoa_r+0x730>
 800bb9e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bba2:	e751      	b.n	800ba48 <_dtoa_r+0x788>
 800bba4:	9a08      	ldr	r2, [sp, #32]
 800bba6:	9902      	ldr	r1, [sp, #8]
 800bba8:	e750      	b.n	800ba4c <_dtoa_r+0x78c>
 800bbaa:	f8cd 8008 	str.w	r8, [sp, #8]
 800bbae:	e751      	b.n	800ba54 <_dtoa_r+0x794>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	e779      	b.n	800baa8 <_dtoa_r+0x7e8>
 800bbb4:	9b04      	ldr	r3, [sp, #16]
 800bbb6:	e777      	b.n	800baa8 <_dtoa_r+0x7e8>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	9308      	str	r3, [sp, #32]
 800bbbc:	e779      	b.n	800bab2 <_dtoa_r+0x7f2>
 800bbbe:	d093      	beq.n	800bae8 <_dtoa_r+0x828>
 800bbc0:	9a00      	ldr	r2, [sp, #0]
 800bbc2:	331c      	adds	r3, #28
 800bbc4:	441a      	add	r2, r3
 800bbc6:	9200      	str	r2, [sp, #0]
 800bbc8:	9a06      	ldr	r2, [sp, #24]
 800bbca:	441a      	add	r2, r3
 800bbcc:	441e      	add	r6, r3
 800bbce:	9206      	str	r2, [sp, #24]
 800bbd0:	e78a      	b.n	800bae8 <_dtoa_r+0x828>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	e7f4      	b.n	800bbc0 <_dtoa_r+0x900>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	46b8      	mov	r8, r7
 800bbdc:	dc20      	bgt.n	800bc20 <_dtoa_r+0x960>
 800bbde:	469b      	mov	fp, r3
 800bbe0:	9b07      	ldr	r3, [sp, #28]
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	dd1e      	ble.n	800bc24 <_dtoa_r+0x964>
 800bbe6:	f1bb 0f00 	cmp.w	fp, #0
 800bbea:	f47f adb1 	bne.w	800b750 <_dtoa_r+0x490>
 800bbee:	4621      	mov	r1, r4
 800bbf0:	465b      	mov	r3, fp
 800bbf2:	2205      	movs	r2, #5
 800bbf4:	4648      	mov	r0, r9
 800bbf6:	f000 fa95 	bl	800c124 <__multadd>
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	9802      	ldr	r0, [sp, #8]
 800bc00:	f000 fca0 	bl	800c544 <__mcmp>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f77f ada3 	ble.w	800b750 <_dtoa_r+0x490>
 800bc0a:	4656      	mov	r6, sl
 800bc0c:	2331      	movs	r3, #49	@ 0x31
 800bc0e:	f806 3b01 	strb.w	r3, [r6], #1
 800bc12:	f108 0801 	add.w	r8, r8, #1
 800bc16:	e59f      	b.n	800b758 <_dtoa_r+0x498>
 800bc18:	9c03      	ldr	r4, [sp, #12]
 800bc1a:	46b8      	mov	r8, r7
 800bc1c:	4625      	mov	r5, r4
 800bc1e:	e7f4      	b.n	800bc0a <_dtoa_r+0x94a>
 800bc20:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f000 8101 	beq.w	800be2e <_dtoa_r+0xb6e>
 800bc2c:	2e00      	cmp	r6, #0
 800bc2e:	dd05      	ble.n	800bc3c <_dtoa_r+0x97c>
 800bc30:	4629      	mov	r1, r5
 800bc32:	4632      	mov	r2, r6
 800bc34:	4648      	mov	r0, r9
 800bc36:	f000 fc19 	bl	800c46c <__lshift>
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	9b08      	ldr	r3, [sp, #32]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d05c      	beq.n	800bcfc <_dtoa_r+0xa3c>
 800bc42:	6869      	ldr	r1, [r5, #4]
 800bc44:	4648      	mov	r0, r9
 800bc46:	f000 fa0b 	bl	800c060 <_Balloc>
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	b928      	cbnz	r0, 800bc5a <_dtoa_r+0x99a>
 800bc4e:	4b82      	ldr	r3, [pc, #520]	@ (800be58 <_dtoa_r+0xb98>)
 800bc50:	4602      	mov	r2, r0
 800bc52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bc56:	f7ff bb4a 	b.w	800b2ee <_dtoa_r+0x2e>
 800bc5a:	692a      	ldr	r2, [r5, #16]
 800bc5c:	3202      	adds	r2, #2
 800bc5e:	0092      	lsls	r2, r2, #2
 800bc60:	f105 010c 	add.w	r1, r5, #12
 800bc64:	300c      	adds	r0, #12
 800bc66:	f000 ffa3 	bl	800cbb0 <memcpy>
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4648      	mov	r0, r9
 800bc70:	f000 fbfc 	bl	800c46c <__lshift>
 800bc74:	f10a 0301 	add.w	r3, sl, #1
 800bc78:	9300      	str	r3, [sp, #0]
 800bc7a:	eb0a 030b 	add.w	r3, sl, fp
 800bc7e:	9308      	str	r3, [sp, #32]
 800bc80:	9b04      	ldr	r3, [sp, #16]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	462f      	mov	r7, r5
 800bc88:	9306      	str	r3, [sp, #24]
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	9b00      	ldr	r3, [sp, #0]
 800bc8e:	9802      	ldr	r0, [sp, #8]
 800bc90:	4621      	mov	r1, r4
 800bc92:	f103 3bff 	add.w	fp, r3, #4294967295
 800bc96:	f7ff fa88 	bl	800b1aa <quorem>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	3330      	adds	r3, #48	@ 0x30
 800bc9e:	9003      	str	r0, [sp, #12]
 800bca0:	4639      	mov	r1, r7
 800bca2:	9802      	ldr	r0, [sp, #8]
 800bca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca6:	f000 fc4d 	bl	800c544 <__mcmp>
 800bcaa:	462a      	mov	r2, r5
 800bcac:	9004      	str	r0, [sp, #16]
 800bcae:	4621      	mov	r1, r4
 800bcb0:	4648      	mov	r0, r9
 800bcb2:	f000 fc63 	bl	800c57c <__mdiff>
 800bcb6:	68c2      	ldr	r2, [r0, #12]
 800bcb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcba:	4606      	mov	r6, r0
 800bcbc:	bb02      	cbnz	r2, 800bd00 <_dtoa_r+0xa40>
 800bcbe:	4601      	mov	r1, r0
 800bcc0:	9802      	ldr	r0, [sp, #8]
 800bcc2:	f000 fc3f 	bl	800c544 <__mcmp>
 800bcc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc8:	4602      	mov	r2, r0
 800bcca:	4631      	mov	r1, r6
 800bccc:	4648      	mov	r0, r9
 800bcce:	920c      	str	r2, [sp, #48]	@ 0x30
 800bcd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcd2:	f000 fa05 	bl	800c0e0 <_Bfree>
 800bcd6:	9b07      	ldr	r3, [sp, #28]
 800bcd8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bcda:	9e00      	ldr	r6, [sp, #0]
 800bcdc:	ea42 0103 	orr.w	r1, r2, r3
 800bce0:	9b06      	ldr	r3, [sp, #24]
 800bce2:	4319      	orrs	r1, r3
 800bce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce6:	d10d      	bne.n	800bd04 <_dtoa_r+0xa44>
 800bce8:	2b39      	cmp	r3, #57	@ 0x39
 800bcea:	d027      	beq.n	800bd3c <_dtoa_r+0xa7c>
 800bcec:	9a04      	ldr	r2, [sp, #16]
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	dd01      	ble.n	800bcf6 <_dtoa_r+0xa36>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	3331      	adds	r3, #49	@ 0x31
 800bcf6:	f88b 3000 	strb.w	r3, [fp]
 800bcfa:	e52e      	b.n	800b75a <_dtoa_r+0x49a>
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	e7b9      	b.n	800bc74 <_dtoa_r+0x9b4>
 800bd00:	2201      	movs	r2, #1
 800bd02:	e7e2      	b.n	800bcca <_dtoa_r+0xa0a>
 800bd04:	9904      	ldr	r1, [sp, #16]
 800bd06:	2900      	cmp	r1, #0
 800bd08:	db04      	blt.n	800bd14 <_dtoa_r+0xa54>
 800bd0a:	9807      	ldr	r0, [sp, #28]
 800bd0c:	4301      	orrs	r1, r0
 800bd0e:	9806      	ldr	r0, [sp, #24]
 800bd10:	4301      	orrs	r1, r0
 800bd12:	d120      	bne.n	800bd56 <_dtoa_r+0xa96>
 800bd14:	2a00      	cmp	r2, #0
 800bd16:	ddee      	ble.n	800bcf6 <_dtoa_r+0xa36>
 800bd18:	9902      	ldr	r1, [sp, #8]
 800bd1a:	9300      	str	r3, [sp, #0]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	4648      	mov	r0, r9
 800bd20:	f000 fba4 	bl	800c46c <__lshift>
 800bd24:	4621      	mov	r1, r4
 800bd26:	9002      	str	r0, [sp, #8]
 800bd28:	f000 fc0c 	bl	800c544 <__mcmp>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	dc02      	bgt.n	800bd38 <_dtoa_r+0xa78>
 800bd32:	d1e0      	bne.n	800bcf6 <_dtoa_r+0xa36>
 800bd34:	07da      	lsls	r2, r3, #31
 800bd36:	d5de      	bpl.n	800bcf6 <_dtoa_r+0xa36>
 800bd38:	2b39      	cmp	r3, #57	@ 0x39
 800bd3a:	d1da      	bne.n	800bcf2 <_dtoa_r+0xa32>
 800bd3c:	2339      	movs	r3, #57	@ 0x39
 800bd3e:	f88b 3000 	strb.w	r3, [fp]
 800bd42:	4633      	mov	r3, r6
 800bd44:	461e      	mov	r6, r3
 800bd46:	3b01      	subs	r3, #1
 800bd48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bd4c:	2a39      	cmp	r2, #57	@ 0x39
 800bd4e:	d04e      	beq.n	800bdee <_dtoa_r+0xb2e>
 800bd50:	3201      	adds	r2, #1
 800bd52:	701a      	strb	r2, [r3, #0]
 800bd54:	e501      	b.n	800b75a <_dtoa_r+0x49a>
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	dd03      	ble.n	800bd62 <_dtoa_r+0xaa2>
 800bd5a:	2b39      	cmp	r3, #57	@ 0x39
 800bd5c:	d0ee      	beq.n	800bd3c <_dtoa_r+0xa7c>
 800bd5e:	3301      	adds	r3, #1
 800bd60:	e7c9      	b.n	800bcf6 <_dtoa_r+0xa36>
 800bd62:	9a00      	ldr	r2, [sp, #0]
 800bd64:	9908      	ldr	r1, [sp, #32]
 800bd66:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bd6a:	428a      	cmp	r2, r1
 800bd6c:	d028      	beq.n	800bdc0 <_dtoa_r+0xb00>
 800bd6e:	9902      	ldr	r1, [sp, #8]
 800bd70:	2300      	movs	r3, #0
 800bd72:	220a      	movs	r2, #10
 800bd74:	4648      	mov	r0, r9
 800bd76:	f000 f9d5 	bl	800c124 <__multadd>
 800bd7a:	42af      	cmp	r7, r5
 800bd7c:	9002      	str	r0, [sp, #8]
 800bd7e:	f04f 0300 	mov.w	r3, #0
 800bd82:	f04f 020a 	mov.w	r2, #10
 800bd86:	4639      	mov	r1, r7
 800bd88:	4648      	mov	r0, r9
 800bd8a:	d107      	bne.n	800bd9c <_dtoa_r+0xadc>
 800bd8c:	f000 f9ca 	bl	800c124 <__multadd>
 800bd90:	4607      	mov	r7, r0
 800bd92:	4605      	mov	r5, r0
 800bd94:	9b00      	ldr	r3, [sp, #0]
 800bd96:	3301      	adds	r3, #1
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	e777      	b.n	800bc8c <_dtoa_r+0x9cc>
 800bd9c:	f000 f9c2 	bl	800c124 <__multadd>
 800bda0:	4629      	mov	r1, r5
 800bda2:	4607      	mov	r7, r0
 800bda4:	2300      	movs	r3, #0
 800bda6:	220a      	movs	r2, #10
 800bda8:	4648      	mov	r0, r9
 800bdaa:	f000 f9bb 	bl	800c124 <__multadd>
 800bdae:	4605      	mov	r5, r0
 800bdb0:	e7f0      	b.n	800bd94 <_dtoa_r+0xad4>
 800bdb2:	f1bb 0f00 	cmp.w	fp, #0
 800bdb6:	bfcc      	ite	gt
 800bdb8:	465e      	movgt	r6, fp
 800bdba:	2601      	movle	r6, #1
 800bdbc:	4456      	add	r6, sl
 800bdbe:	2700      	movs	r7, #0
 800bdc0:	9902      	ldr	r1, [sp, #8]
 800bdc2:	9300      	str	r3, [sp, #0]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	4648      	mov	r0, r9
 800bdc8:	f000 fb50 	bl	800c46c <__lshift>
 800bdcc:	4621      	mov	r1, r4
 800bdce:	9002      	str	r0, [sp, #8]
 800bdd0:	f000 fbb8 	bl	800c544 <__mcmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	dcb4      	bgt.n	800bd42 <_dtoa_r+0xa82>
 800bdd8:	d102      	bne.n	800bde0 <_dtoa_r+0xb20>
 800bdda:	9b00      	ldr	r3, [sp, #0]
 800bddc:	07db      	lsls	r3, r3, #31
 800bdde:	d4b0      	bmi.n	800bd42 <_dtoa_r+0xa82>
 800bde0:	4633      	mov	r3, r6
 800bde2:	461e      	mov	r6, r3
 800bde4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bde8:	2a30      	cmp	r2, #48	@ 0x30
 800bdea:	d0fa      	beq.n	800bde2 <_dtoa_r+0xb22>
 800bdec:	e4b5      	b.n	800b75a <_dtoa_r+0x49a>
 800bdee:	459a      	cmp	sl, r3
 800bdf0:	d1a8      	bne.n	800bd44 <_dtoa_r+0xa84>
 800bdf2:	2331      	movs	r3, #49	@ 0x31
 800bdf4:	f108 0801 	add.w	r8, r8, #1
 800bdf8:	f88a 3000 	strb.w	r3, [sl]
 800bdfc:	e4ad      	b.n	800b75a <_dtoa_r+0x49a>
 800bdfe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be00:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800be5c <_dtoa_r+0xb9c>
 800be04:	b11b      	cbz	r3, 800be0e <_dtoa_r+0xb4e>
 800be06:	f10a 0308 	add.w	r3, sl, #8
 800be0a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800be0c:	6013      	str	r3, [r2, #0]
 800be0e:	4650      	mov	r0, sl
 800be10:	b017      	add	sp, #92	@ 0x5c
 800be12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be16:	9b07      	ldr	r3, [sp, #28]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	f77f ae2e 	ble.w	800ba7a <_dtoa_r+0x7ba>
 800be1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be20:	9308      	str	r3, [sp, #32]
 800be22:	2001      	movs	r0, #1
 800be24:	e64d      	b.n	800bac2 <_dtoa_r+0x802>
 800be26:	f1bb 0f00 	cmp.w	fp, #0
 800be2a:	f77f aed9 	ble.w	800bbe0 <_dtoa_r+0x920>
 800be2e:	4656      	mov	r6, sl
 800be30:	9802      	ldr	r0, [sp, #8]
 800be32:	4621      	mov	r1, r4
 800be34:	f7ff f9b9 	bl	800b1aa <quorem>
 800be38:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800be3c:	f806 3b01 	strb.w	r3, [r6], #1
 800be40:	eba6 020a 	sub.w	r2, r6, sl
 800be44:	4593      	cmp	fp, r2
 800be46:	ddb4      	ble.n	800bdb2 <_dtoa_r+0xaf2>
 800be48:	9902      	ldr	r1, [sp, #8]
 800be4a:	2300      	movs	r3, #0
 800be4c:	220a      	movs	r2, #10
 800be4e:	4648      	mov	r0, r9
 800be50:	f000 f968 	bl	800c124 <__multadd>
 800be54:	9002      	str	r0, [sp, #8]
 800be56:	e7eb      	b.n	800be30 <_dtoa_r+0xb70>
 800be58:	0800fdd4 	.word	0x0800fdd4
 800be5c:	0800fd58 	.word	0x0800fd58

0800be60 <_free_r>:
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	4605      	mov	r5, r0
 800be64:	2900      	cmp	r1, #0
 800be66:	d041      	beq.n	800beec <_free_r+0x8c>
 800be68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be6c:	1f0c      	subs	r4, r1, #4
 800be6e:	2b00      	cmp	r3, #0
 800be70:	bfb8      	it	lt
 800be72:	18e4      	addlt	r4, r4, r3
 800be74:	f000 f8e8 	bl	800c048 <__malloc_lock>
 800be78:	4a1d      	ldr	r2, [pc, #116]	@ (800bef0 <_free_r+0x90>)
 800be7a:	6813      	ldr	r3, [r2, #0]
 800be7c:	b933      	cbnz	r3, 800be8c <_free_r+0x2c>
 800be7e:	6063      	str	r3, [r4, #4]
 800be80:	6014      	str	r4, [r2, #0]
 800be82:	4628      	mov	r0, r5
 800be84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be88:	f000 b8e4 	b.w	800c054 <__malloc_unlock>
 800be8c:	42a3      	cmp	r3, r4
 800be8e:	d908      	bls.n	800bea2 <_free_r+0x42>
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	1821      	adds	r1, r4, r0
 800be94:	428b      	cmp	r3, r1
 800be96:	bf01      	itttt	eq
 800be98:	6819      	ldreq	r1, [r3, #0]
 800be9a:	685b      	ldreq	r3, [r3, #4]
 800be9c:	1809      	addeq	r1, r1, r0
 800be9e:	6021      	streq	r1, [r4, #0]
 800bea0:	e7ed      	b.n	800be7e <_free_r+0x1e>
 800bea2:	461a      	mov	r2, r3
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	b10b      	cbz	r3, 800beac <_free_r+0x4c>
 800bea8:	42a3      	cmp	r3, r4
 800beaa:	d9fa      	bls.n	800bea2 <_free_r+0x42>
 800beac:	6811      	ldr	r1, [r2, #0]
 800beae:	1850      	adds	r0, r2, r1
 800beb0:	42a0      	cmp	r0, r4
 800beb2:	d10b      	bne.n	800becc <_free_r+0x6c>
 800beb4:	6820      	ldr	r0, [r4, #0]
 800beb6:	4401      	add	r1, r0
 800beb8:	1850      	adds	r0, r2, r1
 800beba:	4283      	cmp	r3, r0
 800bebc:	6011      	str	r1, [r2, #0]
 800bebe:	d1e0      	bne.n	800be82 <_free_r+0x22>
 800bec0:	6818      	ldr	r0, [r3, #0]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	6053      	str	r3, [r2, #4]
 800bec6:	4408      	add	r0, r1
 800bec8:	6010      	str	r0, [r2, #0]
 800beca:	e7da      	b.n	800be82 <_free_r+0x22>
 800becc:	d902      	bls.n	800bed4 <_free_r+0x74>
 800bece:	230c      	movs	r3, #12
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	e7d6      	b.n	800be82 <_free_r+0x22>
 800bed4:	6820      	ldr	r0, [r4, #0]
 800bed6:	1821      	adds	r1, r4, r0
 800bed8:	428b      	cmp	r3, r1
 800beda:	bf04      	itt	eq
 800bedc:	6819      	ldreq	r1, [r3, #0]
 800bede:	685b      	ldreq	r3, [r3, #4]
 800bee0:	6063      	str	r3, [r4, #4]
 800bee2:	bf04      	itt	eq
 800bee4:	1809      	addeq	r1, r1, r0
 800bee6:	6021      	streq	r1, [r4, #0]
 800bee8:	6054      	str	r4, [r2, #4]
 800beea:	e7ca      	b.n	800be82 <_free_r+0x22>
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	bf00      	nop
 800bef0:	2000164c 	.word	0x2000164c

0800bef4 <malloc>:
 800bef4:	4b02      	ldr	r3, [pc, #8]	@ (800bf00 <malloc+0xc>)
 800bef6:	4601      	mov	r1, r0
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	f000 b825 	b.w	800bf48 <_malloc_r>
 800befe:	bf00      	nop
 800bf00:	20000028 	.word	0x20000028

0800bf04 <sbrk_aligned>:
 800bf04:	b570      	push	{r4, r5, r6, lr}
 800bf06:	4e0f      	ldr	r6, [pc, #60]	@ (800bf44 <sbrk_aligned+0x40>)
 800bf08:	460c      	mov	r4, r1
 800bf0a:	6831      	ldr	r1, [r6, #0]
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	b911      	cbnz	r1, 800bf16 <sbrk_aligned+0x12>
 800bf10:	f000 fe3e 	bl	800cb90 <_sbrk_r>
 800bf14:	6030      	str	r0, [r6, #0]
 800bf16:	4621      	mov	r1, r4
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f000 fe39 	bl	800cb90 <_sbrk_r>
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	d103      	bne.n	800bf2a <sbrk_aligned+0x26>
 800bf22:	f04f 34ff 	mov.w	r4, #4294967295
 800bf26:	4620      	mov	r0, r4
 800bf28:	bd70      	pop	{r4, r5, r6, pc}
 800bf2a:	1cc4      	adds	r4, r0, #3
 800bf2c:	f024 0403 	bic.w	r4, r4, #3
 800bf30:	42a0      	cmp	r0, r4
 800bf32:	d0f8      	beq.n	800bf26 <sbrk_aligned+0x22>
 800bf34:	1a21      	subs	r1, r4, r0
 800bf36:	4628      	mov	r0, r5
 800bf38:	f000 fe2a 	bl	800cb90 <_sbrk_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d1f2      	bne.n	800bf26 <sbrk_aligned+0x22>
 800bf40:	e7ef      	b.n	800bf22 <sbrk_aligned+0x1e>
 800bf42:	bf00      	nop
 800bf44:	20001648 	.word	0x20001648

0800bf48 <_malloc_r>:
 800bf48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf4c:	1ccd      	adds	r5, r1, #3
 800bf4e:	f025 0503 	bic.w	r5, r5, #3
 800bf52:	3508      	adds	r5, #8
 800bf54:	2d0c      	cmp	r5, #12
 800bf56:	bf38      	it	cc
 800bf58:	250c      	movcc	r5, #12
 800bf5a:	2d00      	cmp	r5, #0
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	db01      	blt.n	800bf64 <_malloc_r+0x1c>
 800bf60:	42a9      	cmp	r1, r5
 800bf62:	d904      	bls.n	800bf6e <_malloc_r+0x26>
 800bf64:	230c      	movs	r3, #12
 800bf66:	6033      	str	r3, [r6, #0]
 800bf68:	2000      	movs	r0, #0
 800bf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c044 <_malloc_r+0xfc>
 800bf72:	f000 f869 	bl	800c048 <__malloc_lock>
 800bf76:	f8d8 3000 	ldr.w	r3, [r8]
 800bf7a:	461c      	mov	r4, r3
 800bf7c:	bb44      	cbnz	r4, 800bfd0 <_malloc_r+0x88>
 800bf7e:	4629      	mov	r1, r5
 800bf80:	4630      	mov	r0, r6
 800bf82:	f7ff ffbf 	bl	800bf04 <sbrk_aligned>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	4604      	mov	r4, r0
 800bf8a:	d158      	bne.n	800c03e <_malloc_r+0xf6>
 800bf8c:	f8d8 4000 	ldr.w	r4, [r8]
 800bf90:	4627      	mov	r7, r4
 800bf92:	2f00      	cmp	r7, #0
 800bf94:	d143      	bne.n	800c01e <_malloc_r+0xd6>
 800bf96:	2c00      	cmp	r4, #0
 800bf98:	d04b      	beq.n	800c032 <_malloc_r+0xea>
 800bf9a:	6823      	ldr	r3, [r4, #0]
 800bf9c:	4639      	mov	r1, r7
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	eb04 0903 	add.w	r9, r4, r3
 800bfa4:	f000 fdf4 	bl	800cb90 <_sbrk_r>
 800bfa8:	4581      	cmp	r9, r0
 800bfaa:	d142      	bne.n	800c032 <_malloc_r+0xea>
 800bfac:	6821      	ldr	r1, [r4, #0]
 800bfae:	1a6d      	subs	r5, r5, r1
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f7ff ffa6 	bl	800bf04 <sbrk_aligned>
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d03a      	beq.n	800c032 <_malloc_r+0xea>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	442b      	add	r3, r5
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	f8d8 3000 	ldr.w	r3, [r8]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	bb62      	cbnz	r2, 800c024 <_malloc_r+0xdc>
 800bfca:	f8c8 7000 	str.w	r7, [r8]
 800bfce:	e00f      	b.n	800bff0 <_malloc_r+0xa8>
 800bfd0:	6822      	ldr	r2, [r4, #0]
 800bfd2:	1b52      	subs	r2, r2, r5
 800bfd4:	d420      	bmi.n	800c018 <_malloc_r+0xd0>
 800bfd6:	2a0b      	cmp	r2, #11
 800bfd8:	d917      	bls.n	800c00a <_malloc_r+0xc2>
 800bfda:	1961      	adds	r1, r4, r5
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	6025      	str	r5, [r4, #0]
 800bfe0:	bf18      	it	ne
 800bfe2:	6059      	strne	r1, [r3, #4]
 800bfe4:	6863      	ldr	r3, [r4, #4]
 800bfe6:	bf08      	it	eq
 800bfe8:	f8c8 1000 	streq.w	r1, [r8]
 800bfec:	5162      	str	r2, [r4, r5]
 800bfee:	604b      	str	r3, [r1, #4]
 800bff0:	4630      	mov	r0, r6
 800bff2:	f000 f82f 	bl	800c054 <__malloc_unlock>
 800bff6:	f104 000b 	add.w	r0, r4, #11
 800bffa:	1d23      	adds	r3, r4, #4
 800bffc:	f020 0007 	bic.w	r0, r0, #7
 800c000:	1ac2      	subs	r2, r0, r3
 800c002:	bf1c      	itt	ne
 800c004:	1a1b      	subne	r3, r3, r0
 800c006:	50a3      	strne	r3, [r4, r2]
 800c008:	e7af      	b.n	800bf6a <_malloc_r+0x22>
 800c00a:	6862      	ldr	r2, [r4, #4]
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	bf0c      	ite	eq
 800c010:	f8c8 2000 	streq.w	r2, [r8]
 800c014:	605a      	strne	r2, [r3, #4]
 800c016:	e7eb      	b.n	800bff0 <_malloc_r+0xa8>
 800c018:	4623      	mov	r3, r4
 800c01a:	6864      	ldr	r4, [r4, #4]
 800c01c:	e7ae      	b.n	800bf7c <_malloc_r+0x34>
 800c01e:	463c      	mov	r4, r7
 800c020:	687f      	ldr	r7, [r7, #4]
 800c022:	e7b6      	b.n	800bf92 <_malloc_r+0x4a>
 800c024:	461a      	mov	r2, r3
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	42a3      	cmp	r3, r4
 800c02a:	d1fb      	bne.n	800c024 <_malloc_r+0xdc>
 800c02c:	2300      	movs	r3, #0
 800c02e:	6053      	str	r3, [r2, #4]
 800c030:	e7de      	b.n	800bff0 <_malloc_r+0xa8>
 800c032:	230c      	movs	r3, #12
 800c034:	6033      	str	r3, [r6, #0]
 800c036:	4630      	mov	r0, r6
 800c038:	f000 f80c 	bl	800c054 <__malloc_unlock>
 800c03c:	e794      	b.n	800bf68 <_malloc_r+0x20>
 800c03e:	6005      	str	r5, [r0, #0]
 800c040:	e7d6      	b.n	800bff0 <_malloc_r+0xa8>
 800c042:	bf00      	nop
 800c044:	2000164c 	.word	0x2000164c

0800c048 <__malloc_lock>:
 800c048:	4801      	ldr	r0, [pc, #4]	@ (800c050 <__malloc_lock+0x8>)
 800c04a:	f7ff b8ac 	b.w	800b1a6 <__retarget_lock_acquire_recursive>
 800c04e:	bf00      	nop
 800c050:	20001644 	.word	0x20001644

0800c054 <__malloc_unlock>:
 800c054:	4801      	ldr	r0, [pc, #4]	@ (800c05c <__malloc_unlock+0x8>)
 800c056:	f7ff b8a7 	b.w	800b1a8 <__retarget_lock_release_recursive>
 800c05a:	bf00      	nop
 800c05c:	20001644 	.word	0x20001644

0800c060 <_Balloc>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	69c6      	ldr	r6, [r0, #28]
 800c064:	4604      	mov	r4, r0
 800c066:	460d      	mov	r5, r1
 800c068:	b976      	cbnz	r6, 800c088 <_Balloc+0x28>
 800c06a:	2010      	movs	r0, #16
 800c06c:	f7ff ff42 	bl	800bef4 <malloc>
 800c070:	4602      	mov	r2, r0
 800c072:	61e0      	str	r0, [r4, #28]
 800c074:	b920      	cbnz	r0, 800c080 <_Balloc+0x20>
 800c076:	4b18      	ldr	r3, [pc, #96]	@ (800c0d8 <_Balloc+0x78>)
 800c078:	4818      	ldr	r0, [pc, #96]	@ (800c0dc <_Balloc+0x7c>)
 800c07a:	216b      	movs	r1, #107	@ 0x6b
 800c07c:	f000 fda6 	bl	800cbcc <__assert_func>
 800c080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c084:	6006      	str	r6, [r0, #0]
 800c086:	60c6      	str	r6, [r0, #12]
 800c088:	69e6      	ldr	r6, [r4, #28]
 800c08a:	68f3      	ldr	r3, [r6, #12]
 800c08c:	b183      	cbz	r3, 800c0b0 <_Balloc+0x50>
 800c08e:	69e3      	ldr	r3, [r4, #28]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c096:	b9b8      	cbnz	r0, 800c0c8 <_Balloc+0x68>
 800c098:	2101      	movs	r1, #1
 800c09a:	fa01 f605 	lsl.w	r6, r1, r5
 800c09e:	1d72      	adds	r2, r6, #5
 800c0a0:	0092      	lsls	r2, r2, #2
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 fdb0 	bl	800cc08 <_calloc_r>
 800c0a8:	b160      	cbz	r0, 800c0c4 <_Balloc+0x64>
 800c0aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0ae:	e00e      	b.n	800c0ce <_Balloc+0x6e>
 800c0b0:	2221      	movs	r2, #33	@ 0x21
 800c0b2:	2104      	movs	r1, #4
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 fda7 	bl	800cc08 <_calloc_r>
 800c0ba:	69e3      	ldr	r3, [r4, #28]
 800c0bc:	60f0      	str	r0, [r6, #12]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e4      	bne.n	800c08e <_Balloc+0x2e>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	6802      	ldr	r2, [r0, #0]
 800c0ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0d4:	e7f7      	b.n	800c0c6 <_Balloc+0x66>
 800c0d6:	bf00      	nop
 800c0d8:	0800fd65 	.word	0x0800fd65
 800c0dc:	0800fde5 	.word	0x0800fde5

0800c0e0 <_Bfree>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	69c6      	ldr	r6, [r0, #28]
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	b976      	cbnz	r6, 800c108 <_Bfree+0x28>
 800c0ea:	2010      	movs	r0, #16
 800c0ec:	f7ff ff02 	bl	800bef4 <malloc>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	61e8      	str	r0, [r5, #28]
 800c0f4:	b920      	cbnz	r0, 800c100 <_Bfree+0x20>
 800c0f6:	4b09      	ldr	r3, [pc, #36]	@ (800c11c <_Bfree+0x3c>)
 800c0f8:	4809      	ldr	r0, [pc, #36]	@ (800c120 <_Bfree+0x40>)
 800c0fa:	218f      	movs	r1, #143	@ 0x8f
 800c0fc:	f000 fd66 	bl	800cbcc <__assert_func>
 800c100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c104:	6006      	str	r6, [r0, #0]
 800c106:	60c6      	str	r6, [r0, #12]
 800c108:	b13c      	cbz	r4, 800c11a <_Bfree+0x3a>
 800c10a:	69eb      	ldr	r3, [r5, #28]
 800c10c:	6862      	ldr	r2, [r4, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c114:	6021      	str	r1, [r4, #0]
 800c116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	0800fd65 	.word	0x0800fd65
 800c120:	0800fde5 	.word	0x0800fde5

0800c124 <__multadd>:
 800c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c128:	690d      	ldr	r5, [r1, #16]
 800c12a:	4607      	mov	r7, r0
 800c12c:	460c      	mov	r4, r1
 800c12e:	461e      	mov	r6, r3
 800c130:	f101 0c14 	add.w	ip, r1, #20
 800c134:	2000      	movs	r0, #0
 800c136:	f8dc 3000 	ldr.w	r3, [ip]
 800c13a:	b299      	uxth	r1, r3
 800c13c:	fb02 6101 	mla	r1, r2, r1, r6
 800c140:	0c1e      	lsrs	r6, r3, #16
 800c142:	0c0b      	lsrs	r3, r1, #16
 800c144:	fb02 3306 	mla	r3, r2, r6, r3
 800c148:	b289      	uxth	r1, r1
 800c14a:	3001      	adds	r0, #1
 800c14c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c150:	4285      	cmp	r5, r0
 800c152:	f84c 1b04 	str.w	r1, [ip], #4
 800c156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c15a:	dcec      	bgt.n	800c136 <__multadd+0x12>
 800c15c:	b30e      	cbz	r6, 800c1a2 <__multadd+0x7e>
 800c15e:	68a3      	ldr	r3, [r4, #8]
 800c160:	42ab      	cmp	r3, r5
 800c162:	dc19      	bgt.n	800c198 <__multadd+0x74>
 800c164:	6861      	ldr	r1, [r4, #4]
 800c166:	4638      	mov	r0, r7
 800c168:	3101      	adds	r1, #1
 800c16a:	f7ff ff79 	bl	800c060 <_Balloc>
 800c16e:	4680      	mov	r8, r0
 800c170:	b928      	cbnz	r0, 800c17e <__multadd+0x5a>
 800c172:	4602      	mov	r2, r0
 800c174:	4b0c      	ldr	r3, [pc, #48]	@ (800c1a8 <__multadd+0x84>)
 800c176:	480d      	ldr	r0, [pc, #52]	@ (800c1ac <__multadd+0x88>)
 800c178:	21ba      	movs	r1, #186	@ 0xba
 800c17a:	f000 fd27 	bl	800cbcc <__assert_func>
 800c17e:	6922      	ldr	r2, [r4, #16]
 800c180:	3202      	adds	r2, #2
 800c182:	f104 010c 	add.w	r1, r4, #12
 800c186:	0092      	lsls	r2, r2, #2
 800c188:	300c      	adds	r0, #12
 800c18a:	f000 fd11 	bl	800cbb0 <memcpy>
 800c18e:	4621      	mov	r1, r4
 800c190:	4638      	mov	r0, r7
 800c192:	f7ff ffa5 	bl	800c0e0 <_Bfree>
 800c196:	4644      	mov	r4, r8
 800c198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c19c:	3501      	adds	r5, #1
 800c19e:	615e      	str	r6, [r3, #20]
 800c1a0:	6125      	str	r5, [r4, #16]
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	0800fdd4 	.word	0x0800fdd4
 800c1ac:	0800fde5 	.word	0x0800fde5

0800c1b0 <__hi0bits>:
 800c1b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	bf36      	itet	cc
 800c1b8:	0403      	lslcc	r3, r0, #16
 800c1ba:	2000      	movcs	r0, #0
 800c1bc:	2010      	movcc	r0, #16
 800c1be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c1c2:	bf3c      	itt	cc
 800c1c4:	021b      	lslcc	r3, r3, #8
 800c1c6:	3008      	addcc	r0, #8
 800c1c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c1cc:	bf3c      	itt	cc
 800c1ce:	011b      	lslcc	r3, r3, #4
 800c1d0:	3004      	addcc	r0, #4
 800c1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1d6:	bf3c      	itt	cc
 800c1d8:	009b      	lslcc	r3, r3, #2
 800c1da:	3002      	addcc	r0, #2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	db05      	blt.n	800c1ec <__hi0bits+0x3c>
 800c1e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1e4:	f100 0001 	add.w	r0, r0, #1
 800c1e8:	bf08      	it	eq
 800c1ea:	2020      	moveq	r0, #32
 800c1ec:	4770      	bx	lr

0800c1ee <__lo0bits>:
 800c1ee:	6803      	ldr	r3, [r0, #0]
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	f013 0007 	ands.w	r0, r3, #7
 800c1f6:	d00b      	beq.n	800c210 <__lo0bits+0x22>
 800c1f8:	07d9      	lsls	r1, r3, #31
 800c1fa:	d421      	bmi.n	800c240 <__lo0bits+0x52>
 800c1fc:	0798      	lsls	r0, r3, #30
 800c1fe:	bf49      	itett	mi
 800c200:	085b      	lsrmi	r3, r3, #1
 800c202:	089b      	lsrpl	r3, r3, #2
 800c204:	2001      	movmi	r0, #1
 800c206:	6013      	strmi	r3, [r2, #0]
 800c208:	bf5c      	itt	pl
 800c20a:	6013      	strpl	r3, [r2, #0]
 800c20c:	2002      	movpl	r0, #2
 800c20e:	4770      	bx	lr
 800c210:	b299      	uxth	r1, r3
 800c212:	b909      	cbnz	r1, 800c218 <__lo0bits+0x2a>
 800c214:	0c1b      	lsrs	r3, r3, #16
 800c216:	2010      	movs	r0, #16
 800c218:	b2d9      	uxtb	r1, r3
 800c21a:	b909      	cbnz	r1, 800c220 <__lo0bits+0x32>
 800c21c:	3008      	adds	r0, #8
 800c21e:	0a1b      	lsrs	r3, r3, #8
 800c220:	0719      	lsls	r1, r3, #28
 800c222:	bf04      	itt	eq
 800c224:	091b      	lsreq	r3, r3, #4
 800c226:	3004      	addeq	r0, #4
 800c228:	0799      	lsls	r1, r3, #30
 800c22a:	bf04      	itt	eq
 800c22c:	089b      	lsreq	r3, r3, #2
 800c22e:	3002      	addeq	r0, #2
 800c230:	07d9      	lsls	r1, r3, #31
 800c232:	d403      	bmi.n	800c23c <__lo0bits+0x4e>
 800c234:	085b      	lsrs	r3, r3, #1
 800c236:	f100 0001 	add.w	r0, r0, #1
 800c23a:	d003      	beq.n	800c244 <__lo0bits+0x56>
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	4770      	bx	lr
 800c240:	2000      	movs	r0, #0
 800c242:	4770      	bx	lr
 800c244:	2020      	movs	r0, #32
 800c246:	4770      	bx	lr

0800c248 <__i2b>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	460c      	mov	r4, r1
 800c24c:	2101      	movs	r1, #1
 800c24e:	f7ff ff07 	bl	800c060 <_Balloc>
 800c252:	4602      	mov	r2, r0
 800c254:	b928      	cbnz	r0, 800c262 <__i2b+0x1a>
 800c256:	4b05      	ldr	r3, [pc, #20]	@ (800c26c <__i2b+0x24>)
 800c258:	4805      	ldr	r0, [pc, #20]	@ (800c270 <__i2b+0x28>)
 800c25a:	f240 1145 	movw	r1, #325	@ 0x145
 800c25e:	f000 fcb5 	bl	800cbcc <__assert_func>
 800c262:	2301      	movs	r3, #1
 800c264:	6144      	str	r4, [r0, #20]
 800c266:	6103      	str	r3, [r0, #16]
 800c268:	bd10      	pop	{r4, pc}
 800c26a:	bf00      	nop
 800c26c:	0800fdd4 	.word	0x0800fdd4
 800c270:	0800fde5 	.word	0x0800fde5

0800c274 <__multiply>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	4617      	mov	r7, r2
 800c27a:	690a      	ldr	r2, [r1, #16]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	429a      	cmp	r2, r3
 800c280:	bfa8      	it	ge
 800c282:	463b      	movge	r3, r7
 800c284:	4689      	mov	r9, r1
 800c286:	bfa4      	itt	ge
 800c288:	460f      	movge	r7, r1
 800c28a:	4699      	movge	r9, r3
 800c28c:	693d      	ldr	r5, [r7, #16]
 800c28e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	6879      	ldr	r1, [r7, #4]
 800c296:	eb05 060a 	add.w	r6, r5, sl
 800c29a:	42b3      	cmp	r3, r6
 800c29c:	b085      	sub	sp, #20
 800c29e:	bfb8      	it	lt
 800c2a0:	3101      	addlt	r1, #1
 800c2a2:	f7ff fedd 	bl	800c060 <_Balloc>
 800c2a6:	b930      	cbnz	r0, 800c2b6 <__multiply+0x42>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	4b41      	ldr	r3, [pc, #260]	@ (800c3b0 <__multiply+0x13c>)
 800c2ac:	4841      	ldr	r0, [pc, #260]	@ (800c3b4 <__multiply+0x140>)
 800c2ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c2b2:	f000 fc8b 	bl	800cbcc <__assert_func>
 800c2b6:	f100 0414 	add.w	r4, r0, #20
 800c2ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c2be:	4623      	mov	r3, r4
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	4573      	cmp	r3, lr
 800c2c4:	d320      	bcc.n	800c308 <__multiply+0x94>
 800c2c6:	f107 0814 	add.w	r8, r7, #20
 800c2ca:	f109 0114 	add.w	r1, r9, #20
 800c2ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c2d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c2d6:	9302      	str	r3, [sp, #8]
 800c2d8:	1beb      	subs	r3, r5, r7
 800c2da:	3b15      	subs	r3, #21
 800c2dc:	f023 0303 	bic.w	r3, r3, #3
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	3715      	adds	r7, #21
 800c2e4:	42bd      	cmp	r5, r7
 800c2e6:	bf38      	it	cc
 800c2e8:	2304      	movcc	r3, #4
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	9b02      	ldr	r3, [sp, #8]
 800c2ee:	9103      	str	r1, [sp, #12]
 800c2f0:	428b      	cmp	r3, r1
 800c2f2:	d80c      	bhi.n	800c30e <__multiply+0x9a>
 800c2f4:	2e00      	cmp	r6, #0
 800c2f6:	dd03      	ble.n	800c300 <__multiply+0x8c>
 800c2f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d055      	beq.n	800c3ac <__multiply+0x138>
 800c300:	6106      	str	r6, [r0, #16]
 800c302:	b005      	add	sp, #20
 800c304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c308:	f843 2b04 	str.w	r2, [r3], #4
 800c30c:	e7d9      	b.n	800c2c2 <__multiply+0x4e>
 800c30e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c312:	f1ba 0f00 	cmp.w	sl, #0
 800c316:	d01f      	beq.n	800c358 <__multiply+0xe4>
 800c318:	46c4      	mov	ip, r8
 800c31a:	46a1      	mov	r9, r4
 800c31c:	2700      	movs	r7, #0
 800c31e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c322:	f8d9 3000 	ldr.w	r3, [r9]
 800c326:	fa1f fb82 	uxth.w	fp, r2
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c330:	443b      	add	r3, r7
 800c332:	f8d9 7000 	ldr.w	r7, [r9]
 800c336:	0c12      	lsrs	r2, r2, #16
 800c338:	0c3f      	lsrs	r7, r7, #16
 800c33a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c33e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c342:	b29b      	uxth	r3, r3
 800c344:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c348:	4565      	cmp	r5, ip
 800c34a:	f849 3b04 	str.w	r3, [r9], #4
 800c34e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c352:	d8e4      	bhi.n	800c31e <__multiply+0xaa>
 800c354:	9b01      	ldr	r3, [sp, #4]
 800c356:	50e7      	str	r7, [r4, r3]
 800c358:	9b03      	ldr	r3, [sp, #12]
 800c35a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c35e:	3104      	adds	r1, #4
 800c360:	f1b9 0f00 	cmp.w	r9, #0
 800c364:	d020      	beq.n	800c3a8 <__multiply+0x134>
 800c366:	6823      	ldr	r3, [r4, #0]
 800c368:	4647      	mov	r7, r8
 800c36a:	46a4      	mov	ip, r4
 800c36c:	f04f 0a00 	mov.w	sl, #0
 800c370:	f8b7 b000 	ldrh.w	fp, [r7]
 800c374:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c378:	fb09 220b 	mla	r2, r9, fp, r2
 800c37c:	4452      	add	r2, sl
 800c37e:	b29b      	uxth	r3, r3
 800c380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c384:	f84c 3b04 	str.w	r3, [ip], #4
 800c388:	f857 3b04 	ldr.w	r3, [r7], #4
 800c38c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c390:	f8bc 3000 	ldrh.w	r3, [ip]
 800c394:	fb09 330a 	mla	r3, r9, sl, r3
 800c398:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c39c:	42bd      	cmp	r5, r7
 800c39e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3a2:	d8e5      	bhi.n	800c370 <__multiply+0xfc>
 800c3a4:	9a01      	ldr	r2, [sp, #4]
 800c3a6:	50a3      	str	r3, [r4, r2]
 800c3a8:	3404      	adds	r4, #4
 800c3aa:	e79f      	b.n	800c2ec <__multiply+0x78>
 800c3ac:	3e01      	subs	r6, #1
 800c3ae:	e7a1      	b.n	800c2f4 <__multiply+0x80>
 800c3b0:	0800fdd4 	.word	0x0800fdd4
 800c3b4:	0800fde5 	.word	0x0800fde5

0800c3b8 <__pow5mult>:
 800c3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3bc:	4615      	mov	r5, r2
 800c3be:	f012 0203 	ands.w	r2, r2, #3
 800c3c2:	4607      	mov	r7, r0
 800c3c4:	460e      	mov	r6, r1
 800c3c6:	d007      	beq.n	800c3d8 <__pow5mult+0x20>
 800c3c8:	4c25      	ldr	r4, [pc, #148]	@ (800c460 <__pow5mult+0xa8>)
 800c3ca:	3a01      	subs	r2, #1
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3d2:	f7ff fea7 	bl	800c124 <__multadd>
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	10ad      	asrs	r5, r5, #2
 800c3da:	d03d      	beq.n	800c458 <__pow5mult+0xa0>
 800c3dc:	69fc      	ldr	r4, [r7, #28]
 800c3de:	b97c      	cbnz	r4, 800c400 <__pow5mult+0x48>
 800c3e0:	2010      	movs	r0, #16
 800c3e2:	f7ff fd87 	bl	800bef4 <malloc>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	61f8      	str	r0, [r7, #28]
 800c3ea:	b928      	cbnz	r0, 800c3f8 <__pow5mult+0x40>
 800c3ec:	4b1d      	ldr	r3, [pc, #116]	@ (800c464 <__pow5mult+0xac>)
 800c3ee:	481e      	ldr	r0, [pc, #120]	@ (800c468 <__pow5mult+0xb0>)
 800c3f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3f4:	f000 fbea 	bl	800cbcc <__assert_func>
 800c3f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3fc:	6004      	str	r4, [r0, #0]
 800c3fe:	60c4      	str	r4, [r0, #12]
 800c400:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c408:	b94c      	cbnz	r4, 800c41e <__pow5mult+0x66>
 800c40a:	f240 2171 	movw	r1, #625	@ 0x271
 800c40e:	4638      	mov	r0, r7
 800c410:	f7ff ff1a 	bl	800c248 <__i2b>
 800c414:	2300      	movs	r3, #0
 800c416:	f8c8 0008 	str.w	r0, [r8, #8]
 800c41a:	4604      	mov	r4, r0
 800c41c:	6003      	str	r3, [r0, #0]
 800c41e:	f04f 0900 	mov.w	r9, #0
 800c422:	07eb      	lsls	r3, r5, #31
 800c424:	d50a      	bpl.n	800c43c <__pow5mult+0x84>
 800c426:	4631      	mov	r1, r6
 800c428:	4622      	mov	r2, r4
 800c42a:	4638      	mov	r0, r7
 800c42c:	f7ff ff22 	bl	800c274 <__multiply>
 800c430:	4631      	mov	r1, r6
 800c432:	4680      	mov	r8, r0
 800c434:	4638      	mov	r0, r7
 800c436:	f7ff fe53 	bl	800c0e0 <_Bfree>
 800c43a:	4646      	mov	r6, r8
 800c43c:	106d      	asrs	r5, r5, #1
 800c43e:	d00b      	beq.n	800c458 <__pow5mult+0xa0>
 800c440:	6820      	ldr	r0, [r4, #0]
 800c442:	b938      	cbnz	r0, 800c454 <__pow5mult+0x9c>
 800c444:	4622      	mov	r2, r4
 800c446:	4621      	mov	r1, r4
 800c448:	4638      	mov	r0, r7
 800c44a:	f7ff ff13 	bl	800c274 <__multiply>
 800c44e:	6020      	str	r0, [r4, #0]
 800c450:	f8c0 9000 	str.w	r9, [r0]
 800c454:	4604      	mov	r4, r0
 800c456:	e7e4      	b.n	800c422 <__pow5mult+0x6a>
 800c458:	4630      	mov	r0, r6
 800c45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45e:	bf00      	nop
 800c460:	0800fe98 	.word	0x0800fe98
 800c464:	0800fd65 	.word	0x0800fd65
 800c468:	0800fde5 	.word	0x0800fde5

0800c46c <__lshift>:
 800c46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	460c      	mov	r4, r1
 800c472:	6849      	ldr	r1, [r1, #4]
 800c474:	6923      	ldr	r3, [r4, #16]
 800c476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c47a:	68a3      	ldr	r3, [r4, #8]
 800c47c:	4607      	mov	r7, r0
 800c47e:	4691      	mov	r9, r2
 800c480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c484:	f108 0601 	add.w	r6, r8, #1
 800c488:	42b3      	cmp	r3, r6
 800c48a:	db0b      	blt.n	800c4a4 <__lshift+0x38>
 800c48c:	4638      	mov	r0, r7
 800c48e:	f7ff fde7 	bl	800c060 <_Balloc>
 800c492:	4605      	mov	r5, r0
 800c494:	b948      	cbnz	r0, 800c4aa <__lshift+0x3e>
 800c496:	4602      	mov	r2, r0
 800c498:	4b28      	ldr	r3, [pc, #160]	@ (800c53c <__lshift+0xd0>)
 800c49a:	4829      	ldr	r0, [pc, #164]	@ (800c540 <__lshift+0xd4>)
 800c49c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c4a0:	f000 fb94 	bl	800cbcc <__assert_func>
 800c4a4:	3101      	adds	r1, #1
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	e7ee      	b.n	800c488 <__lshift+0x1c>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f100 0114 	add.w	r1, r0, #20
 800c4b0:	f100 0210 	add.w	r2, r0, #16
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	4553      	cmp	r3, sl
 800c4b8:	db33      	blt.n	800c522 <__lshift+0xb6>
 800c4ba:	6920      	ldr	r0, [r4, #16]
 800c4bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4c0:	f104 0314 	add.w	r3, r4, #20
 800c4c4:	f019 091f 	ands.w	r9, r9, #31
 800c4c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4d0:	d02b      	beq.n	800c52a <__lshift+0xbe>
 800c4d2:	f1c9 0e20 	rsb	lr, r9, #32
 800c4d6:	468a      	mov	sl, r1
 800c4d8:	2200      	movs	r2, #0
 800c4da:	6818      	ldr	r0, [r3, #0]
 800c4dc:	fa00 f009 	lsl.w	r0, r0, r9
 800c4e0:	4310      	orrs	r0, r2
 800c4e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c4e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ea:	459c      	cmp	ip, r3
 800c4ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4f0:	d8f3      	bhi.n	800c4da <__lshift+0x6e>
 800c4f2:	ebac 0304 	sub.w	r3, ip, r4
 800c4f6:	3b15      	subs	r3, #21
 800c4f8:	f023 0303 	bic.w	r3, r3, #3
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	f104 0015 	add.w	r0, r4, #21
 800c502:	4560      	cmp	r0, ip
 800c504:	bf88      	it	hi
 800c506:	2304      	movhi	r3, #4
 800c508:	50ca      	str	r2, [r1, r3]
 800c50a:	b10a      	cbz	r2, 800c510 <__lshift+0xa4>
 800c50c:	f108 0602 	add.w	r6, r8, #2
 800c510:	3e01      	subs	r6, #1
 800c512:	4638      	mov	r0, r7
 800c514:	612e      	str	r6, [r5, #16]
 800c516:	4621      	mov	r1, r4
 800c518:	f7ff fde2 	bl	800c0e0 <_Bfree>
 800c51c:	4628      	mov	r0, r5
 800c51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c522:	f842 0f04 	str.w	r0, [r2, #4]!
 800c526:	3301      	adds	r3, #1
 800c528:	e7c5      	b.n	800c4b6 <__lshift+0x4a>
 800c52a:	3904      	subs	r1, #4
 800c52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c530:	f841 2f04 	str.w	r2, [r1, #4]!
 800c534:	459c      	cmp	ip, r3
 800c536:	d8f9      	bhi.n	800c52c <__lshift+0xc0>
 800c538:	e7ea      	b.n	800c510 <__lshift+0xa4>
 800c53a:	bf00      	nop
 800c53c:	0800fdd4 	.word	0x0800fdd4
 800c540:	0800fde5 	.word	0x0800fde5

0800c544 <__mcmp>:
 800c544:	690a      	ldr	r2, [r1, #16]
 800c546:	4603      	mov	r3, r0
 800c548:	6900      	ldr	r0, [r0, #16]
 800c54a:	1a80      	subs	r0, r0, r2
 800c54c:	b530      	push	{r4, r5, lr}
 800c54e:	d10e      	bne.n	800c56e <__mcmp+0x2a>
 800c550:	3314      	adds	r3, #20
 800c552:	3114      	adds	r1, #20
 800c554:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c558:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c55c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c560:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c564:	4295      	cmp	r5, r2
 800c566:	d003      	beq.n	800c570 <__mcmp+0x2c>
 800c568:	d205      	bcs.n	800c576 <__mcmp+0x32>
 800c56a:	f04f 30ff 	mov.w	r0, #4294967295
 800c56e:	bd30      	pop	{r4, r5, pc}
 800c570:	42a3      	cmp	r3, r4
 800c572:	d3f3      	bcc.n	800c55c <__mcmp+0x18>
 800c574:	e7fb      	b.n	800c56e <__mcmp+0x2a>
 800c576:	2001      	movs	r0, #1
 800c578:	e7f9      	b.n	800c56e <__mcmp+0x2a>
	...

0800c57c <__mdiff>:
 800c57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	4689      	mov	r9, r1
 800c582:	4606      	mov	r6, r0
 800c584:	4611      	mov	r1, r2
 800c586:	4648      	mov	r0, r9
 800c588:	4614      	mov	r4, r2
 800c58a:	f7ff ffdb 	bl	800c544 <__mcmp>
 800c58e:	1e05      	subs	r5, r0, #0
 800c590:	d112      	bne.n	800c5b8 <__mdiff+0x3c>
 800c592:	4629      	mov	r1, r5
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff fd63 	bl	800c060 <_Balloc>
 800c59a:	4602      	mov	r2, r0
 800c59c:	b928      	cbnz	r0, 800c5aa <__mdiff+0x2e>
 800c59e:	4b3f      	ldr	r3, [pc, #252]	@ (800c69c <__mdiff+0x120>)
 800c5a0:	f240 2137 	movw	r1, #567	@ 0x237
 800c5a4:	483e      	ldr	r0, [pc, #248]	@ (800c6a0 <__mdiff+0x124>)
 800c5a6:	f000 fb11 	bl	800cbcc <__assert_func>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	b003      	add	sp, #12
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	bfbc      	itt	lt
 800c5ba:	464b      	movlt	r3, r9
 800c5bc:	46a1      	movlt	r9, r4
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5c4:	bfba      	itte	lt
 800c5c6:	461c      	movlt	r4, r3
 800c5c8:	2501      	movlt	r5, #1
 800c5ca:	2500      	movge	r5, #0
 800c5cc:	f7ff fd48 	bl	800c060 <_Balloc>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	b918      	cbnz	r0, 800c5dc <__mdiff+0x60>
 800c5d4:	4b31      	ldr	r3, [pc, #196]	@ (800c69c <__mdiff+0x120>)
 800c5d6:	f240 2145 	movw	r1, #581	@ 0x245
 800c5da:	e7e3      	b.n	800c5a4 <__mdiff+0x28>
 800c5dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5e0:	6926      	ldr	r6, [r4, #16]
 800c5e2:	60c5      	str	r5, [r0, #12]
 800c5e4:	f109 0310 	add.w	r3, r9, #16
 800c5e8:	f109 0514 	add.w	r5, r9, #20
 800c5ec:	f104 0e14 	add.w	lr, r4, #20
 800c5f0:	f100 0b14 	add.w	fp, r0, #20
 800c5f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	46d9      	mov	r9, fp
 800c600:	f04f 0c00 	mov.w	ip, #0
 800c604:	9b01      	ldr	r3, [sp, #4]
 800c606:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c60a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c60e:	9301      	str	r3, [sp, #4]
 800c610:	fa1f f38a 	uxth.w	r3, sl
 800c614:	4619      	mov	r1, r3
 800c616:	b283      	uxth	r3, r0
 800c618:	1acb      	subs	r3, r1, r3
 800c61a:	0c00      	lsrs	r0, r0, #16
 800c61c:	4463      	add	r3, ip
 800c61e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c622:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c626:	b29b      	uxth	r3, r3
 800c628:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c62c:	4576      	cmp	r6, lr
 800c62e:	f849 3b04 	str.w	r3, [r9], #4
 800c632:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c636:	d8e5      	bhi.n	800c604 <__mdiff+0x88>
 800c638:	1b33      	subs	r3, r6, r4
 800c63a:	3b15      	subs	r3, #21
 800c63c:	f023 0303 	bic.w	r3, r3, #3
 800c640:	3415      	adds	r4, #21
 800c642:	3304      	adds	r3, #4
 800c644:	42a6      	cmp	r6, r4
 800c646:	bf38      	it	cc
 800c648:	2304      	movcc	r3, #4
 800c64a:	441d      	add	r5, r3
 800c64c:	445b      	add	r3, fp
 800c64e:	461e      	mov	r6, r3
 800c650:	462c      	mov	r4, r5
 800c652:	4544      	cmp	r4, r8
 800c654:	d30e      	bcc.n	800c674 <__mdiff+0xf8>
 800c656:	f108 0103 	add.w	r1, r8, #3
 800c65a:	1b49      	subs	r1, r1, r5
 800c65c:	f021 0103 	bic.w	r1, r1, #3
 800c660:	3d03      	subs	r5, #3
 800c662:	45a8      	cmp	r8, r5
 800c664:	bf38      	it	cc
 800c666:	2100      	movcc	r1, #0
 800c668:	440b      	add	r3, r1
 800c66a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c66e:	b191      	cbz	r1, 800c696 <__mdiff+0x11a>
 800c670:	6117      	str	r7, [r2, #16]
 800c672:	e79d      	b.n	800c5b0 <__mdiff+0x34>
 800c674:	f854 1b04 	ldr.w	r1, [r4], #4
 800c678:	46e6      	mov	lr, ip
 800c67a:	0c08      	lsrs	r0, r1, #16
 800c67c:	fa1c fc81 	uxtah	ip, ip, r1
 800c680:	4471      	add	r1, lr
 800c682:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c686:	b289      	uxth	r1, r1
 800c688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c68c:	f846 1b04 	str.w	r1, [r6], #4
 800c690:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c694:	e7dd      	b.n	800c652 <__mdiff+0xd6>
 800c696:	3f01      	subs	r7, #1
 800c698:	e7e7      	b.n	800c66a <__mdiff+0xee>
 800c69a:	bf00      	nop
 800c69c:	0800fdd4 	.word	0x0800fdd4
 800c6a0:	0800fde5 	.word	0x0800fde5

0800c6a4 <__d2b>:
 800c6a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6a8:	460f      	mov	r7, r1
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	ec59 8b10 	vmov	r8, r9, d0
 800c6b0:	4616      	mov	r6, r2
 800c6b2:	f7ff fcd5 	bl	800c060 <_Balloc>
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	b930      	cbnz	r0, 800c6c8 <__d2b+0x24>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	4b23      	ldr	r3, [pc, #140]	@ (800c74c <__d2b+0xa8>)
 800c6be:	4824      	ldr	r0, [pc, #144]	@ (800c750 <__d2b+0xac>)
 800c6c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6c4:	f000 fa82 	bl	800cbcc <__assert_func>
 800c6c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6d0:	b10d      	cbz	r5, 800c6d6 <__d2b+0x32>
 800c6d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	f1b8 0300 	subs.w	r3, r8, #0
 800c6dc:	d023      	beq.n	800c726 <__d2b+0x82>
 800c6de:	4668      	mov	r0, sp
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	f7ff fd84 	bl	800c1ee <__lo0bits>
 800c6e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6ea:	b1d0      	cbz	r0, 800c722 <__d2b+0x7e>
 800c6ec:	f1c0 0320 	rsb	r3, r0, #32
 800c6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f4:	430b      	orrs	r3, r1
 800c6f6:	40c2      	lsrs	r2, r0
 800c6f8:	6163      	str	r3, [r4, #20]
 800c6fa:	9201      	str	r2, [sp, #4]
 800c6fc:	9b01      	ldr	r3, [sp, #4]
 800c6fe:	61a3      	str	r3, [r4, #24]
 800c700:	2b00      	cmp	r3, #0
 800c702:	bf0c      	ite	eq
 800c704:	2201      	moveq	r2, #1
 800c706:	2202      	movne	r2, #2
 800c708:	6122      	str	r2, [r4, #16]
 800c70a:	b1a5      	cbz	r5, 800c736 <__d2b+0x92>
 800c70c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c710:	4405      	add	r5, r0
 800c712:	603d      	str	r5, [r7, #0]
 800c714:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c718:	6030      	str	r0, [r6, #0]
 800c71a:	4620      	mov	r0, r4
 800c71c:	b003      	add	sp, #12
 800c71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c722:	6161      	str	r1, [r4, #20]
 800c724:	e7ea      	b.n	800c6fc <__d2b+0x58>
 800c726:	a801      	add	r0, sp, #4
 800c728:	f7ff fd61 	bl	800c1ee <__lo0bits>
 800c72c:	9b01      	ldr	r3, [sp, #4]
 800c72e:	6163      	str	r3, [r4, #20]
 800c730:	3020      	adds	r0, #32
 800c732:	2201      	movs	r2, #1
 800c734:	e7e8      	b.n	800c708 <__d2b+0x64>
 800c736:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c73a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c73e:	6038      	str	r0, [r7, #0]
 800c740:	6918      	ldr	r0, [r3, #16]
 800c742:	f7ff fd35 	bl	800c1b0 <__hi0bits>
 800c746:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c74a:	e7e5      	b.n	800c718 <__d2b+0x74>
 800c74c:	0800fdd4 	.word	0x0800fdd4
 800c750:	0800fde5 	.word	0x0800fde5

0800c754 <__ssputs_r>:
 800c754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c758:	688e      	ldr	r6, [r1, #8]
 800c75a:	461f      	mov	r7, r3
 800c75c:	42be      	cmp	r6, r7
 800c75e:	680b      	ldr	r3, [r1, #0]
 800c760:	4682      	mov	sl, r0
 800c762:	460c      	mov	r4, r1
 800c764:	4690      	mov	r8, r2
 800c766:	d82d      	bhi.n	800c7c4 <__ssputs_r+0x70>
 800c768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c76c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c770:	d026      	beq.n	800c7c0 <__ssputs_r+0x6c>
 800c772:	6965      	ldr	r5, [r4, #20]
 800c774:	6909      	ldr	r1, [r1, #16]
 800c776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c77a:	eba3 0901 	sub.w	r9, r3, r1
 800c77e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c782:	1c7b      	adds	r3, r7, #1
 800c784:	444b      	add	r3, r9
 800c786:	106d      	asrs	r5, r5, #1
 800c788:	429d      	cmp	r5, r3
 800c78a:	bf38      	it	cc
 800c78c:	461d      	movcc	r5, r3
 800c78e:	0553      	lsls	r3, r2, #21
 800c790:	d527      	bpl.n	800c7e2 <__ssputs_r+0x8e>
 800c792:	4629      	mov	r1, r5
 800c794:	f7ff fbd8 	bl	800bf48 <_malloc_r>
 800c798:	4606      	mov	r6, r0
 800c79a:	b360      	cbz	r0, 800c7f6 <__ssputs_r+0xa2>
 800c79c:	6921      	ldr	r1, [r4, #16]
 800c79e:	464a      	mov	r2, r9
 800c7a0:	f000 fa06 	bl	800cbb0 <memcpy>
 800c7a4:	89a3      	ldrh	r3, [r4, #12]
 800c7a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ae:	81a3      	strh	r3, [r4, #12]
 800c7b0:	6126      	str	r6, [r4, #16]
 800c7b2:	6165      	str	r5, [r4, #20]
 800c7b4:	444e      	add	r6, r9
 800c7b6:	eba5 0509 	sub.w	r5, r5, r9
 800c7ba:	6026      	str	r6, [r4, #0]
 800c7bc:	60a5      	str	r5, [r4, #8]
 800c7be:	463e      	mov	r6, r7
 800c7c0:	42be      	cmp	r6, r7
 800c7c2:	d900      	bls.n	800c7c6 <__ssputs_r+0x72>
 800c7c4:	463e      	mov	r6, r7
 800c7c6:	6820      	ldr	r0, [r4, #0]
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	4641      	mov	r1, r8
 800c7cc:	f000 f9c6 	bl	800cb5c <memmove>
 800c7d0:	68a3      	ldr	r3, [r4, #8]
 800c7d2:	1b9b      	subs	r3, r3, r6
 800c7d4:	60a3      	str	r3, [r4, #8]
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	4433      	add	r3, r6
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	2000      	movs	r0, #0
 800c7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	f000 fa36 	bl	800cc54 <_realloc_r>
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d1e0      	bne.n	800c7b0 <__ssputs_r+0x5c>
 800c7ee:	6921      	ldr	r1, [r4, #16]
 800c7f0:	4650      	mov	r0, sl
 800c7f2:	f7ff fb35 	bl	800be60 <_free_r>
 800c7f6:	230c      	movs	r3, #12
 800c7f8:	f8ca 3000 	str.w	r3, [sl]
 800c7fc:	89a3      	ldrh	r3, [r4, #12]
 800c7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	f04f 30ff 	mov.w	r0, #4294967295
 800c808:	e7e9      	b.n	800c7de <__ssputs_r+0x8a>
	...

0800c80c <_svfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	4698      	mov	r8, r3
 800c812:	898b      	ldrh	r3, [r1, #12]
 800c814:	061b      	lsls	r3, r3, #24
 800c816:	b09d      	sub	sp, #116	@ 0x74
 800c818:	4607      	mov	r7, r0
 800c81a:	460d      	mov	r5, r1
 800c81c:	4614      	mov	r4, r2
 800c81e:	d510      	bpl.n	800c842 <_svfiprintf_r+0x36>
 800c820:	690b      	ldr	r3, [r1, #16]
 800c822:	b973      	cbnz	r3, 800c842 <_svfiprintf_r+0x36>
 800c824:	2140      	movs	r1, #64	@ 0x40
 800c826:	f7ff fb8f 	bl	800bf48 <_malloc_r>
 800c82a:	6028      	str	r0, [r5, #0]
 800c82c:	6128      	str	r0, [r5, #16]
 800c82e:	b930      	cbnz	r0, 800c83e <_svfiprintf_r+0x32>
 800c830:	230c      	movs	r3, #12
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	f04f 30ff 	mov.w	r0, #4294967295
 800c838:	b01d      	add	sp, #116	@ 0x74
 800c83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83e:	2340      	movs	r3, #64	@ 0x40
 800c840:	616b      	str	r3, [r5, #20]
 800c842:	2300      	movs	r3, #0
 800c844:	9309      	str	r3, [sp, #36]	@ 0x24
 800c846:	2320      	movs	r3, #32
 800c848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c84c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c850:	2330      	movs	r3, #48	@ 0x30
 800c852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c9f0 <_svfiprintf_r+0x1e4>
 800c856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c85a:	f04f 0901 	mov.w	r9, #1
 800c85e:	4623      	mov	r3, r4
 800c860:	469a      	mov	sl, r3
 800c862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c866:	b10a      	cbz	r2, 800c86c <_svfiprintf_r+0x60>
 800c868:	2a25      	cmp	r2, #37	@ 0x25
 800c86a:	d1f9      	bne.n	800c860 <_svfiprintf_r+0x54>
 800c86c:	ebba 0b04 	subs.w	fp, sl, r4
 800c870:	d00b      	beq.n	800c88a <_svfiprintf_r+0x7e>
 800c872:	465b      	mov	r3, fp
 800c874:	4622      	mov	r2, r4
 800c876:	4629      	mov	r1, r5
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff ff6b 	bl	800c754 <__ssputs_r>
 800c87e:	3001      	adds	r0, #1
 800c880:	f000 80a7 	beq.w	800c9d2 <_svfiprintf_r+0x1c6>
 800c884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c886:	445a      	add	r2, fp
 800c888:	9209      	str	r2, [sp, #36]	@ 0x24
 800c88a:	f89a 3000 	ldrb.w	r3, [sl]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	f000 809f 	beq.w	800c9d2 <_svfiprintf_r+0x1c6>
 800c894:	2300      	movs	r3, #0
 800c896:	f04f 32ff 	mov.w	r2, #4294967295
 800c89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c89e:	f10a 0a01 	add.w	sl, sl, #1
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	9307      	str	r3, [sp, #28]
 800c8a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ac:	4654      	mov	r4, sl
 800c8ae:	2205      	movs	r2, #5
 800c8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b4:	484e      	ldr	r0, [pc, #312]	@ (800c9f0 <_svfiprintf_r+0x1e4>)
 800c8b6:	f7f3 fc93 	bl	80001e0 <memchr>
 800c8ba:	9a04      	ldr	r2, [sp, #16]
 800c8bc:	b9d8      	cbnz	r0, 800c8f6 <_svfiprintf_r+0xea>
 800c8be:	06d0      	lsls	r0, r2, #27
 800c8c0:	bf44      	itt	mi
 800c8c2:	2320      	movmi	r3, #32
 800c8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8c8:	0711      	lsls	r1, r2, #28
 800c8ca:	bf44      	itt	mi
 800c8cc:	232b      	movmi	r3, #43	@ 0x2b
 800c8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8d8:	d015      	beq.n	800c906 <_svfiprintf_r+0xfa>
 800c8da:	9a07      	ldr	r2, [sp, #28]
 800c8dc:	4654      	mov	r4, sl
 800c8de:	2000      	movs	r0, #0
 800c8e0:	f04f 0c0a 	mov.w	ip, #10
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8ea:	3b30      	subs	r3, #48	@ 0x30
 800c8ec:	2b09      	cmp	r3, #9
 800c8ee:	d94b      	bls.n	800c988 <_svfiprintf_r+0x17c>
 800c8f0:	b1b0      	cbz	r0, 800c920 <_svfiprintf_r+0x114>
 800c8f2:	9207      	str	r2, [sp, #28]
 800c8f4:	e014      	b.n	800c920 <_svfiprintf_r+0x114>
 800c8f6:	eba0 0308 	sub.w	r3, r0, r8
 800c8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c8fe:	4313      	orrs	r3, r2
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	46a2      	mov	sl, r4
 800c904:	e7d2      	b.n	800c8ac <_svfiprintf_r+0xa0>
 800c906:	9b03      	ldr	r3, [sp, #12]
 800c908:	1d19      	adds	r1, r3, #4
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	9103      	str	r1, [sp, #12]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bfbb      	ittet	lt
 800c912:	425b      	neglt	r3, r3
 800c914:	f042 0202 	orrlt.w	r2, r2, #2
 800c918:	9307      	strge	r3, [sp, #28]
 800c91a:	9307      	strlt	r3, [sp, #28]
 800c91c:	bfb8      	it	lt
 800c91e:	9204      	strlt	r2, [sp, #16]
 800c920:	7823      	ldrb	r3, [r4, #0]
 800c922:	2b2e      	cmp	r3, #46	@ 0x2e
 800c924:	d10a      	bne.n	800c93c <_svfiprintf_r+0x130>
 800c926:	7863      	ldrb	r3, [r4, #1]
 800c928:	2b2a      	cmp	r3, #42	@ 0x2a
 800c92a:	d132      	bne.n	800c992 <_svfiprintf_r+0x186>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1d1a      	adds	r2, r3, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	9203      	str	r2, [sp, #12]
 800c934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c938:	3402      	adds	r4, #2
 800c93a:	9305      	str	r3, [sp, #20]
 800c93c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ca00 <_svfiprintf_r+0x1f4>
 800c940:	7821      	ldrb	r1, [r4, #0]
 800c942:	2203      	movs	r2, #3
 800c944:	4650      	mov	r0, sl
 800c946:	f7f3 fc4b 	bl	80001e0 <memchr>
 800c94a:	b138      	cbz	r0, 800c95c <_svfiprintf_r+0x150>
 800c94c:	9b04      	ldr	r3, [sp, #16]
 800c94e:	eba0 000a 	sub.w	r0, r0, sl
 800c952:	2240      	movs	r2, #64	@ 0x40
 800c954:	4082      	lsls	r2, r0
 800c956:	4313      	orrs	r3, r2
 800c958:	3401      	adds	r4, #1
 800c95a:	9304      	str	r3, [sp, #16]
 800c95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c960:	4824      	ldr	r0, [pc, #144]	@ (800c9f4 <_svfiprintf_r+0x1e8>)
 800c962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c966:	2206      	movs	r2, #6
 800c968:	f7f3 fc3a 	bl	80001e0 <memchr>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	d036      	beq.n	800c9de <_svfiprintf_r+0x1d2>
 800c970:	4b21      	ldr	r3, [pc, #132]	@ (800c9f8 <_svfiprintf_r+0x1ec>)
 800c972:	bb1b      	cbnz	r3, 800c9bc <_svfiprintf_r+0x1b0>
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	3307      	adds	r3, #7
 800c978:	f023 0307 	bic.w	r3, r3, #7
 800c97c:	3308      	adds	r3, #8
 800c97e:	9303      	str	r3, [sp, #12]
 800c980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c982:	4433      	add	r3, r6
 800c984:	9309      	str	r3, [sp, #36]	@ 0x24
 800c986:	e76a      	b.n	800c85e <_svfiprintf_r+0x52>
 800c988:	fb0c 3202 	mla	r2, ip, r2, r3
 800c98c:	460c      	mov	r4, r1
 800c98e:	2001      	movs	r0, #1
 800c990:	e7a8      	b.n	800c8e4 <_svfiprintf_r+0xd8>
 800c992:	2300      	movs	r3, #0
 800c994:	3401      	adds	r4, #1
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	4619      	mov	r1, r3
 800c99a:	f04f 0c0a 	mov.w	ip, #10
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a4:	3a30      	subs	r2, #48	@ 0x30
 800c9a6:	2a09      	cmp	r2, #9
 800c9a8:	d903      	bls.n	800c9b2 <_svfiprintf_r+0x1a6>
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0c6      	beq.n	800c93c <_svfiprintf_r+0x130>
 800c9ae:	9105      	str	r1, [sp, #20]
 800c9b0:	e7c4      	b.n	800c93c <_svfiprintf_r+0x130>
 800c9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e7f0      	b.n	800c99e <_svfiprintf_r+0x192>
 800c9bc:	ab03      	add	r3, sp, #12
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	462a      	mov	r2, r5
 800c9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800c9fc <_svfiprintf_r+0x1f0>)
 800c9c4:	a904      	add	r1, sp, #16
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	f7fd fe78 	bl	800a6bc <_printf_float>
 800c9cc:	1c42      	adds	r2, r0, #1
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	d1d6      	bne.n	800c980 <_svfiprintf_r+0x174>
 800c9d2:	89ab      	ldrh	r3, [r5, #12]
 800c9d4:	065b      	lsls	r3, r3, #25
 800c9d6:	f53f af2d 	bmi.w	800c834 <_svfiprintf_r+0x28>
 800c9da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c9dc:	e72c      	b.n	800c838 <_svfiprintf_r+0x2c>
 800c9de:	ab03      	add	r3, sp, #12
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	462a      	mov	r2, r5
 800c9e4:	4b05      	ldr	r3, [pc, #20]	@ (800c9fc <_svfiprintf_r+0x1f0>)
 800c9e6:	a904      	add	r1, sp, #16
 800c9e8:	4638      	mov	r0, r7
 800c9ea:	f7fe f8ff 	bl	800abec <_printf_i>
 800c9ee:	e7ed      	b.n	800c9cc <_svfiprintf_r+0x1c0>
 800c9f0:	0800fe3e 	.word	0x0800fe3e
 800c9f4:	0800fe48 	.word	0x0800fe48
 800c9f8:	0800a6bd 	.word	0x0800a6bd
 800c9fc:	0800c755 	.word	0x0800c755
 800ca00:	0800fe44 	.word	0x0800fe44

0800ca04 <__sflush_r>:
 800ca04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0c:	0716      	lsls	r6, r2, #28
 800ca0e:	4605      	mov	r5, r0
 800ca10:	460c      	mov	r4, r1
 800ca12:	d454      	bmi.n	800cabe <__sflush_r+0xba>
 800ca14:	684b      	ldr	r3, [r1, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	dc02      	bgt.n	800ca20 <__sflush_r+0x1c>
 800ca1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	dd48      	ble.n	800cab2 <__sflush_r+0xae>
 800ca20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca22:	2e00      	cmp	r6, #0
 800ca24:	d045      	beq.n	800cab2 <__sflush_r+0xae>
 800ca26:	2300      	movs	r3, #0
 800ca28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ca2c:	682f      	ldr	r7, [r5, #0]
 800ca2e:	6a21      	ldr	r1, [r4, #32]
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	d030      	beq.n	800ca96 <__sflush_r+0x92>
 800ca34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ca36:	89a3      	ldrh	r3, [r4, #12]
 800ca38:	0759      	lsls	r1, r3, #29
 800ca3a:	d505      	bpl.n	800ca48 <__sflush_r+0x44>
 800ca3c:	6863      	ldr	r3, [r4, #4]
 800ca3e:	1ad2      	subs	r2, r2, r3
 800ca40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ca42:	b10b      	cbz	r3, 800ca48 <__sflush_r+0x44>
 800ca44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	2300      	movs	r3, #0
 800ca4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ca4c:	6a21      	ldr	r1, [r4, #32]
 800ca4e:	4628      	mov	r0, r5
 800ca50:	47b0      	blx	r6
 800ca52:	1c43      	adds	r3, r0, #1
 800ca54:	89a3      	ldrh	r3, [r4, #12]
 800ca56:	d106      	bne.n	800ca66 <__sflush_r+0x62>
 800ca58:	6829      	ldr	r1, [r5, #0]
 800ca5a:	291d      	cmp	r1, #29
 800ca5c:	d82b      	bhi.n	800cab6 <__sflush_r+0xb2>
 800ca5e:	4a2a      	ldr	r2, [pc, #168]	@ (800cb08 <__sflush_r+0x104>)
 800ca60:	40ca      	lsrs	r2, r1
 800ca62:	07d6      	lsls	r6, r2, #31
 800ca64:	d527      	bpl.n	800cab6 <__sflush_r+0xb2>
 800ca66:	2200      	movs	r2, #0
 800ca68:	6062      	str	r2, [r4, #4]
 800ca6a:	04d9      	lsls	r1, r3, #19
 800ca6c:	6922      	ldr	r2, [r4, #16]
 800ca6e:	6022      	str	r2, [r4, #0]
 800ca70:	d504      	bpl.n	800ca7c <__sflush_r+0x78>
 800ca72:	1c42      	adds	r2, r0, #1
 800ca74:	d101      	bne.n	800ca7a <__sflush_r+0x76>
 800ca76:	682b      	ldr	r3, [r5, #0]
 800ca78:	b903      	cbnz	r3, 800ca7c <__sflush_r+0x78>
 800ca7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ca7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca7e:	602f      	str	r7, [r5, #0]
 800ca80:	b1b9      	cbz	r1, 800cab2 <__sflush_r+0xae>
 800ca82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca86:	4299      	cmp	r1, r3
 800ca88:	d002      	beq.n	800ca90 <__sflush_r+0x8c>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f7ff f9e8 	bl	800be60 <_free_r>
 800ca90:	2300      	movs	r3, #0
 800ca92:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca94:	e00d      	b.n	800cab2 <__sflush_r+0xae>
 800ca96:	2301      	movs	r3, #1
 800ca98:	4628      	mov	r0, r5
 800ca9a:	47b0      	blx	r6
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	1c50      	adds	r0, r2, #1
 800caa0:	d1c9      	bne.n	800ca36 <__sflush_r+0x32>
 800caa2:	682b      	ldr	r3, [r5, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0c6      	beq.n	800ca36 <__sflush_r+0x32>
 800caa8:	2b1d      	cmp	r3, #29
 800caaa:	d001      	beq.n	800cab0 <__sflush_r+0xac>
 800caac:	2b16      	cmp	r3, #22
 800caae:	d11e      	bne.n	800caee <__sflush_r+0xea>
 800cab0:	602f      	str	r7, [r5, #0]
 800cab2:	2000      	movs	r0, #0
 800cab4:	e022      	b.n	800cafc <__sflush_r+0xf8>
 800cab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caba:	b21b      	sxth	r3, r3
 800cabc:	e01b      	b.n	800caf6 <__sflush_r+0xf2>
 800cabe:	690f      	ldr	r7, [r1, #16]
 800cac0:	2f00      	cmp	r7, #0
 800cac2:	d0f6      	beq.n	800cab2 <__sflush_r+0xae>
 800cac4:	0793      	lsls	r3, r2, #30
 800cac6:	680e      	ldr	r6, [r1, #0]
 800cac8:	bf08      	it	eq
 800caca:	694b      	ldreq	r3, [r1, #20]
 800cacc:	600f      	str	r7, [r1, #0]
 800cace:	bf18      	it	ne
 800cad0:	2300      	movne	r3, #0
 800cad2:	eba6 0807 	sub.w	r8, r6, r7
 800cad6:	608b      	str	r3, [r1, #8]
 800cad8:	f1b8 0f00 	cmp.w	r8, #0
 800cadc:	dde9      	ble.n	800cab2 <__sflush_r+0xae>
 800cade:	6a21      	ldr	r1, [r4, #32]
 800cae0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cae2:	4643      	mov	r3, r8
 800cae4:	463a      	mov	r2, r7
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b0      	blx	r6
 800caea:	2800      	cmp	r0, #0
 800caec:	dc08      	bgt.n	800cb00 <__sflush_r+0xfc>
 800caee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caf6:	81a3      	strh	r3, [r4, #12]
 800caf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb00:	4407      	add	r7, r0
 800cb02:	eba8 0800 	sub.w	r8, r8, r0
 800cb06:	e7e7      	b.n	800cad8 <__sflush_r+0xd4>
 800cb08:	20400001 	.word	0x20400001

0800cb0c <_fflush_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	690b      	ldr	r3, [r1, #16]
 800cb10:	4605      	mov	r5, r0
 800cb12:	460c      	mov	r4, r1
 800cb14:	b913      	cbnz	r3, 800cb1c <_fflush_r+0x10>
 800cb16:	2500      	movs	r5, #0
 800cb18:	4628      	mov	r0, r5
 800cb1a:	bd38      	pop	{r3, r4, r5, pc}
 800cb1c:	b118      	cbz	r0, 800cb26 <_fflush_r+0x1a>
 800cb1e:	6a03      	ldr	r3, [r0, #32]
 800cb20:	b90b      	cbnz	r3, 800cb26 <_fflush_r+0x1a>
 800cb22:	f7fe fa0d 	bl	800af40 <__sinit>
 800cb26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d0f3      	beq.n	800cb16 <_fflush_r+0xa>
 800cb2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cb30:	07d0      	lsls	r0, r2, #31
 800cb32:	d404      	bmi.n	800cb3e <_fflush_r+0x32>
 800cb34:	0599      	lsls	r1, r3, #22
 800cb36:	d402      	bmi.n	800cb3e <_fflush_r+0x32>
 800cb38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb3a:	f7fe fb34 	bl	800b1a6 <__retarget_lock_acquire_recursive>
 800cb3e:	4628      	mov	r0, r5
 800cb40:	4621      	mov	r1, r4
 800cb42:	f7ff ff5f 	bl	800ca04 <__sflush_r>
 800cb46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb48:	07da      	lsls	r2, r3, #31
 800cb4a:	4605      	mov	r5, r0
 800cb4c:	d4e4      	bmi.n	800cb18 <_fflush_r+0xc>
 800cb4e:	89a3      	ldrh	r3, [r4, #12]
 800cb50:	059b      	lsls	r3, r3, #22
 800cb52:	d4e1      	bmi.n	800cb18 <_fflush_r+0xc>
 800cb54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb56:	f7fe fb27 	bl	800b1a8 <__retarget_lock_release_recursive>
 800cb5a:	e7dd      	b.n	800cb18 <_fflush_r+0xc>

0800cb5c <memmove>:
 800cb5c:	4288      	cmp	r0, r1
 800cb5e:	b510      	push	{r4, lr}
 800cb60:	eb01 0402 	add.w	r4, r1, r2
 800cb64:	d902      	bls.n	800cb6c <memmove+0x10>
 800cb66:	4284      	cmp	r4, r0
 800cb68:	4623      	mov	r3, r4
 800cb6a:	d807      	bhi.n	800cb7c <memmove+0x20>
 800cb6c:	1e43      	subs	r3, r0, #1
 800cb6e:	42a1      	cmp	r1, r4
 800cb70:	d008      	beq.n	800cb84 <memmove+0x28>
 800cb72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb7a:	e7f8      	b.n	800cb6e <memmove+0x12>
 800cb7c:	4402      	add	r2, r0
 800cb7e:	4601      	mov	r1, r0
 800cb80:	428a      	cmp	r2, r1
 800cb82:	d100      	bne.n	800cb86 <memmove+0x2a>
 800cb84:	bd10      	pop	{r4, pc}
 800cb86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb8e:	e7f7      	b.n	800cb80 <memmove+0x24>

0800cb90 <_sbrk_r>:
 800cb90:	b538      	push	{r3, r4, r5, lr}
 800cb92:	4d06      	ldr	r5, [pc, #24]	@ (800cbac <_sbrk_r+0x1c>)
 800cb94:	2300      	movs	r3, #0
 800cb96:	4604      	mov	r4, r0
 800cb98:	4608      	mov	r0, r1
 800cb9a:	602b      	str	r3, [r5, #0]
 800cb9c:	f7f8 fff4 	bl	8005b88 <_sbrk>
 800cba0:	1c43      	adds	r3, r0, #1
 800cba2:	d102      	bne.n	800cbaa <_sbrk_r+0x1a>
 800cba4:	682b      	ldr	r3, [r5, #0]
 800cba6:	b103      	cbz	r3, 800cbaa <_sbrk_r+0x1a>
 800cba8:	6023      	str	r3, [r4, #0]
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	20001640 	.word	0x20001640

0800cbb0 <memcpy>:
 800cbb0:	440a      	add	r2, r1
 800cbb2:	4291      	cmp	r1, r2
 800cbb4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbb8:	d100      	bne.n	800cbbc <memcpy+0xc>
 800cbba:	4770      	bx	lr
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbc6:	4291      	cmp	r1, r2
 800cbc8:	d1f9      	bne.n	800cbbe <memcpy+0xe>
 800cbca:	bd10      	pop	{r4, pc}

0800cbcc <__assert_func>:
 800cbcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbce:	4614      	mov	r4, r2
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	4b09      	ldr	r3, [pc, #36]	@ (800cbf8 <__assert_func+0x2c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	68d8      	ldr	r0, [r3, #12]
 800cbda:	b14c      	cbz	r4, 800cbf0 <__assert_func+0x24>
 800cbdc:	4b07      	ldr	r3, [pc, #28]	@ (800cbfc <__assert_func+0x30>)
 800cbde:	9100      	str	r1, [sp, #0]
 800cbe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbe4:	4906      	ldr	r1, [pc, #24]	@ (800cc00 <__assert_func+0x34>)
 800cbe6:	462b      	mov	r3, r5
 800cbe8:	f000 f870 	bl	800cccc <fiprintf>
 800cbec:	f000 f880 	bl	800ccf0 <abort>
 800cbf0:	4b04      	ldr	r3, [pc, #16]	@ (800cc04 <__assert_func+0x38>)
 800cbf2:	461c      	mov	r4, r3
 800cbf4:	e7f3      	b.n	800cbde <__assert_func+0x12>
 800cbf6:	bf00      	nop
 800cbf8:	20000028 	.word	0x20000028
 800cbfc:	0800fe59 	.word	0x0800fe59
 800cc00:	0800fe66 	.word	0x0800fe66
 800cc04:	0800fe94 	.word	0x0800fe94

0800cc08 <_calloc_r>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	fba1 5402 	umull	r5, r4, r1, r2
 800cc0e:	b934      	cbnz	r4, 800cc1e <_calloc_r+0x16>
 800cc10:	4629      	mov	r1, r5
 800cc12:	f7ff f999 	bl	800bf48 <_malloc_r>
 800cc16:	4606      	mov	r6, r0
 800cc18:	b928      	cbnz	r0, 800cc26 <_calloc_r+0x1e>
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	bd70      	pop	{r4, r5, r6, pc}
 800cc1e:	220c      	movs	r2, #12
 800cc20:	6002      	str	r2, [r0, #0]
 800cc22:	2600      	movs	r6, #0
 800cc24:	e7f9      	b.n	800cc1a <_calloc_r+0x12>
 800cc26:	462a      	mov	r2, r5
 800cc28:	4621      	mov	r1, r4
 800cc2a:	f7fe fa3f 	bl	800b0ac <memset>
 800cc2e:	e7f4      	b.n	800cc1a <_calloc_r+0x12>

0800cc30 <__ascii_mbtowc>:
 800cc30:	b082      	sub	sp, #8
 800cc32:	b901      	cbnz	r1, 800cc36 <__ascii_mbtowc+0x6>
 800cc34:	a901      	add	r1, sp, #4
 800cc36:	b142      	cbz	r2, 800cc4a <__ascii_mbtowc+0x1a>
 800cc38:	b14b      	cbz	r3, 800cc4e <__ascii_mbtowc+0x1e>
 800cc3a:	7813      	ldrb	r3, [r2, #0]
 800cc3c:	600b      	str	r3, [r1, #0]
 800cc3e:	7812      	ldrb	r2, [r2, #0]
 800cc40:	1e10      	subs	r0, r2, #0
 800cc42:	bf18      	it	ne
 800cc44:	2001      	movne	r0, #1
 800cc46:	b002      	add	sp, #8
 800cc48:	4770      	bx	lr
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	e7fb      	b.n	800cc46 <__ascii_mbtowc+0x16>
 800cc4e:	f06f 0001 	mvn.w	r0, #1
 800cc52:	e7f8      	b.n	800cc46 <__ascii_mbtowc+0x16>

0800cc54 <_realloc_r>:
 800cc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc58:	4607      	mov	r7, r0
 800cc5a:	4614      	mov	r4, r2
 800cc5c:	460d      	mov	r5, r1
 800cc5e:	b921      	cbnz	r1, 800cc6a <_realloc_r+0x16>
 800cc60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc64:	4611      	mov	r1, r2
 800cc66:	f7ff b96f 	b.w	800bf48 <_malloc_r>
 800cc6a:	b92a      	cbnz	r2, 800cc78 <_realloc_r+0x24>
 800cc6c:	f7ff f8f8 	bl	800be60 <_free_r>
 800cc70:	4625      	mov	r5, r4
 800cc72:	4628      	mov	r0, r5
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc78:	f000 f841 	bl	800ccfe <_malloc_usable_size_r>
 800cc7c:	4284      	cmp	r4, r0
 800cc7e:	4606      	mov	r6, r0
 800cc80:	d802      	bhi.n	800cc88 <_realloc_r+0x34>
 800cc82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc86:	d8f4      	bhi.n	800cc72 <_realloc_r+0x1e>
 800cc88:	4621      	mov	r1, r4
 800cc8a:	4638      	mov	r0, r7
 800cc8c:	f7ff f95c 	bl	800bf48 <_malloc_r>
 800cc90:	4680      	mov	r8, r0
 800cc92:	b908      	cbnz	r0, 800cc98 <_realloc_r+0x44>
 800cc94:	4645      	mov	r5, r8
 800cc96:	e7ec      	b.n	800cc72 <_realloc_r+0x1e>
 800cc98:	42b4      	cmp	r4, r6
 800cc9a:	4622      	mov	r2, r4
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	bf28      	it	cs
 800cca0:	4632      	movcs	r2, r6
 800cca2:	f7ff ff85 	bl	800cbb0 <memcpy>
 800cca6:	4629      	mov	r1, r5
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7ff f8d9 	bl	800be60 <_free_r>
 800ccae:	e7f1      	b.n	800cc94 <_realloc_r+0x40>

0800ccb0 <__ascii_wctomb>:
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	4608      	mov	r0, r1
 800ccb4:	b141      	cbz	r1, 800ccc8 <__ascii_wctomb+0x18>
 800ccb6:	2aff      	cmp	r2, #255	@ 0xff
 800ccb8:	d904      	bls.n	800ccc4 <__ascii_wctomb+0x14>
 800ccba:	228a      	movs	r2, #138	@ 0x8a
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc2:	4770      	bx	lr
 800ccc4:	700a      	strb	r2, [r1, #0]
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	4770      	bx	lr
	...

0800cccc <fiprintf>:
 800cccc:	b40e      	push	{r1, r2, r3}
 800ccce:	b503      	push	{r0, r1, lr}
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	ab03      	add	r3, sp, #12
 800ccd4:	4805      	ldr	r0, [pc, #20]	@ (800ccec <fiprintf+0x20>)
 800ccd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccda:	6800      	ldr	r0, [r0, #0]
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	f000 f83f 	bl	800cd60 <_vfiprintf_r>
 800cce2:	b002      	add	sp, #8
 800cce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cce8:	b003      	add	sp, #12
 800ccea:	4770      	bx	lr
 800ccec:	20000028 	.word	0x20000028

0800ccf0 <abort>:
 800ccf0:	b508      	push	{r3, lr}
 800ccf2:	2006      	movs	r0, #6
 800ccf4:	f000 fa08 	bl	800d108 <raise>
 800ccf8:	2001      	movs	r0, #1
 800ccfa:	f7f8 fecd 	bl	8005a98 <_exit>

0800ccfe <_malloc_usable_size_r>:
 800ccfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd02:	1f18      	subs	r0, r3, #4
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bfbc      	itt	lt
 800cd08:	580b      	ldrlt	r3, [r1, r0]
 800cd0a:	18c0      	addlt	r0, r0, r3
 800cd0c:	4770      	bx	lr

0800cd0e <__sfputc_r>:
 800cd0e:	6893      	ldr	r3, [r2, #8]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	b410      	push	{r4}
 800cd16:	6093      	str	r3, [r2, #8]
 800cd18:	da08      	bge.n	800cd2c <__sfputc_r+0x1e>
 800cd1a:	6994      	ldr	r4, [r2, #24]
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	db01      	blt.n	800cd24 <__sfputc_r+0x16>
 800cd20:	290a      	cmp	r1, #10
 800cd22:	d103      	bne.n	800cd2c <__sfputc_r+0x1e>
 800cd24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd28:	f000 b932 	b.w	800cf90 <__swbuf_r>
 800cd2c:	6813      	ldr	r3, [r2, #0]
 800cd2e:	1c58      	adds	r0, r3, #1
 800cd30:	6010      	str	r0, [r2, #0]
 800cd32:	7019      	strb	r1, [r3, #0]
 800cd34:	4608      	mov	r0, r1
 800cd36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <__sfputs_r>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	4606      	mov	r6, r0
 800cd40:	460f      	mov	r7, r1
 800cd42:	4614      	mov	r4, r2
 800cd44:	18d5      	adds	r5, r2, r3
 800cd46:	42ac      	cmp	r4, r5
 800cd48:	d101      	bne.n	800cd4e <__sfputs_r+0x12>
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	e007      	b.n	800cd5e <__sfputs_r+0x22>
 800cd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd52:	463a      	mov	r2, r7
 800cd54:	4630      	mov	r0, r6
 800cd56:	f7ff ffda 	bl	800cd0e <__sfputc_r>
 800cd5a:	1c43      	adds	r3, r0, #1
 800cd5c:	d1f3      	bne.n	800cd46 <__sfputs_r+0xa>
 800cd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd60 <_vfiprintf_r>:
 800cd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	460d      	mov	r5, r1
 800cd66:	b09d      	sub	sp, #116	@ 0x74
 800cd68:	4614      	mov	r4, r2
 800cd6a:	4698      	mov	r8, r3
 800cd6c:	4606      	mov	r6, r0
 800cd6e:	b118      	cbz	r0, 800cd78 <_vfiprintf_r+0x18>
 800cd70:	6a03      	ldr	r3, [r0, #32]
 800cd72:	b90b      	cbnz	r3, 800cd78 <_vfiprintf_r+0x18>
 800cd74:	f7fe f8e4 	bl	800af40 <__sinit>
 800cd78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd7a:	07d9      	lsls	r1, r3, #31
 800cd7c:	d405      	bmi.n	800cd8a <_vfiprintf_r+0x2a>
 800cd7e:	89ab      	ldrh	r3, [r5, #12]
 800cd80:	059a      	lsls	r2, r3, #22
 800cd82:	d402      	bmi.n	800cd8a <_vfiprintf_r+0x2a>
 800cd84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd86:	f7fe fa0e 	bl	800b1a6 <__retarget_lock_acquire_recursive>
 800cd8a:	89ab      	ldrh	r3, [r5, #12]
 800cd8c:	071b      	lsls	r3, r3, #28
 800cd8e:	d501      	bpl.n	800cd94 <_vfiprintf_r+0x34>
 800cd90:	692b      	ldr	r3, [r5, #16]
 800cd92:	b99b      	cbnz	r3, 800cdbc <_vfiprintf_r+0x5c>
 800cd94:	4629      	mov	r1, r5
 800cd96:	4630      	mov	r0, r6
 800cd98:	f000 f938 	bl	800d00c <__swsetup_r>
 800cd9c:	b170      	cbz	r0, 800cdbc <_vfiprintf_r+0x5c>
 800cd9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cda0:	07dc      	lsls	r4, r3, #31
 800cda2:	d504      	bpl.n	800cdae <_vfiprintf_r+0x4e>
 800cda4:	f04f 30ff 	mov.w	r0, #4294967295
 800cda8:	b01d      	add	sp, #116	@ 0x74
 800cdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdae:	89ab      	ldrh	r3, [r5, #12]
 800cdb0:	0598      	lsls	r0, r3, #22
 800cdb2:	d4f7      	bmi.n	800cda4 <_vfiprintf_r+0x44>
 800cdb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdb6:	f7fe f9f7 	bl	800b1a8 <__retarget_lock_release_recursive>
 800cdba:	e7f3      	b.n	800cda4 <_vfiprintf_r+0x44>
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdc0:	2320      	movs	r3, #32
 800cdc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cdc6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdca:	2330      	movs	r3, #48	@ 0x30
 800cdcc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf7c <_vfiprintf_r+0x21c>
 800cdd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdd4:	f04f 0901 	mov.w	r9, #1
 800cdd8:	4623      	mov	r3, r4
 800cdda:	469a      	mov	sl, r3
 800cddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cde0:	b10a      	cbz	r2, 800cde6 <_vfiprintf_r+0x86>
 800cde2:	2a25      	cmp	r2, #37	@ 0x25
 800cde4:	d1f9      	bne.n	800cdda <_vfiprintf_r+0x7a>
 800cde6:	ebba 0b04 	subs.w	fp, sl, r4
 800cdea:	d00b      	beq.n	800ce04 <_vfiprintf_r+0xa4>
 800cdec:	465b      	mov	r3, fp
 800cdee:	4622      	mov	r2, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f7ff ffa2 	bl	800cd3c <__sfputs_r>
 800cdf8:	3001      	adds	r0, #1
 800cdfa:	f000 80a7 	beq.w	800cf4c <_vfiprintf_r+0x1ec>
 800cdfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce00:	445a      	add	r2, fp
 800ce02:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce04:	f89a 3000 	ldrb.w	r3, [sl]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	f000 809f 	beq.w	800cf4c <_vfiprintf_r+0x1ec>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f04f 32ff 	mov.w	r2, #4294967295
 800ce14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce18:	f10a 0a01 	add.w	sl, sl, #1
 800ce1c:	9304      	str	r3, [sp, #16]
 800ce1e:	9307      	str	r3, [sp, #28]
 800ce20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce24:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce26:	4654      	mov	r4, sl
 800ce28:	2205      	movs	r2, #5
 800ce2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce2e:	4853      	ldr	r0, [pc, #332]	@ (800cf7c <_vfiprintf_r+0x21c>)
 800ce30:	f7f3 f9d6 	bl	80001e0 <memchr>
 800ce34:	9a04      	ldr	r2, [sp, #16]
 800ce36:	b9d8      	cbnz	r0, 800ce70 <_vfiprintf_r+0x110>
 800ce38:	06d1      	lsls	r1, r2, #27
 800ce3a:	bf44      	itt	mi
 800ce3c:	2320      	movmi	r3, #32
 800ce3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce42:	0713      	lsls	r3, r2, #28
 800ce44:	bf44      	itt	mi
 800ce46:	232b      	movmi	r3, #43	@ 0x2b
 800ce48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ce50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce52:	d015      	beq.n	800ce80 <_vfiprintf_r+0x120>
 800ce54:	9a07      	ldr	r2, [sp, #28]
 800ce56:	4654      	mov	r4, sl
 800ce58:	2000      	movs	r0, #0
 800ce5a:	f04f 0c0a 	mov.w	ip, #10
 800ce5e:	4621      	mov	r1, r4
 800ce60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce64:	3b30      	subs	r3, #48	@ 0x30
 800ce66:	2b09      	cmp	r3, #9
 800ce68:	d94b      	bls.n	800cf02 <_vfiprintf_r+0x1a2>
 800ce6a:	b1b0      	cbz	r0, 800ce9a <_vfiprintf_r+0x13a>
 800ce6c:	9207      	str	r2, [sp, #28]
 800ce6e:	e014      	b.n	800ce9a <_vfiprintf_r+0x13a>
 800ce70:	eba0 0308 	sub.w	r3, r0, r8
 800ce74:	fa09 f303 	lsl.w	r3, r9, r3
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	9304      	str	r3, [sp, #16]
 800ce7c:	46a2      	mov	sl, r4
 800ce7e:	e7d2      	b.n	800ce26 <_vfiprintf_r+0xc6>
 800ce80:	9b03      	ldr	r3, [sp, #12]
 800ce82:	1d19      	adds	r1, r3, #4
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	9103      	str	r1, [sp, #12]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	bfbb      	ittet	lt
 800ce8c:	425b      	neglt	r3, r3
 800ce8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ce92:	9307      	strge	r3, [sp, #28]
 800ce94:	9307      	strlt	r3, [sp, #28]
 800ce96:	bfb8      	it	lt
 800ce98:	9204      	strlt	r2, [sp, #16]
 800ce9a:	7823      	ldrb	r3, [r4, #0]
 800ce9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce9e:	d10a      	bne.n	800ceb6 <_vfiprintf_r+0x156>
 800cea0:	7863      	ldrb	r3, [r4, #1]
 800cea2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cea4:	d132      	bne.n	800cf0c <_vfiprintf_r+0x1ac>
 800cea6:	9b03      	ldr	r3, [sp, #12]
 800cea8:	1d1a      	adds	r2, r3, #4
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	9203      	str	r2, [sp, #12]
 800ceae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ceb2:	3402      	adds	r4, #2
 800ceb4:	9305      	str	r3, [sp, #20]
 800ceb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cf8c <_vfiprintf_r+0x22c>
 800ceba:	7821      	ldrb	r1, [r4, #0]
 800cebc:	2203      	movs	r2, #3
 800cebe:	4650      	mov	r0, sl
 800cec0:	f7f3 f98e 	bl	80001e0 <memchr>
 800cec4:	b138      	cbz	r0, 800ced6 <_vfiprintf_r+0x176>
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	eba0 000a 	sub.w	r0, r0, sl
 800cecc:	2240      	movs	r2, #64	@ 0x40
 800cece:	4082      	lsls	r2, r0
 800ced0:	4313      	orrs	r3, r2
 800ced2:	3401      	adds	r4, #1
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceda:	4829      	ldr	r0, [pc, #164]	@ (800cf80 <_vfiprintf_r+0x220>)
 800cedc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cee0:	2206      	movs	r2, #6
 800cee2:	f7f3 f97d 	bl	80001e0 <memchr>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d03f      	beq.n	800cf6a <_vfiprintf_r+0x20a>
 800ceea:	4b26      	ldr	r3, [pc, #152]	@ (800cf84 <_vfiprintf_r+0x224>)
 800ceec:	bb1b      	cbnz	r3, 800cf36 <_vfiprintf_r+0x1d6>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	3307      	adds	r3, #7
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	3308      	adds	r3, #8
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cefc:	443b      	add	r3, r7
 800cefe:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf00:	e76a      	b.n	800cdd8 <_vfiprintf_r+0x78>
 800cf02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf06:	460c      	mov	r4, r1
 800cf08:	2001      	movs	r0, #1
 800cf0a:	e7a8      	b.n	800ce5e <_vfiprintf_r+0xfe>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	3401      	adds	r4, #1
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	4619      	mov	r1, r3
 800cf14:	f04f 0c0a 	mov.w	ip, #10
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf1e:	3a30      	subs	r2, #48	@ 0x30
 800cf20:	2a09      	cmp	r2, #9
 800cf22:	d903      	bls.n	800cf2c <_vfiprintf_r+0x1cc>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0c6      	beq.n	800ceb6 <_vfiprintf_r+0x156>
 800cf28:	9105      	str	r1, [sp, #20]
 800cf2a:	e7c4      	b.n	800ceb6 <_vfiprintf_r+0x156>
 800cf2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf30:	4604      	mov	r4, r0
 800cf32:	2301      	movs	r3, #1
 800cf34:	e7f0      	b.n	800cf18 <_vfiprintf_r+0x1b8>
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	4b12      	ldr	r3, [pc, #72]	@ (800cf88 <_vfiprintf_r+0x228>)
 800cf3e:	a904      	add	r1, sp, #16
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7fd fbbb 	bl	800a6bc <_printf_float>
 800cf46:	4607      	mov	r7, r0
 800cf48:	1c78      	adds	r0, r7, #1
 800cf4a:	d1d6      	bne.n	800cefa <_vfiprintf_r+0x19a>
 800cf4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf4e:	07d9      	lsls	r1, r3, #31
 800cf50:	d405      	bmi.n	800cf5e <_vfiprintf_r+0x1fe>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	059a      	lsls	r2, r3, #22
 800cf56:	d402      	bmi.n	800cf5e <_vfiprintf_r+0x1fe>
 800cf58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf5a:	f7fe f925 	bl	800b1a8 <__retarget_lock_release_recursive>
 800cf5e:	89ab      	ldrh	r3, [r5, #12]
 800cf60:	065b      	lsls	r3, r3, #25
 800cf62:	f53f af1f 	bmi.w	800cda4 <_vfiprintf_r+0x44>
 800cf66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf68:	e71e      	b.n	800cda8 <_vfiprintf_r+0x48>
 800cf6a:	ab03      	add	r3, sp, #12
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	462a      	mov	r2, r5
 800cf70:	4b05      	ldr	r3, [pc, #20]	@ (800cf88 <_vfiprintf_r+0x228>)
 800cf72:	a904      	add	r1, sp, #16
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7fd fe39 	bl	800abec <_printf_i>
 800cf7a:	e7e4      	b.n	800cf46 <_vfiprintf_r+0x1e6>
 800cf7c:	0800fe3e 	.word	0x0800fe3e
 800cf80:	0800fe48 	.word	0x0800fe48
 800cf84:	0800a6bd 	.word	0x0800a6bd
 800cf88:	0800cd3d 	.word	0x0800cd3d
 800cf8c:	0800fe44 	.word	0x0800fe44

0800cf90 <__swbuf_r>:
 800cf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf92:	460e      	mov	r6, r1
 800cf94:	4614      	mov	r4, r2
 800cf96:	4605      	mov	r5, r0
 800cf98:	b118      	cbz	r0, 800cfa2 <__swbuf_r+0x12>
 800cf9a:	6a03      	ldr	r3, [r0, #32]
 800cf9c:	b90b      	cbnz	r3, 800cfa2 <__swbuf_r+0x12>
 800cf9e:	f7fd ffcf 	bl	800af40 <__sinit>
 800cfa2:	69a3      	ldr	r3, [r4, #24]
 800cfa4:	60a3      	str	r3, [r4, #8]
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	071a      	lsls	r2, r3, #28
 800cfaa:	d501      	bpl.n	800cfb0 <__swbuf_r+0x20>
 800cfac:	6923      	ldr	r3, [r4, #16]
 800cfae:	b943      	cbnz	r3, 800cfc2 <__swbuf_r+0x32>
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	f000 f82a 	bl	800d00c <__swsetup_r>
 800cfb8:	b118      	cbz	r0, 800cfc2 <__swbuf_r+0x32>
 800cfba:	f04f 37ff 	mov.w	r7, #4294967295
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	6922      	ldr	r2, [r4, #16]
 800cfc6:	1a98      	subs	r0, r3, r2
 800cfc8:	6963      	ldr	r3, [r4, #20]
 800cfca:	b2f6      	uxtb	r6, r6
 800cfcc:	4283      	cmp	r3, r0
 800cfce:	4637      	mov	r7, r6
 800cfd0:	dc05      	bgt.n	800cfde <__swbuf_r+0x4e>
 800cfd2:	4621      	mov	r1, r4
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	f7ff fd99 	bl	800cb0c <_fflush_r>
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d1ed      	bne.n	800cfba <__swbuf_r+0x2a>
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	3b01      	subs	r3, #1
 800cfe2:	60a3      	str	r3, [r4, #8]
 800cfe4:	6823      	ldr	r3, [r4, #0]
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	6022      	str	r2, [r4, #0]
 800cfea:	701e      	strb	r6, [r3, #0]
 800cfec:	6962      	ldr	r2, [r4, #20]
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d004      	beq.n	800cffe <__swbuf_r+0x6e>
 800cff4:	89a3      	ldrh	r3, [r4, #12]
 800cff6:	07db      	lsls	r3, r3, #31
 800cff8:	d5e1      	bpl.n	800cfbe <__swbuf_r+0x2e>
 800cffa:	2e0a      	cmp	r6, #10
 800cffc:	d1df      	bne.n	800cfbe <__swbuf_r+0x2e>
 800cffe:	4621      	mov	r1, r4
 800d000:	4628      	mov	r0, r5
 800d002:	f7ff fd83 	bl	800cb0c <_fflush_r>
 800d006:	2800      	cmp	r0, #0
 800d008:	d0d9      	beq.n	800cfbe <__swbuf_r+0x2e>
 800d00a:	e7d6      	b.n	800cfba <__swbuf_r+0x2a>

0800d00c <__swsetup_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4b29      	ldr	r3, [pc, #164]	@ (800d0b4 <__swsetup_r+0xa8>)
 800d010:	4605      	mov	r5, r0
 800d012:	6818      	ldr	r0, [r3, #0]
 800d014:	460c      	mov	r4, r1
 800d016:	b118      	cbz	r0, 800d020 <__swsetup_r+0x14>
 800d018:	6a03      	ldr	r3, [r0, #32]
 800d01a:	b90b      	cbnz	r3, 800d020 <__swsetup_r+0x14>
 800d01c:	f7fd ff90 	bl	800af40 <__sinit>
 800d020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d024:	0719      	lsls	r1, r3, #28
 800d026:	d422      	bmi.n	800d06e <__swsetup_r+0x62>
 800d028:	06da      	lsls	r2, r3, #27
 800d02a:	d407      	bmi.n	800d03c <__swsetup_r+0x30>
 800d02c:	2209      	movs	r2, #9
 800d02e:	602a      	str	r2, [r5, #0]
 800d030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d034:	81a3      	strh	r3, [r4, #12]
 800d036:	f04f 30ff 	mov.w	r0, #4294967295
 800d03a:	e033      	b.n	800d0a4 <__swsetup_r+0x98>
 800d03c:	0758      	lsls	r0, r3, #29
 800d03e:	d512      	bpl.n	800d066 <__swsetup_r+0x5a>
 800d040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d042:	b141      	cbz	r1, 800d056 <__swsetup_r+0x4a>
 800d044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d048:	4299      	cmp	r1, r3
 800d04a:	d002      	beq.n	800d052 <__swsetup_r+0x46>
 800d04c:	4628      	mov	r0, r5
 800d04e:	f7fe ff07 	bl	800be60 <_free_r>
 800d052:	2300      	movs	r3, #0
 800d054:	6363      	str	r3, [r4, #52]	@ 0x34
 800d056:	89a3      	ldrh	r3, [r4, #12]
 800d058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	2300      	movs	r3, #0
 800d060:	6063      	str	r3, [r4, #4]
 800d062:	6923      	ldr	r3, [r4, #16]
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f043 0308 	orr.w	r3, r3, #8
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	b94b      	cbnz	r3, 800d086 <__swsetup_r+0x7a>
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d07c:	d003      	beq.n	800d086 <__swsetup_r+0x7a>
 800d07e:	4621      	mov	r1, r4
 800d080:	4628      	mov	r0, r5
 800d082:	f000 f883 	bl	800d18c <__smakebuf_r>
 800d086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d08a:	f013 0201 	ands.w	r2, r3, #1
 800d08e:	d00a      	beq.n	800d0a6 <__swsetup_r+0x9a>
 800d090:	2200      	movs	r2, #0
 800d092:	60a2      	str	r2, [r4, #8]
 800d094:	6962      	ldr	r2, [r4, #20]
 800d096:	4252      	negs	r2, r2
 800d098:	61a2      	str	r2, [r4, #24]
 800d09a:	6922      	ldr	r2, [r4, #16]
 800d09c:	b942      	cbnz	r2, 800d0b0 <__swsetup_r+0xa4>
 800d09e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0a2:	d1c5      	bne.n	800d030 <__swsetup_r+0x24>
 800d0a4:	bd38      	pop	{r3, r4, r5, pc}
 800d0a6:	0799      	lsls	r1, r3, #30
 800d0a8:	bf58      	it	pl
 800d0aa:	6962      	ldrpl	r2, [r4, #20]
 800d0ac:	60a2      	str	r2, [r4, #8]
 800d0ae:	e7f4      	b.n	800d09a <__swsetup_r+0x8e>
 800d0b0:	2000      	movs	r0, #0
 800d0b2:	e7f7      	b.n	800d0a4 <__swsetup_r+0x98>
 800d0b4:	20000028 	.word	0x20000028

0800d0b8 <_raise_r>:
 800d0b8:	291f      	cmp	r1, #31
 800d0ba:	b538      	push	{r3, r4, r5, lr}
 800d0bc:	4605      	mov	r5, r0
 800d0be:	460c      	mov	r4, r1
 800d0c0:	d904      	bls.n	800d0cc <_raise_r+0x14>
 800d0c2:	2316      	movs	r3, #22
 800d0c4:	6003      	str	r3, [r0, #0]
 800d0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}
 800d0cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d0ce:	b112      	cbz	r2, 800d0d6 <_raise_r+0x1e>
 800d0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0d4:	b94b      	cbnz	r3, 800d0ea <_raise_r+0x32>
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f000 f830 	bl	800d13c <_getpid_r>
 800d0dc:	4622      	mov	r2, r4
 800d0de:	4601      	mov	r1, r0
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0e6:	f000 b817 	b.w	800d118 <_kill_r>
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d00a      	beq.n	800d104 <_raise_r+0x4c>
 800d0ee:	1c59      	adds	r1, r3, #1
 800d0f0:	d103      	bne.n	800d0fa <_raise_r+0x42>
 800d0f2:	2316      	movs	r3, #22
 800d0f4:	6003      	str	r3, [r0, #0]
 800d0f6:	2001      	movs	r0, #1
 800d0f8:	e7e7      	b.n	800d0ca <_raise_r+0x12>
 800d0fa:	2100      	movs	r1, #0
 800d0fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d100:	4620      	mov	r0, r4
 800d102:	4798      	blx	r3
 800d104:	2000      	movs	r0, #0
 800d106:	e7e0      	b.n	800d0ca <_raise_r+0x12>

0800d108 <raise>:
 800d108:	4b02      	ldr	r3, [pc, #8]	@ (800d114 <raise+0xc>)
 800d10a:	4601      	mov	r1, r0
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	f7ff bfd3 	b.w	800d0b8 <_raise_r>
 800d112:	bf00      	nop
 800d114:	20000028 	.word	0x20000028

0800d118 <_kill_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4d07      	ldr	r5, [pc, #28]	@ (800d138 <_kill_r+0x20>)
 800d11c:	2300      	movs	r3, #0
 800d11e:	4604      	mov	r4, r0
 800d120:	4608      	mov	r0, r1
 800d122:	4611      	mov	r1, r2
 800d124:	602b      	str	r3, [r5, #0]
 800d126:	f7f8 fca7 	bl	8005a78 <_kill>
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	d102      	bne.n	800d134 <_kill_r+0x1c>
 800d12e:	682b      	ldr	r3, [r5, #0]
 800d130:	b103      	cbz	r3, 800d134 <_kill_r+0x1c>
 800d132:	6023      	str	r3, [r4, #0]
 800d134:	bd38      	pop	{r3, r4, r5, pc}
 800d136:	bf00      	nop
 800d138:	20001640 	.word	0x20001640

0800d13c <_getpid_r>:
 800d13c:	f7f8 bc94 	b.w	8005a68 <_getpid>

0800d140 <__swhatbuf_r>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	460c      	mov	r4, r1
 800d144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d148:	2900      	cmp	r1, #0
 800d14a:	b096      	sub	sp, #88	@ 0x58
 800d14c:	4615      	mov	r5, r2
 800d14e:	461e      	mov	r6, r3
 800d150:	da0d      	bge.n	800d16e <__swhatbuf_r+0x2e>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d158:	f04f 0100 	mov.w	r1, #0
 800d15c:	bf14      	ite	ne
 800d15e:	2340      	movne	r3, #64	@ 0x40
 800d160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d164:	2000      	movs	r0, #0
 800d166:	6031      	str	r1, [r6, #0]
 800d168:	602b      	str	r3, [r5, #0]
 800d16a:	b016      	add	sp, #88	@ 0x58
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	466a      	mov	r2, sp
 800d170:	f000 f848 	bl	800d204 <_fstat_r>
 800d174:	2800      	cmp	r0, #0
 800d176:	dbec      	blt.n	800d152 <__swhatbuf_r+0x12>
 800d178:	9901      	ldr	r1, [sp, #4]
 800d17a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d17e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d182:	4259      	negs	r1, r3
 800d184:	4159      	adcs	r1, r3
 800d186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d18a:	e7eb      	b.n	800d164 <__swhatbuf_r+0x24>

0800d18c <__smakebuf_r>:
 800d18c:	898b      	ldrh	r3, [r1, #12]
 800d18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d190:	079d      	lsls	r5, r3, #30
 800d192:	4606      	mov	r6, r0
 800d194:	460c      	mov	r4, r1
 800d196:	d507      	bpl.n	800d1a8 <__smakebuf_r+0x1c>
 800d198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	6123      	str	r3, [r4, #16]
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	6163      	str	r3, [r4, #20]
 800d1a4:	b003      	add	sp, #12
 800d1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1a8:	ab01      	add	r3, sp, #4
 800d1aa:	466a      	mov	r2, sp
 800d1ac:	f7ff ffc8 	bl	800d140 <__swhatbuf_r>
 800d1b0:	9f00      	ldr	r7, [sp, #0]
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	4630      	mov	r0, r6
 800d1b8:	f7fe fec6 	bl	800bf48 <_malloc_r>
 800d1bc:	b948      	cbnz	r0, 800d1d2 <__smakebuf_r+0x46>
 800d1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c2:	059a      	lsls	r2, r3, #22
 800d1c4:	d4ee      	bmi.n	800d1a4 <__smakebuf_r+0x18>
 800d1c6:	f023 0303 	bic.w	r3, r3, #3
 800d1ca:	f043 0302 	orr.w	r3, r3, #2
 800d1ce:	81a3      	strh	r3, [r4, #12]
 800d1d0:	e7e2      	b.n	800d198 <__smakebuf_r+0xc>
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	6020      	str	r0, [r4, #0]
 800d1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1da:	81a3      	strh	r3, [r4, #12]
 800d1dc:	9b01      	ldr	r3, [sp, #4]
 800d1de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1e2:	b15b      	cbz	r3, 800d1fc <__smakebuf_r+0x70>
 800d1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f000 f81d 	bl	800d228 <_isatty_r>
 800d1ee:	b128      	cbz	r0, 800d1fc <__smakebuf_r+0x70>
 800d1f0:	89a3      	ldrh	r3, [r4, #12]
 800d1f2:	f023 0303 	bic.w	r3, r3, #3
 800d1f6:	f043 0301 	orr.w	r3, r3, #1
 800d1fa:	81a3      	strh	r3, [r4, #12]
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	431d      	orrs	r5, r3
 800d200:	81a5      	strh	r5, [r4, #12]
 800d202:	e7cf      	b.n	800d1a4 <__smakebuf_r+0x18>

0800d204 <_fstat_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4d07      	ldr	r5, [pc, #28]	@ (800d224 <_fstat_r+0x20>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	4611      	mov	r1, r2
 800d210:	602b      	str	r3, [r5, #0]
 800d212:	f7f8 fc91 	bl	8005b38 <_fstat>
 800d216:	1c43      	adds	r3, r0, #1
 800d218:	d102      	bne.n	800d220 <_fstat_r+0x1c>
 800d21a:	682b      	ldr	r3, [r5, #0]
 800d21c:	b103      	cbz	r3, 800d220 <_fstat_r+0x1c>
 800d21e:	6023      	str	r3, [r4, #0]
 800d220:	bd38      	pop	{r3, r4, r5, pc}
 800d222:	bf00      	nop
 800d224:	20001640 	.word	0x20001640

0800d228 <_isatty_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d06      	ldr	r5, [pc, #24]	@ (800d244 <_isatty_r+0x1c>)
 800d22c:	2300      	movs	r3, #0
 800d22e:	4604      	mov	r4, r0
 800d230:	4608      	mov	r0, r1
 800d232:	602b      	str	r3, [r5, #0]
 800d234:	f7f8 fc90 	bl	8005b58 <_isatty>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_isatty_r+0x1a>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_isatty_r+0x1a>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	20001640 	.word	0x20001640

0800d248 <_init>:
 800d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24a:	bf00      	nop
 800d24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d24e:	bc08      	pop	{r3}
 800d250:	469e      	mov	lr, r3
 800d252:	4770      	bx	lr

0800d254 <_fini>:
 800d254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d256:	bf00      	nop
 800d258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d25a:	bc08      	pop	{r3}
 800d25c:	469e      	mov	lr, r3
 800d25e:	4770      	bx	lr
